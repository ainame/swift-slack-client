// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    #if WebAPI_Admin
    /// Get logs for a specified team/org
    ///
    /// - Remark: HTTP `POST /admin.apps.activities.list`.
    /// - Remark: Generated from `#/paths//admin.apps.activities.list/post(adminAppsActivitiesList)`.
    func adminAppsActivitiesList(_ input: Operations.AdminAppsActivitiesList.Input) async throws -> Operations.AdminAppsActivitiesList.Output
    /// Approve an app for installation on a workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.approve`.
    /// - Remark: Generated from `#/paths//admin.apps.approve/post(adminAppsApprove)`.
    func adminAppsApprove(_ input: Operations.AdminAppsApprove.Input) async throws -> Operations.AdminAppsApprove.Output
    /// List approved apps for an org or workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.approved.list`.
    /// - Remark: Generated from `#/paths//admin.apps.approved.list/post(adminAppsApprovedList)`.
    func adminAppsApprovedList(_ input: Operations.AdminAppsApprovedList.Input) async throws -> Operations.AdminAppsApprovedList.Output
    /// Clear an app resolution
    ///
    /// - Remark: HTTP `POST /admin.apps.clearResolution`.
    /// - Remark: Generated from `#/paths//admin.apps.clearResolution/post(adminAppsClearResolution)`.
    func adminAppsClearResolution(_ input: Operations.AdminAppsClearResolution.Input) async throws -> Operations.AdminAppsClearResolution.Output
    /// Look up the app config for connectors by their IDs
    ///
    /// - Remark: HTTP `POST /admin.apps.config.lookup`.
    /// - Remark: Generated from `#/paths//admin.apps.config.lookup/post(adminAppsConfigLookup)`.
    func adminAppsConfigLookup(_ input: Operations.AdminAppsConfigLookup.Input) async throws -> Operations.AdminAppsConfigLookup.Output
    /// Set the app config for a connector
    ///
    /// - Remark: HTTP `POST /admin.apps.config.set`.
    /// - Remark: Generated from `#/paths//admin.apps.config.set/post(adminAppsConfigSet)`.
    func adminAppsConfigSet(_ input: Operations.AdminAppsConfigSet.Input) async throws -> Operations.AdminAppsConfigSet.Output
    /// Cancel app request for team
    ///
    /// - Remark: HTTP `POST /admin.apps.requests.cancel`.
    /// - Remark: Generated from `#/paths//admin.apps.requests.cancel/post(adminAppsRequestsCancel)`.
    func adminAppsRequestsCancel(_ input: Operations.AdminAppsRequestsCancel.Input) async throws -> Operations.AdminAppsRequestsCancel.Output
    /// List app requests for a team/workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.requests.list`.
    /// - Remark: Generated from `#/paths//admin.apps.requests.list/post(adminAppsRequestsList)`.
    func adminAppsRequestsList(_ input: Operations.AdminAppsRequestsList.Input) async throws -> Operations.AdminAppsRequestsList.Output
    /// Restrict an app for installation on a workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.restrict`.
    /// - Remark: Generated from `#/paths//admin.apps.restrict/post(adminAppsRestrict)`.
    func adminAppsRestrict(_ input: Operations.AdminAppsRestrict.Input) async throws -> Operations.AdminAppsRestrict.Output
    /// List restricted apps for an org or workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.restricted.list`.
    /// - Remark: Generated from `#/paths//admin.apps.restricted.list/post(adminAppsRestrictedList)`.
    func adminAppsRestrictedList(_ input: Operations.AdminAppsRestrictedList.Input) async throws -> Operations.AdminAppsRestrictedList.Output
    /// Uninstall an app from one or many workspaces, or an entire enterprise organization.
    ///
    /// - Remark: HTTP `POST /admin.apps.uninstall`.
    /// - Remark: Generated from `#/paths//admin.apps.uninstall/post(adminAppsUninstall)`.
    func adminAppsUninstall(_ input: Operations.AdminAppsUninstall.Input) async throws -> Operations.AdminAppsUninstall.Output
    /// Assign entities to a particular authentication policy.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.assignEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.assignEntities/post(adminAuthPolicyAssignEntities)`.
    func adminAuthPolicyAssignEntities(_ input: Operations.AdminAuthPolicyAssignEntities.Input) async throws -> Operations.AdminAuthPolicyAssignEntities.Output
    /// Fetch all the entities assigned to a particular authentication policy by name.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.getEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.getEntities/post(adminAuthPolicyGetEntities)`.
    func adminAuthPolicyGetEntities(_ input: Operations.AdminAuthPolicyGetEntities.Input) async throws -> Operations.AdminAuthPolicyGetEntities.Output
    /// Remove specified entities from a specified authentication policy.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.removeEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.removeEntities/post(adminAuthPolicyRemoveEntities)`.
    func adminAuthPolicyRemoveEntities(_ input: Operations.AdminAuthPolicyRemoveEntities.Input) async throws -> Operations.AdminAuthPolicyRemoveEntities.Output
    /// Create an Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.create`.
    /// - Remark: Generated from `#/paths//admin.barriers.create/post(adminBarriersCreate)`.
    func adminBarriersCreate(_ input: Operations.AdminBarriersCreate.Input) async throws -> Operations.AdminBarriersCreate.Output
    /// Delete an existing Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.delete`.
    /// - Remark: Generated from `#/paths//admin.barriers.delete/post(adminBarriersDelete)`.
    func adminBarriersDelete(_ input: Operations.AdminBarriersDelete.Input) async throws -> Operations.AdminBarriersDelete.Output
    /// Get all Information Barriers for your organization
    ///
    /// - Remark: HTTP `POST /admin.barriers.list`.
    /// - Remark: Generated from `#/paths//admin.barriers.list/post(adminBarriersList)`.
    func adminBarriersList(_ input: Operations.AdminBarriersList.Input) async throws -> Operations.AdminBarriersList.Output
    /// Update an existing Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.update`.
    /// - Remark: Generated from `#/paths//admin.barriers.update/post(adminBarriersUpdate)`.
    func adminBarriersUpdate(_ input: Operations.AdminBarriersUpdate.Input) async throws -> Operations.AdminBarriersUpdate.Output
    /// Archive a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.archive`.
    /// - Remark: Generated from `#/paths//admin.conversations.archive/post(adminConversationsArchive)`.
    func adminConversationsArchive(_ input: Operations.AdminConversationsArchive.Input) async throws -> Operations.AdminConversationsArchive.Output
    /// Archive public or private channels in bulk.
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkArchive`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkArchive/post(adminConversationsBulkArchive)`.
    func adminConversationsBulkArchive(_ input: Operations.AdminConversationsBulkArchive.Input) async throws -> Operations.AdminConversationsBulkArchive.Output
    /// Delete public or private channels in bulk
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkDelete`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkDelete/post(adminConversationsBulkDelete)`.
    func adminConversationsBulkDelete(_ input: Operations.AdminConversationsBulkDelete.Input) async throws -> Operations.AdminConversationsBulkDelete.Output
    /// Move public or private channels in bulk.
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkMove`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkMove/post(adminConversationsBulkMove)`.
    func adminConversationsBulkMove(_ input: Operations.AdminConversationsBulkMove.Input) async throws -> Operations.AdminConversationsBulkMove.Output
    /// Convert a public channel to a private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.convertToPrivate`.
    /// - Remark: Generated from `#/paths//admin.conversations.convertToPrivate/post(adminConversationsConvertToPrivate)`.
    func adminConversationsConvertToPrivate(_ input: Operations.AdminConversationsConvertToPrivate.Input) async throws -> Operations.AdminConversationsConvertToPrivate.Output
    /// Convert a private channel to a public channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.convertToPublic`.
    /// - Remark: Generated from `#/paths//admin.conversations.convertToPublic/post(adminConversationsConvertToPublic)`.
    func adminConversationsConvertToPublic(_ input: Operations.AdminConversationsConvertToPublic.Input) async throws -> Operations.AdminConversationsConvertToPublic.Output
    /// Create a public or private channel-based conversation.
    ///
    /// - Remark: HTTP `POST /admin.conversations.create`.
    /// - Remark: Generated from `#/paths//admin.conversations.create/post(adminConversationsCreate)`.
    func adminConversationsCreate(_ input: Operations.AdminConversationsCreate.Input) async throws -> Operations.AdminConversationsCreate.Output
    /// Delete a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.delete`.
    /// - Remark: Generated from `#/paths//admin.conversations.delete/post(adminConversationsDelete)`.
    func adminConversationsDelete(_ input: Operations.AdminConversationsDelete.Input) async throws -> Operations.AdminConversationsDelete.Output
    /// Disconnect a connected channel from one or more workspaces.
    ///
    /// - Remark: HTTP `POST /admin.conversations.disconnectShared`.
    /// - Remark: Generated from `#/paths//admin.conversations.disconnectShared/post(adminConversationsDisconnectShared)`.
    func adminConversationsDisconnectShared(_ input: Operations.AdminConversationsDisconnectShared.Input) async throws -> Operations.AdminConversationsDisconnectShared.Output
    /// List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
    ///
    /// - Remark: HTTP `POST /admin.conversations.ekm.listOriginalConnectedChannelInfo`.
    /// - Remark: Generated from `#/paths//admin.conversations.ekm.listOriginalConnectedChannelInfo/post(adminConversationsEkmListOriginalConnectedChannelInfo)`.
    func adminConversationsEkmListOriginalConnectedChannelInfo(_ input: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input) async throws -> Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output
    /// Get conversation preferences for a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getConversationPrefs`.
    /// - Remark: Generated from `#/paths//admin.conversations.getConversationPrefs/post(adminConversationsGetConversationPrefs)`.
    func adminConversationsGetConversationPrefs(_ input: Operations.AdminConversationsGetConversationPrefs.Input) async throws -> Operations.AdminConversationsGetConversationPrefs.Output
    /// This API endpoint can be used by any admin to get a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.getCustomRetention/post(adminConversationsGetCustomRetention)`.
    func adminConversationsGetCustomRetention(_ input: Operations.AdminConversationsGetCustomRetention.Input) async throws -> Operations.AdminConversationsGetCustomRetention.Output
    /// Get all the workspaces a given public or private channel is connected to within this Enterprise org.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getTeams`.
    /// - Remark: Generated from `#/paths//admin.conversations.getTeams/post(adminConversationsGetTeams)`.
    func adminConversationsGetTeams(_ input: Operations.AdminConversationsGetTeams.Input) async throws -> Operations.AdminConversationsGetTeams.Output
    /// Invite a user to a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.invite`.
    /// - Remark: Generated from `#/paths//admin.conversations.invite/post(adminConversationsInvite)`.
    func adminConversationsInvite(_ input: Operations.AdminConversationsInvite.Input) async throws -> Operations.AdminConversationsInvite.Output
    /// Returns channels on the given team using the filters.
    ///
    /// - Remark: HTTP `POST /admin.conversations.lookup`.
    /// - Remark: Generated from `#/paths//admin.conversations.lookup/post(adminConversationsLookup)`.
    func adminConversationsLookup(_ input: Operations.AdminConversationsLookup.Input) async throws -> Operations.AdminConversationsLookup.Output
    /// This API endpoint can be used by any admin to remove a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.removeCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.removeCustomRetention/post(adminConversationsRemoveCustomRetention)`.
    func adminConversationsRemoveCustomRetention(_ input: Operations.AdminConversationsRemoveCustomRetention.Input) async throws -> Operations.AdminConversationsRemoveCustomRetention.Output
    /// Rename a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.rename`.
    /// - Remark: Generated from `#/paths//admin.conversations.rename/post(adminConversationsRename)`.
    func adminConversationsRename(_ input: Operations.AdminConversationsRename.Input) async throws -> Operations.AdminConversationsRename.Output
    /// Add an allowlist of IDP groups for accessing a channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.addGroup`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.addGroup/post(adminConversationsRestrictAccessAddGroup)`.
    func adminConversationsRestrictAccessAddGroup(_ input: Operations.AdminConversationsRestrictAccessAddGroup.Input) async throws -> Operations.AdminConversationsRestrictAccessAddGroup.Output
    /// List all IDP Groups linked to a channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.listGroups`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.listGroups/post(adminConversationsRestrictAccessListGroups)`.
    func adminConversationsRestrictAccessListGroups(_ input: Operations.AdminConversationsRestrictAccessListGroups.Input) async throws -> Operations.AdminConversationsRestrictAccessListGroups.Output
    /// Remove a linked IDP group linked from a private channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.removeGroup`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.removeGroup/post(adminConversationsRestrictAccessRemoveGroup)`.
    func adminConversationsRestrictAccessRemoveGroup(_ input: Operations.AdminConversationsRestrictAccessRemoveGroup.Input) async throws -> Operations.AdminConversationsRestrictAccessRemoveGroup.Output
    /// Search for public or private channels in an Enterprise organization.
    ///
    /// - Remark: HTTP `POST /admin.conversations.search`.
    /// - Remark: Generated from `#/paths//admin.conversations.search/post(adminConversationsSearch)`.
    func adminConversationsSearch(_ input: Operations.AdminConversationsSearch.Input) async throws -> Operations.AdminConversationsSearch.Output
    /// Set the posting permissions for a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setConversationPrefs`.
    /// - Remark: Generated from `#/paths//admin.conversations.setConversationPrefs/post(adminConversationsSetConversationPrefs)`.
    func adminConversationsSetConversationPrefs(_ input: Operations.AdminConversationsSetConversationPrefs.Input) async throws -> Operations.AdminConversationsSetConversationPrefs.Output
    /// This API endpoint can be used by any admin to set a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.setCustomRetention/post(adminConversationsSetCustomRetention)`.
    func adminConversationsSetCustomRetention(_ input: Operations.AdminConversationsSetCustomRetention.Input) async throws -> Operations.AdminConversationsSetCustomRetention.Output
    /// Set the workspaces in an Enterprise grid org that connect to a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setTeams`.
    /// - Remark: Generated from `#/paths//admin.conversations.setTeams/post(adminConversationsSetTeams)`.
    func adminConversationsSetTeams(_ input: Operations.AdminConversationsSetTeams.Input) async throws -> Operations.AdminConversationsSetTeams.Output
    /// Unarchive a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.unarchive`.
    /// - Remark: Generated from `#/paths//admin.conversations.unarchive/post(adminConversationsUnarchive)`.
    func adminConversationsUnarchive(_ input: Operations.AdminConversationsUnarchive.Input) async throws -> Operations.AdminConversationsUnarchive.Output
    /// Add an emoji.
    ///
    /// - Remark: HTTP `POST /admin.emoji.add`.
    /// - Remark: Generated from `#/paths//admin.emoji.add/post(adminEmojiAdd)`.
    func adminEmojiAdd(_ input: Operations.AdminEmojiAdd.Input) async throws -> Operations.AdminEmojiAdd.Output
    /// Add an emoji alias.
    ///
    /// - Remark: HTTP `POST /admin.emoji.addAlias`.
    /// - Remark: Generated from `#/paths//admin.emoji.addAlias/post(adminEmojiAddAlias)`.
    func adminEmojiAddAlias(_ input: Operations.AdminEmojiAddAlias.Input) async throws -> Operations.AdminEmojiAddAlias.Output
    /// List emoji for an Enterprise Grid organization.
    ///
    /// - Remark: HTTP `POST /admin.emoji.list`.
    /// - Remark: Generated from `#/paths//admin.emoji.list/post(adminEmojiList)`.
    func adminEmojiList(_ input: Operations.AdminEmojiList.Input) async throws -> Operations.AdminEmojiList.Output
    /// Remove an emoji across an Enterprise Grid organization
    ///
    /// - Remark: HTTP `POST /admin.emoji.remove`.
    /// - Remark: Generated from `#/paths//admin.emoji.remove/post(adminEmojiRemove)`.
    func adminEmojiRemove(_ input: Operations.AdminEmojiRemove.Input) async throws -> Operations.AdminEmojiRemove.Output
    /// Rename an emoji.
    ///
    /// - Remark: HTTP `POST /admin.emoji.rename`.
    /// - Remark: Generated from `#/paths//admin.emoji.rename/post(adminEmojiRename)`.
    func adminEmojiRename(_ input: Operations.AdminEmojiRename.Input) async throws -> Operations.AdminEmojiRename.Output
    /// Look up functions by a set of apps
    ///
    /// - Remark: HTTP `POST /admin.functions.list`.
    /// - Remark: Generated from `#/paths//admin.functions.list/post(adminFunctionsList)`.
    func adminFunctionsList(_ input: Operations.AdminFunctionsList.Input) async throws -> Operations.AdminFunctionsList.Output
    /// Lookup the visibility of multiple Slack functions and include the users if it is limited to particular named entities.
    ///
    /// - Remark: HTTP `POST /admin.functions.permissions.lookup`.
    /// - Remark: Generated from `#/paths//admin.functions.permissions.lookup/post(adminFunctionsPermissionsLookup)`.
    func adminFunctionsPermissionsLookup(_ input: Operations.AdminFunctionsPermissionsLookup.Input) async throws -> Operations.AdminFunctionsPermissionsLookup.Output
    /// Set the visibility of a Slack function and define the users or workspaces if it is set to named_entities
    ///
    /// - Remark: HTTP `POST /admin.functions.permissions.set`.
    /// - Remark: Generated from `#/paths//admin.functions.permissions.set/post(adminFunctionsPermissionsSet)`.
    func adminFunctionsPermissionsSet(_ input: Operations.AdminFunctionsPermissionsSet.Input) async throws -> Operations.AdminFunctionsPermissionsSet.Output
    /// Approve a workspace invite request.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.approve`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.approve/post(adminInviteRequestsApprove)`.
    func adminInviteRequestsApprove(_ input: Operations.AdminInviteRequestsApprove.Input) async throws -> Operations.AdminInviteRequestsApprove.Output
    /// List all approved workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.approved.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.approved.list/post(adminInviteRequestsApprovedList)`.
    func adminInviteRequestsApprovedList(_ input: Operations.AdminInviteRequestsApprovedList.Input) async throws -> Operations.AdminInviteRequestsApprovedList.Output
    /// List all denied workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.denied.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.denied.list/post(adminInviteRequestsDeniedList)`.
    func adminInviteRequestsDeniedList(_ input: Operations.AdminInviteRequestsDeniedList.Input) async throws -> Operations.AdminInviteRequestsDeniedList.Output
    /// Deny a workspace invite request.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.deny`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.deny/post(adminInviteRequestsDeny)`.
    func adminInviteRequestsDeny(_ input: Operations.AdminInviteRequestsDeny.Input) async throws -> Operations.AdminInviteRequestsDeny.Output
    /// List all pending workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.list/post(adminInviteRequestsList)`.
    func adminInviteRequestsList(_ input: Operations.AdminInviteRequestsList.Input) async throws -> Operations.AdminInviteRequestsList.Output
    /// Adds members to the specified role with the specified scopes
    ///
    /// - Remark: HTTP `POST /admin.roles.addAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.addAssignments/post(adminRolesAddAssignments)`.
    func adminRolesAddAssignments(_ input: Operations.AdminRolesAddAssignments.Input) async throws -> Operations.AdminRolesAddAssignments.Output
    /// Lists assignments for all roles across entities. Options to scope results by any combination of roles or entities
    ///
    /// - Remark: HTTP `POST /admin.roles.listAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.listAssignments/post(adminRolesListAssignments)`.
    func adminRolesListAssignments(_ input: Operations.AdminRolesListAssignments.Input) async throws -> Operations.AdminRolesListAssignments.Output
    /// Removes a set of users from a role for the given scopes and entities
    ///
    /// - Remark: HTTP `POST /admin.roles.removeAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.removeAssignments/post(adminRolesRemoveAssignments)`.
    func adminRolesRemoveAssignments(_ input: Operations.AdminRolesRemoveAssignments.Input) async throws -> Operations.AdminRolesRemoveAssignments.Output
    /// List all of the admins on a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.admins.list`.
    /// - Remark: Generated from `#/paths//admin.teams.admins.list/post(adminTeamsAdminsList)`.
    func adminTeamsAdminsList(_ input: Operations.AdminTeamsAdminsList.Input) async throws -> Operations.AdminTeamsAdminsList.Output
    /// Create an Enterprise team.
    ///
    /// - Remark: HTTP `POST /admin.teams.create`.
    /// - Remark: Generated from `#/paths//admin.teams.create/post(adminTeamsCreate)`.
    func adminTeamsCreate(_ input: Operations.AdminTeamsCreate.Input) async throws -> Operations.AdminTeamsCreate.Output
    /// List all teams on an Enterprise organization
    ///
    /// - Remark: HTTP `POST /admin.teams.list`.
    /// - Remark: Generated from `#/paths//admin.teams.list/post(adminTeamsList)`.
    func adminTeamsList(_ input: Operations.AdminTeamsList.Input) async throws -> Operations.AdminTeamsList.Output
    /// List all of the owners on a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.owners.list`.
    /// - Remark: Generated from `#/paths//admin.teams.owners.list/post(adminTeamsOwnersList)`.
    func adminTeamsOwnersList(_ input: Operations.AdminTeamsOwnersList.Input) async throws -> Operations.AdminTeamsOwnersList.Output
    /// Fetch information about settings in a workspace
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.info`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.info/post(adminTeamsSettingsInfo)`.
    func adminTeamsSettingsInfo(_ input: Operations.AdminTeamsSettingsInfo.Input) async throws -> Operations.AdminTeamsSettingsInfo.Output
    /// Set the default channels of a workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDefaultChannels`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDefaultChannels/post(adminTeamsSettingsSetDefaultChannels)`.
    func adminTeamsSettingsSetDefaultChannels(_ input: Operations.AdminTeamsSettingsSetDefaultChannels.Input) async throws -> Operations.AdminTeamsSettingsSetDefaultChannels.Output
    /// Set the description of a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDescription`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDescription/post(adminTeamsSettingsSetDescription)`.
    func adminTeamsSettingsSetDescription(_ input: Operations.AdminTeamsSettingsSetDescription.Input) async throws -> Operations.AdminTeamsSettingsSetDescription.Output
    /// An API method that allows admins to set the discoverability of a given workspace
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDiscoverability`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDiscoverability/post(adminTeamsSettingsSetDiscoverability)`.
    func adminTeamsSettingsSetDiscoverability(_ input: Operations.AdminTeamsSettingsSetDiscoverability.Input) async throws -> Operations.AdminTeamsSettingsSetDiscoverability.Output
    /// Sets the icon of a workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setIcon`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setIcon/post(adminTeamsSettingsSetIcon)`.
    func adminTeamsSettingsSetIcon(_ input: Operations.AdminTeamsSettingsSetIcon.Input) async throws -> Operations.AdminTeamsSettingsSetIcon.Output
    /// Set the name of a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setName`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setName/post(adminTeamsSettingsSetName)`.
    func adminTeamsSettingsSetName(_ input: Operations.AdminTeamsSettingsSetName.Input) async throws -> Operations.AdminTeamsSettingsSetName.Output
    /// Add an Enterprise user to a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.assign`.
    /// - Remark: Generated from `#/paths//admin.users.assign/post(adminUsersAssign)`.
    func adminUsersAssign(_ input: Operations.AdminUsersAssign.Input) async throws -> Operations.AdminUsersAssign.Output
    /// Invite a user to a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.invite`.
    /// - Remark: Generated from `#/paths//admin.users.invite/post(adminUsersInvite)`.
    func adminUsersInvite(_ input: Operations.AdminUsersInvite.Input) async throws -> Operations.AdminUsersInvite.Output
    /// List users on a workspace
    ///
    /// - Remark: HTTP `POST /admin.users.list`.
    /// - Remark: Generated from `#/paths//admin.users.list/post(adminUsersList)`.
    func adminUsersList(_ input: Operations.AdminUsersList.Input) async throws -> Operations.AdminUsersList.Output
    /// Remove a user from a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.remove`.
    /// - Remark: Generated from `#/paths//admin.users.remove/post(adminUsersRemove)`.
    func adminUsersRemove(_ input: Operations.AdminUsersRemove.Input) async throws -> Operations.AdminUsersRemove.Output
    /// Clear user-specific session settings—the session duration and what happens when the client closes—for a list of users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.clearSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.clearSettings/post(adminUsersSessionClearSettings)`.
    func adminUsersSessionClearSettings(_ input: Operations.AdminUsersSessionClearSettings.Input) async throws -> Operations.AdminUsersSessionClearSettings.Output
    /// Get user-specific session settings—the session duration and what happens when the client closes—given a list of users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.getSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.getSettings/post(adminUsersSessionGetSettings)`.
    func adminUsersSessionGetSettings(_ input: Operations.AdminUsersSessionGetSettings.Input) async throws -> Operations.AdminUsersSessionGetSettings.Output
    /// Revoke a single session for a user. The user will be forced to login to Slack.
    ///
    /// - Remark: HTTP `POST /admin.users.session.invalidate`.
    /// - Remark: Generated from `#/paths//admin.users.session.invalidate/post(adminUsersSessionInvalidate)`.
    func adminUsersSessionInvalidate(_ input: Operations.AdminUsersSessionInvalidate.Input) async throws -> Operations.AdminUsersSessionInvalidate.Output
    /// List active user sessions for an organization
    ///
    /// - Remark: HTTP `POST /admin.users.session.list`.
    /// - Remark: Generated from `#/paths//admin.users.session.list/post(adminUsersSessionList)`.
    func adminUsersSessionList(_ input: Operations.AdminUsersSessionList.Input) async throws -> Operations.AdminUsersSessionList.Output
    /// Wipes all valid sessions on all devices for a given user
    ///
    /// - Remark: HTTP `POST /admin.users.session.reset`.
    /// - Remark: Generated from `#/paths//admin.users.session.reset/post(adminUsersSessionReset)`.
    func adminUsersSessionReset(_ input: Operations.AdminUsersSessionReset.Input) async throws -> Operations.AdminUsersSessionReset.Output
    /// Enqueues an asynchronous job to wipe all valid sessions on all devices for a given list of users
    ///
    /// - Remark: HTTP `POST /admin.users.session.resetBulk`.
    /// - Remark: Generated from `#/paths//admin.users.session.resetBulk/post(adminUsersSessionResetBulk)`.
    func adminUsersSessionResetBulk(_ input: Operations.AdminUsersSessionResetBulk.Input) async throws -> Operations.AdminUsersSessionResetBulk.Output
    /// Configure the user-level session settings—the session duration and what happens when the client closes—for one or more users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.setSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.setSettings/post(adminUsersSessionSetSettings)`.
    func adminUsersSessionSetSettings(_ input: Operations.AdminUsersSessionSetSettings.Input) async throws -> Operations.AdminUsersSessionSetSettings.Output
    /// Set an existing regular user or owner to be a workspace admin.
    ///
    /// - Remark: HTTP `POST /admin.users.setAdmin`.
    /// - Remark: Generated from `#/paths//admin.users.setAdmin/post(adminUsersSetAdmin)`.
    func adminUsersSetAdmin(_ input: Operations.AdminUsersSetAdmin.Input) async throws -> Operations.AdminUsersSetAdmin.Output
    /// Set an expiration for a guest user
    ///
    /// - Remark: HTTP `POST /admin.users.setExpiration`.
    /// - Remark: Generated from `#/paths//admin.users.setExpiration/post(adminUsersSetExpiration)`.
    func adminUsersSetExpiration(_ input: Operations.AdminUsersSetExpiration.Input) async throws -> Operations.AdminUsersSetExpiration.Output
    /// Set an existing regular user or admin to be a workspace owner.
    ///
    /// - Remark: HTTP `POST /admin.users.setOwner`.
    /// - Remark: Generated from `#/paths//admin.users.setOwner/post(adminUsersSetOwner)`.
    func adminUsersSetOwner(_ input: Operations.AdminUsersSetOwner.Input) async throws -> Operations.AdminUsersSetOwner.Output
    /// Set an existing guest user, admin user, or owner to be a regular user.
    ///
    /// - Remark: HTTP `POST /admin.users.setRegular`.
    /// - Remark: Generated from `#/paths//admin.users.setRegular/post(adminUsersSetRegular)`.
    func adminUsersSetRegular(_ input: Operations.AdminUsersSetRegular.Input) async throws -> Operations.AdminUsersSetRegular.Output
    /// Ask Slackbot to send you an export listing all workspace members using unsupported software, presented as a zipped CSV file.
    ///
    /// - Remark: HTTP `POST /admin.users.unsupportedVersions.export`.
    /// - Remark: Generated from `#/paths//admin.users.unsupportedVersions.export/post(adminUsersUnsupportedVersionsExport)`.
    func adminUsersUnsupportedVersionsExport(_ input: Operations.AdminUsersUnsupportedVersionsExport.Input) async throws -> Operations.AdminUsersUnsupportedVersionsExport.Output
    /// Generate a temporary Socket Mode WebSocket URL that your app can connect to in order to receive events and interactive payloads over.
    ///
    /// - Remark: HTTP `POST /apps.connections.open`.
    /// - Remark: Generated from `#/paths//apps.connections.open/post(appsConnectionsOpen)`.
    #endif
    #if WebAPI_Apps
    func appsConnectionsOpen(_ input: Operations.AppsConnectionsOpen.Input) async throws -> Operations.AppsConnectionsOpen.Output
    /// Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
    ///
    /// - Remark: HTTP `POST /apps.event.authorizations.list`.
    /// - Remark: Generated from `#/paths//apps.event.authorizations.list/post(appsEventAuthorizationsList)`.
    func appsEventAuthorizationsList(_ input: Operations.AppsEventAuthorizationsList.Input) async throws -> Operations.AppsEventAuthorizationsList.Output
    /// Create an app from an app manifest.
    ///
    /// - Remark: HTTP `POST /apps.manifest.create`.
    /// - Remark: Generated from `#/paths//apps.manifest.create/post(appsManifestCreate)`.
    func appsManifestCreate(_ input: Operations.AppsManifestCreate.Input) async throws -> Operations.AppsManifestCreate.Output
    /// Permanently deletes an app created through app manifests
    ///
    /// - Remark: HTTP `POST /apps.manifest.delete`.
    /// - Remark: Generated from `#/paths//apps.manifest.delete/post(appsManifestDelete)`.
    func appsManifestDelete(_ input: Operations.AppsManifestDelete.Input) async throws -> Operations.AppsManifestDelete.Output
    /// Export an app manifest from an existing app
    ///
    /// - Remark: HTTP `POST /apps.manifest.export`.
    /// - Remark: Generated from `#/paths//apps.manifest.export/post(appsManifestExport)`.
    func appsManifestExport(_ input: Operations.AppsManifestExport.Input) async throws -> Operations.AppsManifestExport.Output
    /// Update an app from an app manifest
    ///
    /// - Remark: HTTP `POST /apps.manifest.update`.
    /// - Remark: Generated from `#/paths//apps.manifest.update/post(appsManifestUpdate)`.
    func appsManifestUpdate(_ input: Operations.AppsManifestUpdate.Input) async throws -> Operations.AppsManifestUpdate.Output
    /// Validate an app manifest
    ///
    /// - Remark: HTTP `POST /apps.manifest.validate`.
    /// - Remark: Generated from `#/paths//apps.manifest.validate/post(appsManifestValidate)`.
    func appsManifestValidate(_ input: Operations.AppsManifestValidate.Input) async throws -> Operations.AppsManifestValidate.Output
    /// Uninstalls your app from a workspace.
    ///
    /// - Remark: HTTP `POST /apps.uninstall`.
    /// - Remark: Generated from `#/paths//apps.uninstall/post(appsUninstall)`.
    func appsUninstall(_ input: Operations.AppsUninstall.Input) async throws -> Operations.AppsUninstall.Output
    /// Set the status for an AI assistant thread.
    ///
    /// - Remark: HTTP `POST /assistant.threads.setStatus`.
    /// - Remark: Generated from `#/paths//assistant.threads.setStatus/post(assistantThreadsSetStatus)`.
    #endif
    #if WebAPI_Assistant
    func assistantThreadsSetStatus(_ input: Operations.AssistantThreadsSetStatus.Input) async throws -> Operations.AssistantThreadsSetStatus.Output
    /// Set suggested prompts for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setSuggestedPrompts`.
    /// - Remark: Generated from `#/paths//assistant.threads.setSuggestedPrompts/post(assistantThreadsSetSuggestedPrompts)`.
    func assistantThreadsSetSuggestedPrompts(_ input: Operations.AssistantThreadsSetSuggestedPrompts.Input) async throws -> Operations.AssistantThreadsSetSuggestedPrompts.Output
    /// Set the title for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setTitle`.
    /// - Remark: Generated from `#/paths//assistant.threads.setTitle/post(assistantThreadsSetTitle)`.
    func assistantThreadsSetTitle(_ input: Operations.AssistantThreadsSetTitle.Input) async throws -> Operations.AssistantThreadsSetTitle.Output
    /// Revokes a token.
    ///
    /// - Remark: HTTP `POST /auth.revoke`.
    /// - Remark: Generated from `#/paths//auth.revoke/post(authRevoke)`.
    #endif
    #if WebAPI_Auth
    func authRevoke(_ input: Operations.AuthRevoke.Input) async throws -> Operations.AuthRevoke.Output
    /// Obtain a full list of workspaces your org-wide app has been approved for.
    ///
    /// - Remark: HTTP `POST /auth.teams.list`.
    /// - Remark: Generated from `#/paths//auth.teams.list/post(authTeamsList)`.
    func authTeamsList(_ input: Operations.AuthTeamsList.Input) async throws -> Operations.AuthTeamsList.Output
    /// Checks authentication & identity.
    ///
    /// - Remark: HTTP `POST /auth.test`.
    /// - Remark: Generated from `#/paths//auth.test/post(authTest)`.
    func authTest(_ input: Operations.AuthTest.Input) async throws -> Operations.AuthTest.Output
    /// Add bookmark to a channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.add`.
    /// - Remark: Generated from `#/paths//bookmarks.add/post(bookmarksAdd)`.
    #endif
    #if WebAPI_Bookmarks
    func bookmarksAdd(_ input: Operations.BookmarksAdd.Input) async throws -> Operations.BookmarksAdd.Output
    /// Edit bookmark.
    ///
    /// - Remark: HTTP `POST /bookmarks.edit`.
    /// - Remark: Generated from `#/paths//bookmarks.edit/post(bookmarksEdit)`.
    func bookmarksEdit(_ input: Operations.BookmarksEdit.Input) async throws -> Operations.BookmarksEdit.Output
    /// List bookmark for the channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.list`.
    /// - Remark: Generated from `#/paths//bookmarks.list/post(bookmarksList)`.
    func bookmarksList(_ input: Operations.BookmarksList.Input) async throws -> Operations.BookmarksList.Output
    /// Remove bookmark from the channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.remove`.
    /// - Remark: Generated from `#/paths//bookmarks.remove/post(bookmarksRemove)`.
    func bookmarksRemove(_ input: Operations.BookmarksRemove.Input) async throws -> Operations.BookmarksRemove.Output
    /// Gets information about a bot user.
    ///
    /// - Remark: HTTP `POST /bots.info`.
    /// - Remark: Generated from `#/paths//bots.info/post(botsInfo)`.
    #endif
    #if WebAPI_Bots
    func botsInfo(_ input: Operations.BotsInfo.Input) async throws -> Operations.BotsInfo.Output
    /// Remove access to a canvas for specified entities
    ///
    /// - Remark: HTTP `POST /canvases.access.delete`.
    /// - Remark: Generated from `#/paths//canvases.access.delete/post(canvasesAccessDelete)`.
    #endif
    #if WebAPI_Canvases
    func canvasesAccessDelete(_ input: Operations.CanvasesAccessDelete.Input) async throws -> Operations.CanvasesAccessDelete.Output
    /// Sets the access level to a canvas for specified entities
    ///
    /// - Remark: HTTP `POST /canvases.access.set`.
    /// - Remark: Generated from `#/paths//canvases.access.set/post(canvasesAccessSet)`.
    func canvasesAccessSet(_ input: Operations.CanvasesAccessSet.Input) async throws -> Operations.CanvasesAccessSet.Output
    /// Create canvas for a user
    ///
    /// - Remark: HTTP `POST /canvases.create`.
    /// - Remark: Generated from `#/paths//canvases.create/post(canvasesCreate)`.
    func canvasesCreate(_ input: Operations.CanvasesCreate.Input) async throws -> Operations.CanvasesCreate.Output
    /// Deletes a canvas
    ///
    /// - Remark: HTTP `POST /canvases.delete`.
    /// - Remark: Generated from `#/paths//canvases.delete/post(canvasesDelete)`.
    func canvasesDelete(_ input: Operations.CanvasesDelete.Input) async throws -> Operations.CanvasesDelete.Output
    /// Update an existing canvas
    ///
    /// - Remark: HTTP `POST /canvases.edit`.
    /// - Remark: Generated from `#/paths//canvases.edit/post(canvasesEdit)`.
    func canvasesEdit(_ input: Operations.CanvasesEdit.Input) async throws -> Operations.CanvasesEdit.Output
    /// Find sections matching the provided criteria
    ///
    /// - Remark: HTTP `POST /canvases.sections.lookup`.
    /// - Remark: Generated from `#/paths//canvases.sections.lookup/post(canvasesSectionsLookup)`.
    func canvasesSectionsLookup(_ input: Operations.CanvasesSectionsLookup.Input) async throws -> Operations.CanvasesSectionsLookup.Output
    /// Deletes a message.
    ///
    /// - Remark: HTTP `POST /chat.delete`.
    /// - Remark: Generated from `#/paths//chat.delete/post(chatDelete)`.
    #endif
    #if WebAPI_Chat
    func chatDelete(_ input: Operations.ChatDelete.Input) async throws -> Operations.ChatDelete.Output
    /// Deletes a pending scheduled message from the queue.
    ///
    /// - Remark: HTTP `POST /chat.deleteScheduledMessage`.
    /// - Remark: Generated from `#/paths//chat.deleteScheduledMessage/post(chatDeleteScheduledMessage)`.
    func chatDeleteScheduledMessage(_ input: Operations.ChatDeleteScheduledMessage.Input) async throws -> Operations.ChatDeleteScheduledMessage.Output
    /// Retrieve a permalink URL for a specific extant message
    ///
    /// - Remark: HTTP `POST /chat.getPermalink`.
    /// - Remark: Generated from `#/paths//chat.getPermalink/post(chatGetPermalink)`.
    func chatGetPermalink(_ input: Operations.ChatGetPermalink.Input) async throws -> Operations.ChatGetPermalink.Output
    /// Share a me message into a channel.
    ///
    /// - Remark: HTTP `POST /chat.meMessage`.
    /// - Remark: Generated from `#/paths//chat.meMessage/post(chatMeMessage)`.
    func chatMeMessage(_ input: Operations.ChatMeMessage.Input) async throws -> Operations.ChatMeMessage.Output
    /// Sends an ephemeral message to a user in a channel.
    ///
    /// - Remark: HTTP `POST /chat.postEphemeral`.
    /// - Remark: Generated from `#/paths//chat.postEphemeral/post(chatPostEphemeral)`.
    func chatPostEphemeral(_ input: Operations.ChatPostEphemeral.Input) async throws -> Operations.ChatPostEphemeral.Output
    /// Sends a message to a channel.
    ///
    /// - Remark: HTTP `POST /chat.postMessage`.
    /// - Remark: Generated from `#/paths//chat.postMessage/post(chatPostMessage)`.
    func chatPostMessage(_ input: Operations.ChatPostMessage.Input) async throws -> Operations.ChatPostMessage.Output
    /// Schedules a message to be sent to a channel.
    ///
    /// - Remark: HTTP `POST /chat.scheduleMessage`.
    /// - Remark: Generated from `#/paths//chat.scheduleMessage/post(chatScheduleMessage)`.
    func chatScheduleMessage(_ input: Operations.ChatScheduleMessage.Input) async throws -> Operations.ChatScheduleMessage.Output
    /// Returns a list of scheduled messages.
    ///
    /// - Remark: HTTP `POST /chat.scheduledMessages.list`.
    /// - Remark: Generated from `#/paths//chat.scheduledMessages.list/post(chatScheduledMessagesList)`.
    func chatScheduledMessagesList(_ input: Operations.ChatScheduledMessagesList.Input) async throws -> Operations.ChatScheduledMessagesList.Output
    /// Provide custom unfurl behavior for user-posted URLs
    ///
    /// - Remark: HTTP `POST /chat.unfurl`.
    /// - Remark: Generated from `#/paths//chat.unfurl/post(chatUnfurl)`.
    func chatUnfurl(_ input: Operations.ChatUnfurl.Input) async throws -> Operations.ChatUnfurl.Output
    /// Updates a message.
    ///
    /// - Remark: HTTP `POST /chat.update`.
    /// - Remark: Generated from `#/paths//chat.update/post(chatUpdate)`.
    func chatUpdate(_ input: Operations.ChatUpdate.Input) async throws -> Operations.ChatUpdate.Output
    /// Accepts an invitation to a Slack Connect channel.
    ///
    /// - Remark: HTTP `POST /conversations.acceptSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.acceptSharedInvite/post(conversationsAcceptSharedInvite)`.
    #endif
    #if WebAPI_Conversations
    func conversationsAcceptSharedInvite(_ input: Operations.ConversationsAcceptSharedInvite.Input) async throws -> Operations.ConversationsAcceptSharedInvite.Output
    /// Approves an invitation to a Slack Connect channel
    ///
    /// - Remark: HTTP `POST /conversations.approveSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.approveSharedInvite/post(conversationsApproveSharedInvite)`.
    func conversationsApproveSharedInvite(_ input: Operations.ConversationsApproveSharedInvite.Input) async throws -> Operations.ConversationsApproveSharedInvite.Output
    /// Archives a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.archive`.
    /// - Remark: Generated from `#/paths//conversations.archive/post(conversationsArchive)`.
    func conversationsArchive(_ input: Operations.ConversationsArchive.Input) async throws -> Operations.ConversationsArchive.Output
    /// Create a channel canvas for a channel
    ///
    /// - Remark: HTTP `POST /conversations.canvases.create`.
    /// - Remark: Generated from `#/paths//conversations.canvases.create/post(conversationsCanvasesCreate)`.
    func conversationsCanvasesCreate(_ input: Operations.ConversationsCanvasesCreate.Input) async throws -> Operations.ConversationsCanvasesCreate.Output
    /// Closes a direct message or multi-person direct message.
    ///
    /// - Remark: HTTP `POST /conversations.close`.
    /// - Remark: Generated from `#/paths//conversations.close/post(conversationsClose)`.
    func conversationsClose(_ input: Operations.ConversationsClose.Input) async throws -> Operations.ConversationsClose.Output
    /// Initiates a public or private channel-based conversation
    ///
    /// - Remark: HTTP `POST /conversations.create`.
    /// - Remark: Generated from `#/paths//conversations.create/post(conversationsCreate)`.
    func conversationsCreate(_ input: Operations.ConversationsCreate.Input) async throws -> Operations.ConversationsCreate.Output
    /// Declines a Slack Connect channel invite.
    ///
    /// - Remark: HTTP `POST /conversations.declineSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.declineSharedInvite/post(conversationsDeclineSharedInvite)`.
    func conversationsDeclineSharedInvite(_ input: Operations.ConversationsDeclineSharedInvite.Input) async throws -> Operations.ConversationsDeclineSharedInvite.Output
    /// Upgrade or downgrade Slack Connect channel permissions between 'can post only' and 'can post and invite'.
    ///
    /// - Remark: HTTP `POST /conversations.externalInvitePermissions.set`.
    /// - Remark: Generated from `#/paths//conversations.externalInvitePermissions.set/post(conversationsExternalInvitePermissionsSet)`.
    func conversationsExternalInvitePermissionsSet(_ input: Operations.ConversationsExternalInvitePermissionsSet.Input) async throws -> Operations.ConversationsExternalInvitePermissionsSet.Output
    /// Fetches a conversation's history of messages and events.
    ///
    /// - Remark: HTTP `POST /conversations.history`.
    /// - Remark: Generated from `#/paths//conversations.history/post(conversationsHistory)`.
    func conversationsHistory(_ input: Operations.ConversationsHistory.Input) async throws -> Operations.ConversationsHistory.Output
    /// Retrieve information about a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.info`.
    /// - Remark: Generated from `#/paths//conversations.info/post(conversationsInfo)`.
    func conversationsInfo(_ input: Operations.ConversationsInfo.Input) async throws -> Operations.ConversationsInfo.Output
    /// Invites users to a channel.
    ///
    /// - Remark: HTTP `POST /conversations.invite`.
    /// - Remark: Generated from `#/paths//conversations.invite/post(conversationsInvite)`.
    func conversationsInvite(_ input: Operations.ConversationsInvite.Input) async throws -> Operations.ConversationsInvite.Output
    /// Sends an invitation to a Slack Connect channel
    ///
    /// - Remark: HTTP `POST /conversations.inviteShared`.
    /// - Remark: Generated from `#/paths//conversations.inviteShared/post(conversationsInviteShared)`.
    func conversationsInviteShared(_ input: Operations.ConversationsInviteShared.Input) async throws -> Operations.ConversationsInviteShared.Output
    /// Joins an existing conversation.
    ///
    /// - Remark: HTTP `POST /conversations.join`.
    /// - Remark: Generated from `#/paths//conversations.join/post(conversationsJoin)`.
    func conversationsJoin(_ input: Operations.ConversationsJoin.Input) async throws -> Operations.ConversationsJoin.Output
    /// Removes a user from a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.kick`.
    /// - Remark: Generated from `#/paths//conversations.kick/post(conversationsKick)`.
    func conversationsKick(_ input: Operations.ConversationsKick.Input) async throws -> Operations.ConversationsKick.Output
    /// Leaves a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.leave`.
    /// - Remark: Generated from `#/paths//conversations.leave/post(conversationsLeave)`.
    func conversationsLeave(_ input: Operations.ConversationsLeave.Input) async throws -> Operations.ConversationsLeave.Output
    /// Lists all channels in a Slack team.
    ///
    /// - Remark: HTTP `POST /conversations.list`.
    /// - Remark: Generated from `#/paths//conversations.list/post(conversationsList)`.
    func conversationsList(_ input: Operations.ConversationsList.Input) async throws -> Operations.ConversationsList.Output
    /// Lists shared channel invites that have been generated or received but have not been approved by all parties
    ///
    /// - Remark: HTTP `POST /conversations.listConnectInvites`.
    /// - Remark: Generated from `#/paths//conversations.listConnectInvites/post(conversationsListConnectInvites)`.
    func conversationsListConnectInvites(_ input: Operations.ConversationsListConnectInvites.Input) async throws -> Operations.ConversationsListConnectInvites.Output
    /// Sets the read cursor in a channel.
    ///
    /// - Remark: HTTP `POST /conversations.mark`.
    /// - Remark: Generated from `#/paths//conversations.mark/post(conversationsMark)`.
    func conversationsMark(_ input: Operations.ConversationsMark.Input) async throws -> Operations.ConversationsMark.Output
    /// Retrieve members of a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.members`.
    /// - Remark: Generated from `#/paths//conversations.members/post(conversationsMembers)`.
    func conversationsMembers(_ input: Operations.ConversationsMembers.Input) async throws -> Operations.ConversationsMembers.Output
    /// Opens or resumes a direct message or multi-person direct message.
    ///
    /// - Remark: HTTP `POST /conversations.open`.
    /// - Remark: Generated from `#/paths//conversations.open/post(conversationsOpen)`.
    func conversationsOpen(_ input: Operations.ConversationsOpen.Input) async throws -> Operations.ConversationsOpen.Output
    /// Renames a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.rename`.
    /// - Remark: Generated from `#/paths//conversations.rename/post(conversationsRename)`.
    func conversationsRename(_ input: Operations.ConversationsRename.Input) async throws -> Operations.ConversationsRename.Output
    /// Retrieve a thread of messages posted to a conversation
    ///
    /// - Remark: HTTP `POST /conversations.replies`.
    /// - Remark: Generated from `#/paths//conversations.replies/post(conversationsReplies)`.
    func conversationsReplies(_ input: Operations.ConversationsReplies.Input) async throws -> Operations.ConversationsReplies.Output
    /// Approves a request to add an external user to a channel and sends them a Slack Connect invite
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.approve`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.approve/post(conversationsRequestSharedInviteApprove)`.
    func conversationsRequestSharedInviteApprove(_ input: Operations.ConversationsRequestSharedInviteApprove.Input) async throws -> Operations.ConversationsRequestSharedInviteApprove.Output
    /// Denies a request to invite an external user to a channel
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.deny`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.deny/post(conversationsRequestSharedInviteDeny)`.
    func conversationsRequestSharedInviteDeny(_ input: Operations.ConversationsRequestSharedInviteDeny.Input) async throws -> Operations.ConversationsRequestSharedInviteDeny.Output
    /// Lists requests to add external users to channels with ability to filter.
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.list`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.list/post(conversationsRequestSharedInviteList)`.
    func conversationsRequestSharedInviteList(_ input: Operations.ConversationsRequestSharedInviteList.Input) async throws -> Operations.ConversationsRequestSharedInviteList.Output
    /// Sets the channel description.
    ///
    /// - Remark: HTTP `POST /conversations.setPurpose`.
    /// - Remark: Generated from `#/paths//conversations.setPurpose/post(conversationsSetPurpose)`.
    func conversationsSetPurpose(_ input: Operations.ConversationsSetPurpose.Input) async throws -> Operations.ConversationsSetPurpose.Output
    /// Sets the topic for a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.setTopic`.
    /// - Remark: Generated from `#/paths//conversations.setTopic/post(conversationsSetTopic)`.
    func conversationsSetTopic(_ input: Operations.ConversationsSetTopic.Input) async throws -> Operations.ConversationsSetTopic.Output
    /// Reverses conversation archival.
    ///
    /// - Remark: HTTP `POST /conversations.unarchive`.
    /// - Remark: Generated from `#/paths//conversations.unarchive/post(conversationsUnarchive)`.
    func conversationsUnarchive(_ input: Operations.ConversationsUnarchive.Input) async throws -> Operations.ConversationsUnarchive.Output
    /// Ends the current user's Do Not Disturb session immediately.
    ///
    /// - Remark: HTTP `POST /dnd.endDnd`.
    /// - Remark: Generated from `#/paths//dnd.endDnd/post(dndEndDnd)`.
    #endif
    #if WebAPI_DND
    func dndEndDnd(_ input: Operations.DndEndDnd.Input) async throws -> Operations.DndEndDnd.Output
    /// Ends the current user's snooze mode immediately.
    ///
    /// - Remark: HTTP `POST /dnd.endSnooze`.
    /// - Remark: Generated from `#/paths//dnd.endSnooze/post(dndEndSnooze)`.
    func dndEndSnooze(_ input: Operations.DndEndSnooze.Input) async throws -> Operations.DndEndSnooze.Output
    /// Retrieves a user's current Do Not Disturb status.
    ///
    /// - Remark: HTTP `POST /dnd.info`.
    /// - Remark: Generated from `#/paths//dnd.info/post(dndInfo)`.
    func dndInfo(_ input: Operations.DndInfo.Input) async throws -> Operations.DndInfo.Output
    /// Turns on Do Not Disturb mode for the current user, or changes its duration.
    ///
    /// - Remark: HTTP `POST /dnd.setSnooze`.
    /// - Remark: Generated from `#/paths//dnd.setSnooze/post(dndSetSnooze)`.
    func dndSetSnooze(_ input: Operations.DndSetSnooze.Input) async throws -> Operations.DndSetSnooze.Output
    /// Retrieves the Do Not Disturb status for up to 50 users on a team.
    ///
    /// - Remark: HTTP `POST /dnd.teamInfo`.
    /// - Remark: Generated from `#/paths//dnd.teamInfo/post(dndTeamInfo)`.
    func dndTeamInfo(_ input: Operations.DndTeamInfo.Input) async throws -> Operations.DndTeamInfo.Output
    /// Lists custom emoji for a team.
    ///
    /// - Remark: HTTP `POST /emoji.list`.
    /// - Remark: Generated from `#/paths//emoji.list/post(emojiList)`.
    #endif
    #if WebAPI_Emoji
    func emojiList(_ input: Operations.EmojiList.Input) async throws -> Operations.EmojiList.Output
    /// Finishes an upload started with files.getUploadURLExternal
    ///
    /// - Remark: HTTP `POST /files.completeUploadExternal`.
    /// - Remark: Generated from `#/paths//files.completeUploadExternal/post(filesCompleteUploadExternal)`.
    #endif
    #if WebAPI_Files
    func filesCompleteUploadExternal(_ input: Operations.FilesCompleteUploadExternal.Input) async throws -> Operations.FilesCompleteUploadExternal.Output
    /// Deletes a file.
    ///
    /// - Remark: HTTP `POST /files.delete`.
    /// - Remark: Generated from `#/paths//files.delete/post(filesDelete)`.
    func filesDelete(_ input: Operations.FilesDelete.Input) async throws -> Operations.FilesDelete.Output
    /// Gets a URL for an edge external file upload
    ///
    /// - Remark: HTTP `POST /files.getUploadURLExternal`.
    /// - Remark: Generated from `#/paths//files.getUploadURLExternal/post(filesGetUploadURLExternal)`.
    func filesGetUploadURLExternal(_ input: Operations.FilesGetUploadURLExternal.Input) async throws -> Operations.FilesGetUploadURLExternal.Output
    /// Gets information about a file.
    ///
    /// - Remark: HTTP `POST /files.info`.
    /// - Remark: Generated from `#/paths//files.info/post(filesInfo)`.
    func filesInfo(_ input: Operations.FilesInfo.Input) async throws -> Operations.FilesInfo.Output
    /// List for a team, in a channel, or from a user with applied filters.
    ///
    /// - Remark: HTTP `POST /files.list`.
    /// - Remark: Generated from `#/paths//files.list/post(filesList)`.
    func filesList(_ input: Operations.FilesList.Input) async throws -> Operations.FilesList.Output
    /// Adds a file from a remote service
    ///
    /// - Remark: HTTP `POST /files.remote.add`.
    /// - Remark: Generated from `#/paths//files.remote.add/post(filesRemoteAdd)`.
    func filesRemoteAdd(_ input: Operations.FilesRemoteAdd.Input) async throws -> Operations.FilesRemoteAdd.Output
    /// Retrieve information about a remote file added to Slack
    ///
    /// - Remark: HTTP `POST /files.remote.info`.
    /// - Remark: Generated from `#/paths//files.remote.info/post(filesRemoteInfo)`.
    func filesRemoteInfo(_ input: Operations.FilesRemoteInfo.Input) async throws -> Operations.FilesRemoteInfo.Output
    /// Retrieve information about a remote file added to Slack
    ///
    /// - Remark: HTTP `POST /files.remote.list`.
    /// - Remark: Generated from `#/paths//files.remote.list/post(filesRemoteList)`.
    func filesRemoteList(_ input: Operations.FilesRemoteList.Input) async throws -> Operations.FilesRemoteList.Output
    /// Remove a remote file.
    ///
    /// - Remark: HTTP `POST /files.remote.remove`.
    /// - Remark: Generated from `#/paths//files.remote.remove/post(filesRemoteRemove)`.
    func filesRemoteRemove(_ input: Operations.FilesRemoteRemove.Input) async throws -> Operations.FilesRemoteRemove.Output
    /// Share a remote file into a channel.
    ///
    /// - Remark: HTTP `POST /files.remote.share`.
    /// - Remark: Generated from `#/paths//files.remote.share/post(filesRemoteShare)`.
    func filesRemoteShare(_ input: Operations.FilesRemoteShare.Input) async throws -> Operations.FilesRemoteShare.Output
    /// Updates an existing remote file.
    ///
    /// - Remark: HTTP `POST /files.remote.update`.
    /// - Remark: Generated from `#/paths//files.remote.update/post(filesRemoteUpdate)`.
    func filesRemoteUpdate(_ input: Operations.FilesRemoteUpdate.Input) async throws -> Operations.FilesRemoteUpdate.Output
    /// Revokes public/external sharing access for a file
    ///
    /// - Remark: HTTP `POST /files.revokePublicURL`.
    /// - Remark: Generated from `#/paths//files.revokePublicURL/post(filesRevokePublicURL)`.
    func filesRevokePublicURL(_ input: Operations.FilesRevokePublicURL.Input) async throws -> Operations.FilesRevokePublicURL.Output
    /// Enables a file for public/external sharing.
    ///
    /// - Remark: HTTP `POST /files.sharedPublicURL`.
    /// - Remark: Generated from `#/paths//files.sharedPublicURL/post(filesSharedPublicURL)`.
    func filesSharedPublicURL(_ input: Operations.FilesSharedPublicURL.Input) async throws -> Operations.FilesSharedPublicURL.Output
    /// Uploads or creates a file.
    ///
    /// - Remark: HTTP `POST /files.upload`.
    /// - Remark: Generated from `#/paths//files.upload/post(filesUpload)`.
    func filesUpload(_ input: Operations.FilesUpload.Input) async throws -> Operations.FilesUpload.Output
    /// Signal that a function failed to complete
    ///
    /// - Remark: HTTP `POST /functions.completeError`.
    /// - Remark: Generated from `#/paths//functions.completeError/post(functionsCompleteError)`.
    #endif
    #if WebAPI_Functions
    func functionsCompleteError(_ input: Operations.FunctionsCompleteError.Input) async throws -> Operations.FunctionsCompleteError.Output
    /// Signal the successful completion of a function
    ///
    /// - Remark: HTTP `POST /functions.completeSuccess`.
    /// - Remark: Generated from `#/paths//functions.completeSuccess/post(functionsCompleteSuccess)`.
    func functionsCompleteSuccess(_ input: Operations.FunctionsCompleteSuccess.Input) async throws -> Operations.FunctionsCompleteSuccess.Output
    /// For Enterprise Grid workspaces, map local user IDs to global user IDs
    ///
    /// - Remark: HTTP `POST /migration.exchange`.
    /// - Remark: Generated from `#/paths//migration.exchange/post(migrationExchange)`.
    #endif
    #if WebAPI_Migration
    func migrationExchange(_ input: Operations.MigrationExchange.Input) async throws -> Operations.MigrationExchange.Output
    /// Exchanges a temporary OAuth verifier code for an access token.
    ///
    /// - Remark: HTTP `POST /oauth.v2.access`.
    /// - Remark: Generated from `#/paths//oauth.v2.access/post(oauthV2Access)`.
    #endif
    #if WebAPI_OAuth
    func oauthV2Access(_ input: Operations.OauthV2Access.Input) async throws -> Operations.OauthV2Access.Output
    /// Exchanges a legacy access token for a new expiring access token and refresh token
    ///
    /// - Remark: HTTP `POST /oauth.v2.exchange`.
    /// - Remark: Generated from `#/paths//oauth.v2.exchange/post(oauthV2Exchange)`.
    func oauthV2Exchange(_ input: Operations.OauthV2Exchange.Input) async throws -> Operations.OauthV2Exchange.Output
    /// Exchanges a temporary OAuth verifier code for an access token for Sign in with Slack.
    ///
    /// - Remark: HTTP `POST /openid.connect.token`.
    /// - Remark: Generated from `#/paths//openid.connect.token/post(openidConnectToken)`.
    #endif
    #if WebAPI_OpenID
    func openidConnectToken(_ input: Operations.OpenidConnectToken.Input) async throws -> Operations.OpenidConnectToken.Output
    /// Get the identity of a user who has authorized Sign in with Slack.
    ///
    /// - Remark: HTTP `POST /openid.connect.userInfo`.
    /// - Remark: Generated from `#/paths//openid.connect.userInfo/post(openidConnectUserInfo)`.
    func openidConnectUserInfo(_ input: Operations.OpenidConnectUserInfo.Input) async throws -> Operations.OpenidConnectUserInfo.Output
    /// Pins an item to a channel.
    ///
    /// - Remark: HTTP `POST /pins.add`.
    /// - Remark: Generated from `#/paths//pins.add/post(pinsAdd)`.
    #endif
    #if WebAPI_Pins
    func pinsAdd(_ input: Operations.PinsAdd.Input) async throws -> Operations.PinsAdd.Output
    /// Lists items pinned to a channel.
    ///
    /// - Remark: HTTP `POST /pins.list`.
    /// - Remark: Generated from `#/paths//pins.list/post(pinsList)`.
    func pinsList(_ input: Operations.PinsList.Input) async throws -> Operations.PinsList.Output
    /// Un-pins an item from a channel.
    ///
    /// - Remark: HTTP `POST /pins.remove`.
    /// - Remark: Generated from `#/paths//pins.remove/post(pinsRemove)`.
    func pinsRemove(_ input: Operations.PinsRemove.Input) async throws -> Operations.PinsRemove.Output
    /// Adds a reaction to an item.
    ///
    /// - Remark: HTTP `POST /reactions.add`.
    /// - Remark: Generated from `#/paths//reactions.add/post(reactionsAdd)`.
    #endif
    #if WebAPI_Reactions
    func reactionsAdd(_ input: Operations.ReactionsAdd.Input) async throws -> Operations.ReactionsAdd.Output
    /// Gets reactions for an item.
    ///
    /// - Remark: HTTP `POST /reactions.get`.
    /// - Remark: Generated from `#/paths//reactions.get/post(reactionsGet)`.
    func reactionsGet(_ input: Operations.ReactionsGet.Input) async throws -> Operations.ReactionsGet.Output
    /// Lists reactions made by a user.
    ///
    /// - Remark: HTTP `POST /reactions.list`.
    /// - Remark: Generated from `#/paths//reactions.list/post(reactionsList)`.
    func reactionsList(_ input: Operations.ReactionsList.Input) async throws -> Operations.ReactionsList.Output
    /// Removes a reaction from an item.
    ///
    /// - Remark: HTTP `POST /reactions.remove`.
    /// - Remark: Generated from `#/paths//reactions.remove/post(reactionsRemove)`.
    func reactionsRemove(_ input: Operations.ReactionsRemove.Input) async throws -> Operations.ReactionsRemove.Output
    /// Creates a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.add`.
    /// - Remark: Generated from `#/paths//reminders.add/post(remindersAdd)`.
    #endif
    #if WebAPI_Reminders
    func remindersAdd(_ input: Operations.RemindersAdd.Input) async throws -> Operations.RemindersAdd.Output
    /// Marks a reminder as complete.
    ///
    /// - Remark: HTTP `POST /reminders.complete`.
    /// - Remark: Generated from `#/paths//reminders.complete/post(remindersComplete)`.
    func remindersComplete(_ input: Operations.RemindersComplete.Input) async throws -> Operations.RemindersComplete.Output
    /// Deletes a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.delete`.
    /// - Remark: Generated from `#/paths//reminders.delete/post(remindersDelete)`.
    func remindersDelete(_ input: Operations.RemindersDelete.Input) async throws -> Operations.RemindersDelete.Output
    /// Gets information about a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.info`.
    /// - Remark: Generated from `#/paths//reminders.info/post(remindersInfo)`.
    func remindersInfo(_ input: Operations.RemindersInfo.Input) async throws -> Operations.RemindersInfo.Output
    /// Lists all reminders created by or for a given user.
    ///
    /// - Remark: HTTP `POST /reminders.list`.
    /// - Remark: Generated from `#/paths//reminders.list/post(remindersList)`.
    func remindersList(_ input: Operations.RemindersList.Input) async throws -> Operations.RemindersList.Output
    /// Starts a Real Time Messaging session.
    ///
    /// - Remark: HTTP `POST /rtm.connect`.
    /// - Remark: Generated from `#/paths//rtm.connect/post(rtmConnect)`.
    #endif
    #if WebAPI_RTM
    func rtmConnect(_ input: Operations.RtmConnect.Input) async throws -> Operations.RtmConnect.Output
    /// Searches for messages and files matching a query.
    ///
    /// - Remark: HTTP `POST /search.all`.
    /// - Remark: Generated from `#/paths//search.all/post(searchAll)`.
    #endif
    #if WebAPI_Search
    func searchAll(_ input: Operations.SearchAll.Input) async throws -> Operations.SearchAll.Output
    /// Searches for files matching a query.
    ///
    /// - Remark: HTTP `POST /search.files`.
    /// - Remark: Generated from `#/paths//search.files/post(searchFiles)`.
    func searchFiles(_ input: Operations.SearchFiles.Input) async throws -> Operations.SearchFiles.Output
    /// Searches for messages matching a query.
    ///
    /// - Remark: HTTP `POST /search.messages`.
    /// - Remark: Generated from `#/paths//search.messages/post(searchMessages)`.
    func searchMessages(_ input: Operations.SearchMessages.Input) async throws -> Operations.SearchMessages.Output
    /// Save an item for later. Formerly known as adding a star.
    ///
    /// - Remark: HTTP `POST /stars.add`.
    /// - Remark: Generated from `#/paths//stars.add/post(starsAdd)`.
    #endif
    #if WebAPI_Stars
    func starsAdd(_ input: Operations.StarsAdd.Input) async throws -> Operations.StarsAdd.Output
    /// Listed a user's saved items, formerly known as stars.
    ///
    /// - Remark: HTTP `POST /stars.list`.
    /// - Remark: Generated from `#/paths//stars.list/post(starsList)`.
    func starsList(_ input: Operations.StarsList.Input) async throws -> Operations.StarsList.Output
    /// Removes a saved item (star) from an item.
    ///
    /// - Remark: HTTP `POST /stars.remove`.
    /// - Remark: Generated from `#/paths//stars.remove/post(starsRemove)`.
    func starsRemove(_ input: Operations.StarsRemove.Input) async throws -> Operations.StarsRemove.Output
    /// Gets the access logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.accessLogs`.
    /// - Remark: Generated from `#/paths//team.accessLogs/post(teamAccessLogs)`.
    #endif
    #if WebAPI_Team
    func teamAccessLogs(_ input: Operations.TeamAccessLogs.Input) async throws -> Operations.TeamAccessLogs.Output
    /// Gets billable users information for the current team.
    ///
    /// - Remark: HTTP `POST /team.billableInfo`.
    /// - Remark: Generated from `#/paths//team.billableInfo/post(teamBillableInfo)`.
    func teamBillableInfo(_ input: Operations.TeamBillableInfo.Input) async throws -> Operations.TeamBillableInfo.Output
    /// Reads a workspace's billing plan information.
    ///
    /// - Remark: HTTP `POST /team.billing.info`.
    /// - Remark: Generated from `#/paths//team.billing.info/post(teamBillingInfo)`.
    func teamBillingInfo(_ input: Operations.TeamBillingInfo.Input) async throws -> Operations.TeamBillingInfo.Output
    /// Disconnect an external organization.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.disconnect`.
    /// - Remark: Generated from `#/paths//team.externalTeams.disconnect/post(teamExternalTeamsDisconnect)`.
    func teamExternalTeamsDisconnect(_ input: Operations.TeamExternalTeamsDisconnect.Input) async throws -> Operations.TeamExternalTeamsDisconnect.Output
    /// Returns a list of all the external teams connected and details about the connection.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.list`.
    /// - Remark: Generated from `#/paths//team.externalTeams.list/post(teamExternalTeamsList)`.
    func teamExternalTeamsList(_ input: Operations.TeamExternalTeamsList.Input) async throws -> Operations.TeamExternalTeamsList.Output
    /// Gets information about the current team.
    ///
    /// - Remark: HTTP `POST /team.info`.
    /// - Remark: Generated from `#/paths//team.info/post(teamInfo)`.
    func teamInfo(_ input: Operations.TeamInfo.Input) async throws -> Operations.TeamInfo.Output
    /// Gets the integration logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.integrationLogs`.
    /// - Remark: Generated from `#/paths//team.integrationLogs/post(teamIntegrationLogs)`.
    func teamIntegrationLogs(_ input: Operations.TeamIntegrationLogs.Input) async throws -> Operations.TeamIntegrationLogs.Output
    /// Retrieve a list of a workspace's team preferences.
    ///
    /// - Remark: HTTP `POST /team.preferences.list`.
    /// - Remark: Generated from `#/paths//team.preferences.list/post(teamPreferencesList)`.
    func teamPreferencesList(_ input: Operations.TeamPreferencesList.Input) async throws -> Operations.TeamPreferencesList.Output
    /// Retrieve a team's profile.
    ///
    /// - Remark: HTTP `POST /team.profile.get`.
    /// - Remark: Generated from `#/paths//team.profile.get/post(teamProfileGet)`.
    func teamProfileGet(_ input: Operations.TeamProfileGet.Input) async throws -> Operations.TeamProfileGet.Output
    /// Exchanges a refresh token for a new app configuration token.
    ///
    /// - Remark: HTTP `POST /tooling.tokens.rotate`.
    /// - Remark: Generated from `#/paths//tooling.tokens.rotate/post(toolingTokensRotate)`.
    #endif
    #if WebAPI_Tooling
    func toolingTokensRotate(_ input: Operations.ToolingTokensRotate.Input) async throws -> Operations.ToolingTokensRotate.Output
    /// List conversations the calling user may access.
    ///
    /// - Remark: HTTP `POST /users.conversations`.
    /// - Remark: Generated from `#/paths//users.conversations/post(usersConversations)`.
    #endif
    #if WebAPI_Users
    func usersConversations(_ input: Operations.UsersConversations.Input) async throws -> Operations.UsersConversations.Output
    /// Delete the user profile photo
    ///
    /// - Remark: HTTP `POST /users.deletePhoto`.
    /// - Remark: Generated from `#/paths//users.deletePhoto/post(usersDeletePhoto)`.
    func usersDeletePhoto(_ input: Operations.UsersDeletePhoto.Input) async throws -> Operations.UsersDeletePhoto.Output
    /// Look up an email address to see if someone is discoverable on Slack
    ///
    /// - Remark: HTTP `POST /users.discoverableContacts.lookup`.
    /// - Remark: Generated from `#/paths//users.discoverableContacts.lookup/post(usersDiscoverableContactsLookup)`.
    func usersDiscoverableContactsLookup(_ input: Operations.UsersDiscoverableContactsLookup.Input) async throws -> Operations.UsersDiscoverableContactsLookup.Output
    /// Gets user presence information.
    ///
    /// - Remark: HTTP `POST /users.getPresence`.
    /// - Remark: Generated from `#/paths//users.getPresence/post(usersGetPresence)`.
    func usersGetPresence(_ input: Operations.UsersGetPresence.Input) async throws -> Operations.UsersGetPresence.Output
    /// Get a user's identity.
    ///
    /// - Remark: HTTP `POST /users.identity`.
    /// - Remark: Generated from `#/paths//users.identity/post(usersIdentity)`.
    func usersIdentity(_ input: Operations.UsersIdentity.Input) async throws -> Operations.UsersIdentity.Output
    /// Gets information about a user.
    ///
    /// - Remark: HTTP `POST /users.info`.
    /// - Remark: Generated from `#/paths//users.info/post(usersInfo)`.
    func usersInfo(_ input: Operations.UsersInfo.Input) async throws -> Operations.UsersInfo.Output
    /// Lists all users in a Slack team.
    ///
    /// - Remark: HTTP `POST /users.list`.
    /// - Remark: Generated from `#/paths//users.list/post(usersList)`.
    func usersList(_ input: Operations.UsersList.Input) async throws -> Operations.UsersList.Output
    /// Find a user with an email address.
    ///
    /// - Remark: HTTP `POST /users.lookupByEmail`.
    /// - Remark: Generated from `#/paths//users.lookupByEmail/post(usersLookupByEmail)`.
    func usersLookupByEmail(_ input: Operations.UsersLookupByEmail.Input) async throws -> Operations.UsersLookupByEmail.Output
    /// Retrieve a user's profile information, including their custom status.
    ///
    /// - Remark: HTTP `POST /users.profile.get`.
    /// - Remark: Generated from `#/paths//users.profile.get/post(usersProfileGet)`.
    func usersProfileGet(_ input: Operations.UsersProfileGet.Input) async throws -> Operations.UsersProfileGet.Output
    /// Set a user's profile information, including custom status.
    ///
    /// - Remark: HTTP `POST /users.profile.set`.
    /// - Remark: Generated from `#/paths//users.profile.set/post(usersProfileSet)`.
    func usersProfileSet(_ input: Operations.UsersProfileSet.Input) async throws -> Operations.UsersProfileSet.Output
    /// Marked a user as active. Deprecated and non-functional.
    ///
    /// - Remark: HTTP `POST /users.setActive`.
    /// - Remark: Generated from `#/paths//users.setActive/post(usersSetActive)`.
    func usersSetActive(_ input: Operations.UsersSetActive.Input) async throws -> Operations.UsersSetActive.Output
    /// Set the user profile photo
    ///
    /// - Remark: HTTP `POST /users.setPhoto`.
    /// - Remark: Generated from `#/paths//users.setPhoto/post(usersSetPhoto)`.
    func usersSetPhoto(_ input: Operations.UsersSetPhoto.Input) async throws -> Operations.UsersSetPhoto.Output
    /// Manually sets user presence.
    ///
    /// - Remark: HTTP `POST /users.setPresence`.
    /// - Remark: Generated from `#/paths//users.setPresence/post(usersSetPresence)`.
    func usersSetPresence(_ input: Operations.UsersSetPresence.Input) async throws -> Operations.UsersSetPresence.Output
    /// Open a view for a user.
    ///
    /// - Remark: HTTP `POST /views.open`.
    /// - Remark: Generated from `#/paths//views.open/post(viewsOpen)`.
    #endif
    #if WebAPI_Views
    func viewsOpen(_ input: Operations.ViewsOpen.Input) async throws -> Operations.ViewsOpen.Output
    /// Publish a static view for a User.
    ///
    /// - Remark: HTTP `POST /views.publish`.
    /// - Remark: Generated from `#/paths//views.publish/post(viewsPublish)`.
    func viewsPublish(_ input: Operations.ViewsPublish.Input) async throws -> Operations.ViewsPublish.Output
    /// Push a view onto the stack of a root view.
    ///
    /// - Remark: HTTP `POST /views.push`.
    /// - Remark: Generated from `#/paths//views.push/post(viewsPush)`.
    func viewsPush(_ input: Operations.ViewsPush.Input) async throws -> Operations.ViewsPush.Output
    /// Update an existing view.
    ///
    /// - Remark: HTTP `POST /views.update`.
    /// - Remark: Generated from `#/paths//views.update/post(viewsUpdate)`.
    func viewsUpdate(_ input: Operations.ViewsUpdate.Input) async throws -> Operations.ViewsUpdate.Output
    #endif
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    #if WebAPI_Admin
    /// Get logs for a specified team/org
    ///
    /// - Remark: HTTP `POST /admin.apps.activities.list`.
    /// - Remark: Generated from `#/paths//admin.apps.activities.list/post(adminAppsActivitiesList)`.
    public func adminAppsActivitiesList(
        headers: Operations.AdminAppsActivitiesList.Input.Headers = .init(),
        body: Operations.AdminAppsActivitiesList.Input.Body
    ) async throws -> Operations.AdminAppsActivitiesList.Output {
        try await adminAppsActivitiesList(Operations.AdminAppsActivitiesList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Approve an app for installation on a workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.approve`.
    /// - Remark: Generated from `#/paths//admin.apps.approve/post(adminAppsApprove)`.
    public func adminAppsApprove(
        headers: Operations.AdminAppsApprove.Input.Headers = .init(),
        body: Operations.AdminAppsApprove.Input.Body
    ) async throws -> Operations.AdminAppsApprove.Output {
        try await adminAppsApprove(Operations.AdminAppsApprove.Input(
            headers: headers,
            body: body
        ))
    }
    /// List approved apps for an org or workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.approved.list`.
    /// - Remark: Generated from `#/paths//admin.apps.approved.list/post(adminAppsApprovedList)`.
    public func adminAppsApprovedList(
        headers: Operations.AdminAppsApprovedList.Input.Headers = .init(),
        body: Operations.AdminAppsApprovedList.Input.Body
    ) async throws -> Operations.AdminAppsApprovedList.Output {
        try await adminAppsApprovedList(Operations.AdminAppsApprovedList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Clear an app resolution
    ///
    /// - Remark: HTTP `POST /admin.apps.clearResolution`.
    /// - Remark: Generated from `#/paths//admin.apps.clearResolution/post(adminAppsClearResolution)`.
    public func adminAppsClearResolution(
        headers: Operations.AdminAppsClearResolution.Input.Headers = .init(),
        body: Operations.AdminAppsClearResolution.Input.Body
    ) async throws -> Operations.AdminAppsClearResolution.Output {
        try await adminAppsClearResolution(Operations.AdminAppsClearResolution.Input(
            headers: headers,
            body: body
        ))
    }
    /// Look up the app config for connectors by their IDs
    ///
    /// - Remark: HTTP `POST /admin.apps.config.lookup`.
    /// - Remark: Generated from `#/paths//admin.apps.config.lookup/post(adminAppsConfigLookup)`.
    public func adminAppsConfigLookup(
        headers: Operations.AdminAppsConfigLookup.Input.Headers = .init(),
        body: Operations.AdminAppsConfigLookup.Input.Body
    ) async throws -> Operations.AdminAppsConfigLookup.Output {
        try await adminAppsConfigLookup(Operations.AdminAppsConfigLookup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the app config for a connector
    ///
    /// - Remark: HTTP `POST /admin.apps.config.set`.
    /// - Remark: Generated from `#/paths//admin.apps.config.set/post(adminAppsConfigSet)`.
    public func adminAppsConfigSet(
        headers: Operations.AdminAppsConfigSet.Input.Headers = .init(),
        body: Operations.AdminAppsConfigSet.Input.Body
    ) async throws -> Operations.AdminAppsConfigSet.Output {
        try await adminAppsConfigSet(Operations.AdminAppsConfigSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Cancel app request for team
    ///
    /// - Remark: HTTP `POST /admin.apps.requests.cancel`.
    /// - Remark: Generated from `#/paths//admin.apps.requests.cancel/post(adminAppsRequestsCancel)`.
    public func adminAppsRequestsCancel(
        headers: Operations.AdminAppsRequestsCancel.Input.Headers = .init(),
        body: Operations.AdminAppsRequestsCancel.Input.Body
    ) async throws -> Operations.AdminAppsRequestsCancel.Output {
        try await adminAppsRequestsCancel(Operations.AdminAppsRequestsCancel.Input(
            headers: headers,
            body: body
        ))
    }
    /// List app requests for a team/workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.requests.list`.
    /// - Remark: Generated from `#/paths//admin.apps.requests.list/post(adminAppsRequestsList)`.
    public func adminAppsRequestsList(
        headers: Operations.AdminAppsRequestsList.Input.Headers = .init(),
        body: Operations.AdminAppsRequestsList.Input.Body
    ) async throws -> Operations.AdminAppsRequestsList.Output {
        try await adminAppsRequestsList(Operations.AdminAppsRequestsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Restrict an app for installation on a workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.restrict`.
    /// - Remark: Generated from `#/paths//admin.apps.restrict/post(adminAppsRestrict)`.
    public func adminAppsRestrict(
        headers: Operations.AdminAppsRestrict.Input.Headers = .init(),
        body: Operations.AdminAppsRestrict.Input.Body
    ) async throws -> Operations.AdminAppsRestrict.Output {
        try await adminAppsRestrict(Operations.AdminAppsRestrict.Input(
            headers: headers,
            body: body
        ))
    }
    /// List restricted apps for an org or workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.restricted.list`.
    /// - Remark: Generated from `#/paths//admin.apps.restricted.list/post(adminAppsRestrictedList)`.
    public func adminAppsRestrictedList(
        headers: Operations.AdminAppsRestrictedList.Input.Headers = .init(),
        body: Operations.AdminAppsRestrictedList.Input.Body
    ) async throws -> Operations.AdminAppsRestrictedList.Output {
        try await adminAppsRestrictedList(Operations.AdminAppsRestrictedList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Uninstall an app from one or many workspaces, or an entire enterprise organization.
    ///
    /// - Remark: HTTP `POST /admin.apps.uninstall`.
    /// - Remark: Generated from `#/paths//admin.apps.uninstall/post(adminAppsUninstall)`.
    public func adminAppsUninstall(
        headers: Operations.AdminAppsUninstall.Input.Headers = .init(),
        body: Operations.AdminAppsUninstall.Input.Body
    ) async throws -> Operations.AdminAppsUninstall.Output {
        try await adminAppsUninstall(Operations.AdminAppsUninstall.Input(
            headers: headers,
            body: body
        ))
    }
    /// Assign entities to a particular authentication policy.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.assignEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.assignEntities/post(adminAuthPolicyAssignEntities)`.
    public func adminAuthPolicyAssignEntities(
        headers: Operations.AdminAuthPolicyAssignEntities.Input.Headers = .init(),
        body: Operations.AdminAuthPolicyAssignEntities.Input.Body
    ) async throws -> Operations.AdminAuthPolicyAssignEntities.Output {
        try await adminAuthPolicyAssignEntities(Operations.AdminAuthPolicyAssignEntities.Input(
            headers: headers,
            body: body
        ))
    }
    /// Fetch all the entities assigned to a particular authentication policy by name.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.getEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.getEntities/post(adminAuthPolicyGetEntities)`.
    public func adminAuthPolicyGetEntities(
        headers: Operations.AdminAuthPolicyGetEntities.Input.Headers = .init(),
        body: Operations.AdminAuthPolicyGetEntities.Input.Body
    ) async throws -> Operations.AdminAuthPolicyGetEntities.Output {
        try await adminAuthPolicyGetEntities(Operations.AdminAuthPolicyGetEntities.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove specified entities from a specified authentication policy.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.removeEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.removeEntities/post(adminAuthPolicyRemoveEntities)`.
    public func adminAuthPolicyRemoveEntities(
        headers: Operations.AdminAuthPolicyRemoveEntities.Input.Headers = .init(),
        body: Operations.AdminAuthPolicyRemoveEntities.Input.Body
    ) async throws -> Operations.AdminAuthPolicyRemoveEntities.Output {
        try await adminAuthPolicyRemoveEntities(Operations.AdminAuthPolicyRemoveEntities.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create an Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.create`.
    /// - Remark: Generated from `#/paths//admin.barriers.create/post(adminBarriersCreate)`.
    public func adminBarriersCreate(
        headers: Operations.AdminBarriersCreate.Input.Headers = .init(),
        body: Operations.AdminBarriersCreate.Input.Body
    ) async throws -> Operations.AdminBarriersCreate.Output {
        try await adminBarriersCreate(Operations.AdminBarriersCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete an existing Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.delete`.
    /// - Remark: Generated from `#/paths//admin.barriers.delete/post(adminBarriersDelete)`.
    public func adminBarriersDelete(
        headers: Operations.AdminBarriersDelete.Input.Headers = .init(),
        body: Operations.AdminBarriersDelete.Input.Body
    ) async throws -> Operations.AdminBarriersDelete.Output {
        try await adminBarriersDelete(Operations.AdminBarriersDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get all Information Barriers for your organization
    ///
    /// - Remark: HTTP `POST /admin.barriers.list`.
    /// - Remark: Generated from `#/paths//admin.barriers.list/post(adminBarriersList)`.
    public func adminBarriersList(
        headers: Operations.AdminBarriersList.Input.Headers = .init(),
        body: Operations.AdminBarriersList.Input.Body
    ) async throws -> Operations.AdminBarriersList.Output {
        try await adminBarriersList(Operations.AdminBarriersList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Update an existing Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.update`.
    /// - Remark: Generated from `#/paths//admin.barriers.update/post(adminBarriersUpdate)`.
    public func adminBarriersUpdate(
        headers: Operations.AdminBarriersUpdate.Input.Headers = .init(),
        body: Operations.AdminBarriersUpdate.Input.Body
    ) async throws -> Operations.AdminBarriersUpdate.Output {
        try await adminBarriersUpdate(Operations.AdminBarriersUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Archive a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.archive`.
    /// - Remark: Generated from `#/paths//admin.conversations.archive/post(adminConversationsArchive)`.
    public func adminConversationsArchive(
        headers: Operations.AdminConversationsArchive.Input.Headers = .init(),
        body: Operations.AdminConversationsArchive.Input.Body
    ) async throws -> Operations.AdminConversationsArchive.Output {
        try await adminConversationsArchive(Operations.AdminConversationsArchive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Archive public or private channels in bulk.
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkArchive`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkArchive/post(adminConversationsBulkArchive)`.
    public func adminConversationsBulkArchive(
        headers: Operations.AdminConversationsBulkArchive.Input.Headers = .init(),
        body: Operations.AdminConversationsBulkArchive.Input.Body
    ) async throws -> Operations.AdminConversationsBulkArchive.Output {
        try await adminConversationsBulkArchive(Operations.AdminConversationsBulkArchive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete public or private channels in bulk
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkDelete`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkDelete/post(adminConversationsBulkDelete)`.
    public func adminConversationsBulkDelete(
        headers: Operations.AdminConversationsBulkDelete.Input.Headers = .init(),
        body: Operations.AdminConversationsBulkDelete.Input.Body
    ) async throws -> Operations.AdminConversationsBulkDelete.Output {
        try await adminConversationsBulkDelete(Operations.AdminConversationsBulkDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Move public or private channels in bulk.
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkMove`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkMove/post(adminConversationsBulkMove)`.
    public func adminConversationsBulkMove(
        headers: Operations.AdminConversationsBulkMove.Input.Headers = .init(),
        body: Operations.AdminConversationsBulkMove.Input.Body
    ) async throws -> Operations.AdminConversationsBulkMove.Output {
        try await adminConversationsBulkMove(Operations.AdminConversationsBulkMove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Convert a public channel to a private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.convertToPrivate`.
    /// - Remark: Generated from `#/paths//admin.conversations.convertToPrivate/post(adminConversationsConvertToPrivate)`.
    public func adminConversationsConvertToPrivate(
        headers: Operations.AdminConversationsConvertToPrivate.Input.Headers = .init(),
        body: Operations.AdminConversationsConvertToPrivate.Input.Body
    ) async throws -> Operations.AdminConversationsConvertToPrivate.Output {
        try await adminConversationsConvertToPrivate(Operations.AdminConversationsConvertToPrivate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Convert a private channel to a public channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.convertToPublic`.
    /// - Remark: Generated from `#/paths//admin.conversations.convertToPublic/post(adminConversationsConvertToPublic)`.
    public func adminConversationsConvertToPublic(
        headers: Operations.AdminConversationsConvertToPublic.Input.Headers = .init(),
        body: Operations.AdminConversationsConvertToPublic.Input.Body
    ) async throws -> Operations.AdminConversationsConvertToPublic.Output {
        try await adminConversationsConvertToPublic(Operations.AdminConversationsConvertToPublic.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create a public or private channel-based conversation.
    ///
    /// - Remark: HTTP `POST /admin.conversations.create`.
    /// - Remark: Generated from `#/paths//admin.conversations.create/post(adminConversationsCreate)`.
    public func adminConversationsCreate(
        headers: Operations.AdminConversationsCreate.Input.Headers = .init(),
        body: Operations.AdminConversationsCreate.Input.Body
    ) async throws -> Operations.AdminConversationsCreate.Output {
        try await adminConversationsCreate(Operations.AdminConversationsCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.delete`.
    /// - Remark: Generated from `#/paths//admin.conversations.delete/post(adminConversationsDelete)`.
    public func adminConversationsDelete(
        headers: Operations.AdminConversationsDelete.Input.Headers = .init(),
        body: Operations.AdminConversationsDelete.Input.Body
    ) async throws -> Operations.AdminConversationsDelete.Output {
        try await adminConversationsDelete(Operations.AdminConversationsDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Disconnect a connected channel from one or more workspaces.
    ///
    /// - Remark: HTTP `POST /admin.conversations.disconnectShared`.
    /// - Remark: Generated from `#/paths//admin.conversations.disconnectShared/post(adminConversationsDisconnectShared)`.
    public func adminConversationsDisconnectShared(
        headers: Operations.AdminConversationsDisconnectShared.Input.Headers = .init(),
        body: Operations.AdminConversationsDisconnectShared.Input.Body
    ) async throws -> Operations.AdminConversationsDisconnectShared.Output {
        try await adminConversationsDisconnectShared(Operations.AdminConversationsDisconnectShared.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
    ///
    /// - Remark: HTTP `POST /admin.conversations.ekm.listOriginalConnectedChannelInfo`.
    /// - Remark: Generated from `#/paths//admin.conversations.ekm.listOriginalConnectedChannelInfo/post(adminConversationsEkmListOriginalConnectedChannelInfo)`.
    public func adminConversationsEkmListOriginalConnectedChannelInfo(
        headers: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Headers = .init(),
        body: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Body
    ) async throws -> Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output {
        try await adminConversationsEkmListOriginalConnectedChannelInfo(Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get conversation preferences for a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getConversationPrefs`.
    /// - Remark: Generated from `#/paths//admin.conversations.getConversationPrefs/post(adminConversationsGetConversationPrefs)`.
    public func adminConversationsGetConversationPrefs(
        headers: Operations.AdminConversationsGetConversationPrefs.Input.Headers = .init(),
        body: Operations.AdminConversationsGetConversationPrefs.Input.Body
    ) async throws -> Operations.AdminConversationsGetConversationPrefs.Output {
        try await adminConversationsGetConversationPrefs(Operations.AdminConversationsGetConversationPrefs.Input(
            headers: headers,
            body: body
        ))
    }
    /// This API endpoint can be used by any admin to get a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.getCustomRetention/post(adminConversationsGetCustomRetention)`.
    public func adminConversationsGetCustomRetention(
        headers: Operations.AdminConversationsGetCustomRetention.Input.Headers = .init(),
        body: Operations.AdminConversationsGetCustomRetention.Input.Body
    ) async throws -> Operations.AdminConversationsGetCustomRetention.Output {
        try await adminConversationsGetCustomRetention(Operations.AdminConversationsGetCustomRetention.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get all the workspaces a given public or private channel is connected to within this Enterprise org.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getTeams`.
    /// - Remark: Generated from `#/paths//admin.conversations.getTeams/post(adminConversationsGetTeams)`.
    public func adminConversationsGetTeams(
        headers: Operations.AdminConversationsGetTeams.Input.Headers = .init(),
        body: Operations.AdminConversationsGetTeams.Input.Body
    ) async throws -> Operations.AdminConversationsGetTeams.Output {
        try await adminConversationsGetTeams(Operations.AdminConversationsGetTeams.Input(
            headers: headers,
            body: body
        ))
    }
    /// Invite a user to a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.invite`.
    /// - Remark: Generated from `#/paths//admin.conversations.invite/post(adminConversationsInvite)`.
    public func adminConversationsInvite(
        headers: Operations.AdminConversationsInvite.Input.Headers = .init(),
        body: Operations.AdminConversationsInvite.Input.Body
    ) async throws -> Operations.AdminConversationsInvite.Output {
        try await adminConversationsInvite(Operations.AdminConversationsInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns channels on the given team using the filters.
    ///
    /// - Remark: HTTP `POST /admin.conversations.lookup`.
    /// - Remark: Generated from `#/paths//admin.conversations.lookup/post(adminConversationsLookup)`.
    public func adminConversationsLookup(
        headers: Operations.AdminConversationsLookup.Input.Headers = .init(),
        body: Operations.AdminConversationsLookup.Input.Body
    ) async throws -> Operations.AdminConversationsLookup.Output {
        try await adminConversationsLookup(Operations.AdminConversationsLookup.Input(
            headers: headers,
            body: body
        ))
    }
    /// This API endpoint can be used by any admin to remove a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.removeCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.removeCustomRetention/post(adminConversationsRemoveCustomRetention)`.
    public func adminConversationsRemoveCustomRetention(
        headers: Operations.AdminConversationsRemoveCustomRetention.Input.Headers = .init(),
        body: Operations.AdminConversationsRemoveCustomRetention.Input.Body
    ) async throws -> Operations.AdminConversationsRemoveCustomRetention.Output {
        try await adminConversationsRemoveCustomRetention(Operations.AdminConversationsRemoveCustomRetention.Input(
            headers: headers,
            body: body
        ))
    }
    /// Rename a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.rename`.
    /// - Remark: Generated from `#/paths//admin.conversations.rename/post(adminConversationsRename)`.
    public func adminConversationsRename(
        headers: Operations.AdminConversationsRename.Input.Headers = .init(),
        body: Operations.AdminConversationsRename.Input.Body
    ) async throws -> Operations.AdminConversationsRename.Output {
        try await adminConversationsRename(Operations.AdminConversationsRename.Input(
            headers: headers,
            body: body
        ))
    }
    /// Add an allowlist of IDP groups for accessing a channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.addGroup`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.addGroup/post(adminConversationsRestrictAccessAddGroup)`.
    public func adminConversationsRestrictAccessAddGroup(
        headers: Operations.AdminConversationsRestrictAccessAddGroup.Input.Headers = .init(),
        body: Operations.AdminConversationsRestrictAccessAddGroup.Input.Body
    ) async throws -> Operations.AdminConversationsRestrictAccessAddGroup.Output {
        try await adminConversationsRestrictAccessAddGroup(Operations.AdminConversationsRestrictAccessAddGroup.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all IDP Groups linked to a channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.listGroups`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.listGroups/post(adminConversationsRestrictAccessListGroups)`.
    public func adminConversationsRestrictAccessListGroups(
        headers: Operations.AdminConversationsRestrictAccessListGroups.Input.Headers = .init(),
        body: Operations.AdminConversationsRestrictAccessListGroups.Input.Body
    ) async throws -> Operations.AdminConversationsRestrictAccessListGroups.Output {
        try await adminConversationsRestrictAccessListGroups(Operations.AdminConversationsRestrictAccessListGroups.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove a linked IDP group linked from a private channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.removeGroup`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.removeGroup/post(adminConversationsRestrictAccessRemoveGroup)`.
    public func adminConversationsRestrictAccessRemoveGroup(
        headers: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Headers = .init(),
        body: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Body
    ) async throws -> Operations.AdminConversationsRestrictAccessRemoveGroup.Output {
        try await adminConversationsRestrictAccessRemoveGroup(Operations.AdminConversationsRestrictAccessRemoveGroup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Search for public or private channels in an Enterprise organization.
    ///
    /// - Remark: HTTP `POST /admin.conversations.search`.
    /// - Remark: Generated from `#/paths//admin.conversations.search/post(adminConversationsSearch)`.
    public func adminConversationsSearch(
        headers: Operations.AdminConversationsSearch.Input.Headers = .init(),
        body: Operations.AdminConversationsSearch.Input.Body
    ) async throws -> Operations.AdminConversationsSearch.Output {
        try await adminConversationsSearch(Operations.AdminConversationsSearch.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the posting permissions for a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setConversationPrefs`.
    /// - Remark: Generated from `#/paths//admin.conversations.setConversationPrefs/post(adminConversationsSetConversationPrefs)`.
    public func adminConversationsSetConversationPrefs(
        headers: Operations.AdminConversationsSetConversationPrefs.Input.Headers = .init(),
        body: Operations.AdminConversationsSetConversationPrefs.Input.Body
    ) async throws -> Operations.AdminConversationsSetConversationPrefs.Output {
        try await adminConversationsSetConversationPrefs(Operations.AdminConversationsSetConversationPrefs.Input(
            headers: headers,
            body: body
        ))
    }
    /// This API endpoint can be used by any admin to set a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.setCustomRetention/post(adminConversationsSetCustomRetention)`.
    public func adminConversationsSetCustomRetention(
        headers: Operations.AdminConversationsSetCustomRetention.Input.Headers = .init(),
        body: Operations.AdminConversationsSetCustomRetention.Input.Body
    ) async throws -> Operations.AdminConversationsSetCustomRetention.Output {
        try await adminConversationsSetCustomRetention(Operations.AdminConversationsSetCustomRetention.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the workspaces in an Enterprise grid org that connect to a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setTeams`.
    /// - Remark: Generated from `#/paths//admin.conversations.setTeams/post(adminConversationsSetTeams)`.
    public func adminConversationsSetTeams(
        headers: Operations.AdminConversationsSetTeams.Input.Headers = .init(),
        body: Operations.AdminConversationsSetTeams.Input.Body
    ) async throws -> Operations.AdminConversationsSetTeams.Output {
        try await adminConversationsSetTeams(Operations.AdminConversationsSetTeams.Input(
            headers: headers,
            body: body
        ))
    }
    /// Unarchive a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.unarchive`.
    /// - Remark: Generated from `#/paths//admin.conversations.unarchive/post(adminConversationsUnarchive)`.
    public func adminConversationsUnarchive(
        headers: Operations.AdminConversationsUnarchive.Input.Headers = .init(),
        body: Operations.AdminConversationsUnarchive.Input.Body
    ) async throws -> Operations.AdminConversationsUnarchive.Output {
        try await adminConversationsUnarchive(Operations.AdminConversationsUnarchive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Add an emoji.
    ///
    /// - Remark: HTTP `POST /admin.emoji.add`.
    /// - Remark: Generated from `#/paths//admin.emoji.add/post(adminEmojiAdd)`.
    public func adminEmojiAdd(
        headers: Operations.AdminEmojiAdd.Input.Headers = .init(),
        body: Operations.AdminEmojiAdd.Input.Body
    ) async throws -> Operations.AdminEmojiAdd.Output {
        try await adminEmojiAdd(Operations.AdminEmojiAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Add an emoji alias.
    ///
    /// - Remark: HTTP `POST /admin.emoji.addAlias`.
    /// - Remark: Generated from `#/paths//admin.emoji.addAlias/post(adminEmojiAddAlias)`.
    public func adminEmojiAddAlias(
        headers: Operations.AdminEmojiAddAlias.Input.Headers = .init(),
        body: Operations.AdminEmojiAddAlias.Input.Body
    ) async throws -> Operations.AdminEmojiAddAlias.Output {
        try await adminEmojiAddAlias(Operations.AdminEmojiAddAlias.Input(
            headers: headers,
            body: body
        ))
    }
    /// List emoji for an Enterprise Grid organization.
    ///
    /// - Remark: HTTP `POST /admin.emoji.list`.
    /// - Remark: Generated from `#/paths//admin.emoji.list/post(adminEmojiList)`.
    public func adminEmojiList(
        headers: Operations.AdminEmojiList.Input.Headers = .init(),
        body: Operations.AdminEmojiList.Input.Body
    ) async throws -> Operations.AdminEmojiList.Output {
        try await adminEmojiList(Operations.AdminEmojiList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove an emoji across an Enterprise Grid organization
    ///
    /// - Remark: HTTP `POST /admin.emoji.remove`.
    /// - Remark: Generated from `#/paths//admin.emoji.remove/post(adminEmojiRemove)`.
    public func adminEmojiRemove(
        headers: Operations.AdminEmojiRemove.Input.Headers = .init(),
        body: Operations.AdminEmojiRemove.Input.Body
    ) async throws -> Operations.AdminEmojiRemove.Output {
        try await adminEmojiRemove(Operations.AdminEmojiRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Rename an emoji.
    ///
    /// - Remark: HTTP `POST /admin.emoji.rename`.
    /// - Remark: Generated from `#/paths//admin.emoji.rename/post(adminEmojiRename)`.
    public func adminEmojiRename(
        headers: Operations.AdminEmojiRename.Input.Headers = .init(),
        body: Operations.AdminEmojiRename.Input.Body
    ) async throws -> Operations.AdminEmojiRename.Output {
        try await adminEmojiRename(Operations.AdminEmojiRename.Input(
            headers: headers,
            body: body
        ))
    }
    /// Look up functions by a set of apps
    ///
    /// - Remark: HTTP `POST /admin.functions.list`.
    /// - Remark: Generated from `#/paths//admin.functions.list/post(adminFunctionsList)`.
    public func adminFunctionsList(
        headers: Operations.AdminFunctionsList.Input.Headers = .init(),
        body: Operations.AdminFunctionsList.Input.Body
    ) async throws -> Operations.AdminFunctionsList.Output {
        try await adminFunctionsList(Operations.AdminFunctionsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lookup the visibility of multiple Slack functions and include the users if it is limited to particular named entities.
    ///
    /// - Remark: HTTP `POST /admin.functions.permissions.lookup`.
    /// - Remark: Generated from `#/paths//admin.functions.permissions.lookup/post(adminFunctionsPermissionsLookup)`.
    public func adminFunctionsPermissionsLookup(
        headers: Operations.AdminFunctionsPermissionsLookup.Input.Headers = .init(),
        body: Operations.AdminFunctionsPermissionsLookup.Input.Body
    ) async throws -> Operations.AdminFunctionsPermissionsLookup.Output {
        try await adminFunctionsPermissionsLookup(Operations.AdminFunctionsPermissionsLookup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the visibility of a Slack function and define the users or workspaces if it is set to named_entities
    ///
    /// - Remark: HTTP `POST /admin.functions.permissions.set`.
    /// - Remark: Generated from `#/paths//admin.functions.permissions.set/post(adminFunctionsPermissionsSet)`.
    public func adminFunctionsPermissionsSet(
        headers: Operations.AdminFunctionsPermissionsSet.Input.Headers = .init(),
        body: Operations.AdminFunctionsPermissionsSet.Input.Body
    ) async throws -> Operations.AdminFunctionsPermissionsSet.Output {
        try await adminFunctionsPermissionsSet(Operations.AdminFunctionsPermissionsSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Approve a workspace invite request.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.approve`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.approve/post(adminInviteRequestsApprove)`.
    public func adminInviteRequestsApprove(
        headers: Operations.AdminInviteRequestsApprove.Input.Headers = .init(),
        body: Operations.AdminInviteRequestsApprove.Input.Body
    ) async throws -> Operations.AdminInviteRequestsApprove.Output {
        try await adminInviteRequestsApprove(Operations.AdminInviteRequestsApprove.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all approved workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.approved.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.approved.list/post(adminInviteRequestsApprovedList)`.
    public func adminInviteRequestsApprovedList(
        headers: Operations.AdminInviteRequestsApprovedList.Input.Headers = .init(),
        body: Operations.AdminInviteRequestsApprovedList.Input.Body
    ) async throws -> Operations.AdminInviteRequestsApprovedList.Output {
        try await adminInviteRequestsApprovedList(Operations.AdminInviteRequestsApprovedList.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all denied workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.denied.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.denied.list/post(adminInviteRequestsDeniedList)`.
    public func adminInviteRequestsDeniedList(
        headers: Operations.AdminInviteRequestsDeniedList.Input.Headers = .init(),
        body: Operations.AdminInviteRequestsDeniedList.Input.Body
    ) async throws -> Operations.AdminInviteRequestsDeniedList.Output {
        try await adminInviteRequestsDeniedList(Operations.AdminInviteRequestsDeniedList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deny a workspace invite request.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.deny`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.deny/post(adminInviteRequestsDeny)`.
    public func adminInviteRequestsDeny(
        headers: Operations.AdminInviteRequestsDeny.Input.Headers = .init(),
        body: Operations.AdminInviteRequestsDeny.Input.Body
    ) async throws -> Operations.AdminInviteRequestsDeny.Output {
        try await adminInviteRequestsDeny(Operations.AdminInviteRequestsDeny.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all pending workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.list/post(adminInviteRequestsList)`.
    public func adminInviteRequestsList(
        headers: Operations.AdminInviteRequestsList.Input.Headers = .init(),
        body: Operations.AdminInviteRequestsList.Input.Body
    ) async throws -> Operations.AdminInviteRequestsList.Output {
        try await adminInviteRequestsList(Operations.AdminInviteRequestsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Adds members to the specified role with the specified scopes
    ///
    /// - Remark: HTTP `POST /admin.roles.addAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.addAssignments/post(adminRolesAddAssignments)`.
    public func adminRolesAddAssignments(
        headers: Operations.AdminRolesAddAssignments.Input.Headers = .init(),
        body: Operations.AdminRolesAddAssignments.Input.Body
    ) async throws -> Operations.AdminRolesAddAssignments.Output {
        try await adminRolesAddAssignments(Operations.AdminRolesAddAssignments.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists assignments for all roles across entities. Options to scope results by any combination of roles or entities
    ///
    /// - Remark: HTTP `POST /admin.roles.listAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.listAssignments/post(adminRolesListAssignments)`.
    public func adminRolesListAssignments(
        headers: Operations.AdminRolesListAssignments.Input.Headers = .init(),
        body: Operations.AdminRolesListAssignments.Input.Body
    ) async throws -> Operations.AdminRolesListAssignments.Output {
        try await adminRolesListAssignments(Operations.AdminRolesListAssignments.Input(
            headers: headers,
            body: body
        ))
    }
    /// Removes a set of users from a role for the given scopes and entities
    ///
    /// - Remark: HTTP `POST /admin.roles.removeAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.removeAssignments/post(adminRolesRemoveAssignments)`.
    public func adminRolesRemoveAssignments(
        headers: Operations.AdminRolesRemoveAssignments.Input.Headers = .init(),
        body: Operations.AdminRolesRemoveAssignments.Input.Body
    ) async throws -> Operations.AdminRolesRemoveAssignments.Output {
        try await adminRolesRemoveAssignments(Operations.AdminRolesRemoveAssignments.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all of the admins on a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.admins.list`.
    /// - Remark: Generated from `#/paths//admin.teams.admins.list/post(adminTeamsAdminsList)`.
    public func adminTeamsAdminsList(
        headers: Operations.AdminTeamsAdminsList.Input.Headers = .init(),
        body: Operations.AdminTeamsAdminsList.Input.Body
    ) async throws -> Operations.AdminTeamsAdminsList.Output {
        try await adminTeamsAdminsList(Operations.AdminTeamsAdminsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create an Enterprise team.
    ///
    /// - Remark: HTTP `POST /admin.teams.create`.
    /// - Remark: Generated from `#/paths//admin.teams.create/post(adminTeamsCreate)`.
    public func adminTeamsCreate(
        headers: Operations.AdminTeamsCreate.Input.Headers = .init(),
        body: Operations.AdminTeamsCreate.Input.Body
    ) async throws -> Operations.AdminTeamsCreate.Output {
        try await adminTeamsCreate(Operations.AdminTeamsCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all teams on an Enterprise organization
    ///
    /// - Remark: HTTP `POST /admin.teams.list`.
    /// - Remark: Generated from `#/paths//admin.teams.list/post(adminTeamsList)`.
    public func adminTeamsList(
        headers: Operations.AdminTeamsList.Input.Headers = .init(),
        body: Operations.AdminTeamsList.Input.Body
    ) async throws -> Operations.AdminTeamsList.Output {
        try await adminTeamsList(Operations.AdminTeamsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all of the owners on a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.owners.list`.
    /// - Remark: Generated from `#/paths//admin.teams.owners.list/post(adminTeamsOwnersList)`.
    public func adminTeamsOwnersList(
        headers: Operations.AdminTeamsOwnersList.Input.Headers = .init(),
        body: Operations.AdminTeamsOwnersList.Input.Body
    ) async throws -> Operations.AdminTeamsOwnersList.Output {
        try await adminTeamsOwnersList(Operations.AdminTeamsOwnersList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Fetch information about settings in a workspace
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.info`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.info/post(adminTeamsSettingsInfo)`.
    public func adminTeamsSettingsInfo(
        headers: Operations.AdminTeamsSettingsInfo.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsInfo.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsInfo.Output {
        try await adminTeamsSettingsInfo(Operations.AdminTeamsSettingsInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the default channels of a workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDefaultChannels`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDefaultChannels/post(adminTeamsSettingsSetDefaultChannels)`.
    public func adminTeamsSettingsSetDefaultChannels(
        headers: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsSetDefaultChannels.Output {
        try await adminTeamsSettingsSetDefaultChannels(Operations.AdminTeamsSettingsSetDefaultChannels.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the description of a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDescription`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDescription/post(adminTeamsSettingsSetDescription)`.
    public func adminTeamsSettingsSetDescription(
        headers: Operations.AdminTeamsSettingsSetDescription.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsSetDescription.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsSetDescription.Output {
        try await adminTeamsSettingsSetDescription(Operations.AdminTeamsSettingsSetDescription.Input(
            headers: headers,
            body: body
        ))
    }
    /// An API method that allows admins to set the discoverability of a given workspace
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDiscoverability`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDiscoverability/post(adminTeamsSettingsSetDiscoverability)`.
    public func adminTeamsSettingsSetDiscoverability(
        headers: Operations.AdminTeamsSettingsSetDiscoverability.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsSetDiscoverability.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsSetDiscoverability.Output {
        try await adminTeamsSettingsSetDiscoverability(Operations.AdminTeamsSettingsSetDiscoverability.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sets the icon of a workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setIcon`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setIcon/post(adminTeamsSettingsSetIcon)`.
    public func adminTeamsSettingsSetIcon(
        headers: Operations.AdminTeamsSettingsSetIcon.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsSetIcon.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsSetIcon.Output {
        try await adminTeamsSettingsSetIcon(Operations.AdminTeamsSettingsSetIcon.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the name of a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setName`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setName/post(adminTeamsSettingsSetName)`.
    public func adminTeamsSettingsSetName(
        headers: Operations.AdminTeamsSettingsSetName.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsSetName.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsSetName.Output {
        try await adminTeamsSettingsSetName(Operations.AdminTeamsSettingsSetName.Input(
            headers: headers,
            body: body
        ))
    }
    /// Add an Enterprise user to a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.assign`.
    /// - Remark: Generated from `#/paths//admin.users.assign/post(adminUsersAssign)`.
    public func adminUsersAssign(
        headers: Operations.AdminUsersAssign.Input.Headers = .init(),
        body: Operations.AdminUsersAssign.Input.Body
    ) async throws -> Operations.AdminUsersAssign.Output {
        try await adminUsersAssign(Operations.AdminUsersAssign.Input(
            headers: headers,
            body: body
        ))
    }
    /// Invite a user to a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.invite`.
    /// - Remark: Generated from `#/paths//admin.users.invite/post(adminUsersInvite)`.
    public func adminUsersInvite(
        headers: Operations.AdminUsersInvite.Input.Headers = .init(),
        body: Operations.AdminUsersInvite.Input.Body
    ) async throws -> Operations.AdminUsersInvite.Output {
        try await adminUsersInvite(Operations.AdminUsersInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// List users on a workspace
    ///
    /// - Remark: HTTP `POST /admin.users.list`.
    /// - Remark: Generated from `#/paths//admin.users.list/post(adminUsersList)`.
    public func adminUsersList(
        headers: Operations.AdminUsersList.Input.Headers = .init(),
        body: Operations.AdminUsersList.Input.Body
    ) async throws -> Operations.AdminUsersList.Output {
        try await adminUsersList(Operations.AdminUsersList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove a user from a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.remove`.
    /// - Remark: Generated from `#/paths//admin.users.remove/post(adminUsersRemove)`.
    public func adminUsersRemove(
        headers: Operations.AdminUsersRemove.Input.Headers = .init(),
        body: Operations.AdminUsersRemove.Input.Body
    ) async throws -> Operations.AdminUsersRemove.Output {
        try await adminUsersRemove(Operations.AdminUsersRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Clear user-specific session settings—the session duration and what happens when the client closes—for a list of users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.clearSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.clearSettings/post(adminUsersSessionClearSettings)`.
    public func adminUsersSessionClearSettings(
        headers: Operations.AdminUsersSessionClearSettings.Input.Headers = .init(),
        body: Operations.AdminUsersSessionClearSettings.Input.Body
    ) async throws -> Operations.AdminUsersSessionClearSettings.Output {
        try await adminUsersSessionClearSettings(Operations.AdminUsersSessionClearSettings.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get user-specific session settings—the session duration and what happens when the client closes—given a list of users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.getSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.getSettings/post(adminUsersSessionGetSettings)`.
    public func adminUsersSessionGetSettings(
        headers: Operations.AdminUsersSessionGetSettings.Input.Headers = .init(),
        body: Operations.AdminUsersSessionGetSettings.Input.Body
    ) async throws -> Operations.AdminUsersSessionGetSettings.Output {
        try await adminUsersSessionGetSettings(Operations.AdminUsersSessionGetSettings.Input(
            headers: headers,
            body: body
        ))
    }
    /// Revoke a single session for a user. The user will be forced to login to Slack.
    ///
    /// - Remark: HTTP `POST /admin.users.session.invalidate`.
    /// - Remark: Generated from `#/paths//admin.users.session.invalidate/post(adminUsersSessionInvalidate)`.
    public func adminUsersSessionInvalidate(
        headers: Operations.AdminUsersSessionInvalidate.Input.Headers = .init(),
        body: Operations.AdminUsersSessionInvalidate.Input.Body
    ) async throws -> Operations.AdminUsersSessionInvalidate.Output {
        try await adminUsersSessionInvalidate(Operations.AdminUsersSessionInvalidate.Input(
            headers: headers,
            body: body
        ))
    }
    /// List active user sessions for an organization
    ///
    /// - Remark: HTTP `POST /admin.users.session.list`.
    /// - Remark: Generated from `#/paths//admin.users.session.list/post(adminUsersSessionList)`.
    public func adminUsersSessionList(
        headers: Operations.AdminUsersSessionList.Input.Headers = .init(),
        body: Operations.AdminUsersSessionList.Input.Body
    ) async throws -> Operations.AdminUsersSessionList.Output {
        try await adminUsersSessionList(Operations.AdminUsersSessionList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Wipes all valid sessions on all devices for a given user
    ///
    /// - Remark: HTTP `POST /admin.users.session.reset`.
    /// - Remark: Generated from `#/paths//admin.users.session.reset/post(adminUsersSessionReset)`.
    public func adminUsersSessionReset(
        headers: Operations.AdminUsersSessionReset.Input.Headers = .init(),
        body: Operations.AdminUsersSessionReset.Input.Body
    ) async throws -> Operations.AdminUsersSessionReset.Output {
        try await adminUsersSessionReset(Operations.AdminUsersSessionReset.Input(
            headers: headers,
            body: body
        ))
    }
    /// Enqueues an asynchronous job to wipe all valid sessions on all devices for a given list of users
    ///
    /// - Remark: HTTP `POST /admin.users.session.resetBulk`.
    /// - Remark: Generated from `#/paths//admin.users.session.resetBulk/post(adminUsersSessionResetBulk)`.
    public func adminUsersSessionResetBulk(
        headers: Operations.AdminUsersSessionResetBulk.Input.Headers = .init(),
        body: Operations.AdminUsersSessionResetBulk.Input.Body
    ) async throws -> Operations.AdminUsersSessionResetBulk.Output {
        try await adminUsersSessionResetBulk(Operations.AdminUsersSessionResetBulk.Input(
            headers: headers,
            body: body
        ))
    }
    /// Configure the user-level session settings—the session duration and what happens when the client closes—for one or more users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.setSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.setSettings/post(adminUsersSessionSetSettings)`.
    public func adminUsersSessionSetSettings(
        headers: Operations.AdminUsersSessionSetSettings.Input.Headers = .init(),
        body: Operations.AdminUsersSessionSetSettings.Input.Body
    ) async throws -> Operations.AdminUsersSessionSetSettings.Output {
        try await adminUsersSessionSetSettings(Operations.AdminUsersSessionSetSettings.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set an existing regular user or owner to be a workspace admin.
    ///
    /// - Remark: HTTP `POST /admin.users.setAdmin`.
    /// - Remark: Generated from `#/paths//admin.users.setAdmin/post(adminUsersSetAdmin)`.
    public func adminUsersSetAdmin(
        headers: Operations.AdminUsersSetAdmin.Input.Headers = .init(),
        body: Operations.AdminUsersSetAdmin.Input.Body
    ) async throws -> Operations.AdminUsersSetAdmin.Output {
        try await adminUsersSetAdmin(Operations.AdminUsersSetAdmin.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set an expiration for a guest user
    ///
    /// - Remark: HTTP `POST /admin.users.setExpiration`.
    /// - Remark: Generated from `#/paths//admin.users.setExpiration/post(adminUsersSetExpiration)`.
    public func adminUsersSetExpiration(
        headers: Operations.AdminUsersSetExpiration.Input.Headers = .init(),
        body: Operations.AdminUsersSetExpiration.Input.Body
    ) async throws -> Operations.AdminUsersSetExpiration.Output {
        try await adminUsersSetExpiration(Operations.AdminUsersSetExpiration.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set an existing regular user or admin to be a workspace owner.
    ///
    /// - Remark: HTTP `POST /admin.users.setOwner`.
    /// - Remark: Generated from `#/paths//admin.users.setOwner/post(adminUsersSetOwner)`.
    public func adminUsersSetOwner(
        headers: Operations.AdminUsersSetOwner.Input.Headers = .init(),
        body: Operations.AdminUsersSetOwner.Input.Body
    ) async throws -> Operations.AdminUsersSetOwner.Output {
        try await adminUsersSetOwner(Operations.AdminUsersSetOwner.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set an existing guest user, admin user, or owner to be a regular user.
    ///
    /// - Remark: HTTP `POST /admin.users.setRegular`.
    /// - Remark: Generated from `#/paths//admin.users.setRegular/post(adminUsersSetRegular)`.
    public func adminUsersSetRegular(
        headers: Operations.AdminUsersSetRegular.Input.Headers = .init(),
        body: Operations.AdminUsersSetRegular.Input.Body
    ) async throws -> Operations.AdminUsersSetRegular.Output {
        try await adminUsersSetRegular(Operations.AdminUsersSetRegular.Input(
            headers: headers,
            body: body
        ))
    }
    /// Ask Slackbot to send you an export listing all workspace members using unsupported software, presented as a zipped CSV file.
    ///
    /// - Remark: HTTP `POST /admin.users.unsupportedVersions.export`.
    /// - Remark: Generated from `#/paths//admin.users.unsupportedVersions.export/post(adminUsersUnsupportedVersionsExport)`.
    public func adminUsersUnsupportedVersionsExport(
        headers: Operations.AdminUsersUnsupportedVersionsExport.Input.Headers = .init(),
        body: Operations.AdminUsersUnsupportedVersionsExport.Input.Body
    ) async throws -> Operations.AdminUsersUnsupportedVersionsExport.Output {
        try await adminUsersUnsupportedVersionsExport(Operations.AdminUsersUnsupportedVersionsExport.Input(
            headers: headers,
            body: body
        ))
    }
    /// Generate a temporary Socket Mode WebSocket URL that your app can connect to in order to receive events and interactive payloads over.
    ///
    /// - Remark: HTTP `POST /apps.connections.open`.
    /// - Remark: Generated from `#/paths//apps.connections.open/post(appsConnectionsOpen)`.
    #endif
    #if WebAPI_Apps
    public func appsConnectionsOpen(
        headers: Operations.AppsConnectionsOpen.Input.Headers = .init(),
        body: Operations.AppsConnectionsOpen.Input.Body? = nil
    ) async throws -> Operations.AppsConnectionsOpen.Output {
        try await appsConnectionsOpen(Operations.AppsConnectionsOpen.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
    ///
    /// - Remark: HTTP `POST /apps.event.authorizations.list`.
    /// - Remark: Generated from `#/paths//apps.event.authorizations.list/post(appsEventAuthorizationsList)`.
    public func appsEventAuthorizationsList(
        headers: Operations.AppsEventAuthorizationsList.Input.Headers = .init(),
        body: Operations.AppsEventAuthorizationsList.Input.Body
    ) async throws -> Operations.AppsEventAuthorizationsList.Output {
        try await appsEventAuthorizationsList(Operations.AppsEventAuthorizationsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create an app from an app manifest.
    ///
    /// - Remark: HTTP `POST /apps.manifest.create`.
    /// - Remark: Generated from `#/paths//apps.manifest.create/post(appsManifestCreate)`.
    public func appsManifestCreate(
        headers: Operations.AppsManifestCreate.Input.Headers = .init(),
        body: Operations.AppsManifestCreate.Input.Body
    ) async throws -> Operations.AppsManifestCreate.Output {
        try await appsManifestCreate(Operations.AppsManifestCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Permanently deletes an app created through app manifests
    ///
    /// - Remark: HTTP `POST /apps.manifest.delete`.
    /// - Remark: Generated from `#/paths//apps.manifest.delete/post(appsManifestDelete)`.
    public func appsManifestDelete(
        headers: Operations.AppsManifestDelete.Input.Headers = .init(),
        body: Operations.AppsManifestDelete.Input.Body
    ) async throws -> Operations.AppsManifestDelete.Output {
        try await appsManifestDelete(Operations.AppsManifestDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Export an app manifest from an existing app
    ///
    /// - Remark: HTTP `POST /apps.manifest.export`.
    /// - Remark: Generated from `#/paths//apps.manifest.export/post(appsManifestExport)`.
    public func appsManifestExport(
        headers: Operations.AppsManifestExport.Input.Headers = .init(),
        body: Operations.AppsManifestExport.Input.Body
    ) async throws -> Operations.AppsManifestExport.Output {
        try await appsManifestExport(Operations.AppsManifestExport.Input(
            headers: headers,
            body: body
        ))
    }
    /// Update an app from an app manifest
    ///
    /// - Remark: HTTP `POST /apps.manifest.update`.
    /// - Remark: Generated from `#/paths//apps.manifest.update/post(appsManifestUpdate)`.
    public func appsManifestUpdate(
        headers: Operations.AppsManifestUpdate.Input.Headers = .init(),
        body: Operations.AppsManifestUpdate.Input.Body
    ) async throws -> Operations.AppsManifestUpdate.Output {
        try await appsManifestUpdate(Operations.AppsManifestUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Validate an app manifest
    ///
    /// - Remark: HTTP `POST /apps.manifest.validate`.
    /// - Remark: Generated from `#/paths//apps.manifest.validate/post(appsManifestValidate)`.
    public func appsManifestValidate(
        headers: Operations.AppsManifestValidate.Input.Headers = .init(),
        body: Operations.AppsManifestValidate.Input.Body
    ) async throws -> Operations.AppsManifestValidate.Output {
        try await appsManifestValidate(Operations.AppsManifestValidate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Uninstalls your app from a workspace.
    ///
    /// - Remark: HTTP `POST /apps.uninstall`.
    /// - Remark: Generated from `#/paths//apps.uninstall/post(appsUninstall)`.
    public func appsUninstall(
        headers: Operations.AppsUninstall.Input.Headers = .init(),
        body: Operations.AppsUninstall.Input.Body
    ) async throws -> Operations.AppsUninstall.Output {
        try await appsUninstall(Operations.AppsUninstall.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the status for an AI assistant thread.
    ///
    /// - Remark: HTTP `POST /assistant.threads.setStatus`.
    /// - Remark: Generated from `#/paths//assistant.threads.setStatus/post(assistantThreadsSetStatus)`.
    #endif
    #if WebAPI_Assistant
    public func assistantThreadsSetStatus(
        headers: Operations.AssistantThreadsSetStatus.Input.Headers = .init(),
        body: Operations.AssistantThreadsSetStatus.Input.Body
    ) async throws -> Operations.AssistantThreadsSetStatus.Output {
        try await assistantThreadsSetStatus(Operations.AssistantThreadsSetStatus.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set suggested prompts for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setSuggestedPrompts`.
    /// - Remark: Generated from `#/paths//assistant.threads.setSuggestedPrompts/post(assistantThreadsSetSuggestedPrompts)`.
    public func assistantThreadsSetSuggestedPrompts(
        headers: Operations.AssistantThreadsSetSuggestedPrompts.Input.Headers = .init(),
        body: Operations.AssistantThreadsSetSuggestedPrompts.Input.Body
    ) async throws -> Operations.AssistantThreadsSetSuggestedPrompts.Output {
        try await assistantThreadsSetSuggestedPrompts(Operations.AssistantThreadsSetSuggestedPrompts.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the title for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setTitle`.
    /// - Remark: Generated from `#/paths//assistant.threads.setTitle/post(assistantThreadsSetTitle)`.
    public func assistantThreadsSetTitle(
        headers: Operations.AssistantThreadsSetTitle.Input.Headers = .init(),
        body: Operations.AssistantThreadsSetTitle.Input.Body
    ) async throws -> Operations.AssistantThreadsSetTitle.Output {
        try await assistantThreadsSetTitle(Operations.AssistantThreadsSetTitle.Input(
            headers: headers,
            body: body
        ))
    }
    /// Revokes a token.
    ///
    /// - Remark: HTTP `POST /auth.revoke`.
    /// - Remark: Generated from `#/paths//auth.revoke/post(authRevoke)`.
    #endif
    #if WebAPI_Auth
    public func authRevoke(
        headers: Operations.AuthRevoke.Input.Headers = .init(),
        body: Operations.AuthRevoke.Input.Body
    ) async throws -> Operations.AuthRevoke.Output {
        try await authRevoke(Operations.AuthRevoke.Input(
            headers: headers,
            body: body
        ))
    }
    /// Obtain a full list of workspaces your org-wide app has been approved for.
    ///
    /// - Remark: HTTP `POST /auth.teams.list`.
    /// - Remark: Generated from `#/paths//auth.teams.list/post(authTeamsList)`.
    public func authTeamsList(
        headers: Operations.AuthTeamsList.Input.Headers = .init(),
        body: Operations.AuthTeamsList.Input.Body
    ) async throws -> Operations.AuthTeamsList.Output {
        try await authTeamsList(Operations.AuthTeamsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Checks authentication & identity.
    ///
    /// - Remark: HTTP `POST /auth.test`.
    /// - Remark: Generated from `#/paths//auth.test/post(authTest)`.
    public func authTest(
        headers: Operations.AuthTest.Input.Headers = .init(),
        body: Operations.AuthTest.Input.Body? = nil
    ) async throws -> Operations.AuthTest.Output {
        try await authTest(Operations.AuthTest.Input(
            headers: headers,
            body: body
        ))
    }
    /// Add bookmark to a channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.add`.
    /// - Remark: Generated from `#/paths//bookmarks.add/post(bookmarksAdd)`.
    #endif
    #if WebAPI_Bookmarks
    public func bookmarksAdd(
        headers: Operations.BookmarksAdd.Input.Headers = .init(),
        body: Operations.BookmarksAdd.Input.Body
    ) async throws -> Operations.BookmarksAdd.Output {
        try await bookmarksAdd(Operations.BookmarksAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Edit bookmark.
    ///
    /// - Remark: HTTP `POST /bookmarks.edit`.
    /// - Remark: Generated from `#/paths//bookmarks.edit/post(bookmarksEdit)`.
    public func bookmarksEdit(
        headers: Operations.BookmarksEdit.Input.Headers = .init(),
        body: Operations.BookmarksEdit.Input.Body
    ) async throws -> Operations.BookmarksEdit.Output {
        try await bookmarksEdit(Operations.BookmarksEdit.Input(
            headers: headers,
            body: body
        ))
    }
    /// List bookmark for the channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.list`.
    /// - Remark: Generated from `#/paths//bookmarks.list/post(bookmarksList)`.
    public func bookmarksList(
        headers: Operations.BookmarksList.Input.Headers = .init(),
        body: Operations.BookmarksList.Input.Body
    ) async throws -> Operations.BookmarksList.Output {
        try await bookmarksList(Operations.BookmarksList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove bookmark from the channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.remove`.
    /// - Remark: Generated from `#/paths//bookmarks.remove/post(bookmarksRemove)`.
    public func bookmarksRemove(
        headers: Operations.BookmarksRemove.Input.Headers = .init(),
        body: Operations.BookmarksRemove.Input.Body
    ) async throws -> Operations.BookmarksRemove.Output {
        try await bookmarksRemove(Operations.BookmarksRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets information about a bot user.
    ///
    /// - Remark: HTTP `POST /bots.info`.
    /// - Remark: Generated from `#/paths//bots.info/post(botsInfo)`.
    #endif
    #if WebAPI_Bots
    public func botsInfo(
        headers: Operations.BotsInfo.Input.Headers = .init(),
        body: Operations.BotsInfo.Input.Body
    ) async throws -> Operations.BotsInfo.Output {
        try await botsInfo(Operations.BotsInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove access to a canvas for specified entities
    ///
    /// - Remark: HTTP `POST /canvases.access.delete`.
    /// - Remark: Generated from `#/paths//canvases.access.delete/post(canvasesAccessDelete)`.
    #endif
    #if WebAPI_Canvases
    public func canvasesAccessDelete(
        headers: Operations.CanvasesAccessDelete.Input.Headers = .init(),
        body: Operations.CanvasesAccessDelete.Input.Body
    ) async throws -> Operations.CanvasesAccessDelete.Output {
        try await canvasesAccessDelete(Operations.CanvasesAccessDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sets the access level to a canvas for specified entities
    ///
    /// - Remark: HTTP `POST /canvases.access.set`.
    /// - Remark: Generated from `#/paths//canvases.access.set/post(canvasesAccessSet)`.
    public func canvasesAccessSet(
        headers: Operations.CanvasesAccessSet.Input.Headers = .init(),
        body: Operations.CanvasesAccessSet.Input.Body
    ) async throws -> Operations.CanvasesAccessSet.Output {
        try await canvasesAccessSet(Operations.CanvasesAccessSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create canvas for a user
    ///
    /// - Remark: HTTP `POST /canvases.create`.
    /// - Remark: Generated from `#/paths//canvases.create/post(canvasesCreate)`.
    public func canvasesCreate(
        headers: Operations.CanvasesCreate.Input.Headers = .init(),
        body: Operations.CanvasesCreate.Input.Body
    ) async throws -> Operations.CanvasesCreate.Output {
        try await canvasesCreate(Operations.CanvasesCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a canvas
    ///
    /// - Remark: HTTP `POST /canvases.delete`.
    /// - Remark: Generated from `#/paths//canvases.delete/post(canvasesDelete)`.
    public func canvasesDelete(
        headers: Operations.CanvasesDelete.Input.Headers = .init(),
        body: Operations.CanvasesDelete.Input.Body
    ) async throws -> Operations.CanvasesDelete.Output {
        try await canvasesDelete(Operations.CanvasesDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Update an existing canvas
    ///
    /// - Remark: HTTP `POST /canvases.edit`.
    /// - Remark: Generated from `#/paths//canvases.edit/post(canvasesEdit)`.
    public func canvasesEdit(
        headers: Operations.CanvasesEdit.Input.Headers = .init(),
        body: Operations.CanvasesEdit.Input.Body
    ) async throws -> Operations.CanvasesEdit.Output {
        try await canvasesEdit(Operations.CanvasesEdit.Input(
            headers: headers,
            body: body
        ))
    }
    /// Find sections matching the provided criteria
    ///
    /// - Remark: HTTP `POST /canvases.sections.lookup`.
    /// - Remark: Generated from `#/paths//canvases.sections.lookup/post(canvasesSectionsLookup)`.
    public func canvasesSectionsLookup(
        headers: Operations.CanvasesSectionsLookup.Input.Headers = .init(),
        body: Operations.CanvasesSectionsLookup.Input.Body
    ) async throws -> Operations.CanvasesSectionsLookup.Output {
        try await canvasesSectionsLookup(Operations.CanvasesSectionsLookup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a message.
    ///
    /// - Remark: HTTP `POST /chat.delete`.
    /// - Remark: Generated from `#/paths//chat.delete/post(chatDelete)`.
    #endif
    #if WebAPI_Chat
    public func chatDelete(
        headers: Operations.ChatDelete.Input.Headers = .init(),
        body: Operations.ChatDelete.Input.Body
    ) async throws -> Operations.ChatDelete.Output {
        try await chatDelete(Operations.ChatDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a pending scheduled message from the queue.
    ///
    /// - Remark: HTTP `POST /chat.deleteScheduledMessage`.
    /// - Remark: Generated from `#/paths//chat.deleteScheduledMessage/post(chatDeleteScheduledMessage)`.
    public func chatDeleteScheduledMessage(
        headers: Operations.ChatDeleteScheduledMessage.Input.Headers = .init(),
        body: Operations.ChatDeleteScheduledMessage.Input.Body
    ) async throws -> Operations.ChatDeleteScheduledMessage.Output {
        try await chatDeleteScheduledMessage(Operations.ChatDeleteScheduledMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a permalink URL for a specific extant message
    ///
    /// - Remark: HTTP `POST /chat.getPermalink`.
    /// - Remark: Generated from `#/paths//chat.getPermalink/post(chatGetPermalink)`.
    public func chatGetPermalink(
        headers: Operations.ChatGetPermalink.Input.Headers = .init(),
        body: Operations.ChatGetPermalink.Input.Body
    ) async throws -> Operations.ChatGetPermalink.Output {
        try await chatGetPermalink(Operations.ChatGetPermalink.Input(
            headers: headers,
            body: body
        ))
    }
    /// Share a me message into a channel.
    ///
    /// - Remark: HTTP `POST /chat.meMessage`.
    /// - Remark: Generated from `#/paths//chat.meMessage/post(chatMeMessage)`.
    public func chatMeMessage(
        headers: Operations.ChatMeMessage.Input.Headers = .init(),
        body: Operations.ChatMeMessage.Input.Body
    ) async throws -> Operations.ChatMeMessage.Output {
        try await chatMeMessage(Operations.ChatMeMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sends an ephemeral message to a user in a channel.
    ///
    /// - Remark: HTTP `POST /chat.postEphemeral`.
    /// - Remark: Generated from `#/paths//chat.postEphemeral/post(chatPostEphemeral)`.
    public func chatPostEphemeral(
        headers: Operations.ChatPostEphemeral.Input.Headers = .init(),
        body: Operations.ChatPostEphemeral.Input.Body
    ) async throws -> Operations.ChatPostEphemeral.Output {
        try await chatPostEphemeral(Operations.ChatPostEphemeral.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sends a message to a channel.
    ///
    /// - Remark: HTTP `POST /chat.postMessage`.
    /// - Remark: Generated from `#/paths//chat.postMessage/post(chatPostMessage)`.
    public func chatPostMessage(
        headers: Operations.ChatPostMessage.Input.Headers = .init(),
        body: Operations.ChatPostMessage.Input.Body
    ) async throws -> Operations.ChatPostMessage.Output {
        try await chatPostMessage(Operations.ChatPostMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Schedules a message to be sent to a channel.
    ///
    /// - Remark: HTTP `POST /chat.scheduleMessage`.
    /// - Remark: Generated from `#/paths//chat.scheduleMessage/post(chatScheduleMessage)`.
    public func chatScheduleMessage(
        headers: Operations.ChatScheduleMessage.Input.Headers = .init(),
        body: Operations.ChatScheduleMessage.Input.Body
    ) async throws -> Operations.ChatScheduleMessage.Output {
        try await chatScheduleMessage(Operations.ChatScheduleMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns a list of scheduled messages.
    ///
    /// - Remark: HTTP `POST /chat.scheduledMessages.list`.
    /// - Remark: Generated from `#/paths//chat.scheduledMessages.list/post(chatScheduledMessagesList)`.
    public func chatScheduledMessagesList(
        headers: Operations.ChatScheduledMessagesList.Input.Headers = .init(),
        body: Operations.ChatScheduledMessagesList.Input.Body
    ) async throws -> Operations.ChatScheduledMessagesList.Output {
        try await chatScheduledMessagesList(Operations.ChatScheduledMessagesList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Provide custom unfurl behavior for user-posted URLs
    ///
    /// - Remark: HTTP `POST /chat.unfurl`.
    /// - Remark: Generated from `#/paths//chat.unfurl/post(chatUnfurl)`.
    public func chatUnfurl(
        headers: Operations.ChatUnfurl.Input.Headers = .init(),
        body: Operations.ChatUnfurl.Input.Body
    ) async throws -> Operations.ChatUnfurl.Output {
        try await chatUnfurl(Operations.ChatUnfurl.Input(
            headers: headers,
            body: body
        ))
    }
    /// Updates a message.
    ///
    /// - Remark: HTTP `POST /chat.update`.
    /// - Remark: Generated from `#/paths//chat.update/post(chatUpdate)`.
    public func chatUpdate(
        headers: Operations.ChatUpdate.Input.Headers = .init(),
        body: Operations.ChatUpdate.Input.Body
    ) async throws -> Operations.ChatUpdate.Output {
        try await chatUpdate(Operations.ChatUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Accepts an invitation to a Slack Connect channel.
    ///
    /// - Remark: HTTP `POST /conversations.acceptSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.acceptSharedInvite/post(conversationsAcceptSharedInvite)`.
    #endif
    #if WebAPI_Conversations
    public func conversationsAcceptSharedInvite(
        headers: Operations.ConversationsAcceptSharedInvite.Input.Headers = .init(),
        body: Operations.ConversationsAcceptSharedInvite.Input.Body
    ) async throws -> Operations.ConversationsAcceptSharedInvite.Output {
        try await conversationsAcceptSharedInvite(Operations.ConversationsAcceptSharedInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Approves an invitation to a Slack Connect channel
    ///
    /// - Remark: HTTP `POST /conversations.approveSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.approveSharedInvite/post(conversationsApproveSharedInvite)`.
    public func conversationsApproveSharedInvite(
        headers: Operations.ConversationsApproveSharedInvite.Input.Headers = .init(),
        body: Operations.ConversationsApproveSharedInvite.Input.Body
    ) async throws -> Operations.ConversationsApproveSharedInvite.Output {
        try await conversationsApproveSharedInvite(Operations.ConversationsApproveSharedInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Archives a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.archive`.
    /// - Remark: Generated from `#/paths//conversations.archive/post(conversationsArchive)`.
    public func conversationsArchive(
        headers: Operations.ConversationsArchive.Input.Headers = .init(),
        body: Operations.ConversationsArchive.Input.Body
    ) async throws -> Operations.ConversationsArchive.Output {
        try await conversationsArchive(Operations.ConversationsArchive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create a channel canvas for a channel
    ///
    /// - Remark: HTTP `POST /conversations.canvases.create`.
    /// - Remark: Generated from `#/paths//conversations.canvases.create/post(conversationsCanvasesCreate)`.
    public func conversationsCanvasesCreate(
        headers: Operations.ConversationsCanvasesCreate.Input.Headers = .init(),
        body: Operations.ConversationsCanvasesCreate.Input.Body
    ) async throws -> Operations.ConversationsCanvasesCreate.Output {
        try await conversationsCanvasesCreate(Operations.ConversationsCanvasesCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Closes a direct message or multi-person direct message.
    ///
    /// - Remark: HTTP `POST /conversations.close`.
    /// - Remark: Generated from `#/paths//conversations.close/post(conversationsClose)`.
    public func conversationsClose(
        headers: Operations.ConversationsClose.Input.Headers = .init(),
        body: Operations.ConversationsClose.Input.Body
    ) async throws -> Operations.ConversationsClose.Output {
        try await conversationsClose(Operations.ConversationsClose.Input(
            headers: headers,
            body: body
        ))
    }
    /// Initiates a public or private channel-based conversation
    ///
    /// - Remark: HTTP `POST /conversations.create`.
    /// - Remark: Generated from `#/paths//conversations.create/post(conversationsCreate)`.
    public func conversationsCreate(
        headers: Operations.ConversationsCreate.Input.Headers = .init(),
        body: Operations.ConversationsCreate.Input.Body
    ) async throws -> Operations.ConversationsCreate.Output {
        try await conversationsCreate(Operations.ConversationsCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Declines a Slack Connect channel invite.
    ///
    /// - Remark: HTTP `POST /conversations.declineSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.declineSharedInvite/post(conversationsDeclineSharedInvite)`.
    public func conversationsDeclineSharedInvite(
        headers: Operations.ConversationsDeclineSharedInvite.Input.Headers = .init(),
        body: Operations.ConversationsDeclineSharedInvite.Input.Body
    ) async throws -> Operations.ConversationsDeclineSharedInvite.Output {
        try await conversationsDeclineSharedInvite(Operations.ConversationsDeclineSharedInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Upgrade or downgrade Slack Connect channel permissions between 'can post only' and 'can post and invite'.
    ///
    /// - Remark: HTTP `POST /conversations.externalInvitePermissions.set`.
    /// - Remark: Generated from `#/paths//conversations.externalInvitePermissions.set/post(conversationsExternalInvitePermissionsSet)`.
    public func conversationsExternalInvitePermissionsSet(
        headers: Operations.ConversationsExternalInvitePermissionsSet.Input.Headers = .init(),
        body: Operations.ConversationsExternalInvitePermissionsSet.Input.Body
    ) async throws -> Operations.ConversationsExternalInvitePermissionsSet.Output {
        try await conversationsExternalInvitePermissionsSet(Operations.ConversationsExternalInvitePermissionsSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Fetches a conversation's history of messages and events.
    ///
    /// - Remark: HTTP `POST /conversations.history`.
    /// - Remark: Generated from `#/paths//conversations.history/post(conversationsHistory)`.
    public func conversationsHistory(
        headers: Operations.ConversationsHistory.Input.Headers = .init(),
        body: Operations.ConversationsHistory.Input.Body
    ) async throws -> Operations.ConversationsHistory.Output {
        try await conversationsHistory(Operations.ConversationsHistory.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve information about a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.info`.
    /// - Remark: Generated from `#/paths//conversations.info/post(conversationsInfo)`.
    public func conversationsInfo(
        headers: Operations.ConversationsInfo.Input.Headers = .init(),
        body: Operations.ConversationsInfo.Input.Body
    ) async throws -> Operations.ConversationsInfo.Output {
        try await conversationsInfo(Operations.ConversationsInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Invites users to a channel.
    ///
    /// - Remark: HTTP `POST /conversations.invite`.
    /// - Remark: Generated from `#/paths//conversations.invite/post(conversationsInvite)`.
    public func conversationsInvite(
        headers: Operations.ConversationsInvite.Input.Headers = .init(),
        body: Operations.ConversationsInvite.Input.Body
    ) async throws -> Operations.ConversationsInvite.Output {
        try await conversationsInvite(Operations.ConversationsInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sends an invitation to a Slack Connect channel
    ///
    /// - Remark: HTTP `POST /conversations.inviteShared`.
    /// - Remark: Generated from `#/paths//conversations.inviteShared/post(conversationsInviteShared)`.
    public func conversationsInviteShared(
        headers: Operations.ConversationsInviteShared.Input.Headers = .init(),
        body: Operations.ConversationsInviteShared.Input.Body
    ) async throws -> Operations.ConversationsInviteShared.Output {
        try await conversationsInviteShared(Operations.ConversationsInviteShared.Input(
            headers: headers,
            body: body
        ))
    }
    /// Joins an existing conversation.
    ///
    /// - Remark: HTTP `POST /conversations.join`.
    /// - Remark: Generated from `#/paths//conversations.join/post(conversationsJoin)`.
    public func conversationsJoin(
        headers: Operations.ConversationsJoin.Input.Headers = .init(),
        body: Operations.ConversationsJoin.Input.Body
    ) async throws -> Operations.ConversationsJoin.Output {
        try await conversationsJoin(Operations.ConversationsJoin.Input(
            headers: headers,
            body: body
        ))
    }
    /// Removes a user from a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.kick`.
    /// - Remark: Generated from `#/paths//conversations.kick/post(conversationsKick)`.
    public func conversationsKick(
        headers: Operations.ConversationsKick.Input.Headers = .init(),
        body: Operations.ConversationsKick.Input.Body
    ) async throws -> Operations.ConversationsKick.Output {
        try await conversationsKick(Operations.ConversationsKick.Input(
            headers: headers,
            body: body
        ))
    }
    /// Leaves a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.leave`.
    /// - Remark: Generated from `#/paths//conversations.leave/post(conversationsLeave)`.
    public func conversationsLeave(
        headers: Operations.ConversationsLeave.Input.Headers = .init(),
        body: Operations.ConversationsLeave.Input.Body
    ) async throws -> Operations.ConversationsLeave.Output {
        try await conversationsLeave(Operations.ConversationsLeave.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists all channels in a Slack team.
    ///
    /// - Remark: HTTP `POST /conversations.list`.
    /// - Remark: Generated from `#/paths//conversations.list/post(conversationsList)`.
    public func conversationsList(
        headers: Operations.ConversationsList.Input.Headers = .init(),
        body: Operations.ConversationsList.Input.Body
    ) async throws -> Operations.ConversationsList.Output {
        try await conversationsList(Operations.ConversationsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists shared channel invites that have been generated or received but have not been approved by all parties
    ///
    /// - Remark: HTTP `POST /conversations.listConnectInvites`.
    /// - Remark: Generated from `#/paths//conversations.listConnectInvites/post(conversationsListConnectInvites)`.
    public func conversationsListConnectInvites(
        headers: Operations.ConversationsListConnectInvites.Input.Headers = .init(),
        body: Operations.ConversationsListConnectInvites.Input.Body
    ) async throws -> Operations.ConversationsListConnectInvites.Output {
        try await conversationsListConnectInvites(Operations.ConversationsListConnectInvites.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sets the read cursor in a channel.
    ///
    /// - Remark: HTTP `POST /conversations.mark`.
    /// - Remark: Generated from `#/paths//conversations.mark/post(conversationsMark)`.
    public func conversationsMark(
        headers: Operations.ConversationsMark.Input.Headers = .init(),
        body: Operations.ConversationsMark.Input.Body
    ) async throws -> Operations.ConversationsMark.Output {
        try await conversationsMark(Operations.ConversationsMark.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve members of a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.members`.
    /// - Remark: Generated from `#/paths//conversations.members/post(conversationsMembers)`.
    public func conversationsMembers(
        headers: Operations.ConversationsMembers.Input.Headers = .init(),
        body: Operations.ConversationsMembers.Input.Body
    ) async throws -> Operations.ConversationsMembers.Output {
        try await conversationsMembers(Operations.ConversationsMembers.Input(
            headers: headers,
            body: body
        ))
    }
    /// Opens or resumes a direct message or multi-person direct message.
    ///
    /// - Remark: HTTP `POST /conversations.open`.
    /// - Remark: Generated from `#/paths//conversations.open/post(conversationsOpen)`.
    public func conversationsOpen(
        headers: Operations.ConversationsOpen.Input.Headers = .init(),
        body: Operations.ConversationsOpen.Input.Body
    ) async throws -> Operations.ConversationsOpen.Output {
        try await conversationsOpen(Operations.ConversationsOpen.Input(
            headers: headers,
            body: body
        ))
    }
    /// Renames a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.rename`.
    /// - Remark: Generated from `#/paths//conversations.rename/post(conversationsRename)`.
    public func conversationsRename(
        headers: Operations.ConversationsRename.Input.Headers = .init(),
        body: Operations.ConversationsRename.Input.Body
    ) async throws -> Operations.ConversationsRename.Output {
        try await conversationsRename(Operations.ConversationsRename.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a thread of messages posted to a conversation
    ///
    /// - Remark: HTTP `POST /conversations.replies`.
    /// - Remark: Generated from `#/paths//conversations.replies/post(conversationsReplies)`.
    public func conversationsReplies(
        headers: Operations.ConversationsReplies.Input.Headers = .init(),
        body: Operations.ConversationsReplies.Input.Body
    ) async throws -> Operations.ConversationsReplies.Output {
        try await conversationsReplies(Operations.ConversationsReplies.Input(
            headers: headers,
            body: body
        ))
    }
    /// Approves a request to add an external user to a channel and sends them a Slack Connect invite
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.approve`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.approve/post(conversationsRequestSharedInviteApprove)`.
    public func conversationsRequestSharedInviteApprove(
        headers: Operations.ConversationsRequestSharedInviteApprove.Input.Headers = .init(),
        body: Operations.ConversationsRequestSharedInviteApprove.Input.Body
    ) async throws -> Operations.ConversationsRequestSharedInviteApprove.Output {
        try await conversationsRequestSharedInviteApprove(Operations.ConversationsRequestSharedInviteApprove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Denies a request to invite an external user to a channel
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.deny`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.deny/post(conversationsRequestSharedInviteDeny)`.
    public func conversationsRequestSharedInviteDeny(
        headers: Operations.ConversationsRequestSharedInviteDeny.Input.Headers = .init(),
        body: Operations.ConversationsRequestSharedInviteDeny.Input.Body
    ) async throws -> Operations.ConversationsRequestSharedInviteDeny.Output {
        try await conversationsRequestSharedInviteDeny(Operations.ConversationsRequestSharedInviteDeny.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists requests to add external users to channels with ability to filter.
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.list`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.list/post(conversationsRequestSharedInviteList)`.
    public func conversationsRequestSharedInviteList(
        headers: Operations.ConversationsRequestSharedInviteList.Input.Headers = .init(),
        body: Operations.ConversationsRequestSharedInviteList.Input.Body
    ) async throws -> Operations.ConversationsRequestSharedInviteList.Output {
        try await conversationsRequestSharedInviteList(Operations.ConversationsRequestSharedInviteList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sets the channel description.
    ///
    /// - Remark: HTTP `POST /conversations.setPurpose`.
    /// - Remark: Generated from `#/paths//conversations.setPurpose/post(conversationsSetPurpose)`.
    public func conversationsSetPurpose(
        headers: Operations.ConversationsSetPurpose.Input.Headers = .init(),
        body: Operations.ConversationsSetPurpose.Input.Body
    ) async throws -> Operations.ConversationsSetPurpose.Output {
        try await conversationsSetPurpose(Operations.ConversationsSetPurpose.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sets the topic for a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.setTopic`.
    /// - Remark: Generated from `#/paths//conversations.setTopic/post(conversationsSetTopic)`.
    public func conversationsSetTopic(
        headers: Operations.ConversationsSetTopic.Input.Headers = .init(),
        body: Operations.ConversationsSetTopic.Input.Body
    ) async throws -> Operations.ConversationsSetTopic.Output {
        try await conversationsSetTopic(Operations.ConversationsSetTopic.Input(
            headers: headers,
            body: body
        ))
    }
    /// Reverses conversation archival.
    ///
    /// - Remark: HTTP `POST /conversations.unarchive`.
    /// - Remark: Generated from `#/paths//conversations.unarchive/post(conversationsUnarchive)`.
    public func conversationsUnarchive(
        headers: Operations.ConversationsUnarchive.Input.Headers = .init(),
        body: Operations.ConversationsUnarchive.Input.Body
    ) async throws -> Operations.ConversationsUnarchive.Output {
        try await conversationsUnarchive(Operations.ConversationsUnarchive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Ends the current user's Do Not Disturb session immediately.
    ///
    /// - Remark: HTTP `POST /dnd.endDnd`.
    /// - Remark: Generated from `#/paths//dnd.endDnd/post(dndEndDnd)`.
    #endif
    #if WebAPI_DND
    public func dndEndDnd(
        headers: Operations.DndEndDnd.Input.Headers = .init(),
        body: Operations.DndEndDnd.Input.Body? = nil
    ) async throws -> Operations.DndEndDnd.Output {
        try await dndEndDnd(Operations.DndEndDnd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Ends the current user's snooze mode immediately.
    ///
    /// - Remark: HTTP `POST /dnd.endSnooze`.
    /// - Remark: Generated from `#/paths//dnd.endSnooze/post(dndEndSnooze)`.
    public func dndEndSnooze(
        headers: Operations.DndEndSnooze.Input.Headers = .init(),
        body: Operations.DndEndSnooze.Input.Body? = nil
    ) async throws -> Operations.DndEndSnooze.Output {
        try await dndEndSnooze(Operations.DndEndSnooze.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a user's current Do Not Disturb status.
    ///
    /// - Remark: HTTP `POST /dnd.info`.
    /// - Remark: Generated from `#/paths//dnd.info/post(dndInfo)`.
    public func dndInfo(
        headers: Operations.DndInfo.Input.Headers = .init(),
        body: Operations.DndInfo.Input.Body
    ) async throws -> Operations.DndInfo.Output {
        try await dndInfo(Operations.DndInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Turns on Do Not Disturb mode for the current user, or changes its duration.
    ///
    /// - Remark: HTTP `POST /dnd.setSnooze`.
    /// - Remark: Generated from `#/paths//dnd.setSnooze/post(dndSetSnooze)`.
    public func dndSetSnooze(
        headers: Operations.DndSetSnooze.Input.Headers = .init(),
        body: Operations.DndSetSnooze.Input.Body
    ) async throws -> Operations.DndSetSnooze.Output {
        try await dndSetSnooze(Operations.DndSetSnooze.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves the Do Not Disturb status for up to 50 users on a team.
    ///
    /// - Remark: HTTP `POST /dnd.teamInfo`.
    /// - Remark: Generated from `#/paths//dnd.teamInfo/post(dndTeamInfo)`.
    public func dndTeamInfo(
        headers: Operations.DndTeamInfo.Input.Headers = .init(),
        body: Operations.DndTeamInfo.Input.Body
    ) async throws -> Operations.DndTeamInfo.Output {
        try await dndTeamInfo(Operations.DndTeamInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists custom emoji for a team.
    ///
    /// - Remark: HTTP `POST /emoji.list`.
    /// - Remark: Generated from `#/paths//emoji.list/post(emojiList)`.
    #endif
    #if WebAPI_Emoji
    public func emojiList(
        headers: Operations.EmojiList.Input.Headers = .init(),
        body: Operations.EmojiList.Input.Body
    ) async throws -> Operations.EmojiList.Output {
        try await emojiList(Operations.EmojiList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Finishes an upload started with files.getUploadURLExternal
    ///
    /// - Remark: HTTP `POST /files.completeUploadExternal`.
    /// - Remark: Generated from `#/paths//files.completeUploadExternal/post(filesCompleteUploadExternal)`.
    #endif
    #if WebAPI_Files
    public func filesCompleteUploadExternal(
        headers: Operations.FilesCompleteUploadExternal.Input.Headers = .init(),
        body: Operations.FilesCompleteUploadExternal.Input.Body
    ) async throws -> Operations.FilesCompleteUploadExternal.Output {
        try await filesCompleteUploadExternal(Operations.FilesCompleteUploadExternal.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a file.
    ///
    /// - Remark: HTTP `POST /files.delete`.
    /// - Remark: Generated from `#/paths//files.delete/post(filesDelete)`.
    public func filesDelete(
        headers: Operations.FilesDelete.Input.Headers = .init(),
        body: Operations.FilesDelete.Input.Body
    ) async throws -> Operations.FilesDelete.Output {
        try await filesDelete(Operations.FilesDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets a URL for an edge external file upload
    ///
    /// - Remark: HTTP `POST /files.getUploadURLExternal`.
    /// - Remark: Generated from `#/paths//files.getUploadURLExternal/post(filesGetUploadURLExternal)`.
    public func filesGetUploadURLExternal(
        headers: Operations.FilesGetUploadURLExternal.Input.Headers = .init(),
        body: Operations.FilesGetUploadURLExternal.Input.Body
    ) async throws -> Operations.FilesGetUploadURLExternal.Output {
        try await filesGetUploadURLExternal(Operations.FilesGetUploadURLExternal.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets information about a file.
    ///
    /// - Remark: HTTP `POST /files.info`.
    /// - Remark: Generated from `#/paths//files.info/post(filesInfo)`.
    public func filesInfo(
        headers: Operations.FilesInfo.Input.Headers = .init(),
        body: Operations.FilesInfo.Input.Body
    ) async throws -> Operations.FilesInfo.Output {
        try await filesInfo(Operations.FilesInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// List for a team, in a channel, or from a user with applied filters.
    ///
    /// - Remark: HTTP `POST /files.list`.
    /// - Remark: Generated from `#/paths//files.list/post(filesList)`.
    public func filesList(
        headers: Operations.FilesList.Input.Headers = .init(),
        body: Operations.FilesList.Input.Body
    ) async throws -> Operations.FilesList.Output {
        try await filesList(Operations.FilesList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Adds a file from a remote service
    ///
    /// - Remark: HTTP `POST /files.remote.add`.
    /// - Remark: Generated from `#/paths//files.remote.add/post(filesRemoteAdd)`.
    public func filesRemoteAdd(
        headers: Operations.FilesRemoteAdd.Input.Headers = .init(),
        body: Operations.FilesRemoteAdd.Input.Body
    ) async throws -> Operations.FilesRemoteAdd.Output {
        try await filesRemoteAdd(Operations.FilesRemoteAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve information about a remote file added to Slack
    ///
    /// - Remark: HTTP `POST /files.remote.info`.
    /// - Remark: Generated from `#/paths//files.remote.info/post(filesRemoteInfo)`.
    public func filesRemoteInfo(
        headers: Operations.FilesRemoteInfo.Input.Headers = .init(),
        body: Operations.FilesRemoteInfo.Input.Body
    ) async throws -> Operations.FilesRemoteInfo.Output {
        try await filesRemoteInfo(Operations.FilesRemoteInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve information about a remote file added to Slack
    ///
    /// - Remark: HTTP `POST /files.remote.list`.
    /// - Remark: Generated from `#/paths//files.remote.list/post(filesRemoteList)`.
    public func filesRemoteList(
        headers: Operations.FilesRemoteList.Input.Headers = .init(),
        body: Operations.FilesRemoteList.Input.Body
    ) async throws -> Operations.FilesRemoteList.Output {
        try await filesRemoteList(Operations.FilesRemoteList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove a remote file.
    ///
    /// - Remark: HTTP `POST /files.remote.remove`.
    /// - Remark: Generated from `#/paths//files.remote.remove/post(filesRemoteRemove)`.
    public func filesRemoteRemove(
        headers: Operations.FilesRemoteRemove.Input.Headers = .init(),
        body: Operations.FilesRemoteRemove.Input.Body
    ) async throws -> Operations.FilesRemoteRemove.Output {
        try await filesRemoteRemove(Operations.FilesRemoteRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Share a remote file into a channel.
    ///
    /// - Remark: HTTP `POST /files.remote.share`.
    /// - Remark: Generated from `#/paths//files.remote.share/post(filesRemoteShare)`.
    public func filesRemoteShare(
        headers: Operations.FilesRemoteShare.Input.Headers = .init(),
        body: Operations.FilesRemoteShare.Input.Body
    ) async throws -> Operations.FilesRemoteShare.Output {
        try await filesRemoteShare(Operations.FilesRemoteShare.Input(
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing remote file.
    ///
    /// - Remark: HTTP `POST /files.remote.update`.
    /// - Remark: Generated from `#/paths//files.remote.update/post(filesRemoteUpdate)`.
    public func filesRemoteUpdate(
        headers: Operations.FilesRemoteUpdate.Input.Headers = .init(),
        body: Operations.FilesRemoteUpdate.Input.Body
    ) async throws -> Operations.FilesRemoteUpdate.Output {
        try await filesRemoteUpdate(Operations.FilesRemoteUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Revokes public/external sharing access for a file
    ///
    /// - Remark: HTTP `POST /files.revokePublicURL`.
    /// - Remark: Generated from `#/paths//files.revokePublicURL/post(filesRevokePublicURL)`.
    public func filesRevokePublicURL(
        headers: Operations.FilesRevokePublicURL.Input.Headers = .init(),
        body: Operations.FilesRevokePublicURL.Input.Body
    ) async throws -> Operations.FilesRevokePublicURL.Output {
        try await filesRevokePublicURL(Operations.FilesRevokePublicURL.Input(
            headers: headers,
            body: body
        ))
    }
    /// Enables a file for public/external sharing.
    ///
    /// - Remark: HTTP `POST /files.sharedPublicURL`.
    /// - Remark: Generated from `#/paths//files.sharedPublicURL/post(filesSharedPublicURL)`.
    public func filesSharedPublicURL(
        headers: Operations.FilesSharedPublicURL.Input.Headers = .init(),
        body: Operations.FilesSharedPublicURL.Input.Body
    ) async throws -> Operations.FilesSharedPublicURL.Output {
        try await filesSharedPublicURL(Operations.FilesSharedPublicURL.Input(
            headers: headers,
            body: body
        ))
    }
    /// Uploads or creates a file.
    ///
    /// - Remark: HTTP `POST /files.upload`.
    /// - Remark: Generated from `#/paths//files.upload/post(filesUpload)`.
    public func filesUpload(
        headers: Operations.FilesUpload.Input.Headers = .init(),
        body: Operations.FilesUpload.Input.Body
    ) async throws -> Operations.FilesUpload.Output {
        try await filesUpload(Operations.FilesUpload.Input(
            headers: headers,
            body: body
        ))
    }
    /// Signal that a function failed to complete
    ///
    /// - Remark: HTTP `POST /functions.completeError`.
    /// - Remark: Generated from `#/paths//functions.completeError/post(functionsCompleteError)`.
    #endif
    #if WebAPI_Functions
    public func functionsCompleteError(
        headers: Operations.FunctionsCompleteError.Input.Headers = .init(),
        body: Operations.FunctionsCompleteError.Input.Body
    ) async throws -> Operations.FunctionsCompleteError.Output {
        try await functionsCompleteError(Operations.FunctionsCompleteError.Input(
            headers: headers,
            body: body
        ))
    }
    /// Signal the successful completion of a function
    ///
    /// - Remark: HTTP `POST /functions.completeSuccess`.
    /// - Remark: Generated from `#/paths//functions.completeSuccess/post(functionsCompleteSuccess)`.
    public func functionsCompleteSuccess(
        headers: Operations.FunctionsCompleteSuccess.Input.Headers = .init(),
        body: Operations.FunctionsCompleteSuccess.Input.Body
    ) async throws -> Operations.FunctionsCompleteSuccess.Output {
        try await functionsCompleteSuccess(Operations.FunctionsCompleteSuccess.Input(
            headers: headers,
            body: body
        ))
    }
    /// For Enterprise Grid workspaces, map local user IDs to global user IDs
    ///
    /// - Remark: HTTP `POST /migration.exchange`.
    /// - Remark: Generated from `#/paths//migration.exchange/post(migrationExchange)`.
    #endif
    #if WebAPI_Migration
    public func migrationExchange(
        headers: Operations.MigrationExchange.Input.Headers = .init(),
        body: Operations.MigrationExchange.Input.Body
    ) async throws -> Operations.MigrationExchange.Output {
        try await migrationExchange(Operations.MigrationExchange.Input(
            headers: headers,
            body: body
        ))
    }
    /// Exchanges a temporary OAuth verifier code for an access token.
    ///
    /// - Remark: HTTP `POST /oauth.v2.access`.
    /// - Remark: Generated from `#/paths//oauth.v2.access/post(oauthV2Access)`.
    #endif
    #if WebAPI_OAuth
    public func oauthV2Access(
        headers: Operations.OauthV2Access.Input.Headers = .init(),
        body: Operations.OauthV2Access.Input.Body
    ) async throws -> Operations.OauthV2Access.Output {
        try await oauthV2Access(Operations.OauthV2Access.Input(
            headers: headers,
            body: body
        ))
    }
    /// Exchanges a legacy access token for a new expiring access token and refresh token
    ///
    /// - Remark: HTTP `POST /oauth.v2.exchange`.
    /// - Remark: Generated from `#/paths//oauth.v2.exchange/post(oauthV2Exchange)`.
    public func oauthV2Exchange(
        headers: Operations.OauthV2Exchange.Input.Headers = .init(),
        body: Operations.OauthV2Exchange.Input.Body
    ) async throws -> Operations.OauthV2Exchange.Output {
        try await oauthV2Exchange(Operations.OauthV2Exchange.Input(
            headers: headers,
            body: body
        ))
    }
    /// Exchanges a temporary OAuth verifier code for an access token for Sign in with Slack.
    ///
    /// - Remark: HTTP `POST /openid.connect.token`.
    /// - Remark: Generated from `#/paths//openid.connect.token/post(openidConnectToken)`.
    #endif
    #if WebAPI_OpenID
    public func openidConnectToken(
        headers: Operations.OpenidConnectToken.Input.Headers = .init(),
        body: Operations.OpenidConnectToken.Input.Body
    ) async throws -> Operations.OpenidConnectToken.Output {
        try await openidConnectToken(Operations.OpenidConnectToken.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get the identity of a user who has authorized Sign in with Slack.
    ///
    /// - Remark: HTTP `POST /openid.connect.userInfo`.
    /// - Remark: Generated from `#/paths//openid.connect.userInfo/post(openidConnectUserInfo)`.
    public func openidConnectUserInfo(
        headers: Operations.OpenidConnectUserInfo.Input.Headers = .init(),
        body: Operations.OpenidConnectUserInfo.Input.Body? = nil
    ) async throws -> Operations.OpenidConnectUserInfo.Output {
        try await openidConnectUserInfo(Operations.OpenidConnectUserInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Pins an item to a channel.
    ///
    /// - Remark: HTTP `POST /pins.add`.
    /// - Remark: Generated from `#/paths//pins.add/post(pinsAdd)`.
    #endif
    #if WebAPI_Pins
    public func pinsAdd(
        headers: Operations.PinsAdd.Input.Headers = .init(),
        body: Operations.PinsAdd.Input.Body
    ) async throws -> Operations.PinsAdd.Output {
        try await pinsAdd(Operations.PinsAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists items pinned to a channel.
    ///
    /// - Remark: HTTP `POST /pins.list`.
    /// - Remark: Generated from `#/paths//pins.list/post(pinsList)`.
    public func pinsList(
        headers: Operations.PinsList.Input.Headers = .init(),
        body: Operations.PinsList.Input.Body
    ) async throws -> Operations.PinsList.Output {
        try await pinsList(Operations.PinsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Un-pins an item from a channel.
    ///
    /// - Remark: HTTP `POST /pins.remove`.
    /// - Remark: Generated from `#/paths//pins.remove/post(pinsRemove)`.
    public func pinsRemove(
        headers: Operations.PinsRemove.Input.Headers = .init(),
        body: Operations.PinsRemove.Input.Body
    ) async throws -> Operations.PinsRemove.Output {
        try await pinsRemove(Operations.PinsRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Adds a reaction to an item.
    ///
    /// - Remark: HTTP `POST /reactions.add`.
    /// - Remark: Generated from `#/paths//reactions.add/post(reactionsAdd)`.
    #endif
    #if WebAPI_Reactions
    public func reactionsAdd(
        headers: Operations.ReactionsAdd.Input.Headers = .init(),
        body: Operations.ReactionsAdd.Input.Body
    ) async throws -> Operations.ReactionsAdd.Output {
        try await reactionsAdd(Operations.ReactionsAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets reactions for an item.
    ///
    /// - Remark: HTTP `POST /reactions.get`.
    /// - Remark: Generated from `#/paths//reactions.get/post(reactionsGet)`.
    public func reactionsGet(
        headers: Operations.ReactionsGet.Input.Headers = .init(),
        body: Operations.ReactionsGet.Input.Body
    ) async throws -> Operations.ReactionsGet.Output {
        try await reactionsGet(Operations.ReactionsGet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists reactions made by a user.
    ///
    /// - Remark: HTTP `POST /reactions.list`.
    /// - Remark: Generated from `#/paths//reactions.list/post(reactionsList)`.
    public func reactionsList(
        headers: Operations.ReactionsList.Input.Headers = .init(),
        body: Operations.ReactionsList.Input.Body
    ) async throws -> Operations.ReactionsList.Output {
        try await reactionsList(Operations.ReactionsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Removes a reaction from an item.
    ///
    /// - Remark: HTTP `POST /reactions.remove`.
    /// - Remark: Generated from `#/paths//reactions.remove/post(reactionsRemove)`.
    public func reactionsRemove(
        headers: Operations.ReactionsRemove.Input.Headers = .init(),
        body: Operations.ReactionsRemove.Input.Body
    ) async throws -> Operations.ReactionsRemove.Output {
        try await reactionsRemove(Operations.ReactionsRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.add`.
    /// - Remark: Generated from `#/paths//reminders.add/post(remindersAdd)`.
    #endif
    #if WebAPI_Reminders
    public func remindersAdd(
        headers: Operations.RemindersAdd.Input.Headers = .init(),
        body: Operations.RemindersAdd.Input.Body
    ) async throws -> Operations.RemindersAdd.Output {
        try await remindersAdd(Operations.RemindersAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Marks a reminder as complete.
    ///
    /// - Remark: HTTP `POST /reminders.complete`.
    /// - Remark: Generated from `#/paths//reminders.complete/post(remindersComplete)`.
    public func remindersComplete(
        headers: Operations.RemindersComplete.Input.Headers = .init(),
        body: Operations.RemindersComplete.Input.Body
    ) async throws -> Operations.RemindersComplete.Output {
        try await remindersComplete(Operations.RemindersComplete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.delete`.
    /// - Remark: Generated from `#/paths//reminders.delete/post(remindersDelete)`.
    public func remindersDelete(
        headers: Operations.RemindersDelete.Input.Headers = .init(),
        body: Operations.RemindersDelete.Input.Body
    ) async throws -> Operations.RemindersDelete.Output {
        try await remindersDelete(Operations.RemindersDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets information about a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.info`.
    /// - Remark: Generated from `#/paths//reminders.info/post(remindersInfo)`.
    public func remindersInfo(
        headers: Operations.RemindersInfo.Input.Headers = .init(),
        body: Operations.RemindersInfo.Input.Body
    ) async throws -> Operations.RemindersInfo.Output {
        try await remindersInfo(Operations.RemindersInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists all reminders created by or for a given user.
    ///
    /// - Remark: HTTP `POST /reminders.list`.
    /// - Remark: Generated from `#/paths//reminders.list/post(remindersList)`.
    public func remindersList(
        headers: Operations.RemindersList.Input.Headers = .init(),
        body: Operations.RemindersList.Input.Body
    ) async throws -> Operations.RemindersList.Output {
        try await remindersList(Operations.RemindersList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Starts a Real Time Messaging session.
    ///
    /// - Remark: HTTP `POST /rtm.connect`.
    /// - Remark: Generated from `#/paths//rtm.connect/post(rtmConnect)`.
    #endif
    #if WebAPI_RTM
    public func rtmConnect(
        headers: Operations.RtmConnect.Input.Headers = .init(),
        body: Operations.RtmConnect.Input.Body
    ) async throws -> Operations.RtmConnect.Output {
        try await rtmConnect(Operations.RtmConnect.Input(
            headers: headers,
            body: body
        ))
    }
    /// Searches for messages and files matching a query.
    ///
    /// - Remark: HTTP `POST /search.all`.
    /// - Remark: Generated from `#/paths//search.all/post(searchAll)`.
    #endif
    #if WebAPI_Search
    public func searchAll(
        headers: Operations.SearchAll.Input.Headers = .init(),
        body: Operations.SearchAll.Input.Body
    ) async throws -> Operations.SearchAll.Output {
        try await searchAll(Operations.SearchAll.Input(
            headers: headers,
            body: body
        ))
    }
    /// Searches for files matching a query.
    ///
    /// - Remark: HTTP `POST /search.files`.
    /// - Remark: Generated from `#/paths//search.files/post(searchFiles)`.
    public func searchFiles(
        headers: Operations.SearchFiles.Input.Headers = .init(),
        body: Operations.SearchFiles.Input.Body
    ) async throws -> Operations.SearchFiles.Output {
        try await searchFiles(Operations.SearchFiles.Input(
            headers: headers,
            body: body
        ))
    }
    /// Searches for messages matching a query.
    ///
    /// - Remark: HTTP `POST /search.messages`.
    /// - Remark: Generated from `#/paths//search.messages/post(searchMessages)`.
    public func searchMessages(
        headers: Operations.SearchMessages.Input.Headers = .init(),
        body: Operations.SearchMessages.Input.Body
    ) async throws -> Operations.SearchMessages.Output {
        try await searchMessages(Operations.SearchMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// Save an item for later. Formerly known as adding a star.
    ///
    /// - Remark: HTTP `POST /stars.add`.
    /// - Remark: Generated from `#/paths//stars.add/post(starsAdd)`.
    #endif
    #if WebAPI_Stars
    public func starsAdd(
        headers: Operations.StarsAdd.Input.Headers = .init(),
        body: Operations.StarsAdd.Input.Body
    ) async throws -> Operations.StarsAdd.Output {
        try await starsAdd(Operations.StarsAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Listed a user's saved items, formerly known as stars.
    ///
    /// - Remark: HTTP `POST /stars.list`.
    /// - Remark: Generated from `#/paths//stars.list/post(starsList)`.
    public func starsList(
        headers: Operations.StarsList.Input.Headers = .init(),
        body: Operations.StarsList.Input.Body
    ) async throws -> Operations.StarsList.Output {
        try await starsList(Operations.StarsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Removes a saved item (star) from an item.
    ///
    /// - Remark: HTTP `POST /stars.remove`.
    /// - Remark: Generated from `#/paths//stars.remove/post(starsRemove)`.
    public func starsRemove(
        headers: Operations.StarsRemove.Input.Headers = .init(),
        body: Operations.StarsRemove.Input.Body
    ) async throws -> Operations.StarsRemove.Output {
        try await starsRemove(Operations.StarsRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets the access logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.accessLogs`.
    /// - Remark: Generated from `#/paths//team.accessLogs/post(teamAccessLogs)`.
    #endif
    #if WebAPI_Team
    public func teamAccessLogs(
        headers: Operations.TeamAccessLogs.Input.Headers = .init(),
        body: Operations.TeamAccessLogs.Input.Body
    ) async throws -> Operations.TeamAccessLogs.Output {
        try await teamAccessLogs(Operations.TeamAccessLogs.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets billable users information for the current team.
    ///
    /// - Remark: HTTP `POST /team.billableInfo`.
    /// - Remark: Generated from `#/paths//team.billableInfo/post(teamBillableInfo)`.
    public func teamBillableInfo(
        headers: Operations.TeamBillableInfo.Input.Headers = .init(),
        body: Operations.TeamBillableInfo.Input.Body
    ) async throws -> Operations.TeamBillableInfo.Output {
        try await teamBillableInfo(Operations.TeamBillableInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Reads a workspace's billing plan information.
    ///
    /// - Remark: HTTP `POST /team.billing.info`.
    /// - Remark: Generated from `#/paths//team.billing.info/post(teamBillingInfo)`.
    public func teamBillingInfo(
        headers: Operations.TeamBillingInfo.Input.Headers = .init(),
        body: Operations.TeamBillingInfo.Input.Body? = nil
    ) async throws -> Operations.TeamBillingInfo.Output {
        try await teamBillingInfo(Operations.TeamBillingInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Disconnect an external organization.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.disconnect`.
    /// - Remark: Generated from `#/paths//team.externalTeams.disconnect/post(teamExternalTeamsDisconnect)`.
    public func teamExternalTeamsDisconnect(
        headers: Operations.TeamExternalTeamsDisconnect.Input.Headers = .init(),
        body: Operations.TeamExternalTeamsDisconnect.Input.Body
    ) async throws -> Operations.TeamExternalTeamsDisconnect.Output {
        try await teamExternalTeamsDisconnect(Operations.TeamExternalTeamsDisconnect.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns a list of all the external teams connected and details about the connection.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.list`.
    /// - Remark: Generated from `#/paths//team.externalTeams.list/post(teamExternalTeamsList)`.
    public func teamExternalTeamsList(
        headers: Operations.TeamExternalTeamsList.Input.Headers = .init(),
        body: Operations.TeamExternalTeamsList.Input.Body
    ) async throws -> Operations.TeamExternalTeamsList.Output {
        try await teamExternalTeamsList(Operations.TeamExternalTeamsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets information about the current team.
    ///
    /// - Remark: HTTP `POST /team.info`.
    /// - Remark: Generated from `#/paths//team.info/post(teamInfo)`.
    public func teamInfo(
        headers: Operations.TeamInfo.Input.Headers = .init(),
        body: Operations.TeamInfo.Input.Body
    ) async throws -> Operations.TeamInfo.Output {
        try await teamInfo(Operations.TeamInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets the integration logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.integrationLogs`.
    /// - Remark: Generated from `#/paths//team.integrationLogs/post(teamIntegrationLogs)`.
    public func teamIntegrationLogs(
        headers: Operations.TeamIntegrationLogs.Input.Headers = .init(),
        body: Operations.TeamIntegrationLogs.Input.Body
    ) async throws -> Operations.TeamIntegrationLogs.Output {
        try await teamIntegrationLogs(Operations.TeamIntegrationLogs.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a list of a workspace's team preferences.
    ///
    /// - Remark: HTTP `POST /team.preferences.list`.
    /// - Remark: Generated from `#/paths//team.preferences.list/post(teamPreferencesList)`.
    public func teamPreferencesList(
        headers: Operations.TeamPreferencesList.Input.Headers = .init(),
        body: Operations.TeamPreferencesList.Input.Body? = nil
    ) async throws -> Operations.TeamPreferencesList.Output {
        try await teamPreferencesList(Operations.TeamPreferencesList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a team's profile.
    ///
    /// - Remark: HTTP `POST /team.profile.get`.
    /// - Remark: Generated from `#/paths//team.profile.get/post(teamProfileGet)`.
    public func teamProfileGet(
        headers: Operations.TeamProfileGet.Input.Headers = .init(),
        body: Operations.TeamProfileGet.Input.Body
    ) async throws -> Operations.TeamProfileGet.Output {
        try await teamProfileGet(Operations.TeamProfileGet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Exchanges a refresh token for a new app configuration token.
    ///
    /// - Remark: HTTP `POST /tooling.tokens.rotate`.
    /// - Remark: Generated from `#/paths//tooling.tokens.rotate/post(toolingTokensRotate)`.
    #endif
    #if WebAPI_Tooling
    public func toolingTokensRotate(
        headers: Operations.ToolingTokensRotate.Input.Headers = .init(),
        body: Operations.ToolingTokensRotate.Input.Body
    ) async throws -> Operations.ToolingTokensRotate.Output {
        try await toolingTokensRotate(Operations.ToolingTokensRotate.Input(
            headers: headers,
            body: body
        ))
    }
    /// List conversations the calling user may access.
    ///
    /// - Remark: HTTP `POST /users.conversations`.
    /// - Remark: Generated from `#/paths//users.conversations/post(usersConversations)`.
    #endif
    #if WebAPI_Users
    public func usersConversations(
        headers: Operations.UsersConversations.Input.Headers = .init(),
        body: Operations.UsersConversations.Input.Body
    ) async throws -> Operations.UsersConversations.Output {
        try await usersConversations(Operations.UsersConversations.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete the user profile photo
    ///
    /// - Remark: HTTP `POST /users.deletePhoto`.
    /// - Remark: Generated from `#/paths//users.deletePhoto/post(usersDeletePhoto)`.
    public func usersDeletePhoto(
        headers: Operations.UsersDeletePhoto.Input.Headers = .init(),
        body: Operations.UsersDeletePhoto.Input.Body? = nil
    ) async throws -> Operations.UsersDeletePhoto.Output {
        try await usersDeletePhoto(Operations.UsersDeletePhoto.Input(
            headers: headers,
            body: body
        ))
    }
    /// Look up an email address to see if someone is discoverable on Slack
    ///
    /// - Remark: HTTP `POST /users.discoverableContacts.lookup`.
    /// - Remark: Generated from `#/paths//users.discoverableContacts.lookup/post(usersDiscoverableContactsLookup)`.
    public func usersDiscoverableContactsLookup(
        headers: Operations.UsersDiscoverableContactsLookup.Input.Headers = .init(),
        body: Operations.UsersDiscoverableContactsLookup.Input.Body
    ) async throws -> Operations.UsersDiscoverableContactsLookup.Output {
        try await usersDiscoverableContactsLookup(Operations.UsersDiscoverableContactsLookup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets user presence information.
    ///
    /// - Remark: HTTP `POST /users.getPresence`.
    /// - Remark: Generated from `#/paths//users.getPresence/post(usersGetPresence)`.
    public func usersGetPresence(
        headers: Operations.UsersGetPresence.Input.Headers = .init(),
        body: Operations.UsersGetPresence.Input.Body
    ) async throws -> Operations.UsersGetPresence.Output {
        try await usersGetPresence(Operations.UsersGetPresence.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a user's identity.
    ///
    /// - Remark: HTTP `POST /users.identity`.
    /// - Remark: Generated from `#/paths//users.identity/post(usersIdentity)`.
    public func usersIdentity(
        headers: Operations.UsersIdentity.Input.Headers = .init(),
        body: Operations.UsersIdentity.Input.Body? = nil
    ) async throws -> Operations.UsersIdentity.Output {
        try await usersIdentity(Operations.UsersIdentity.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets information about a user.
    ///
    /// - Remark: HTTP `POST /users.info`.
    /// - Remark: Generated from `#/paths//users.info/post(usersInfo)`.
    public func usersInfo(
        headers: Operations.UsersInfo.Input.Headers = .init(),
        body: Operations.UsersInfo.Input.Body
    ) async throws -> Operations.UsersInfo.Output {
        try await usersInfo(Operations.UsersInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists all users in a Slack team.
    ///
    /// - Remark: HTTP `POST /users.list`.
    /// - Remark: Generated from `#/paths//users.list/post(usersList)`.
    public func usersList(
        headers: Operations.UsersList.Input.Headers = .init(),
        body: Operations.UsersList.Input.Body
    ) async throws -> Operations.UsersList.Output {
        try await usersList(Operations.UsersList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Find a user with an email address.
    ///
    /// - Remark: HTTP `POST /users.lookupByEmail`.
    /// - Remark: Generated from `#/paths//users.lookupByEmail/post(usersLookupByEmail)`.
    public func usersLookupByEmail(
        headers: Operations.UsersLookupByEmail.Input.Headers = .init(),
        body: Operations.UsersLookupByEmail.Input.Body
    ) async throws -> Operations.UsersLookupByEmail.Output {
        try await usersLookupByEmail(Operations.UsersLookupByEmail.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a user's profile information, including their custom status.
    ///
    /// - Remark: HTTP `POST /users.profile.get`.
    /// - Remark: Generated from `#/paths//users.profile.get/post(usersProfileGet)`.
    public func usersProfileGet(
        headers: Operations.UsersProfileGet.Input.Headers = .init(),
        body: Operations.UsersProfileGet.Input.Body
    ) async throws -> Operations.UsersProfileGet.Output {
        try await usersProfileGet(Operations.UsersProfileGet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set a user's profile information, including custom status.
    ///
    /// - Remark: HTTP `POST /users.profile.set`.
    /// - Remark: Generated from `#/paths//users.profile.set/post(usersProfileSet)`.
    public func usersProfileSet(
        headers: Operations.UsersProfileSet.Input.Headers = .init(),
        body: Operations.UsersProfileSet.Input.Body
    ) async throws -> Operations.UsersProfileSet.Output {
        try await usersProfileSet(Operations.UsersProfileSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Marked a user as active. Deprecated and non-functional.
    ///
    /// - Remark: HTTP `POST /users.setActive`.
    /// - Remark: Generated from `#/paths//users.setActive/post(usersSetActive)`.
    public func usersSetActive(
        headers: Operations.UsersSetActive.Input.Headers = .init(),
        body: Operations.UsersSetActive.Input.Body? = nil
    ) async throws -> Operations.UsersSetActive.Output {
        try await usersSetActive(Operations.UsersSetActive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the user profile photo
    ///
    /// - Remark: HTTP `POST /users.setPhoto`.
    /// - Remark: Generated from `#/paths//users.setPhoto/post(usersSetPhoto)`.
    public func usersSetPhoto(
        headers: Operations.UsersSetPhoto.Input.Headers = .init(),
        body: Operations.UsersSetPhoto.Input.Body
    ) async throws -> Operations.UsersSetPhoto.Output {
        try await usersSetPhoto(Operations.UsersSetPhoto.Input(
            headers: headers,
            body: body
        ))
    }
    /// Manually sets user presence.
    ///
    /// - Remark: HTTP `POST /users.setPresence`.
    /// - Remark: Generated from `#/paths//users.setPresence/post(usersSetPresence)`.
    public func usersSetPresence(
        headers: Operations.UsersSetPresence.Input.Headers = .init(),
        body: Operations.UsersSetPresence.Input.Body
    ) async throws -> Operations.UsersSetPresence.Output {
        try await usersSetPresence(Operations.UsersSetPresence.Input(
            headers: headers,
            body: body
        ))
    }
    /// Open a view for a user.
    ///
    /// - Remark: HTTP `POST /views.open`.
    /// - Remark: Generated from `#/paths//views.open/post(viewsOpen)`.
    #endif
    #if WebAPI_Views
    public func viewsOpen(
        headers: Operations.ViewsOpen.Input.Headers = .init(),
        body: Operations.ViewsOpen.Input.Body
    ) async throws -> Operations.ViewsOpen.Output {
        try await viewsOpen(Operations.ViewsOpen.Input(
            headers: headers,
            body: body
        ))
    }
    /// Publish a static view for a User.
    ///
    /// - Remark: HTTP `POST /views.publish`.
    /// - Remark: Generated from `#/paths//views.publish/post(viewsPublish)`.
    public func viewsPublish(
        headers: Operations.ViewsPublish.Input.Headers = .init(),
        body: Operations.ViewsPublish.Input.Body
    ) async throws -> Operations.ViewsPublish.Output {
        try await viewsPublish(Operations.ViewsPublish.Input(
            headers: headers,
            body: body
        ))
    }
    /// Push a view onto the stack of a root view.
    ///
    /// - Remark: HTTP `POST /views.push`.
    /// - Remark: Generated from `#/paths//views.push/post(viewsPush)`.
    public func viewsPush(
        headers: Operations.ViewsPush.Input.Headers = .init(),
        body: Operations.ViewsPush.Input.Body
    ) async throws -> Operations.ViewsPush.Output {
        try await viewsPush(Operations.ViewsPush.Input(
            headers: headers,
            body: body
        ))
    }
    /// Update an existing view.
    ///
    /// - Remark: HTTP `POST /views.update`.
    /// - Remark: Generated from `#/paths//views.update/post(viewsUpdate)`.
    public func viewsUpdate(
        headers: Operations.ViewsUpdate.Input.Headers = .init(),
        body: Operations.ViewsUpdate.Input.Body
    ) async throws -> Operations.ViewsUpdate.Output {
        try await viewsUpdate(Operations.ViewsUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    #endif
}
