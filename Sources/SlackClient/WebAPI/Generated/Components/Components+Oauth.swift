// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// Types generated from the components section of the OpenAPI document.

#if WebAPI_OAuth
extension Components.Schemas {
    /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse`.
    public struct OauthV2AccessResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/warning`.
        public var warning: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/scope`.
        public var scope: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/team`.
        public var team: Components.Schemas.Enterprise?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/enterprise`.
        public var enterprise: Components.Schemas.Enterprise?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/appId`.
        public var appId: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/authedUser`.
        public var authedUser: Components.Schemas.AuthedUser?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/tokenType`.
        public var tokenType: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/accessToken`.
        public var accessToken: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/refreshToken`.
        public var refreshToken: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/expiresIn`.
        public var expiresIn: Swift.Int?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/botUserId`.
        public var botUserId: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/isEnterpriseInstall`.
        public var isEnterpriseInstall: Swift.Bool?
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/incomingWebhook`.
        public var incomingWebhook: Components.Schemas.IncomingWebhook?
        /// Creates a new `OauthV2AccessResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - warning:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - scope:
        ///   - team:
        ///   - enterprise:
        ///   - appId:
        ///   - authedUser:
        ///   - tokenType:
        ///   - accessToken:
        ///   - refreshToken:
        ///   - expiresIn:
        ///   - botUserId:
        ///   - isEnterpriseInstall:
        ///   - incomingWebhook:
        public init(
            ok: Swift.Bool,
            warning: Swift.String? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            scope: Swift.String? = nil,
            team: Components.Schemas.Enterprise? = nil,
            enterprise: Components.Schemas.Enterprise? = nil,
            appId: Swift.String? = nil,
            authedUser: Components.Schemas.AuthedUser? = nil,
            tokenType: Swift.String? = nil,
            accessToken: Swift.String? = nil,
            refreshToken: Swift.String? = nil,
            expiresIn: Swift.Int? = nil,
            botUserId: Swift.String? = nil,
            isEnterpriseInstall: Swift.Bool? = nil,
            incomingWebhook: Components.Schemas.IncomingWebhook? = nil
        ) {
            self.ok = ok
            self.warning = warning
            self.error = error
            self.needed = needed
            self.provided = provided
            self.scope = scope
            self.team = team
            self.enterprise = enterprise
            self.appId = appId
            self.authedUser = authedUser
            self.tokenType = tokenType
            self.accessToken = accessToken
            self.refreshToken = refreshToken
            self.expiresIn = expiresIn
            self.botUserId = botUserId
            self.isEnterpriseInstall = isEnterpriseInstall
            self.incomingWebhook = incomingWebhook
        }
    }
    /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse`.
    public struct OauthV2ExchangeResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/warning`.
        public var warning: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/scope`.
        public var scope: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/team`.
        public var team: Components.Schemas.Enterprise?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/enterprise`.
        public var enterprise: Components.Schemas.Enterprise?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/appId`.
        public var appId: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/authedUser`.
        public var authedUser: Components.Schemas.AuthedUser?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/tokenType`.
        public var tokenType: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/accessToken`.
        public var accessToken: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/refreshToken`.
        public var refreshToken: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/expiresIn`.
        public var expiresIn: Swift.Int?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/botUserId`.
        public var botUserId: Swift.String?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/isEnterpriseInstall`.
        public var isEnterpriseInstall: Swift.Bool?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/incomingWebhook`.
        public var incomingWebhook: Components.Schemas.IncomingWebhook?
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/responseMetadata`.
        public var responseMetadata: Components.Schemas.ResponseMetadata?
        /// Creates a new `OauthV2ExchangeResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - warning:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - scope:
        ///   - team:
        ///   - enterprise:
        ///   - appId:
        ///   - authedUser:
        ///   - tokenType:
        ///   - accessToken:
        ///   - refreshToken:
        ///   - expiresIn:
        ///   - botUserId:
        ///   - isEnterpriseInstall:
        ///   - incomingWebhook:
        ///   - responseMetadata:
        public init(
            ok: Swift.Bool,
            warning: Swift.String? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            scope: Swift.String? = nil,
            team: Components.Schemas.Enterprise? = nil,
            enterprise: Components.Schemas.Enterprise? = nil,
            appId: Swift.String? = nil,
            authedUser: Components.Schemas.AuthedUser? = nil,
            tokenType: Swift.String? = nil,
            accessToken: Swift.String? = nil,
            refreshToken: Swift.String? = nil,
            expiresIn: Swift.Int? = nil,
            botUserId: Swift.String? = nil,
            isEnterpriseInstall: Swift.Bool? = nil,
            incomingWebhook: Components.Schemas.IncomingWebhook? = nil,
            responseMetadata: Components.Schemas.ResponseMetadata? = nil
        ) {
            self.ok = ok
            self.warning = warning
            self.error = error
            self.needed = needed
            self.provided = provided
            self.scope = scope
            self.team = team
            self.enterprise = enterprise
            self.appId = appId
            self.authedUser = authedUser
            self.tokenType = tokenType
            self.accessToken = accessToken
            self.refreshToken = refreshToken
            self.expiresIn = expiresIn
            self.botUserId = botUserId
            self.isEnterpriseInstall = isEnterpriseInstall
            self.incomingWebhook = incomingWebhook
            self.responseMetadata = responseMetadata
        }
    }
}
#endif
