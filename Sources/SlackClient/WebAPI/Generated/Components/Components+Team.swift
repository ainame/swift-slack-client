// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// Types generated from the components section of the OpenAPI document.

#if WebAPI_Team
extension Components.Schemas {
    /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse`.
    public struct TeamAccessLogsResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/logins`.
        public var logins: [Components.Schemas.Login]?
        /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/paging`.
        public var paging: Components.Schemas.Paging?
        /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/responseMetadata`.
        public var responseMetadata: Components.Schemas.ResponseMetadata?
        /// Creates a new `TeamAccessLogsResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - logins:
        ///   - paging:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - responseMetadata:
        public init(
            ok: Swift.Bool,
            logins: [Components.Schemas.Login]? = nil,
            paging: Components.Schemas.Paging? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            responseMetadata: Components.Schemas.ResponseMetadata? = nil
        ) {
            self.ok = ok
            self.logins = logins
            self.paging = paging
            self.error = error
            self.needed = needed
            self.provided = provided
            self.responseMetadata = responseMetadata
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case logins
            case paging
            case error
            case needed
            case provided
            case responseMetadata
        }
    }
    /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse`.
    public struct TeamBillableInfoResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/billableInfo`.
        public var billableInfo: OpenAPIRuntime.OpenAPIObjectContainer?
        /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/responseMetadata`.
        public var responseMetadata: Components.Schemas.ResponseMetadata?
        /// Creates a new `TeamBillableInfoResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - billableInfo:
        ///   - responseMetadata:
        public init(
            ok: Swift.Bool,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            billableInfo: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
            responseMetadata: Components.Schemas.ResponseMetadata? = nil
        ) {
            self.ok = ok
            self.error = error
            self.needed = needed
            self.provided = provided
            self.billableInfo = billableInfo
            self.responseMetadata = responseMetadata
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case error
            case needed
            case provided
            case billableInfo
            case responseMetadata
        }
    }
    /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse`.
    public struct TeamBillingInfoResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse/plan`.
        public var plan: Swift.String?
        /// Creates a new `TeamBillingInfoResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - plan:
        public init(
            ok: Swift.Bool,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            plan: Swift.String? = nil
        ) {
            self.ok = ok
            self.error = error
            self.needed = needed
            self.provided = provided
            self.plan = plan
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case error
            case needed
            case provided
            case plan
        }
    }
    /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse`.
    public struct TeamExternalTeamsDisconnectResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse/responseMetadata`.
        public var responseMetadata: Components.Schemas.ResponseMetadata?
        /// Creates a new `TeamExternalTeamsDisconnectResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - responseMetadata:
        public init(
            ok: Swift.Bool,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            responseMetadata: Components.Schemas.ResponseMetadata? = nil
        ) {
            self.ok = ok
            self.error = error
            self.needed = needed
            self.provided = provided
            self.responseMetadata = responseMetadata
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case error
            case needed
            case provided
            case responseMetadata
        }
    }
    /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse`.
    public struct TeamExternalTeamsListResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/organizations`.
        public var organizations: [Components.Schemas.Organization]?
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/totalCount`.
        public var totalCount: Swift.Int?
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/responseMetadata`.
        public var responseMetadata: Components.Schemas.ResponseMetadata?
        /// Creates a new `TeamExternalTeamsListResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - organizations:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - totalCount:
        ///   - responseMetadata:
        public init(
            ok: Swift.Bool,
            organizations: [Components.Schemas.Organization]? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            totalCount: Swift.Int? = nil,
            responseMetadata: Components.Schemas.ResponseMetadata? = nil
        ) {
            self.ok = ok
            self.organizations = organizations
            self.error = error
            self.needed = needed
            self.provided = provided
            self.totalCount = totalCount
            self.responseMetadata = responseMetadata
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case organizations
            case error
            case needed
            case provided
            case totalCount
            case responseMetadata
        }
    }
    /// - Remark: Generated from `#/components/schemas/TeamInfoResponse`.
    public struct TeamInfoResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/TeamInfoResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/TeamInfoResponse/team`.
        public var team: Components.Schemas.Team?
        /// - Remark: Generated from `#/components/schemas/TeamInfoResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamInfoResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamInfoResponse/provided`.
        public var provided: Swift.String?
        /// Creates a new `TeamInfoResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - team:
        ///   - error:
        ///   - needed:
        ///   - provided:
        public init(
            ok: Swift.Bool,
            team: Components.Schemas.Team? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil
        ) {
            self.ok = ok
            self.team = team
            self.error = error
            self.needed = needed
            self.provided = provided
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case team
            case error
            case needed
            case provided
        }
    }
    /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse`.
    public struct TeamIntegrationLogsResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/logs`.
        public var logs: [Components.Schemas.Log]?
        /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/paging`.
        public var paging: Components.Schemas.Paging?
        /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/provided`.
        public var provided: Swift.String?
        /// Creates a new `TeamIntegrationLogsResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - logs:
        ///   - paging:
        ///   - error:
        ///   - needed:
        ///   - provided:
        public init(
            ok: Swift.Bool,
            logs: [Components.Schemas.Log]? = nil,
            paging: Components.Schemas.Paging? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil
        ) {
            self.ok = ok
            self.logs = logs
            self.paging = paging
            self.error = error
            self.needed = needed
            self.provided = provided
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case logs
            case paging
            case error
            case needed
            case provided
        }
    }
    /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse`.
    public struct TeamPreferencesListResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/msgEditWindowMins`.
        public var msgEditWindowMins: Swift.Int?
        /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/allowMessageDeletion`.
        public var allowMessageDeletion: Swift.Bool?
        /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/displayRealNames`.
        public var displayRealNames: Swift.Bool?
        /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/disableFileUploads`.
        public var disableFileUploads: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/whoCanPostGeneral`.
        public var whoCanPostGeneral: Swift.String?
        /// Creates a new `TeamPreferencesListResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - msgEditWindowMins:
        ///   - allowMessageDeletion:
        ///   - displayRealNames:
        ///   - disableFileUploads:
        ///   - whoCanPostGeneral:
        public init(
            ok: Swift.Bool,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            msgEditWindowMins: Swift.Int? = nil,
            allowMessageDeletion: Swift.Bool? = nil,
            displayRealNames: Swift.Bool? = nil,
            disableFileUploads: Swift.String? = nil,
            whoCanPostGeneral: Swift.String? = nil
        ) {
            self.ok = ok
            self.error = error
            self.needed = needed
            self.provided = provided
            self.msgEditWindowMins = msgEditWindowMins
            self.allowMessageDeletion = allowMessageDeletion
            self.displayRealNames = displayRealNames
            self.disableFileUploads = disableFileUploads
            self.whoCanPostGeneral = whoCanPostGeneral
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case error
            case needed
            case provided
            case msgEditWindowMins
            case allowMessageDeletion
            case displayRealNames
            case disableFileUploads
            case whoCanPostGeneral
        }
    }
    /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse`.
    public struct TeamProfileGetResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse/profile`.
        public var profile: Components.Schemas.Profile?
        /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse/provided`.
        public var provided: Swift.String?
        /// Creates a new `TeamProfileGetResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - profile:
        ///   - error:
        ///   - needed:
        ///   - provided:
        public init(
            ok: Swift.Bool,
            profile: Components.Schemas.Profile? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil
        ) {
            self.ok = ok
            self.profile = profile
            self.error = error
            self.needed = needed
            self.provided = provided
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case profile
            case error
            case needed
            case provided
        }
    }
}
#endif
