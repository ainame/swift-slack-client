// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif

#if canImport(SlackModels)
import SlackModels
#endif
/// Types generated from the components section of the OpenAPI document.

#if WebAPI_Bots
extension Components.Schemas {
    /// - Remark: Generated from `#/components/schemas/BotsInfoResponse`.
    public struct BotsInfoResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/BotsInfoResponse/bot`.
        public var bot: SlackModels.Bot?
        /// - Remark: Generated from `#/components/schemas/BotsInfoResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/BotsInfoResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/BotsInfoResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/BotsInfoResponse/provided`.
        public var provided: Swift.String?
        /// Creates a new `BotsInfoResponse`.
        ///
        /// - Parameters:
        ///   - bot:
        ///   - error:
        ///   - needed:
        ///   - ok:
        ///   - provided:
        public init(
            bot: SlackModels.Bot? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            ok: Swift.Bool,
            provided: Swift.String? = nil
        ) {
            self.bot = bot
            self.error = error
            self.needed = needed
            self.ok = ok
            self.provided = provided
        }

        public enum CodingKeys: String, CodingKey {
            case bot
            case error
            case needed
            case ok
            case provided
        }
    }
}
#endif
