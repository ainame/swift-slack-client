// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif

#if canImport(SlackModels)
import SlackModels
#endif
/// Types generated from the components section of the OpenAPI document.

#if WebAPI_Auth
extension Components.Schemas {
    /// - Remark: Generated from `#/components/schemas/AuthRevokeResponse`.
    public struct AuthRevokeResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/AuthRevokeResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthRevokeResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthRevokeResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/AuthRevokeResponse/provided`.
        public var provided: Swift.String?
        /// Creates a new `AuthRevokeResponse`.
        ///
        /// - Parameters:
        ///   - error:
        ///   - needed:
        ///   - ok:
        ///   - provided:
        public init(
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            ok: Swift.Bool,
            provided: Swift.String? = nil
        ) {
            self.error = error
            self.needed = needed
            self.ok = ok
            self.provided = provided
        }

        public enum CodingKeys: String, CodingKey {
            case error
            case needed
            case ok
            case provided
        }
    }

    /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse`.
    public struct AuthTeamsListResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/response_metadata`.
        public var responseMetadata: SlackModels.ResponseMetadata?
        /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/teams`.
        public var teams: [SlackModels.Team]?
        /// Creates a new `AuthTeamsListResponse`.
        ///
        /// - Parameters:
        ///   - error:
        ///   - needed:
        ///   - ok:
        ///   - provided:
        ///   - responseMetadata:
        ///   - teams:
        public init(
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            ok: Swift.Bool,
            provided: Swift.String? = nil,
            responseMetadata: SlackModels.ResponseMetadata? = nil,
            teams: [SlackModels.Team]? = nil
        ) {
            self.error = error
            self.needed = needed
            self.ok = ok
            self.provided = provided
            self.responseMetadata = responseMetadata
            self.teams = teams
        }

        public enum CodingKeys: String, CodingKey {
            case error
            case needed
            case ok
            case provided
            case responseMetadata = "response_metadata"
            case teams
        }
    }

    /// - Remark: Generated from `#/components/schemas/AuthTestResponse`.
    public struct AuthTestResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/app_id`.
        public var appId: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/app_name`.
        public var appName: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/bot_id`.
        public var botId: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/enterprise_id`.
        public var enterpriseId: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/expires_in`.
        public var expiresIn: Swift.Int?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/is_enterprise_install`.
        public var isEnterpriseInstall: Swift.Bool?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/team`.
        public var team: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/team_id`.
        public var teamId: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/url`.
        public var url: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/user`.
        public var user: Swift.String?
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse/user_id`.
        public var userId: Swift.String?
        /// Creates a new `AuthTestResponse`.
        ///
        /// - Parameters:
        ///   - appId:
        ///   - appName:
        ///   - botId:
        ///   - enterpriseId:
        ///   - error:
        ///   - expiresIn:
        ///   - isEnterpriseInstall:
        ///   - needed:
        ///   - ok:
        ///   - provided:
        ///   - team:
        ///   - teamId:
        ///   - url:
        ///   - user:
        ///   - userId:
        public init(
            appId: Swift.String? = nil,
            appName: Swift.String? = nil,
            botId: Swift.String? = nil,
            enterpriseId: Swift.String? = nil,
            error: Swift.String? = nil,
            expiresIn: Swift.Int? = nil,
            isEnterpriseInstall: Swift.Bool? = nil,
            needed: Swift.String? = nil,
            ok: Swift.Bool,
            provided: Swift.String? = nil,
            team: Swift.String? = nil,
            teamId: Swift.String? = nil,
            url: Swift.String? = nil,
            user: Swift.String? = nil,
            userId: Swift.String? = nil
        ) {
            self.appId = appId
            self.appName = appName
            self.botId = botId
            self.enterpriseId = enterpriseId
            self.error = error
            self.expiresIn = expiresIn
            self.isEnterpriseInstall = isEnterpriseInstall
            self.needed = needed
            self.ok = ok
            self.provided = provided
            self.team = team
            self.teamId = teamId
            self.url = url
            self.user = user
            self.userId = userId
        }

        public enum CodingKeys: String, CodingKey {
            case appId = "app_id"
            case appName = "app_name"
            case botId = "bot_id"
            case enterpriseId = "enterprise_id"
            case error
            case expiresIn = "expires_in"
            case isEnterpriseInstall = "is_enterprise_install"
            case needed
            case ok
            case provided
            case team
            case teamId = "team_id"
            case url
            case user
            case userId = "user_id"
        }
    }
}
#endif
