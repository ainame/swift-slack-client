// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// Types generated from the components section of the OpenAPI document.

#if WebAPI_RTM
extension Components.Schemas {
    /// - Remark: Generated from `#/components/schemas/RtmConnectResponse`.
    public struct RtmConnectResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/url`.
        public var url: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/team`.
        public var team: Components.Schemas.Team?
        /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/self`.
        public var _self: Components.Schemas._Self?
        /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/provided`.
        public var provided: Swift.String?
        /// Creates a new `RtmConnectResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - url:
        ///   - team:
        ///   - _self:
        ///   - error:
        ///   - needed:
        ///   - provided:
        public init(
            ok: Swift.Bool,
            url: Swift.String? = nil,
            team: Components.Schemas.Team? = nil,
            _self: Components.Schemas._Self? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil
        ) {
            self.ok = ok
            self.url = url
            self.team = team
            self._self = _self
            self.error = error
            self.needed = needed
            self.provided = provided
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case url
            case team
            case _self = "self"
            case error
            case needed
            case provided
        }
    }
    /// - Remark: Generated from `#/components/schemas/RtmStartResponse`.
    public struct RtmStartResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/self`.
        public var _self: Components.Schemas._Self?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/team`.
        public var team: Components.Schemas.Team?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/channels`.
        public var channels: [Components.Schemas.Channel]?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/groups`.
        public var groups: [Components.Schemas.Group]?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/ims`.
        public var ims: [Components.Schemas.Im]?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/subteams`.
        public var subteams: Components.Schemas.Subteams?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/dnd`.
        public var dnd: Components.Schemas.Dnd?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/users`.
        public var users: [Components.Schemas.User]?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/bots`.
        public var bots: [Components.Schemas.Bot]?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/url`.
        public var url: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/links`.
        public var links: Components.Schemas.Links?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/acceptTosUrl`.
        public var acceptTosUrl: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/latestEventTs`.
        public var latestEventTs: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/cacheTs`.
        public var cacheTs: Swift.Int?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/mobileAppRequiresUpgrade`.
        public var mobileAppRequiresUpgrade: Swift.Bool?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/readOnlyChannels`.
        public var readOnlyChannels: [Swift.String]?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/nonThreadableChannels`.
        public var nonThreadableChannels: [Swift.String]?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/threadOnlyChannels`.
        public var threadOnlyChannels: [Swift.String]?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/canManageSharedChannels`.
        public var canManageSharedChannels: Swift.Bool?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/cacheVersion`.
        public var cacheVersion: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/cacheTsVersion`.
        public var cacheTsVersion: Swift.String?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/isEurope`.
        public var isEurope: Swift.Bool?
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse/responseMetadata`.
        public var responseMetadata: Components.Schemas.ResponseMetadata?
        /// Creates a new `RtmStartResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - _self:
        ///   - team:
        ///   - channels:
        ///   - groups:
        ///   - ims:
        ///   - subteams:
        ///   - dnd:
        ///   - users:
        ///   - bots:
        ///   - url:
        ///   - links:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - acceptTosUrl:
        ///   - latestEventTs:
        ///   - cacheTs:
        ///   - mobileAppRequiresUpgrade:
        ///   - readOnlyChannels:
        ///   - nonThreadableChannels:
        ///   - threadOnlyChannels:
        ///   - canManageSharedChannels:
        ///   - cacheVersion:
        ///   - cacheTsVersion:
        ///   - isEurope:
        ///   - responseMetadata:
        public init(
            ok: Swift.Bool,
            _self: Components.Schemas._Self? = nil,
            team: Components.Schemas.Team? = nil,
            channels: [Components.Schemas.Channel]? = nil,
            groups: [Components.Schemas.Group]? = nil,
            ims: [Components.Schemas.Im]? = nil,
            subteams: Components.Schemas.Subteams? = nil,
            dnd: Components.Schemas.Dnd? = nil,
            users: [Components.Schemas.User]? = nil,
            bots: [Components.Schemas.Bot]? = nil,
            url: Swift.String? = nil,
            links: Components.Schemas.Links? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            acceptTosUrl: Swift.String? = nil,
            latestEventTs: Swift.String? = nil,
            cacheTs: Swift.Int? = nil,
            mobileAppRequiresUpgrade: Swift.Bool? = nil,
            readOnlyChannels: [Swift.String]? = nil,
            nonThreadableChannels: [Swift.String]? = nil,
            threadOnlyChannels: [Swift.String]? = nil,
            canManageSharedChannels: Swift.Bool? = nil,
            cacheVersion: Swift.String? = nil,
            cacheTsVersion: Swift.String? = nil,
            isEurope: Swift.Bool? = nil,
            responseMetadata: Components.Schemas.ResponseMetadata? = nil
        ) {
            self.ok = ok
            self._self = _self
            self.team = team
            self.channels = channels
            self.groups = groups
            self.ims = ims
            self.subteams = subteams
            self.dnd = dnd
            self.users = users
            self.bots = bots
            self.url = url
            self.links = links
            self.error = error
            self.needed = needed
            self.provided = provided
            self.acceptTosUrl = acceptTosUrl
            self.latestEventTs = latestEventTs
            self.cacheTs = cacheTs
            self.mobileAppRequiresUpgrade = mobileAppRequiresUpgrade
            self.readOnlyChannels = readOnlyChannels
            self.nonThreadableChannels = nonThreadableChannels
            self.threadOnlyChannels = threadOnlyChannels
            self.canManageSharedChannels = canManageSharedChannels
            self.cacheVersion = cacheVersion
            self.cacheTsVersion = cacheTsVersion
            self.isEurope = isEurope
            self.responseMetadata = responseMetadata
        }
        public enum CodingKeys: String, CodingKey {
            case ok
            case _self = "self"
            case team
            case channels
            case groups
            case ims
            case subteams
            case dnd
            case users
            case bots
            case url
            case links
            case error
            case needed
            case provided
            case acceptTosUrl
            case latestEventTs
            case cacheTs
            case mobileAppRequiresUpgrade
            case readOnlyChannels
            case nonThreadableChannels
            case threadOnlyChannels
            case canManageSharedChannels
            case cacheVersion
            case cacheTsVersion
            case isEurope
            case responseMetadata
        }
    }
}
#endif
