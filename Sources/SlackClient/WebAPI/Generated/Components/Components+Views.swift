// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif

#if canImport(SlackBlockKit)
import SlackBlockKit
#endif
/// Types generated from the components section of the OpenAPI document.

#if WebAPI_Views
extension Components.Schemas {
    /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse`.
    public struct ViewsOpenResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/warning`.
        public var warning: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/view`.
        public var view: SlackBlockKit.ViewType?
        /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/responseMetadata`.
        public var responseMetadata: Components.Schemas.ResponseMetadata?
        /// Creates a new `ViewsOpenResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - warning:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - view:
        ///   - responseMetadata:
        public init(
            ok: Swift.Bool,
            warning: Swift.String? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            view: SlackBlockKit.ViewType? = nil,
            responseMetadata: Components.Schemas.ResponseMetadata? = nil
        ) {
            self.ok = ok
            self.warning = warning
            self.error = error
            self.needed = needed
            self.provided = provided
            self.view = view
            self.responseMetadata = responseMetadata
        }
    }
    /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse`.
    public struct ViewsPublishResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/warning`.
        public var warning: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/view`.
        public var view: SlackBlockKit.ViewType?
        /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/responseMetadata`.
        public var responseMetadata: Components.Schemas.ResponseMetadata?
        /// Creates a new `ViewsPublishResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - warning:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - view:
        ///   - responseMetadata:
        public init(
            ok: Swift.Bool,
            warning: Swift.String? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            view: SlackBlockKit.ViewType? = nil,
            responseMetadata: Components.Schemas.ResponseMetadata? = nil
        ) {
            self.ok = ok
            self.warning = warning
            self.error = error
            self.needed = needed
            self.provided = provided
            self.view = view
            self.responseMetadata = responseMetadata
        }
    }
    /// - Remark: Generated from `#/components/schemas/ViewsPushResponse`.
    public struct ViewsPushResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/warning`.
        public var warning: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/view`.
        public var view: SlackBlockKit.ViewType?
        /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/responseMetadata`.
        public var responseMetadata: Components.Schemas.ResponseMetadata?
        /// Creates a new `ViewsPushResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - warning:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - view:
        ///   - responseMetadata:
        public init(
            ok: Swift.Bool,
            warning: Swift.String? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            view: SlackBlockKit.ViewType? = nil,
            responseMetadata: Components.Schemas.ResponseMetadata? = nil
        ) {
            self.ok = ok
            self.warning = warning
            self.error = error
            self.needed = needed
            self.provided = provided
            self.view = view
            self.responseMetadata = responseMetadata
        }
    }
    /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse`.
    public struct ViewsUpdateResponse: Codable, Hashable, Sendable {
        /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/ok`.
        public var ok: Swift.Bool
        /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/warning`.
        public var warning: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/error`.
        public var error: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/needed`.
        public var needed: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/provided`.
        public var provided: Swift.String?
        /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/view`.
        public var view: SlackBlockKit.ViewType?
        /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/responseMetadata`.
        public var responseMetadata: Components.Schemas.ResponseMetadata?
        /// Creates a new `ViewsUpdateResponse`.
        ///
        /// - Parameters:
        ///   - ok:
        ///   - warning:
        ///   - error:
        ///   - needed:
        ///   - provided:
        ///   - view:
        ///   - responseMetadata:
        public init(
            ok: Swift.Bool,
            warning: Swift.String? = nil,
            error: Swift.String? = nil,
            needed: Swift.String? = nil,
            provided: Swift.String? = nil,
            view: SlackBlockKit.ViewType? = nil,
            responseMetadata: Components.Schemas.ResponseMetadata? = nil
        ) {
            self.ok = ok
            self.warning = warning
            self.error = error
            self.needed = needed
            self.provided = provided
            self.view = view
            self.responseMetadata = responseMetadata
        }
    }
}
#endif
