// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Bookmarks
extension Operations {
    public enum BookmarksAdd {
        public static let id: Swift.String = "bookmarksAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookmarks.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.BookmarksAdd.Input.Headers
            /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to add bookmark in.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/channel_id`.
                    public var channelId: Swift.String
                    /// Title for the bookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Type of the bookmark i.e link.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/type`.
                    public var _type: Swift.String
                    /// The level that we are setting the file's permission to (read or write).
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/access_level`.
                    public var accessLevel: Swift.String?
                    /// Emoji tag to apply to the link.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/emoji`.
                    public var emoji: Swift.String?
                    /// ID of the entity being bookmarked. Only applies to message and file types.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/entity_id`.
                    public var entityId: Swift.String?
                    /// Link to bookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/link`.
                    public var link: Swift.String?
                    /// Id of this bookmark's parent.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/parent_id`.
                    public var parentId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel to add bookmark in.
                    ///   - title: Title for the bookmark.
                    ///   - _type: Type of the bookmark i.e link.
                    ///   - accessLevel: The level that we are setting the file's permission to (read or write).
                    ///   - emoji: Emoji tag to apply to the link.
                    ///   - entityId: ID of the entity being bookmarked. Only applies to message and file types.
                    ///   - link: Link to bookmark.
                    ///   - parentId: Id of this bookmark's parent.
                    public init(
                        channelId: Swift.String,
                        title: Swift.String,
                        _type: Swift.String,
                        accessLevel: Swift.String? = nil,
                        emoji: Swift.String? = nil,
                        entityId: Swift.String? = nil,
                        link: Swift.String? = nil,
                        parentId: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.title = title
                        self._type = _type
                        self.accessLevel = accessLevel
                        self.emoji = emoji
                        self.entityId = entityId
                        self.link = link
                        self.parentId = parentId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channelId = "channel_id"
                        case title
                        case _type = "type"
                        case accessLevel = "access_level"
                        case emoji
                        case entityId = "entity_id"
                        case link
                        case parentId = "parent_id"
                    }
                }

                /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/content/application\/json`.
                case json(Operations.BookmarksAdd.Input.Body.JsonPayload)
            }

            public var body: Operations.BookmarksAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BookmarksAdd.Input.Headers = .init(),
                body: Operations.BookmarksAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BookmarksAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BookmarksAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.BookmarksAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BookmarksAdd.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//bookmarks.add/post(bookmarksAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BookmarksAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BookmarksAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum BookmarksEdit {
        public static let id: Swift.String = "bookmarksEdit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookmarks.edit/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksEdit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksEdit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.BookmarksEdit.Input.Headers
            /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Bookmark to update.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json/bookmark_id`.
                    public var bookmarkId: Swift.String
                    /// Channel to update bookmark in.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json/channel_id`.
                    public var channelId: Swift.String
                    /// Emoji tag to apply to the link.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json/emoji`.
                    public var emoji: Swift.String?
                    /// Link to bookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json/link`.
                    public var link: Swift.String?
                    /// Title for the bookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - bookmarkId: Bookmark to update.
                    ///   - channelId: Channel to update bookmark in.
                    ///   - emoji: Emoji tag to apply to the link.
                    ///   - link: Link to bookmark.
                    ///   - title: Title for the bookmark.
                    public init(
                        bookmarkId: Swift.String,
                        channelId: Swift.String,
                        emoji: Swift.String? = nil,
                        link: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.bookmarkId = bookmarkId
                        self.channelId = channelId
                        self.emoji = emoji
                        self.link = link
                        self.title = title
                    }

                    public enum CodingKeys: String, CodingKey {
                        case bookmarkId = "bookmark_id"
                        case channelId = "channel_id"
                        case emoji
                        case link
                        case title
                    }
                }

                /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/content/application\/json`.
                case json(Operations.BookmarksEdit.Input.Body.JsonPayload)
            }

            public var body: Operations.BookmarksEdit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BookmarksEdit.Input.Headers = .init(),
                body: Operations.BookmarksEdit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.edit/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BookmarksEditResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BookmarksEditResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.BookmarksEdit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BookmarksEdit.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//bookmarks.edit/post(bookmarksEdit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BookmarksEdit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BookmarksEdit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum BookmarksList {
        public static let id: Swift.String = "bookmarksList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookmarks.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.BookmarksList.Input.Headers
            /// - Remark: Generated from `#/paths/bookmarks.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to list bookmarks in.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.list/POST/requestBody/json/channel_id`.
                    public var channelId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel to list bookmarks in.
                    public init(channelId: Swift.String) {
                        self.channelId = channelId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channelId = "channel_id"
                    }
                }

                /// - Remark: Generated from `#/paths/bookmarks.list/POST/requestBody/content/application\/json`.
                case json(Operations.BookmarksList.Input.Body.JsonPayload)
            }

            public var body: Operations.BookmarksList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BookmarksList.Input.Headers = .init(),
                body: Operations.BookmarksList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookmarks.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BookmarksListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BookmarksListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.BookmarksList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BookmarksList.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//bookmarks.list/post(bookmarksList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BookmarksList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BookmarksList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum BookmarksRemove {
        public static let id: Swift.String = "bookmarksRemove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookmarks.remove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksRemove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksRemove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.BookmarksRemove.Input.Headers
            /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Bookmark to remove.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody/json/bookmark_id`.
                    public var bookmarkId: Swift.String
                    /// Channel to remove bookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody/json/channel_id`.
                    public var channelId: Swift.String
                    /// Quip section ID to unbookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody/json/quip_section_id`.
                    public var quipSectionId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - bookmarkId: Bookmark to remove.
                    ///   - channelId: Channel to remove bookmark.
                    ///   - quipSectionId: Quip section ID to unbookmark.
                    public init(
                        bookmarkId: Swift.String,
                        channelId: Swift.String,
                        quipSectionId: Swift.String? = nil
                    ) {
                        self.bookmarkId = bookmarkId
                        self.channelId = channelId
                        self.quipSectionId = quipSectionId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case bookmarkId = "bookmark_id"
                        case channelId = "channel_id"
                        case quipSectionId = "quip_section_id"
                    }
                }

                /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody/content/application\/json`.
                case json(Operations.BookmarksRemove.Input.Body.JsonPayload)
            }

            public var body: Operations.BookmarksRemove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BookmarksRemove.Input.Headers = .init(),
                body: Operations.BookmarksRemove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.remove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookmarks.remove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BookmarksRemoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BookmarksRemoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.BookmarksRemove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BookmarksRemove.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//bookmarks.remove/post(bookmarksRemove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BookmarksRemove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BookmarksRemove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }
}
#endif
