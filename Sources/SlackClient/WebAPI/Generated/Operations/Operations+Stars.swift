// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Stars
extension Operations {
    public enum StarsAdd {
        public static let id: Swift.String = "starsAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stars.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.StarsAdd.Input.Headers
            /// - Remark: Generated from `#/paths/stars.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to add star to, or channel where the message to add star to was posted (used with timestamp).
                    ///
                    /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// File to add star to.
                    ///
                    /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// File comment to add star to.
                    ///
                    /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/json/file_comment`.
                    public var fileComment: Swift.String?
                    /// Timestamp of the message to add star to.
                    ///
                    /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/json/timestamp`.
                    public var timestamp: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel to add star to, or channel where the message to add star to was posted (used with timestamp).
                    ///   - file: File to add star to.
                    ///   - fileComment: File comment to add star to.
                    ///   - timestamp: Timestamp of the message to add star to.
                    public init(
                        channel: Swift.String? = nil,
                        file: Swift.String? = nil,
                        fileComment: Swift.String? = nil,
                        timestamp: Swift.String? = nil,
                    ) {
                        self.channel = channel
                        self.file = file
                        self.fileComment = fileComment
                        self.timestamp = timestamp
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case file
                        case fileComment = "file_comment"
                        case timestamp
                    }
                }

                /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/content/application\/json`.
                case json(Operations.StarsAdd.Input.Body.JsonPayload)
            }

            public var body: Operations.StarsAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.StarsAdd.Input.Headers = .init(),
                body: Operations.StarsAdd.Input.Body,
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stars.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.StarsAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.StarsAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.StarsAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.StarsAdd.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//stars.add/post(starsAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.StarsAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.StarsAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum StarsList {
        public static let id: Swift.String = "starsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stars.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.StarsList.Input.Headers
            /// - Remark: Generated from `#/paths/stars.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is
                    /// mandatory: the default value simply fetches the first "page" of the collection. See pagination for more details.
                    ///
                    /// - Remark: Generated from `#/paths/stars.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
                    ///
                    /// - Remark: Generated from `#/paths/stars.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// encoded team id to list stars in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/stars.list/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but
                    /// pagination is mandatory: the default value simply fetches the first "page" of the collection. See pagination for more details.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
                    ///   - teamId: encoded team id to list stars in, required if org token is used.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil,
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/stars.list/POST/requestBody/content/application\/json`.
                case json(Operations.StarsList.Input.Body.JsonPayload)
            }

            public var body: Operations.StarsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.StarsList.Input.Headers = .init(),
                body: Operations.StarsList.Input.Body,
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stars.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.StarsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.StarsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.StarsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.StarsList.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//stars.list/post(starsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.StarsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.StarsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum StarsRemove {
        public static let id: Swift.String = "starsRemove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stars.remove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsRemove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsRemove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.StarsRemove.Input.Headers
            /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to remove star from, or channel where the message to remove star from was posted (used with timestamp).
                    ///
                    /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// File to remove star from.
                    ///
                    /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// File comment to remove star from.
                    ///
                    /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/json/file_comment`.
                    public var fileComment: Swift.String?
                    /// Timestamp of the message to remove star from.
                    ///
                    /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/json/timestamp`.
                    public var timestamp: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel to remove star from, or channel where the message to remove star from was posted (used with timestamp).
                    ///   - file: File to remove star from.
                    ///   - fileComment: File comment to remove star from.
                    ///   - timestamp: Timestamp of the message to remove star from.
                    public init(
                        channel: Swift.String? = nil,
                        file: Swift.String? = nil,
                        fileComment: Swift.String? = nil,
                        timestamp: Swift.String? = nil,
                    ) {
                        self.channel = channel
                        self.file = file
                        self.fileComment = fileComment
                        self.timestamp = timestamp
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case file
                        case fileComment = "file_comment"
                        case timestamp
                    }
                }

                /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/content/application\/json`.
                case json(Operations.StarsRemove.Input.Body.JsonPayload)
            }

            public var body: Operations.StarsRemove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.StarsRemove.Input.Headers = .init(),
                body: Operations.StarsRemove.Input.Body,
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.remove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stars.remove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.StarsRemoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.StarsRemoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.StarsRemove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.StarsRemove.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//stars.remove/post(starsRemove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.StarsRemove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.StarsRemove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }
}
#endif
