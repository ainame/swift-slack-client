// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Search
extension Operations {
    public enum SearchAll {
        public static let id: Swift.String = "searchAll"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search.all/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchAll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchAll.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.SearchAll.Input.Headers
            /// - Remark: Generated from `#/paths/search.all/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Search query. May contains booleans, etc.
                    ///
                    /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// Pass a value of true to enable query highlight markers (see below).
                    ///
                    /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json/highlight`.
                    public var highlight: Swift.Bool?
                    /// Return matches sorted by either score or timestamp.
                    ///
                    /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json/sort`.
                    public var sort: Swift.String?
                    /// Change sort direction to ascending (asc) or descending (desc).
                    ///
                    /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json/sort_dir`.
                    public var sortDir: Swift.String?
                    /// encoded team id to search in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Search query. May contains booleans, etc.
                    ///   - highlight: Pass a value of true to enable query highlight markers (see below).
                    ///   - sort: Return matches sorted by either score or timestamp.
                    ///   - sortDir: Change sort direction to ascending (asc) or descending (desc).
                    ///   - teamId: encoded team id to search in, required if org token is used.
                    public init(
                        query: Swift.String,
                        highlight: Swift.Bool? = nil,
                        sort: Swift.String? = nil,
                        sortDir: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.query = query
                        self.highlight = highlight
                        self.sort = sort
                        self.sortDir = sortDir
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case query
                        case highlight
                        case sort
                        case sortDir = "sort_dir"
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/search.all/POST/requestBody/content/application\/json`.
                case json(Operations.SearchAll.Input.Body.JsonPayload)
            }

            public var body: Operations.SearchAll.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.SearchAll.Input.Headers = .init(),
                body: Operations.SearchAll.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.all/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search.all/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SearchAllResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SearchAllResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.SearchAll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SearchAll.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//search.all/post(searchAll)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SearchAll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SearchAll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum SearchFiles {
        public static let id: Swift.String = "searchFiles"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search.files/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchFiles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchFiles.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.SearchFiles.Input.Headers
            /// - Remark: Generated from `#/paths/search.files/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Search query.
                    ///
                    /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// Pass a value of true to enable query highlight markers (see below).
                    ///
                    /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json/highlight`.
                    public var highlight: Swift.Bool?
                    /// Return matches sorted by either score or timestamp.
                    ///
                    /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json/sort`.
                    public var sort: Swift.String?
                    /// Change sort direction to ascending (asc) or descending (desc).
                    ///
                    /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json/sort_dir`.
                    public var sortDir: Swift.String?
                    /// encoded team id to search in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Search query.
                    ///   - highlight: Pass a value of true to enable query highlight markers (see below).
                    ///   - sort: Return matches sorted by either score or timestamp.
                    ///   - sortDir: Change sort direction to ascending (asc) or descending (desc).
                    ///   - teamId: encoded team id to search in, required if org token is used.
                    public init(
                        query: Swift.String,
                        highlight: Swift.Bool? = nil,
                        sort: Swift.String? = nil,
                        sortDir: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.query = query
                        self.highlight = highlight
                        self.sort = sort
                        self.sortDir = sortDir
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case query
                        case highlight
                        case sort
                        case sortDir = "sort_dir"
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/search.files/POST/requestBody/content/application\/json`.
                case json(Operations.SearchFiles.Input.Body.JsonPayload)
            }

            public var body: Operations.SearchFiles.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.SearchFiles.Input.Headers = .init(),
                body: Operations.SearchFiles.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.files/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search.files/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SearchFilesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SearchFilesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.SearchFiles.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SearchFiles.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//search.files/post(searchFiles)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SearchFiles.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SearchFiles.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum SearchMessages {
        public static let id: Swift.String = "searchMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search.messages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchMessages.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.SearchMessages.Input.Headers
            /// - Remark: Generated from `#/paths/search.messages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Search query.
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// Use this when getting results with cursormark pagination. For first call send * for subsequent calls, send the value
                    /// of next_cursor returned in the previous call's results.
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Pass a value of true to enable query highlight markers (see below).
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/highlight`.
                    public var highlight: Swift.Bool?
                    /// Return matches sorted by either score or timestamp.
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/sort`.
                    public var sort: Swift.String?
                    /// Change sort direction to ascending (asc) or descending (desc).
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/sort_dir`.
                    public var sortDir: Swift.String?
                    /// encoded team id to search in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Search query.
                    ///   - cursor: Use this when getting results with cursormark pagination. For first call send * for subsequent calls,
                    /// send the value of next_cursor returned in the previous call's results.
                    ///   - highlight: Pass a value of true to enable query highlight markers (see below).
                    ///   - sort: Return matches sorted by either score or timestamp.
                    ///   - sortDir: Change sort direction to ascending (asc) or descending (desc).
                    ///   - teamId: encoded team id to search in, required if org token is used.
                    public init(
                        query: Swift.String,
                        cursor: Swift.String? = nil,
                        highlight: Swift.Bool? = nil,
                        sort: Swift.String? = nil,
                        sortDir: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.query = query
                        self.cursor = cursor
                        self.highlight = highlight
                        self.sort = sort
                        self.sortDir = sortDir
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case query
                        case cursor
                        case highlight
                        case sort
                        case sortDir = "sort_dir"
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/content/application\/json`.
                case json(Operations.SearchMessages.Input.Body.JsonPayload)
            }

            public var body: Operations.SearchMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.SearchMessages.Input.Headers = .init(),
                body: Operations.SearchMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.messages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search.messages/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SearchMessagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SearchMessagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.SearchMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SearchMessages.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//search.messages/post(searchMessages)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SearchMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SearchMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }
}
#endif
