// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Canvases
extension Operations {
    public enum CanvasesAccessDelete {
        public static let id: Swift.String = "canvasesAccessDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.access.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesAccessDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesAccessDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.CanvasesAccessDelete.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded ID of the canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody/json/canvas_id`.
                    public var canvasId: Swift.String
                    /// List of channels you wish to update access for.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody/json/channel_ids`.
                    public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// List of users you wish to update access for.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody/json/user_ids`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - canvasId: Encoded ID of the canvas.
                    ///   - channelIds: List of channels you wish to update access for.
                    ///   - userIds: List of users you wish to update access for.
                    public init(
                        canvasId: Swift.String,
                        channelIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                    ) {
                        self.canvasId = canvasId
                        self.channelIds = channelIds
                        self.userIds = userIds
                    }

                    public enum CodingKeys: String, CodingKey {
                        case canvasId = "canvas_id"
                        case channelIds = "channel_ids"
                        case userIds = "user_ids"
                    }
                }

                /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesAccessDelete.Input.Body.JsonPayload)
            }

            public var body: Operations.CanvasesAccessDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesAccessDelete.Input.Headers = .init(),
                body: Operations.CanvasesAccessDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.access.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.access.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesAccessDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesAccessDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.CanvasesAccessDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesAccessDelete.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.access.delete/post(canvasesAccessDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesAccessDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesAccessDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum CanvasesAccessSet {
        public static let id: Swift.String = "canvasesAccessSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.access.set/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesAccessSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesAccessSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.CanvasesAccessSet.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Desired level of access.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/json/access_level`.
                    public var accessLevel: Swift.String
                    /// Encoded ID of the canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/json/canvas_id`.
                    public var canvasId: Swift.String
                    /// List of channels you wish to update access for. Can only be used if user_ids is not provided.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/json/channel_ids`.
                    public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// List of users you wish to update access for. Can only be used if channel_ids is not provided.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/json/user_ids`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - accessLevel: Desired level of access.
                    ///   - canvasId: Encoded ID of the canvas.
                    ///   - channelIds: List of channels you wish to update access for. Can only be used if user_ids is not provided.
                    ///   - userIds: List of users you wish to update access for. Can only be used if channel_ids is not provided.
                    public init(
                        accessLevel: Swift.String,
                        canvasId: Swift.String,
                        channelIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                    ) {
                        self.accessLevel = accessLevel
                        self.canvasId = canvasId
                        self.channelIds = channelIds
                        self.userIds = userIds
                    }

                    public enum CodingKeys: String, CodingKey {
                        case accessLevel = "access_level"
                        case canvasId = "canvas_id"
                        case channelIds = "channel_ids"
                        case userIds = "user_ids"
                    }
                }

                /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesAccessSet.Input.Body.JsonPayload)
            }

            public var body: Operations.CanvasesAccessSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesAccessSet.Input.Headers = .init(),
                body: Operations.CanvasesAccessSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.access.set/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.access.set/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesAccessSetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesAccessSetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.CanvasesAccessSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesAccessSet.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.access.set/post(canvasesAccessSet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesAccessSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesAccessSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum CanvasesCreate {
        public static let id: Swift.String = "canvasesCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.CanvasesCreate.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel ID of the channel the canvas will be tabbed in. This is a required field for free teams.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody/json/channel_id`.
                    public var channelId: Swift.String?
                    /// Structure describing the type and value of the content to create.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody/json/document_content`.
                    public var documentContent: Swift.String?
                    /// Title of the newly created canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel ID of the channel the canvas will be tabbed in. This is a required field for free teams.
                    ///   - documentContent: Structure describing the type and value of the content to create.
                    ///   - title: Title of the newly created canvas.
                    public init(
                        channelId: Swift.String? = nil,
                        documentContent: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.documentContent = documentContent
                        self.title = title
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channelId = "channel_id"
                        case documentContent = "document_content"
                        case title
                    }
                }

                /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesCreate.Input.Body.JsonPayload)
            }

            public var body: Operations.CanvasesCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesCreate.Input.Headers = .init(),
                body: Operations.CanvasesCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.CanvasesCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesCreate.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.create/post(canvasesCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum CanvasesDelete {
        public static let id: Swift.String = "canvasesDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.CanvasesDelete.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded ID of the canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.delete/POST/requestBody/json/canvas_id`.
                    public var canvasId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - canvasId: Encoded ID of the canvas.
                    public init(canvasId: Swift.String) {
                        self.canvasId = canvasId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case canvasId = "canvas_id"
                    }
                }

                /// - Remark: Generated from `#/paths/canvases.delete/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesDelete.Input.Body.JsonPayload)
            }

            public var body: Operations.CanvasesDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesDelete.Input.Headers = .init(),
                body: Operations.CanvasesDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.CanvasesDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesDelete.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.delete/post(canvasesDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum CanvasesEdit {
        public static let id: Swift.String = "canvasesEdit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.edit/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesEdit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesEdit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.CanvasesEdit.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.edit/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.edit/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded ID of the canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.edit/POST/requestBody/json/canvas_id`.
                    public var canvasId: Swift.String
                    /// List of changes to apply on the specified canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.edit/POST/requestBody/json/changes`.
                    public var changes: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - canvasId: Encoded ID of the canvas.
                    ///   - changes: List of changes to apply on the specified canvas.
                    public init(
                        canvasId: Swift.String,
                        changes: OpenAPIRuntime.OpenAPIArrayContainer
                    ) {
                        self.canvasId = canvasId
                        self.changes = changes
                    }

                    public enum CodingKeys: String, CodingKey {
                        case canvasId = "canvas_id"
                        case changes
                    }
                }

                /// - Remark: Generated from `#/paths/canvases.edit/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesEdit.Input.Body.JsonPayload)
            }

            public var body: Operations.CanvasesEdit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesEdit.Input.Headers = .init(),
                body: Operations.CanvasesEdit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.edit/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.edit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesEditResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesEditResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.CanvasesEdit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesEdit.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.edit/post(canvasesEdit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesEdit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesEdit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum CanvasesSectionsLookup {
        public static let id: Swift.String = "canvasesSectionsLookup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesSectionsLookup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesSectionsLookup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.CanvasesSectionsLookup.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded ID of the canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/requestBody/json/canvas_id`.
                    public var canvasId: Swift.String
                    /// Filtering criteria.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/requestBody/json/criteria`.
                    public var criteria: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - canvasId: Encoded ID of the canvas.
                    ///   - criteria: Filtering criteria.
                    public init(
                        canvasId: Swift.String,
                        criteria: Swift.String
                    ) {
                        self.canvasId = canvasId
                        self.criteria = criteria
                    }

                    public enum CodingKeys: String, CodingKey {
                        case canvasId = "canvas_id"
                        case criteria
                    }
                }

                /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesSectionsLookup.Input.Body.JsonPayload)
            }

            public var body: Operations.CanvasesSectionsLookup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesSectionsLookup.Input.Headers = .init(),
                body: Operations.CanvasesSectionsLookup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesSectionsLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesSectionsLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.CanvasesSectionsLookup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesSectionsLookup.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.sections.lookup/post(canvasesSectionsLookup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesSectionsLookup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesSectionsLookup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }
}
#endif
