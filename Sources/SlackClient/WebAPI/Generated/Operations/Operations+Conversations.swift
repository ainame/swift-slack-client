// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Conversations
extension Operations {
    public enum ConversationsAcceptSharedInvite {
        public static let id: Swift.String = "conversationsAcceptSharedInvite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsAcceptSharedInvite.AcceptableContentType>
                ]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsAcceptSharedInvite.AcceptableContentType>,
                ] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsAcceptSharedInvite.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the channel. If the channel does not exist already in your workspace, this name is the one that the channel
                    /// will take.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/channel_name`.
                    public var channelName: Swift.String
                    /// ID of the channel that you'd like to accept. Must provide either invite_id or channel_id.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/channel_id`.
                    public var channelId: Swift.String?
                    /// Whether you'd like to use your workspace's free trial to begin using Slack Connect.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/free_trial_accepted`.
                    public var freeTrialAccepted: Swift.Bool?
                    /// ID of the invite that you'd like to accept. Must provide either invite_id or channel_id. See the
                    /// shared_channel_invite_received event payload for more details on how to retrieve the ID of the invitation.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/invite_id`.
                    public var inviteId: Swift.String?
                    /// Whether the channel should be private.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/is_private`.
                    public var isPrivate: Swift.Bool?
                    /// The ID of the workspace to accept the channel in. If an org-level token is used to call this method, the team_id
                    /// argument is required.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelName: Name of the channel. If the channel does not exist already in your workspace, this name is the one
                    /// that the channel will take.
                    ///   - channelId: ID of the channel that you'd like to accept. Must provide either invite_id or channel_id.
                    ///   - freeTrialAccepted: Whether you'd like to use your workspace's free trial to begin using Slack Connect.
                    ///   - inviteId: ID of the invite that you'd like to accept. Must provide either invite_id or channel_id. See the
                    /// shared_channel_invite_received event payload for more details on how to retrieve the ID of the invitation.
                    ///   - isPrivate: Whether the channel should be private.
                    ///   - teamId: The ID of the workspace to accept the channel in. If an org-level token is used to call this method, the
                    /// team_id argument is required.
                    public init(
                        channelName: Swift.String,
                        channelId: Swift.String? = nil,
                        freeTrialAccepted: Swift.Bool? = nil,
                        inviteId: Swift.String? = nil,
                        isPrivate: Swift.Bool? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.channelName = channelName
                        self.channelId = channelId
                        self.freeTrialAccepted = freeTrialAccepted
                        self.inviteId = inviteId
                        self.isPrivate = isPrivate
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channelName = "channel_name"
                        case channelId = "channel_id"
                        case freeTrialAccepted = "free_trial_accepted"
                        case inviteId = "invite_id"
                        case isPrivate = "is_private"
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsAcceptSharedInvite.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsAcceptSharedInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsAcceptSharedInvite.Input.Headers = .init(),
                body: Operations.ConversationsAcceptSharedInvite.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsAcceptSharedInviteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsAcceptSharedInviteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsAcceptSharedInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsAcceptSharedInvite.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.acceptSharedInvite/post(conversationsAcceptSharedInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsAcceptSharedInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsAcceptSharedInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsApproveSharedInvite {
        public static let id: Swift.String = "conversationsApproveSharedInvite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsApproveSharedInvite.AcceptableContentType>
                ]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsApproveSharedInvite.AcceptableContentType>,
                ] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsApproveSharedInvite.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the shared channel invite to approve.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/requestBody/json/invite_id`.
                    public var inviteId: Swift.String
                    /// The team or enterprise id of the other party involved in the invitation you are approving.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/requestBody/json/target_team`.
                    public var targetTeam: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inviteId: ID of the shared channel invite to approve.
                    ///   - targetTeam: The team or enterprise id of the other party involved in the invitation you are approving.
                    public init(
                        inviteId: Swift.String,
                        targetTeam: Swift.String? = nil
                    ) {
                        self.inviteId = inviteId
                        self.targetTeam = targetTeam
                    }

                    public enum CodingKeys: String, CodingKey {
                        case inviteId = "invite_id"
                        case targetTeam = "target_team"
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsApproveSharedInvite.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsApproveSharedInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsApproveSharedInvite.Input.Headers = .init(),
                body: Operations.ConversationsApproveSharedInvite.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsApproveSharedInviteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsApproveSharedInviteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsApproveSharedInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsApproveSharedInvite.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.approveSharedInvite/post(conversationsApproveSharedInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsApproveSharedInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsApproveSharedInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsArchive {
        public static let id: Swift.String = "conversationsArchive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.archive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsArchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsArchive.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsArchive.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.archive/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.archive/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of conversation to archive.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.archive/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of conversation to archive.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.archive/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsArchive.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsArchive.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsArchive.Input.Headers = .init(),
                body: Operations.ConversationsArchive.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.archive/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.archive/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsArchiveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsArchiveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsArchive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsArchive.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.archive/post(conversationsArchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsArchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsArchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsCanvasesCreate {
        public static let id: Swift.String = "conversationsCanvasesCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsCanvasesCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsCanvasesCreate.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsCanvasesCreate.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel ID of the channel we create the channel canvas for.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody/json/channel_id`.
                    public var channelId: Swift.String
                    /// Structure describing the type and value of the content to create.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody/json/document_content`.
                    public var documentContent: Swift.String?
                    /// Title of the newly created canvas.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel ID of the channel we create the channel canvas for.
                    ///   - documentContent: Structure describing the type and value of the content to create.
                    ///   - title: Title of the newly created canvas.
                    public init(
                        channelId: Swift.String,
                        documentContent: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.documentContent = documentContent
                        self.title = title
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channelId = "channel_id"
                        case documentContent = "document_content"
                        case title
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsCanvasesCreate.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsCanvasesCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsCanvasesCreate.Input.Headers = .init(),
                body: Operations.ConversationsCanvasesCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsCanvasesCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsCanvasesCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsCanvasesCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsCanvasesCreate.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.canvases.create/post(conversationsCanvasesCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsCanvasesCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsCanvasesCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsClose {
        public static let id: Swift.String = "conversationsClose"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.close/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsClose.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsClose.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsClose.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.close/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.close/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation to close.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.close/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation to close.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.close/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsClose.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsClose.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsClose.Input.Headers = .init(),
                body: Operations.ConversationsClose.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.close/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.close/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsCloseResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsCloseResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsClose.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsClose.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.close/post(conversationsClose)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsClose.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsClose.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsCreate {
        public static let id: Swift.String = "conversationsCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsCreate.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsCreate.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the public or private channel to create.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Create a private channel instead of a public one.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody/json/is_private`.
                    public var isPrivate: Swift.Bool?
                    /// encoded team id to create the channel in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the public or private channel to create.
                    ///   - isPrivate: Create a private channel instead of a public one.
                    ///   - teamId: encoded team id to create the channel in, required if org token is used.
                    public init(
                        name: Swift.String,
                        isPrivate: Swift.Bool? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.name = name
                        self.isPrivate = isPrivate
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case name
                        case isPrivate = "is_private"
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsCreate.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsCreate.Input.Headers = .init(),
                body: Operations.ConversationsCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsCreate.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.create/post(conversationsCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsDeclineSharedInvite {
        public static let id: Swift.String = "conversationsDeclineSharedInvite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsDeclineSharedInvite.AcceptableContentType>
                ]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsDeclineSharedInvite.AcceptableContentType>,
                ] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsDeclineSharedInvite.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the Slack Connect invite to decline. Subscribe to the shared_channel_invite_accepted event to receive IDs of
                    /// Slack Connect channel invites that have been accepted and are awaiting approval.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/requestBody/json/invite_id`.
                    public var inviteId: Swift.String
                    /// The team or enterprise id of the other party involved in the invitation you are declining.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/requestBody/json/target_team`.
                    public var targetTeam: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inviteId: ID of the Slack Connect invite to decline. Subscribe to the shared_channel_invite_accepted event to
                    /// receive IDs of Slack Connect channel invites that have been accepted and are awaiting approval.
                    ///   - targetTeam: The team or enterprise id of the other party involved in the invitation you are declining.
                    public init(
                        inviteId: Swift.String,
                        targetTeam: Swift.String? = nil
                    ) {
                        self.inviteId = inviteId
                        self.targetTeam = targetTeam
                    }

                    public enum CodingKeys: String, CodingKey {
                        case inviteId = "invite_id"
                        case targetTeam = "target_team"
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsDeclineSharedInvite.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsDeclineSharedInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsDeclineSharedInvite.Input.Headers = .init(),
                body: Operations.ConversationsDeclineSharedInvite.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsDeclineSharedInviteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsDeclineSharedInviteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsDeclineSharedInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsDeclineSharedInvite.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.declineSharedInvite/post(conversationsDeclineSharedInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsDeclineSharedInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsDeclineSharedInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsExternalInvitePermissionsSet {
        public static let id: Swift.String = "conversationsExternalInvitePermissionsSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsExternalInvitePermissionsSet.AcceptableContentType>
                ]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [
                        OpenAPIRuntime
                            .AcceptHeaderContentType<Operations.ConversationsExternalInvitePermissionsSet.AcceptableContentType>,
                    ] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsExternalInvitePermissionsSet.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Type of action to be taken: upgrade or downgrade.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody/json/action`.
                    public var action: Swift.String
                    /// The channel ID to change external invite permissions for.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// The encoded team ID of the target team.  Must be in the specified channel.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody/json/target_team`.
                    public var targetTeam: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - action: Type of action to be taken: upgrade or downgrade.
                    ///   - channel: The channel ID to change external invite permissions for.
                    ///   - targetTeam: The encoded team ID of the target team.  Must be in the specified channel.
                    public init(
                        action: Swift.String,
                        channel: Swift.String,
                        targetTeam: Swift.String
                    ) {
                        self.action = action
                        self.channel = channel
                        self.targetTeam = targetTeam
                    }

                    public enum CodingKeys: String, CodingKey {
                        case action
                        case channel
                        case targetTeam = "target_team"
                    }
                }

                /// - Remark: Generated from
                /// `#/paths/conversations.externalInvitePermissions.set/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsExternalInvitePermissionsSet.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsExternalInvitePermissionsSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsExternalInvitePermissionsSet.Input.Headers = .init(),
                body: Operations.ConversationsExternalInvitePermissionsSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from
                    /// `#/paths/conversations.externalInvitePermissions.set/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsExternalInvitePermissionsSetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsExternalInvitePermissionsSetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsExternalInvitePermissionsSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsExternalInvitePermissionsSet.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from
            /// `#/paths//conversations.externalInvitePermissions.set/post(conversationsExternalInvitePermissionsSet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsExternalInvitePermissionsSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsExternalInvitePermissionsSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsHistory {
        public static let id: Swift.String = "conversationsHistory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.history/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsHistory.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsHistory.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation ID to fetch history for.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a
                    /// previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for
                    /// more detail.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Return all metadata associated with this message.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/include_all_metadata`.
                    public var includeAllMetadata: Swift.Bool?
                    /// Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is specified.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/inclusive`.
                    public var inclusive: Swift.Bool?
                    /// Only messages before this Unix timestamp will be included in results. Default is the current time.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/latest`.
                    public var latest: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of
                    /// the conversation history hasn't been reached. Maximum of 999.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// Only messages after this Unix timestamp will be included in results.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/oldest`.
                    public var oldest: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation ID to fetch history for.
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned
                    /// by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination
                    /// for more detail.
                    ///   - includeAllMetadata: Return all metadata associated with this message.
                    ///   - inclusive: Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is
                    /// specified.
                    ///   - latest: Only messages before this Unix timestamp will be included in results. Default is the current time.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if
                    /// the end of the conversation history hasn't been reached. Maximum of 999.
                    ///   - oldest: Only messages after this Unix timestamp will be included in results.
                    public init(
                        channel: Swift.String,
                        cursor: Swift.String? = nil,
                        includeAllMetadata: Swift.Bool? = nil,
                        inclusive: Swift.Bool? = nil,
                        latest: Swift.String? = nil,
                        limit: Swift.Double? = nil,
                        oldest: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.cursor = cursor
                        self.includeAllMetadata = includeAllMetadata
                        self.inclusive = inclusive
                        self.latest = latest
                        self.limit = limit
                        self.oldest = oldest
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case cursor
                        case includeAllMetadata = "include_all_metadata"
                        case inclusive
                        case latest
                        case limit
                        case oldest
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsHistory.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsHistory.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsHistory.Input.Headers = .init(),
                body: Operations.ConversationsHistory.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.history/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.history/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsHistoryResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsHistoryResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsHistory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsHistory.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.history/post(conversationsHistory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsHistory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsHistory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsInfo {
        public static let id: Swift.String = "conversationsInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInfo.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsInfo.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation ID to learn more about.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Set this to true to receive the locale for this conversation. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody/json/include_locale`.
                    public var includeLocale: Swift.Bool?
                    /// Set to true to include the member count for the specified conversation. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody/json/include_num_members`.
                    public var includeNumMembers: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation ID to learn more about.
                    ///   - includeLocale: Set this to true to receive the locale for this conversation. Defaults to false.
                    ///   - includeNumMembers: Set to true to include the member count for the specified conversation. Defaults to false.
                    public init(
                        channel: Swift.String,
                        includeLocale: Swift.Bool? = nil,
                        includeNumMembers: Swift.Bool? = nil
                    ) {
                        self.channel = channel
                        self.includeLocale = includeLocale
                        self.includeNumMembers = includeNumMembers
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case includeLocale = "include_locale"
                        case includeNumMembers = "include_num_members"
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsInfo.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsInfo.Input.Headers = .init(),
                body: Operations.ConversationsInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsInfo.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.info/post(conversationsInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsInvite {
        public static let id: Swift.String = "conversationsInvite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.invite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInvite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInvite.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsInvite.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the public or private channel to invite user(s) to.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// A comma separated list of user IDs. Up to 1000 users may be listed.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody/json/users`.
                    public var users: Swift.String
                    /// When set to true and multiple user IDs are provided, continue inviting the valid ones while disregarding invalid
                    /// IDs. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody/json/force`.
                    public var force: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: The ID of the public or private channel to invite user(s) to.
                    ///   - users: A comma separated list of user IDs. Up to 1000 users may be listed.
                    ///   - force: When set to true and multiple user IDs are provided, continue inviting the valid ones while disregarding
                    /// invalid IDs. Defaults to false.
                    public init(
                        channel: Swift.String,
                        users: Swift.String,
                        force: Swift.Bool? = nil
                    ) {
                        self.channel = channel
                        self.users = users
                        self.force = force
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case users
                        case force
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsInvite.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsInvite.Input.Headers = .init(),
                body: Operations.ConversationsInvite.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.invite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.invite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsInviteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsInviteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsInvite.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.invite/post(conversationsInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsInviteShared {
        public static let id: Swift.String = "conversationsInviteShared"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInviteShared.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInviteShared.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsInviteShared.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the channel on your team that you'd like to share.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Optional email to receive this invite. Either emails or user_ids must be provided. Only one email or one user ID may
                    /// be invited at a time.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/json/emails`.
                    public var emails: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Optional boolean on whether invite is to an external limited member. Defaults to true.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/json/external_limited`.
                    public var externalLimited: Swift.Bool?
                    /// Optional user_id to receive this invite. Either emails or user_ids must be provided. Only one email or one user ID
                    /// may be invited at a time.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/json/user_ids`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of the channel on your team that you'd like to share.
                    ///   - emails: Optional email to receive this invite. Either emails or user_ids must be provided. Only one email or one
                    /// user ID may be invited at a time.
                    ///   - externalLimited: Optional boolean on whether invite is to an external limited member. Defaults to true.
                    ///   - userIds: Optional user_id to receive this invite. Either emails or user_ids must be provided. Only one email or
                    /// one user ID may be invited at a time.
                    public init(
                        channel: Swift.String,
                        emails: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        externalLimited: Swift.Bool? = nil,
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                    ) {
                        self.channel = channel
                        self.emails = emails
                        self.externalLimited = externalLimited
                        self.userIds = userIds
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case emails
                        case externalLimited = "external_limited"
                        case userIds = "user_ids"
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsInviteShared.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsInviteShared.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsInviteShared.Input.Headers = .init(),
                body: Operations.ConversationsInviteShared.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsInviteSharedResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsInviteSharedResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsInviteShared.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsInviteShared.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.inviteShared/post(conversationsInviteShared)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsInviteShared.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsInviteShared.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsJoin {
        public static let id: Swift.String = "conversationsJoin"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.join/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsJoin.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsJoin.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsJoin.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.join/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.join/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of conversation to join.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.join/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of conversation to join.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.join/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsJoin.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsJoin.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsJoin.Input.Headers = .init(),
                body: Operations.ConversationsJoin.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.join/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.join/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsJoinResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsJoinResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsJoin.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsJoin.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.join/post(conversationsJoin)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsJoin.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsJoin.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsKick {
        public static let id: Swift.String = "conversationsKick"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.kick/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsKick.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsKick.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsKick.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.kick/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.kick/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of conversation to remove user from.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.kick/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// User ID to be removed.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.kick/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of conversation to remove user from.
                    ///   - user: User ID to be removed.
                    public init(
                        channel: Swift.String,
                        user: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.user = user
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case user
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.kick/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsKick.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsKick.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsKick.Input.Headers = .init(),
                body: Operations.ConversationsKick.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.kick/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.kick/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsKickResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsKickResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsKick.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsKick.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.kick/post(conversationsKick)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsKick.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsKick.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsLeave {
        public static let id: Swift.String = "conversationsLeave"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.leave/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsLeave.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsLeave.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsLeave.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.leave/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.leave/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation to leave.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.leave/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation to leave.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.leave/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsLeave.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsLeave.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsLeave.Input.Headers = .init(),
                body: Operations.ConversationsLeave.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.leave/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.leave/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsLeaveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsLeaveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsLeave.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsLeave.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.leave/post(conversationsLeave)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsLeave.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsLeave.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsList {
        public static let id: Swift.String = "conversationsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsList.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsList.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a
                    /// previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for
                    /// more detail.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Set to true to exclude archived channels from the list.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json/exclude_archived`.
                    public var excludeArchived: Swift.Bool?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of
                    /// the list hasn't been reached. Must be an integer under 1000.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// encoded team id to list channels in, required if token belongs to org-wide app.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Mix and match channel types by providing a comma-separated list of any combination of public_channel,
                    /// private_channel, mpim, im.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json/types`.
                    public var types: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned
                    /// by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination
                    /// for more detail.
                    ///   - excludeArchived: Set to true to exclude archived channels from the list.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if
                    /// the end of the list hasn't been reached. Must be an integer under 1000.
                    ///   - teamId: encoded team id to list channels in, required if token belongs to org-wide app.
                    ///   - types: Mix and match channel types by providing a comma-separated list of any combination of public_channel,
                    /// private_channel, mpim, im.
                    public init(
                        cursor: Swift.String? = nil,
                        excludeArchived: Swift.Bool? = nil,
                        limit: Swift.Double? = nil,
                        teamId: Swift.String? = nil,
                        types: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.excludeArchived = excludeArchived
                        self.limit = limit
                        self.teamId = teamId
                        self.types = types
                    }

                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case excludeArchived = "exclude_archived"
                        case limit
                        case teamId = "team_id"
                        case types
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsList.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsList.Input.Headers = .init(),
                body: Operations.ConversationsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsList.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.list/post(conversationsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsListConnectInvites {
        public static let id: Swift.String = "conversationsListConnectInvites"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsListConnectInvites.AcceptableContentType>
                ]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsListConnectInvites.AcceptableContentType>,
                ] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsListConnectInvites.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set to next_cursor returned by previous call to list items in subsequent page.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Encoded team id for the workspace to retrieve invites for, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set to next_cursor returned by previous call to list items in subsequent page.
                    ///   - teamId: Encoded team id for the workspace to retrieve invites for, required if org token is used.
                    public init(
                        cursor: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsListConnectInvites.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsListConnectInvites.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsListConnectInvites.Input.Headers = .init(),
                body: Operations.ConversationsListConnectInvites.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsListConnectInvitesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsListConnectInvitesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsListConnectInvites.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsListConnectInvites.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.listConnectInvites/post(conversationsListConnectInvites)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsListConnectInvites.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsListConnectInvites.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsMark {
        public static let id: Swift.String = "conversationsMark"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.mark/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsMark.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsMark.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsMark.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.mark/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.mark/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel or conversation to set the read cursor for.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.mark/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Unique identifier of message you want marked as most recently seen in this conversation.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.mark/POST/requestBody/json/ts`.
                    public var ts: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel or conversation to set the read cursor for.
                    ///   - ts: Unique identifier of message you want marked as most recently seen in this conversation.
                    public init(
                        channel: Swift.String,
                        ts: Swift.String
                    ) {
                        self.channel = channel
                        self.ts = ts
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case ts
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.mark/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsMark.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsMark.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsMark.Input.Headers = .init(),
                body: Operations.ConversationsMark.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.mark/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.mark/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsMarkResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsMarkResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsMark.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsMark.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.mark/post(conversationsMark)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsMark.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsMark.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsMembers {
        public static let id: Swift.String = "conversationsMembers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.members/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsMembers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsMembers.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsMembers.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the conversation to retrieve members for.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a
                    /// previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for
                    /// more detail.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of
                    /// the users list hasn't been reached.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of the conversation to retrieve members for.
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned
                    /// by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination
                    /// for more detail.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if
                    /// the end of the users list hasn't been reached.
                    public init(
                        channel: Swift.String,
                        cursor: Swift.String? = nil,
                        limit: Swift.Double? = nil
                    ) {
                        self.channel = channel
                        self.cursor = cursor
                        self.limit = limit
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case cursor
                        case limit
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsMembers.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsMembers.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsMembers.Input.Headers = .init(),
                body: Operations.ConversationsMembers.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.members/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.members/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsMembersResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsMembersResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsMembers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsMembers.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.members/post(conversationsMembers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsMembers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsMembers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsOpen {
        public static let id: Swift.String = "conversationsOpen"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.open/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsOpen.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsOpen.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsOpen.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Resume a conversation by supplying an im or mpim's ID. Or provide the users field instead.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// Do not create a direct message or multi-person direct message. This is used to see if there is an existing dm or
                    /// mpdm.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/json/prevent_creation`.
                    public var preventCreation: Swift.Bool?
                    /// Boolean, indicates you want the full IM channel definition in the response.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/json/return_im`.
                    public var returnIm: Swift.Bool?
                    /// Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is
                    /// preserved whenever a multi-person direct message is returned. Supply a channel when not supplying users.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/json/users`.
                    public var users: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Resume a conversation by supplying an im or mpim's ID. Or provide the users field instead.
                    ///   - preventCreation: Do not create a direct message or multi-person direct message. This is used to see if there is
                    /// an existing dm or mpdm.
                    ///   - returnIm: Boolean, indicates you want the full IM channel definition in the response.
                    ///   - users: Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the
                    /// users is preserved whenever a multi-person direct message is returned. Supply a channel when not supplying users.
                    public init(
                        channel: Swift.String? = nil,
                        preventCreation: Swift.Bool? = nil,
                        returnIm: Swift.Bool? = nil,
                        users: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.preventCreation = preventCreation
                        self.returnIm = returnIm
                        self.users = users
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case preventCreation = "prevent_creation"
                        case returnIm = "return_im"
                        case users
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsOpen.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsOpen.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsOpen.Input.Headers = .init(),
                body: Operations.ConversationsOpen.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.open/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.open/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsOpenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsOpenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsOpen.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsOpen.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.open/post(conversationsOpen)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsOpen.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsOpen.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsRename {
        public static let id: Swift.String = "conversationsRename"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.rename/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsRename.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsRename.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsRename.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.rename/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.rename/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of conversation to rename.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.rename/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// New name for conversation.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.rename/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of conversation to rename.
                    ///   - name: New name for conversation.
                    public init(
                        channel: Swift.String,
                        name: Swift.String
                    ) {
                        self.channel = channel
                        self.name = name
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case name
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.rename/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsRename.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsRename.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsRename.Input.Headers = .init(),
                body: Operations.ConversationsRename.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.rename/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.rename/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsRenameResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsRenameResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsRename.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsRename.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.rename/post(conversationsRename)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsRename.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsRename.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsReplies {
        public static let id: Swift.String = "conversationsReplies"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.replies/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsReplies.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsReplies.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsReplies.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation ID to fetch thread from.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Unique identifier of either a thread's parent message or a message in the thread. ts must be the timestamp of an
                    /// existing message with 0 or more replies. If there are no replies then just the single message referenced by ts will
                    /// return - it is just an ordinary, unthreaded message.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/ts`.
                    public var ts: Swift.String
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a
                    /// previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for
                    /// more detail.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Return all metadata associated with this message.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/include_all_metadata`.
                    public var includeAllMetadata: Swift.Bool?
                    /// Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is specified.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/inclusive`.
                    public var inclusive: Swift.Bool?
                    /// Only messages before this Unix timestamp will be included in results.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/latest`.
                    public var latest: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of
                    /// the users list hasn't been reached.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// Only messages after this Unix timestamp will be included in results.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/oldest`.
                    public var oldest: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation ID to fetch thread from.
                    ///   - ts: Unique identifier of either a thread's parent message or a message in the thread. ts must be the timestamp
                    /// of an existing message with 0 or more replies. If there are no replies then just the single message referenced by ts
                    /// will return - it is just an ordinary, unthreaded message.
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned
                    /// by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination
                    /// for more detail.
                    ///   - includeAllMetadata: Return all metadata associated with this message.
                    ///   - inclusive: Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is
                    /// specified.
                    ///   - latest: Only messages before this Unix timestamp will be included in results.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if
                    /// the end of the users list hasn't been reached.
                    ///   - oldest: Only messages after this Unix timestamp will be included in results.
                    public init(
                        channel: Swift.String,
                        ts: Swift.String,
                        cursor: Swift.String? = nil,
                        includeAllMetadata: Swift.Bool? = nil,
                        inclusive: Swift.Bool? = nil,
                        latest: Swift.String? = nil,
                        limit: Swift.Double? = nil,
                        oldest: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.ts = ts
                        self.cursor = cursor
                        self.includeAllMetadata = includeAllMetadata
                        self.inclusive = inclusive
                        self.latest = latest
                        self.limit = limit
                        self.oldest = oldest
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case ts
                        case cursor
                        case includeAllMetadata = "include_all_metadata"
                        case inclusive
                        case latest
                        case limit
                        case oldest
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsReplies.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsReplies.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsReplies.Input.Headers = .init(),
                body: Operations.ConversationsReplies.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.replies/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsRepliesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsRepliesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsReplies.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsReplies.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.replies/post(conversationsReplies)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsReplies.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsReplies.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsRequestSharedInviteApprove {
        public static let id: Swift.String = "conversationsRequestSharedInviteApprove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteApprove.AcceptableContentType>
                ]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [
                        OpenAPIRuntime
                            .AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteApprove.AcceptableContentType>,
                    ] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsRequestSharedInviteApprove.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the requested shared channel invite to approve.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/json/invite_id`.
                    public var inviteId: Swift.String
                    /// Optional channel_id to which external user will be invited to. Will override the value on the requested invite.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/json/channel_id`.
                    public var channelId: Swift.String?
                    /// Optional boolean on whether the invited team will have post-only permissions in the channel. Will override the value
                    /// on the requested invite.
                    ///
                    /// - Remark: Generated from
                    /// `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/json/is_external_limited`.
                    public var isExternalLimited: Swift.Bool?
                    /// Object describing the text to send along with the invite. If this object is specified, both text and is_override are
                    /// required properties. If is_override is set to true, text will override the original invitation message. Otherwise,
                    /// text will be appended to the original invitation message. The total length of the message cannot exceed 560
                    /// characters. If is_override is set to false, the length of text and the user specified message on the invite request
                    /// in total must be less than 560 characters.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/json/message`.
                    public var message: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inviteId: ID of the requested shared channel invite to approve.
                    ///   - channelId: Optional channel_id to which external user will be invited to. Will override the value on the
                    /// requested invite.
                    ///   - isExternalLimited: Optional boolean on whether the invited team will have post-only permissions in the channel.
                    /// Will override the value on the requested invite.
                    ///   - message: Object describing the text to send along with the invite. If this object is specified, both text and
                    /// is_override are required properties. If is_override is set to true, text will override the original invitation
                    /// message. Otherwise, text will be appended to the original invitation message. The total length of the message cannot
                    /// exceed 560 characters. If is_override is set to false, the length of text and the user specified message on the
                    /// invite request in total must be less than 560 characters.
                    public init(
                        inviteId: Swift.String,
                        channelId: Swift.String? = nil,
                        isExternalLimited: Swift.Bool? = nil,
                        message: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                    ) {
                        self.inviteId = inviteId
                        self.channelId = channelId
                        self.isExternalLimited = isExternalLimited
                        self.message = message
                    }

                    public enum CodingKeys: String, CodingKey {
                        case inviteId = "invite_id"
                        case channelId = "channel_id"
                        case isExternalLimited = "is_external_limited"
                        case message
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsRequestSharedInviteApprove.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsRequestSharedInviteApprove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsRequestSharedInviteApprove.Input.Headers = .init(),
                body: Operations.ConversationsRequestSharedInviteApprove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from
                    /// `#/paths/conversations.requestSharedInvite.approve/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsRequestSharedInviteApproveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsRequestSharedInviteApproveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsRequestSharedInviteApprove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsRequestSharedInviteApprove.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from
            /// `#/paths//conversations.requestSharedInvite.approve/post(conversationsRequestSharedInviteApprove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsRequestSharedInviteApprove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsRequestSharedInviteApprove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsRequestSharedInviteDeny {
        public static let id: Swift.String = "conversationsRequestSharedInviteDeny"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteDeny.AcceptableContentType>
                ]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteDeny.AcceptableContentType>,
                ] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsRequestSharedInviteDeny.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the requested shared channel invite to deny.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/requestBody/json/invite_id`.
                    public var inviteId: Swift.String
                    /// Optional message explaining why the request to invite was denied.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/requestBody/json/message`.
                    public var message: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inviteId: ID of the requested shared channel invite to deny.
                    ///   - message: Optional message explaining why the request to invite was denied.
                    public init(
                        inviteId: Swift.String,
                        message: Swift.String? = nil
                    ) {
                        self.inviteId = inviteId
                        self.message = message
                    }

                    public enum CodingKeys: String, CodingKey {
                        case inviteId = "invite_id"
                        case message
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsRequestSharedInviteDeny.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsRequestSharedInviteDeny.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsRequestSharedInviteDeny.Input.Headers = .init(),
                body: Operations.ConversationsRequestSharedInviteDeny.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from
                    /// `#/paths/conversations.requestSharedInvite.deny/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsRequestSharedInviteDenyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsRequestSharedInviteDenyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsRequestSharedInviteDeny.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsRequestSharedInviteDeny.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from
            /// `#/paths//conversations.requestSharedInvite.deny/post(conversationsRequestSharedInviteDeny)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsRequestSharedInviteDeny.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsRequestSharedInviteDeny.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsRequestSharedInviteList {
        public static let id: Swift.String = "conversationsRequestSharedInviteList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteList.AcceptableContentType>
                ]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteList.AcceptableContentType>,
                ] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsRequestSharedInviteList.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a
                    /// previous request's response_metadata. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// When true approved invitation requests will be returned, otherwise they will be excluded.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/include_approved`.
                    public var includeApproved: Swift.Bool?
                    /// When true denied invitation requests will be returned, otherwise they will be excluded.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/include_denied`.
                    public var includeDenied: Swift.Bool?
                    /// When true expired invitation requests will be returned, otherwise they will be excluded.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/include_expired`.
                    public var includeExpired: Swift.Bool?
                    /// An optional list of invitation ids to look up.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/invite_ids`.
                    public var inviteIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// The number of items to return. Must be between 1 - 1000 (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Optional filter to return invitation requests for the inviting user.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/user_id`.
                    public var userId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned
                    /// by a previous request's response_metadata. See pagination for more detail.
                    ///   - includeApproved: When true approved invitation requests will be returned, otherwise they will be excluded.
                    ///   - includeDenied: When true denied invitation requests will be returned, otherwise they will be excluded.
                    ///   - includeExpired: When true expired invitation requests will be returned, otherwise they will be excluded.
                    ///   - inviteIds: An optional list of invitation ids to look up.
                    ///   - limit: The number of items to return. Must be between 1 - 1000 (inclusive).
                    ///   - userId: Optional filter to return invitation requests for the inviting user.
                    public init(
                        cursor: Swift.String? = nil,
                        includeApproved: Swift.Bool? = nil,
                        includeDenied: Swift.Bool? = nil,
                        includeExpired: Swift.Bool? = nil,
                        inviteIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        limit: Swift.Int? = nil,
                        userId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.includeApproved = includeApproved
                        self.includeDenied = includeDenied
                        self.includeExpired = includeExpired
                        self.inviteIds = inviteIds
                        self.limit = limit
                        self.userId = userId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case includeApproved = "include_approved"
                        case includeDenied = "include_denied"
                        case includeExpired = "include_expired"
                        case inviteIds = "invite_ids"
                        case limit
                        case userId = "user_id"
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsRequestSharedInviteList.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsRequestSharedInviteList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsRequestSharedInviteList.Input.Headers = .init(),
                body: Operations.ConversationsRequestSharedInviteList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from
                    /// `#/paths/conversations.requestSharedInvite.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsRequestSharedInviteListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsRequestSharedInviteListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsRequestSharedInviteList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsRequestSharedInviteList.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from
            /// `#/paths//conversations.requestSharedInvite.list/post(conversationsRequestSharedInviteList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsRequestSharedInviteList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsRequestSharedInviteList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsSetPurpose {
        public static let id: Swift.String = "conversationsSetPurpose"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsSetPurpose.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsSetPurpose.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsSetPurpose.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to set the description of.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// The description.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/requestBody/json/purpose`.
                    public var purpose: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel to set the description of.
                    ///   - purpose: The description.
                    public init(
                        channel: Swift.String,
                        purpose: Swift.String
                    ) {
                        self.channel = channel
                        self.purpose = purpose
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case purpose
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsSetPurpose.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsSetPurpose.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsSetPurpose.Input.Headers = .init(),
                body: Operations.ConversationsSetPurpose.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsSetPurposeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsSetPurposeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsSetPurpose.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsSetPurpose.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.setPurpose/post(conversationsSetPurpose)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsSetPurpose.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsSetPurpose.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsSetTopic {
        public static let id: Swift.String = "conversationsSetTopic"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.setTopic/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsSetTopic.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsSetTopic.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsSetTopic.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.setTopic/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.setTopic/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation to set the topic of.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.setTopic/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// The new topic string. Does not support formatting or linkification.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.setTopic/POST/requestBody/json/topic`.
                    public var topic: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation to set the topic of.
                    ///   - topic: The new topic string. Does not support formatting or linkification.
                    public init(
                        channel: Swift.String,
                        topic: Swift.String
                    ) {
                        self.channel = channel
                        self.topic = topic
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case topic
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.setTopic/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsSetTopic.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsSetTopic.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsSetTopic.Input.Headers = .init(),
                body: Operations.ConversationsSetTopic.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.setTopic/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.setTopic/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsSetTopicResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsSetTopicResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsSetTopic.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsSetTopic.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.setTopic/post(conversationsSetTopic)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsSetTopic.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsSetTopic.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum ConversationsUnarchive {
        public static let id: Swift.String = "conversationsUnarchive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.unarchive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsUnarchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsUnarchive.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.ConversationsUnarchive.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.unarchive/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.unarchive/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of conversation to unarchive.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.unarchive/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of conversation to unarchive.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }

                /// - Remark: Generated from `#/paths/conversations.unarchive/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsUnarchive.Input.Body.JsonPayload)
            }

            public var body: Operations.ConversationsUnarchive.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsUnarchive.Input.Headers = .init(),
                body: Operations.ConversationsUnarchive.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.unarchive/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.unarchive/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsUnarchiveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsUnarchiveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.ConversationsUnarchive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsUnarchive.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.unarchive/post(conversationsUnarchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsUnarchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsUnarchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }
}
#endif
