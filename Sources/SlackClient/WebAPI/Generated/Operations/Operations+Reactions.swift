// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Reactions
extension Operations {
public enum ReactionsAdd {
    public static let id: Swift.String = "reactionsAdd"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/reactions.add/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsAdd.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsAdd.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.ReactionsAdd.Input.Headers
        /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Channel where the message to add reaction to was posted.
                ///
                /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody/json/channel`.
                public var channel: Swift.String
                /// Reaction (emoji) name.
                ///
                /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody/json/name`.
                public var name: Swift.String
                /// Timestamp of the message to add reaction to.
                ///
                /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody/json/timestamp`.
                public var timestamp: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channel: Channel where the message to add reaction to was posted.
                ///   - name: Reaction (emoji) name.
                ///   - timestamp: Timestamp of the message to add reaction to.
                public init(
                    channel: Swift.String,
                    name: Swift.String,
                    timestamp: Swift.String
                ) {
                    self.channel = channel
                    self.name = name
                    self.timestamp = timestamp
                }
                public enum CodingKeys: String, CodingKey {
                    case channel
                    case name
                    case timestamp
                }
            }
            /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody/content/application\/json`.
            case json(Operations.ReactionsAdd.Input.Body.JsonPayload)
        }
        public var body: Operations.ReactionsAdd.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.ReactionsAdd.Input.Headers = .init(),
            body: Operations.ReactionsAdd.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.add/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.add/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.ReactionsAddResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ReactionsAddResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.ReactionsAdd.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.ReactionsAdd.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//reactions.add/post(reactionsAdd)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.ReactionsAdd.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.ReactionsAdd.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum ReactionsGet {
    public static let id: Swift.String = "reactionsGet"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/reactions.get/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsGet.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsGet.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.ReactionsGet.Input.Headers
        /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Channel where the message to get reactions for was posted.
                ///
                /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json/channel`.
                public var channel: Swift.String?
                /// File to get reactions for.
                ///
                /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json/file`.
                public var file: Swift.String?
                /// File comment to get reactions for.
                ///
                /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json/file_comment`.
                public var fileComment: Swift.String?
                /// If true always return the complete reaction list.
                ///
                /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json/full`.
                public var full: Swift.Bool?
                /// Timestamp of the message to get reactions for.
                ///
                /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json/timestamp`.
                public var timestamp: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channel: Channel where the message to get reactions for was posted.
                ///   - file: File to get reactions for.
                ///   - fileComment: File comment to get reactions for.
                ///   - full: If true always return the complete reaction list.
                ///   - timestamp: Timestamp of the message to get reactions for.
                public init(
                    channel: Swift.String? = nil,
                    file: Swift.String? = nil,
                    fileComment: Swift.String? = nil,
                    full: Swift.Bool? = nil,
                    timestamp: Swift.String? = nil
                ) {
                    self.channel = channel
                    self.file = file
                    self.fileComment = fileComment
                    self.full = full
                    self.timestamp = timestamp
                }
                public enum CodingKeys: String, CodingKey {
                    case channel
                    case file
                    case fileComment = "file_comment"
                    case full
                    case timestamp
                }
            }
            /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/content/application\/json`.
            case json(Operations.ReactionsGet.Input.Body.JsonPayload)
        }
        public var body: Operations.ReactionsGet.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.ReactionsGet.Input.Headers = .init(),
            body: Operations.ReactionsGet.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.get/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.get/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.ReactionsGetResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ReactionsGetResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.ReactionsGet.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.ReactionsGet.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//reactions.get/post(reactionsGet)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.ReactionsGet.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.ReactionsGet.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum ReactionsList {
    public static let id: Swift.String = "reactionsList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/reactions.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.ReactionsList.Input.Headers
        /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See pagination for more details.
                ///
                /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// If true always return the complete reaction list.
                ///
                /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json/full`.
                public var full: Swift.Bool?
                /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
                ///
                /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// encoded team id to list reactions in, required if org token is used.
                ///
                /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Show reactions made by this user. Defaults to the authed user.
                ///
                /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json/user`.
                public var user: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - cursor: Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See pagination for more details.
                ///   - full: If true always return the complete reaction list.
                ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
                ///   - teamId: encoded team id to list reactions in, required if org token is used.
                ///   - user: Show reactions made by this user. Defaults to the authed user.
                public init(
                    cursor: Swift.String? = nil,
                    full: Swift.Bool? = nil,
                    limit: Swift.Int? = nil,
                    teamId: Swift.String? = nil,
                    user: Swift.String? = nil
                ) {
                    self.cursor = cursor
                    self.full = full
                    self.limit = limit
                    self.teamId = teamId
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case cursor
                    case full
                    case limit
                    case teamId = "team_id"
                    case user
                }
            }
            /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/content/application\/json`.
            case json(Operations.ReactionsList.Input.Body.JsonPayload)
        }
        public var body: Operations.ReactionsList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.ReactionsList.Input.Headers = .init(),
            body: Operations.ReactionsList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.ReactionsListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ReactionsListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.ReactionsList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.ReactionsList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//reactions.list/post(reactionsList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.ReactionsList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.ReactionsList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum ReactionsRemove {
    public static let id: Swift.String = "reactionsRemove"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/reactions.remove/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsRemove.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsRemove.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.ReactionsRemove.Input.Headers
        /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Reaction (emoji) name.
                ///
                /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json/name`.
                public var name: Swift.String
                /// Channel where the message to remove reaction from was posted.
                ///
                /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json/channel`.
                public var channel: Swift.String?
                /// File to remove reaction from.
                ///
                /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json/file`.
                public var file: Swift.String?
                /// File comment to remove reaction from.
                ///
                /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json/file_comment`.
                public var fileComment: Swift.String?
                /// Timestamp of the message to remove reaction from.
                ///
                /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json/timestamp`.
                public var timestamp: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - name: Reaction (emoji) name.
                ///   - channel: Channel where the message to remove reaction from was posted.
                ///   - file: File to remove reaction from.
                ///   - fileComment: File comment to remove reaction from.
                ///   - timestamp: Timestamp of the message to remove reaction from.
                public init(
                    name: Swift.String,
                    channel: Swift.String? = nil,
                    file: Swift.String? = nil,
                    fileComment: Swift.String? = nil,
                    timestamp: Swift.String? = nil
                ) {
                    self.name = name
                    self.channel = channel
                    self.file = file
                    self.fileComment = fileComment
                    self.timestamp = timestamp
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case channel
                    case file
                    case fileComment = "file_comment"
                    case timestamp
                }
            }
            /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/content/application\/json`.
            case json(Operations.ReactionsRemove.Input.Body.JsonPayload)
        }
        public var body: Operations.ReactionsRemove.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.ReactionsRemove.Input.Headers = .init(),
            body: Operations.ReactionsRemove.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.remove/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.remove/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.ReactionsRemoveResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ReactionsRemoveResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.ReactionsRemove.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.ReactionsRemove.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//reactions.remove/post(reactionsRemove)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.ReactionsRemove.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.ReactionsRemove.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
}
#endif
