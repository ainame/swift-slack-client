// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Reminders
extension Operations {
    public enum RemindersAdd {
        public static let id: Swift.String = "remindersAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reminders.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.RemindersAdd.Input.Headers
            /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The content of the reminder.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json/text`.
                    public var text: Swift.String
                    /// Can also take a type of integer. When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24
                    /// hours), or a natural language description (Ex. "in 15 minutes," or "every Thursday").
                    ///
                    /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json/time`.
                    public var time: Swift.String
                    /// Specify the repeating behavior of a reminder. Available options: daily, weekly, monthly, or yearly. If weekly, may further specify the days of the week.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json/recurrence`.
                    public var recurrence: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// Encoded team id, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// No longer supported - reminders cannot be set for other users. Previously, was the user who would receive the reminder.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - text: The content of the reminder.
                    ///   - time: Can also take a type of integer. When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within
                    /// 24 hours), or a natural language description (Ex. "in 15 minutes," or "every Thursday").
                    ///   - recurrence: Specify the repeating behavior of a reminder. Available options: daily, weekly, monthly, or yearly. If weekly, may further specify the days of the week.
                    ///   - teamId: Encoded team id, required if org token is used.
                    ///   - user: No longer supported - reminders cannot be set for other users. Previously, was the user who would receive the reminder.
                    public init(
                        text: Swift.String,
                        time: Swift.String,
                        recurrence: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        teamId: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.text = text
                        self.time = time
                        self.recurrence = recurrence
                        self.teamId = teamId
                        self.user = user
                    }

                    public enum CodingKeys: String, CodingKey {
                        case text
                        case time
                        case recurrence
                        case teamId = "team_id"
                        case user
                    }
                }

                /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/content/application\/json`.
                case json(Operations.RemindersAdd.Input.Body.JsonPayload)
            }

            public var body: Operations.RemindersAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RemindersAdd.Input.Headers = .init(),
                body: Operations.RemindersAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reminders.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RemindersAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RemindersAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.RemindersAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RemindersAdd.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//reminders.add/post(remindersAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RemindersAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RemindersAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum RemindersComplete {
        public static let id: Swift.String = "remindersComplete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reminders.complete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersComplete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersComplete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.RemindersComplete.Input.Headers
            /// - Remark: Generated from `#/paths/reminders.complete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.complete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the reminder to be marked as complete.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.complete/POST/requestBody/json/reminder`.
                    public var reminder: Swift.String
                    /// Encoded team id, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.complete/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - reminder: The ID of the reminder to be marked as complete.
                    ///   - teamId: Encoded team id, required if org token is used.
                    public init(
                        reminder: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.reminder = reminder
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case reminder
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/reminders.complete/POST/requestBody/content/application\/json`.
                case json(Operations.RemindersComplete.Input.Body.JsonPayload)
            }

            public var body: Operations.RemindersComplete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RemindersComplete.Input.Headers = .init(),
                body: Operations.RemindersComplete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.complete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reminders.complete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RemindersCompleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RemindersCompleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.RemindersComplete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RemindersComplete.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//reminders.complete/post(remindersComplete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RemindersComplete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RemindersComplete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum RemindersDelete {
        public static let id: Swift.String = "remindersDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reminders.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.RemindersDelete.Input.Headers
            /// - Remark: Generated from `#/paths/reminders.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the reminder.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.delete/POST/requestBody/json/reminder`.
                    public var reminder: Swift.String
                    /// Encoded team id, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.delete/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - reminder: The ID of the reminder.
                    ///   - teamId: Encoded team id, required if org token is used.
                    public init(
                        reminder: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.reminder = reminder
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case reminder
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/reminders.delete/POST/requestBody/content/application\/json`.
                case json(Operations.RemindersDelete.Input.Body.JsonPayload)
            }

            public var body: Operations.RemindersDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RemindersDelete.Input.Headers = .init(),
                body: Operations.RemindersDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reminders.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RemindersDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RemindersDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.RemindersDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RemindersDelete.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//reminders.delete/post(remindersDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RemindersDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RemindersDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum RemindersInfo {
        public static let id: Swift.String = "remindersInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reminders.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.RemindersInfo.Input.Headers
            /// - Remark: Generated from `#/paths/reminders.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the reminder.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.info/POST/requestBody/json/reminder`.
                    public var reminder: Swift.String
                    /// Encoded team id, required if org token is passed.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.info/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - reminder: The ID of the reminder.
                    ///   - teamId: Encoded team id, required if org token is passed.
                    public init(
                        reminder: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.reminder = reminder
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case reminder
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/reminders.info/POST/requestBody/content/application\/json`.
                case json(Operations.RemindersInfo.Input.Body.JsonPayload)
            }

            public var body: Operations.RemindersInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RemindersInfo.Input.Headers = .init(),
                body: Operations.RemindersInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reminders.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RemindersInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RemindersInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.RemindersInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RemindersInfo.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//reminders.info/post(remindersInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RemindersInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RemindersInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum RemindersList {
        public static let id: Swift.String = "remindersList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reminders.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.RemindersList.Input.Headers
            /// - Remark: Generated from `#/paths/reminders.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded team id, required if org token is passed.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.list/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: Encoded team id, required if org token is passed.
                    public init(teamId: Swift.String? = nil) {
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/reminders.list/POST/requestBody/content/application\/json`.
                case json(Operations.RemindersList.Input.Body.JsonPayload)
            }

            public var body: Operations.RemindersList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RemindersList.Input.Headers = .init(),
                body: Operations.RemindersList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reminders.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RemindersListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RemindersListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.RemindersList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RemindersList.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//reminders.list/post(remindersList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RemindersList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RemindersList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }
}
#endif
