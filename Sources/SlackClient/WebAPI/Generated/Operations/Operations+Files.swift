// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Files
extension Operations {
    public enum FilesCompleteUploadExternal {
        public static let id: Swift.String = "filesCompleteUploadExternal"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesCompleteUploadExternal.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesCompleteUploadExternal.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesCompleteUploadExternal.Input.Headers
            /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Array of file ids and their corresponding (optional) titles.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/files`.
                    public var files: OpenAPIRuntime.OpenAPIArrayContainer
                    /// A JSON-based array of structured rich text blocks, presented as a URL-encoded string. If the initial_comment field
                    /// is provided, the blocks field is ignored.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/blocks`.
                    public var blocks: Swift.String?
                    /// Channel ID where the file will be shared. If not specified the file will be private.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/channel_id`.
                    public var channelId: Swift.String?
                    /// Comma-separated string of channel IDs where the file will be shared.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/channels`.
                    public var channels: Swift.String?
                    /// The message text introducing the file in specified channels.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/initial_comment`.
                    public var initialComment: Swift.String?
                    /// Provide another message's ts value to upload this file as a reply. Never use a reply's ts value; use its parent
                    /// instead. Also make sure to provide only one channel when using 'thread_ts'.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/thread_ts`.
                    public var threadTs: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - files: Array of file ids and their corresponding (optional) titles.
                    ///   - blocks: A JSON-based array of structured rich text blocks, presented as a URL-encoded string. If the
                    /// initial_comment field is provided, the blocks field is ignored.
                    ///   - channelId: Channel ID where the file will be shared. If not specified the file will be private.
                    ///   - channels: Comma-separated string of channel IDs where the file will be shared.
                    ///   - initialComment: The message text introducing the file in specified channels.
                    ///   - threadTs: Provide another message's ts value to upload this file as a reply. Never use a reply's ts value; use
                    /// its parent instead. Also make sure to provide only one channel when using 'thread_ts'.
                    public init(
                        files: OpenAPIRuntime.OpenAPIArrayContainer,
                        blocks: Swift.String? = nil,
                        channelId: Swift.String? = nil,
                        channels: Swift.String? = nil,
                        initialComment: Swift.String? = nil,
                        threadTs: Swift.String? = nil
                    ) {
                        self.files = files
                        self.blocks = blocks
                        self.channelId = channelId
                        self.channels = channels
                        self.initialComment = initialComment
                        self.threadTs = threadTs
                    }

                    public enum CodingKeys: String, CodingKey {
                        case files
                        case blocks
                        case channelId = "channel_id"
                        case channels
                        case initialComment = "initial_comment"
                        case threadTs = "thread_ts"
                    }
                }

                /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/content/application\/json`.
                case json(Operations.FilesCompleteUploadExternal.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesCompleteUploadExternal.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesCompleteUploadExternal.Input.Headers = .init(),
                body: Operations.FilesCompleteUploadExternal.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesCompleteUploadExternalResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesCompleteUploadExternalResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesCompleteUploadExternal.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesCompleteUploadExternal.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.completeUploadExternal/post(filesCompleteUploadExternal)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesCompleteUploadExternal.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesCompleteUploadExternal.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesDelete {
        public static let id: Swift.String = "filesDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesDelete.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesDelete.Input.Headers
            /// - Remark: Generated from `#/paths/files.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of file to delete.
                    ///
                    /// - Remark: Generated from `#/paths/files.delete/POST/requestBody/json/file`.
                    public var file: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - file: ID of file to delete.
                    public init(file: Swift.String) {
                        self.file = file
                    }

                    public enum CodingKeys: String, CodingKey {
                        case file
                    }
                }

                /// - Remark: Generated from `#/paths/files.delete/POST/requestBody/content/application\/json`.
                case json(Operations.FilesDelete.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesDelete.Input.Headers = .init(),
                body: Operations.FilesDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesDelete.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.delete/post(filesDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesGetUploadURLExternal {
        public static let id: Swift.String = "filesGetUploadURLExternal"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesGetUploadURLExternal.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesGetUploadURLExternal.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesGetUploadURLExternal.Input.Headers
            /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the file being uploaded.
                    ///
                    /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/json/filename`.
                    public var filename: Swift.String
                    /// Size in bytes of the file being uploaded.
                    ///
                    /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/json/length`.
                    public var length: Swift.Int
                    /// Description of image for screen-reader.
                    ///
                    /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/json/alt_txt`.
                    public var altTxt: Swift.String?
                    /// Syntax type of the snippet being uploaded.
                    ///
                    /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/json/snippet_type`.
                    public var snippetType: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - filename: Name of the file being uploaded.
                    ///   - length: Size in bytes of the file being uploaded.
                    ///   - altTxt: Description of image for screen-reader.
                    ///   - snippetType: Syntax type of the snippet being uploaded.
                    public init(
                        filename: Swift.String,
                        length: Swift.Int,
                        altTxt: Swift.String? = nil,
                        snippetType: Swift.String? = nil
                    ) {
                        self.filename = filename
                        self.length = length
                        self.altTxt = altTxt
                        self.snippetType = snippetType
                    }

                    public enum CodingKeys: String, CodingKey {
                        case filename
                        case length
                        case altTxt = "alt_txt"
                        case snippetType = "snippet_type"
                    }
                }

                /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/content/application\/json`.
                case json(Operations.FilesGetUploadURLExternal.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesGetUploadURLExternal.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesGetUploadURLExternal.Input.Headers = .init(),
                body: Operations.FilesGetUploadURLExternal.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesGetUploadURLExternalResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesGetUploadURLExternalResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesGetUploadURLExternal.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesGetUploadURLExternal.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.getUploadURLExternal/post(filesGetUploadURLExternal)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesGetUploadURLExternal.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesGetUploadURLExternal.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesInfo {
        public static let id: Swift.String = "filesInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesInfo.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesInfo.Input.Headers
            /// - Remark: Generated from `#/paths/files.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Specify a file by providing its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.info/POST/requestBody/json/file`.
                    public var file: Swift.String
                    /// Parameter for pagination. File comments are paginated for a single file. Set cursor equal to the next_cursor
                    /// attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is
                    /// mandatory: the default value simply fetches the first "page" of the collection of comments. See pagination for more
                    /// details.
                    ///
                    /// - Remark: Generated from `#/paths/files.info/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of
                    /// the list hasn't been reached.
                    ///
                    /// - Remark: Generated from `#/paths/files.info/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - file: Specify a file by providing its ID.
                    ///   - cursor: Parameter for pagination. File comments are paginated for a single file. Set cursor equal to the
                    /// next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but
                    /// pagination is mandatory: the default value simply fetches the first "page" of the collection of comments. See
                    /// pagination for more details.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if
                    /// the end of the list hasn't been reached.
                    public init(
                        file: Swift.String,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.file = file
                        self.cursor = cursor
                        self.limit = limit
                    }

                    public enum CodingKeys: String, CodingKey {
                        case file
                        case cursor
                        case limit
                    }
                }

                /// - Remark: Generated from `#/paths/files.info/POST/requestBody/content/application\/json`.
                case json(Operations.FilesInfo.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesInfo.Input.Headers = .init(),
                body: Operations.FilesInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesInfo.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.info/post(filesInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesList {
        public static let id: Swift.String = "filesList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesList.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesList.Input.Headers
            /// - Remark: Generated from `#/paths/files.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Filter files appearing in a specific channel, indicated by its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file
                    /// limit.
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/show_files_hidden_by_limit`.
                    public var showFilesHiddenByLimit: Swift.Bool?
                    /// encoded team id to list files in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Filter files created after this timestamp (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/ts_from`.
                    public var tsFrom: Swift.String?
                    /// Filter files created before this timestamp (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/ts_to`.
                    public var tsTo: Swift.String?
                    /// Filter files by type (see below). You can pass multiple values in the types argument, like types=spaces,snippets.The
                    /// default value is all, which does not filter the list.
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/types`.
                    public var types: Swift.String?
                    /// Filter files created by a single user.
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Filter files appearing in a specific channel, indicated by its ID.
                    ///   - showFilesHiddenByLimit: Show truncated file info for files hidden due to being too old, and the team who owns
                    /// the file being over the file limit.
                    ///   - teamId: encoded team id to list files in, required if org token is used.
                    ///   - tsFrom: Filter files created after this timestamp (inclusive).
                    ///   - tsTo: Filter files created before this timestamp (inclusive).
                    ///   - types: Filter files by type (see below). You can pass multiple values in the types argument, like
                    /// types=spaces,snippets.The default value is all, which does not filter the list.
                    ///   - user: Filter files created by a single user.
                    public init(
                        channel: Swift.String? = nil,
                        showFilesHiddenByLimit: Swift.Bool? = nil,
                        teamId: Swift.String? = nil,
                        tsFrom: Swift.String? = nil,
                        tsTo: Swift.String? = nil,
                        types: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.showFilesHiddenByLimit = showFilesHiddenByLimit
                        self.teamId = teamId
                        self.tsFrom = tsFrom
                        self.tsTo = tsTo
                        self.types = types
                        self.user = user
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case showFilesHiddenByLimit = "show_files_hidden_by_limit"
                        case teamId = "team_id"
                        case tsFrom = "ts_from"
                        case tsTo = "ts_to"
                        case types
                        case user
                    }
                }

                /// - Remark: Generated from `#/paths/files.list/POST/requestBody/content/application\/json`.
                case json(Operations.FilesList.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesList.Input.Headers = .init(),
                body: Operations.FilesList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesList.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.list/post(filesList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesRemoteAdd {
        public static let id: Swift.String = "filesRemoteAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteAdd.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesRemoteAdd.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creator defined GUID for the file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/external_id`.
                    public var externalId: Swift.String
                    /// URL of the remote file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/external_url`.
                    public var externalUrl: Swift.String
                    /// Title of the file being shared.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// type of file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/filetype`.
                    public var filetype: Swift.String?
                    /// A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote
                    /// file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/indexable_file_contents`.
                    public var indexableFileContents: Swift.String?
                    /// Preview of the document via multipart/form-data.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/preview_image`.
                    public var previewImage: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - externalId: Creator defined GUID for the file.
                    ///   - externalUrl: URL of the remote file.
                    ///   - title: Title of the file being shared.
                    ///   - filetype: type of file.
                    ///   - indexableFileContents: A text file (txt, pdf, doc, etc.) containing textual search terms that are used to
                    /// improve discovery of the remote file.
                    ///   - previewImage: Preview of the document via multipart/form-data.
                    public init(
                        externalId: Swift.String,
                        externalUrl: Swift.String,
                        title: Swift.String,
                        filetype: Swift.String? = nil,
                        indexableFileContents: Swift.String? = nil,
                        previewImage: Swift.String? = nil
                    ) {
                        self.externalId = externalId
                        self.externalUrl = externalUrl
                        self.title = title
                        self.filetype = filetype
                        self.indexableFileContents = indexableFileContents
                        self.previewImage = previewImage
                    }

                    public enum CodingKeys: String, CodingKey {
                        case externalId = "external_id"
                        case externalUrl = "external_url"
                        case title
                        case filetype
                        case indexableFileContents = "indexable_file_contents"
                        case previewImage = "preview_image"
                    }
                }

                /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteAdd.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesRemoteAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteAdd.Input.Headers = .init(),
                body: Operations.FilesRemoteAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesRemoteAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteAdd.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.add/post(filesRemoteAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesRemoteInfo {
        public static let id: Swift.String = "filesRemoteInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteInfo.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesRemoteInfo.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creator defined GUID for the file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.info/POST/requestBody/json/external_id`.
                    public var externalId: Swift.String?
                    /// Specify a file by providing its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.info/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - externalId: Creator defined GUID for the file.
                    ///   - file: Specify a file by providing its ID.
                    public init(
                        externalId: Swift.String? = nil,
                        file: Swift.String? = nil
                    ) {
                        self.externalId = externalId
                        self.file = file
                    }

                    public enum CodingKeys: String, CodingKey {
                        case externalId = "external_id"
                        case file
                    }
                }

                /// - Remark: Generated from `#/paths/files.remote.info/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteInfo.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesRemoteInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteInfo.Input.Headers = .init(),
                body: Operations.FilesRemoteInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesRemoteInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteInfo.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.info/post(filesRemoteInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesRemoteList {
        public static let id: Swift.String = "filesRemoteList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteList.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesRemoteList.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Filter files appearing in a specific channel, indicated by its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a
                    /// previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for
                    /// more detail.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Filter files created after this timestamp (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json/ts_from`.
                    public var tsFrom: Swift.String?
                    /// Filter files created before this timestamp (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json/ts_to`.
                    public var tsTo: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Filter files appearing in a specific channel, indicated by its ID.
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned
                    /// by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination
                    /// for more detail.
                    ///   - limit: The maximum number of items to return.
                    ///   - tsFrom: Filter files created after this timestamp (inclusive).
                    ///   - tsTo: Filter files created before this timestamp (inclusive).
                    public init(
                        channel: Swift.String? = nil,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        tsFrom: Swift.String? = nil,
                        tsTo: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.cursor = cursor
                        self.limit = limit
                        self.tsFrom = tsFrom
                        self.tsTo = tsTo
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case cursor
                        case limit
                        case tsFrom = "ts_from"
                        case tsTo = "ts_to"
                    }
                }

                /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteList.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesRemoteList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteList.Input.Headers = .init(),
                body: Operations.FilesRemoteList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesRemoteList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteList.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.list/post(filesRemoteList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesRemoteRemove {
        public static let id: Swift.String = "filesRemoteRemove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.remove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteRemove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteRemove.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesRemoteRemove.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.remove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.remove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creator defined GUID for the file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.remove/POST/requestBody/json/external_id`.
                    public var externalId: Swift.String?
                    /// Specify a file by providing its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.remove/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - externalId: Creator defined GUID for the file.
                    ///   - file: Specify a file by providing its ID.
                    public init(
                        externalId: Swift.String? = nil,
                        file: Swift.String? = nil
                    ) {
                        self.externalId = externalId
                        self.file = file
                    }

                    public enum CodingKeys: String, CodingKey {
                        case externalId = "external_id"
                        case file
                    }
                }

                /// - Remark: Generated from `#/paths/files.remote.remove/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteRemove.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesRemoteRemove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteRemove.Input.Headers = .init(),
                body: Operations.FilesRemoteRemove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.remove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.remove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteRemoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteRemoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesRemoteRemove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteRemove.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.remove/post(filesRemoteRemove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteRemove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteRemove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesRemoteShare {
        public static let id: Swift.String = "filesRemoteShare"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.share/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteShare.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteShare.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesRemoteShare.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Comma-separated list of channel IDs where the file will be shared.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody/json/channels`.
                    public var channels: Swift.String
                    /// The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this
                    /// field or file or both are required.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody/json/external_id`.
                    public var externalId: Swift.String?
                    /// Specify a file registered with Slack by providing its ID. Either this field or external_id or both are required.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channels: Comma-separated list of channel IDs where the file will be shared.
                    ///   - externalId: The globally unique identifier (GUID) for the file, as set by the app registering the file with
                    /// Slack.  Either this field or file or both are required.
                    ///   - file: Specify a file registered with Slack by providing its ID. Either this field or external_id or both are
                    /// required.
                    public init(
                        channels: Swift.String,
                        externalId: Swift.String? = nil,
                        file: Swift.String? = nil
                    ) {
                        self.channels = channels
                        self.externalId = externalId
                        self.file = file
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channels
                        case externalId = "external_id"
                        case file
                    }
                }

                /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteShare.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesRemoteShare.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteShare.Input.Headers = .init(),
                body: Operations.FilesRemoteShare.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.share/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.share/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteShareResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteShareResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesRemoteShare.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteShare.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.share/post(filesRemoteShare)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteShare.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteShare.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesRemoteUpdate {
        public static let id: Swift.String = "filesRemoteUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteUpdate.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesRemoteUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creator defined GUID for the file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/external_id`.
                    public var externalId: Swift.String?
                    /// URL of the remote file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/external_url`.
                    public var externalUrl: Swift.String?
                    /// Specify a file by providing its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// type of file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/filetype`.
                    public var filetype: Swift.String?
                    /// File containing contents that can be used to improve searchability for the remote file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/indexable_file_contents`.
                    public var indexableFileContents: Swift.String?
                    /// Preview of the document via multipart/form-data.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/preview_image`.
                    public var previewImage: Swift.String?
                    /// Title of the file being shared.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - externalId: Creator defined GUID for the file.
                    ///   - externalUrl: URL of the remote file.
                    ///   - file: Specify a file by providing its ID.
                    ///   - filetype: type of file.
                    ///   - indexableFileContents: File containing contents that can be used to improve searchability for the remote file.
                    ///   - previewImage: Preview of the document via multipart/form-data.
                    ///   - title: Title of the file being shared.
                    public init(
                        externalId: Swift.String? = nil,
                        externalUrl: Swift.String? = nil,
                        file: Swift.String? = nil,
                        filetype: Swift.String? = nil,
                        indexableFileContents: Swift.String? = nil,
                        previewImage: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.externalId = externalId
                        self.externalUrl = externalUrl
                        self.file = file
                        self.filetype = filetype
                        self.indexableFileContents = indexableFileContents
                        self.previewImage = previewImage
                        self.title = title
                    }

                    public enum CodingKeys: String, CodingKey {
                        case externalId = "external_id"
                        case externalUrl = "external_url"
                        case file
                        case filetype
                        case indexableFileContents = "indexable_file_contents"
                        case previewImage = "preview_image"
                        case title
                    }
                }

                /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteUpdate.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesRemoteUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteUpdate.Input.Headers = .init(),
                body: Operations.FilesRemoteUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteUpdateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteUpdateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesRemoteUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.update/post(filesRemoteUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesRevokePublicURL {
        public static let id: Swift.String = "filesRevokePublicURL"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRevokePublicURL.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRevokePublicURL.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesRevokePublicURL.Input.Headers
            /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// File to revoke.
                    ///
                    /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/requestBody/json/file`.
                    public var file: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - file: File to revoke.
                    public init(file: Swift.String) {
                        self.file = file
                    }

                    public enum CodingKeys: String, CodingKey {
                        case file
                    }
                }

                /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRevokePublicURL.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesRevokePublicURL.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRevokePublicURL.Input.Headers = .init(),
                body: Operations.FilesRevokePublicURL.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRevokePublicURLResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRevokePublicURLResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesRevokePublicURL.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRevokePublicURL.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.revokePublicURL/post(filesRevokePublicURL)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRevokePublicURL.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRevokePublicURL.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesSharedPublicURL {
        public static let id: Swift.String = "filesSharedPublicURL"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesSharedPublicURL.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesSharedPublicURL.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesSharedPublicURL.Input.Headers
            /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// File to share.
                    ///
                    /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/requestBody/json/file`.
                    public var file: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - file: File to share.
                    public init(file: Swift.String) {
                        self.file = file
                    }

                    public enum CodingKeys: String, CodingKey {
                        case file
                    }
                }

                /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/requestBody/content/application\/json`.
                case json(Operations.FilesSharedPublicURL.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesSharedPublicURL.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesSharedPublicURL.Input.Headers = .init(),
                body: Operations.FilesSharedPublicURL.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesSharedPublicURLResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesSharedPublicURLResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesSharedPublicURL.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesSharedPublicURL.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.sharedPublicURL/post(filesSharedPublicURL)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesSharedPublicURL.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesSharedPublicURL.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum FilesUpload {
        public static let id: Swift.String = "filesUpload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.upload/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesUpload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesUpload.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.FilesUpload.Input.Headers
            /// - Remark: Generated from `#/paths/files.upload/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Comma-separated list of channel names or IDs where the file will be shared.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/channels`.
                    public var channels: Swift.String?
                    /// File contents via a POST variable. If omitting this parameter, you must provide a file.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/content`.
                    public var content: Swift.String?
                    /// File contents via multipart/form-data. If omitting this parameter, you must submit content.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// Filename of file.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/filename`.
                    public var filename: Swift.String?
                    /// A file type identifier.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/filetype`.
                    public var filetype: Swift.String?
                    /// The message text introducing the file in specified channels.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/initial_comment`.
                    public var initialComment: Swift.String?
                    /// Provide another message's ts value to upload this file as a reply. Never use a reply's ts value; use its parent
                    /// instead.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/thread_ts`.
                    public var threadTs: Swift.String?
                    /// Title of file.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channels: Comma-separated list of channel names or IDs where the file will be shared.
                    ///   - content: File contents via a POST variable. If omitting this parameter, you must provide a file.
                    ///   - file: File contents via multipart/form-data. If omitting this parameter, you must submit content.
                    ///   - filename: Filename of file.
                    ///   - filetype: A file type identifier.
                    ///   - initialComment: The message text introducing the file in specified channels.
                    ///   - threadTs: Provide another message's ts value to upload this file as a reply. Never use a reply's ts value; use
                    /// its parent instead.
                    ///   - title: Title of file.
                    public init(
                        channels: Swift.String? = nil,
                        content: Swift.String? = nil,
                        file: Swift.String? = nil,
                        filename: Swift.String? = nil,
                        filetype: Swift.String? = nil,
                        initialComment: Swift.String? = nil,
                        threadTs: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.channels = channels
                        self.content = content
                        self.file = file
                        self.filename = filename
                        self.filetype = filetype
                        self.initialComment = initialComment
                        self.threadTs = threadTs
                        self.title = title
                    }

                    public enum CodingKeys: String, CodingKey {
                        case channels
                        case content
                        case file
                        case filename
                        case filetype
                        case initialComment = "initial_comment"
                        case threadTs = "thread_ts"
                        case title
                    }
                }

                /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/content/application\/json`.
                case json(Operations.FilesUpload.Input.Body.JsonPayload)
            }

            public var body: Operations.FilesUpload.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesUpload.Input.Headers = .init(),
                body: Operations.FilesUpload.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.upload/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.upload/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesUploadResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesUploadResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.FilesUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesUpload.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.upload/post(filesUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesUpload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesUpload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }
}
#endif
