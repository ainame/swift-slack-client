// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Bots
extension Operations {
public enum BotsInfo {
    public static let id: Swift.String = "botsInfo"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/bots.info/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BotsInfo.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BotsInfo.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.BotsInfo.Input.Headers
        /// - Remark: Generated from `#/paths/bots.info/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bots.info/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Bot user to get info on.
                ///
                /// - Remark: Generated from `#/paths/bots.info/POST/requestBody/json/bot`.
                public var bot: Swift.String?
                /// encoded team id or enterprise id where the bot exists, required if org token is used.
                ///
                /// - Remark: Generated from `#/paths/bots.info/POST/requestBody/json/teamId`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - bot: Bot user to get info on.
                ///   - teamId: encoded team id or enterprise id where the bot exists, required if org token is used.
                public init(
                    bot: Swift.String? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.bot = bot
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case bot
                    case teamId
                }
            }
            /// - Remark: Generated from `#/paths/bots.info/POST/requestBody/content/application\/json`.
            case json(Operations.BotsInfo.Input.Body.JsonPayload)
        }
        public var body: Operations.BotsInfo.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.BotsInfo.Input.Headers = .init(),
            body: Operations.BotsInfo.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bots.info/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bots.info/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.BotsInfoResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.BotsInfoResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.BotsInfo.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.BotsInfo.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//bots.info/post(botsInfo)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.BotsInfo.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.BotsInfo.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
}
#endif
