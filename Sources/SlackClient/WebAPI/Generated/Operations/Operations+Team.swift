// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Team
extension Operations {
    public enum TeamAccessLogs {
        public static let id: Swift.String = "teamAccessLogs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.accessLogs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamAccessLogs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamAccessLogs.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.TeamAccessLogs.Input.Headers
            /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// End of time range of logs to include in results (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/json/before`.
                    public var before: Swift.String?
                    /// Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's
                    /// response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the
                    /// first "page" of the collection. See pagination for more details.
                    ///
                    /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of
                    /// the list hasn't been reached. If specified, result is returned using a cursor-based approach instead of a classic
                    /// one.
                    ///
                    /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// encoded team id to get logs from, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - before: End of time range of logs to include in results (inclusive).
                    ///   - cursor: Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous
                    /// request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply
                    /// fetches the first "page" of the collection. See pagination for more details.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if
                    /// the end of the list hasn't been reached. If specified, result is returned using a cursor-based approach instead of a
                    /// classic one.
                    ///   - teamId: encoded team id to get logs from, required if org token is used.
                    public init(
                        before: Swift.String? = nil,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.before = before
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case before
                        case cursor
                        case limit
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/content/application\/json`.
                case json(Operations.TeamAccessLogs.Input.Body.JsonPayload)
            }

            public var body: Operations.TeamAccessLogs.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamAccessLogs.Input.Headers = .init(),
                body: Operations.TeamAccessLogs.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.accessLogs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.accessLogs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamAccessLogsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamAccessLogsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.TeamAccessLogs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamAccessLogs.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.accessLogs/post(teamAccessLogs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamAccessLogs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamAccessLogs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum TeamBillableInfo {
        public static let id: Swift.String = "teamBillableInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.billableInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamBillableInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamBillableInfo.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.TeamBillableInfo.Input.Headers
            /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set cursor to next_cursor returned by previous call, to indicate from where you want to list next page of users
                    /// list. Default value fetches the first page.
                    ///
                    /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return.
                    ///
                    /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// encoded team id to get the billable information from, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// A user to retrieve the billable information for. Defaults to all users.
                    ///
                    /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set cursor to next_cursor returned by previous call, to indicate from where you want to list next page
                    /// of users list. Default value fetches the first page.
                    ///   - limit: The maximum number of items to return.
                    ///   - teamId: encoded team id to get the billable information from, required if org token is used.
                    ///   - user: A user to retrieve the billable information for. Defaults to all users.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                        self.user = user
                    }

                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                        case teamId = "team_id"
                        case user
                    }
                }

                /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/content/application\/json`.
                case json(Operations.TeamBillableInfo.Input.Body.JsonPayload)
            }

            public var body: Operations.TeamBillableInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamBillableInfo.Input.Headers = .init(),
                body: Operations.TeamBillableInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.billableInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.billableInfo/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamBillableInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamBillableInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.TeamBillableInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamBillableInfo.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.billableInfo/post(teamBillableInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamBillableInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamBillableInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum TeamBillingInfo {
        public static let id: Swift.String = "teamBillingInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.billing.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamBillingInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamBillingInfo.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.TeamBillingInfo.Input.Headers
            /// - Remark: Generated from `#/paths/team.billing.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.billing.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creates a new `JsonPayload`.
                    public init() {}
                    public init(from decoder: any Decoder) throws {
                        try decoder.ensureNoAdditionalProperties(knownKeys: [])
                    }
                }

                /// - Remark: Generated from `#/paths/team.billing.info/POST/requestBody/content/application\/json`.
                case json(Operations.TeamBillingInfo.Input.Body.JsonPayload)
            }

            public var body: Operations.TeamBillingInfo.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamBillingInfo.Input.Headers = .init(),
                body: Operations.TeamBillingInfo.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.billing.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.billing.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamBillingInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamBillingInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.TeamBillingInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamBillingInfo.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.billing.info/post(teamBillingInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamBillingInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamBillingInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum TeamExternalTeamsDisconnect {
        public static let id: Swift.String = "teamExternalTeamsDisconnect"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamExternalTeamsDisconnect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamExternalTeamsDisconnect.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.TeamExternalTeamsDisconnect.Input.Headers
            /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The team ID of the target team.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/requestBody/json/target_team`.
                    public var targetTeam: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - targetTeam: The team ID of the target team.
                    public init(targetTeam: Swift.String) {
                        self.targetTeam = targetTeam
                    }

                    public enum CodingKeys: String, CodingKey {
                        case targetTeam = "target_team"
                    }
                }

                /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/requestBody/content/application\/json`.
                case json(Operations.TeamExternalTeamsDisconnect.Input.Body.JsonPayload)
            }

            public var body: Operations.TeamExternalTeamsDisconnect.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamExternalTeamsDisconnect.Input.Headers = .init(),
                body: Operations.TeamExternalTeamsDisconnect.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamExternalTeamsDisconnectResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamExternalTeamsDisconnectResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.TeamExternalTeamsDisconnect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamExternalTeamsDisconnect.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.externalTeams.disconnect/post(teamExternalTeamsDisconnect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamExternalTeamsDisconnect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamExternalTeamsDisconnect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum TeamExternalTeamsList {
        public static let id: Swift.String = "teamExternalTeamsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamExternalTeamsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamExternalTeamsList.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.TeamExternalTeamsList.Input.Headers
            /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Status of the connected team.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/connection_status_filter`.
                    public var connectionStatusFilter: Swift.String?
                    /// Paginate through collections of data by setting parameter to the team_id attribute returned by a previous request's
                    /// response_metadata. If not provided, the first page of the collection is returned. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return per page.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Filters connected orgs by Slack Connect pref override(s). Value can be: approved_orgs_only allow_sc_file_uploads
                    /// profile_visibility away_team_sc_invite_permissions accept_sc_invites sc_mpdm_to_private require_sc_channel_for_sc_dm
                    /// external_awareness_context_bar.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/slack_connect_pref_filter`.
                    public var slackConnectPrefFilter: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Direction to sort in asc or desc.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/sort_direction`.
                    public var sortDirection: Swift.String?
                    /// Name of the parameter that we are sorting by.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/sort_field`.
                    public var sortField: Swift.String?
                    /// Shows connected orgs which are connected on a specified encoded workspace ID.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/workspace_filter`.
                    public var workspaceFilter: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - connectionStatusFilter: Status of the connected team.
                    ///   - cursor: Paginate through collections of data by setting parameter to the team_id attribute returned by a
                    /// previous request's response_metadata. If not provided, the first page of the collection is returned. See pagination
                    /// for more detail.
                    ///   - limit: The maximum number of items to return per page.
                    ///   - slackConnectPrefFilter: Filters connected orgs by Slack Connect pref override(s). Value can be:
                    /// approved_orgs_only allow_sc_file_uploads profile_visibility away_team_sc_invite_permissions accept_sc_invites
                    /// sc_mpdm_to_private require_sc_channel_for_sc_dm external_awareness_context_bar.
                    ///   - sortDirection: Direction to sort in asc or desc.
                    ///   - sortField: Name of the parameter that we are sorting by.
                    ///   - workspaceFilter: Shows connected orgs which are connected on a specified encoded workspace ID.
                    public init(
                        connectionStatusFilter: Swift.String? = nil,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        slackConnectPrefFilter: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        sortDirection: Swift.String? = nil,
                        sortField: Swift.String? = nil,
                        workspaceFilter: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                    ) {
                        self.connectionStatusFilter = connectionStatusFilter
                        self.cursor = cursor
                        self.limit = limit
                        self.slackConnectPrefFilter = slackConnectPrefFilter
                        self.sortDirection = sortDirection
                        self.sortField = sortField
                        self.workspaceFilter = workspaceFilter
                    }

                    public enum CodingKeys: String, CodingKey {
                        case connectionStatusFilter = "connection_status_filter"
                        case cursor
                        case limit
                        case slackConnectPrefFilter = "slack_connect_pref_filter"
                        case sortDirection = "sort_direction"
                        case sortField = "sort_field"
                        case workspaceFilter = "workspace_filter"
                    }
                }

                /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/content/application\/json`.
                case json(Operations.TeamExternalTeamsList.Input.Body.JsonPayload)
            }

            public var body: Operations.TeamExternalTeamsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamExternalTeamsList.Input.Headers = .init(),
                body: Operations.TeamExternalTeamsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamExternalTeamsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamExternalTeamsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.TeamExternalTeamsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamExternalTeamsList.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.externalTeams.list/post(teamExternalTeamsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamExternalTeamsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamExternalTeamsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum TeamInfo {
        public static let id: Swift.String = "teamInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamInfo.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.TeamInfo.Input.Headers
            /// - Remark: Generated from `#/paths/team.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Query by domain instead of team (only when team is null). This only works for domains in the same enterprise as the
                    /// querying team token. This also expects the domain to belong to a team and not the enterprise itself. This is the
                    /// value set up for the 'Joining This Workspace' workspace setting. If it contains more than one domain, the field will
                    /// contain multiple comma-separated domain values. If no domain is set, the field is empty.
                    ///
                    /// - Remark: Generated from `#/paths/team.info/POST/requestBody/json/domain`.
                    public var domain: Swift.String?
                    /// Team to get info about; if omitted, will return information about the current team.
                    ///
                    /// - Remark: Generated from `#/paths/team.info/POST/requestBody/json/team`.
                    public var team: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - domain: Query by domain instead of team (only when team is null). This only works for domains in the same
                    /// enterprise as the querying team token. This also expects the domain to belong to a team and not the enterprise
                    /// itself. This is the value set up for the 'Joining This Workspace' workspace setting. If it contains more than one
                    /// domain, the field will contain multiple comma-separated domain values. If no domain is set, the field is empty.
                    ///   - team: Team to get info about; if omitted, will return information about the current team.
                    public init(
                        domain: Swift.String? = nil,
                        team: Swift.String? = nil
                    ) {
                        self.domain = domain
                        self.team = team
                    }

                    public enum CodingKeys: String, CodingKey {
                        case domain
                        case team
                    }
                }

                /// - Remark: Generated from `#/paths/team.info/POST/requestBody/content/application\/json`.
                case json(Operations.TeamInfo.Input.Body.JsonPayload)
            }

            public var body: Operations.TeamInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamInfo.Input.Headers = .init(),
                body: Operations.TeamInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.TeamInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamInfo.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.info/post(teamInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum TeamIntegrationLogs {
        public static let id: Swift.String = "teamIntegrationLogs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.integrationLogs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamIntegrationLogs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamIntegrationLogs.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.TeamIntegrationLogs.Input.Headers
            /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Filter logs to this Slack app. Defaults to all logs.
                    ///
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json/app_id`.
                    public var appId: Swift.String?
                    /// Filter logs with this change type. Possible values are added, removed, enabled, disabled, and updated. Defaults to
                    /// all logs.
                    ///
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json/change_type`.
                    public var changeType: Swift.String?
                    /// Filter logs to this service. Defaults to all logs.
                    ///
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json/service_id`.
                    public var serviceId: Swift.String?
                    /// encoded team id to get logs from, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Filter logs generated by this user's actions. Defaults to all logs.
                    ///
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: Filter logs to this Slack app. Defaults to all logs.
                    ///   - changeType: Filter logs with this change type. Possible values are added, removed, enabled, disabled, and
                    /// updated. Defaults to all logs.
                    ///   - serviceId: Filter logs to this service. Defaults to all logs.
                    ///   - teamId: encoded team id to get logs from, required if org token is used.
                    ///   - user: Filter logs generated by this user's actions. Defaults to all logs.
                    public init(
                        appId: Swift.String? = nil,
                        changeType: Swift.String? = nil,
                        serviceId: Swift.String? = nil,
                        teamId: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.appId = appId
                        self.changeType = changeType
                        self.serviceId = serviceId
                        self.teamId = teamId
                        self.user = user
                    }

                    public enum CodingKeys: String, CodingKey {
                        case appId = "app_id"
                        case changeType = "change_type"
                        case serviceId = "service_id"
                        case teamId = "team_id"
                        case user
                    }
                }

                /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/content/application\/json`.
                case json(Operations.TeamIntegrationLogs.Input.Body.JsonPayload)
            }

            public var body: Operations.TeamIntegrationLogs.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamIntegrationLogs.Input.Headers = .init(),
                body: Operations.TeamIntegrationLogs.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.integrationLogs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamIntegrationLogsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamIntegrationLogsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.TeamIntegrationLogs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamIntegrationLogs.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.integrationLogs/post(teamIntegrationLogs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamIntegrationLogs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamIntegrationLogs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum TeamPreferencesList {
        public static let id: Swift.String = "teamPreferencesList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.preferences.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamPreferencesList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamPreferencesList.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.TeamPreferencesList.Input.Headers
            /// - Remark: Generated from `#/paths/team.preferences.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.preferences.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creates a new `JsonPayload`.
                    public init() {}
                    public init(from decoder: any Decoder) throws {
                        try decoder.ensureNoAdditionalProperties(knownKeys: [])
                    }
                }

                /// - Remark: Generated from `#/paths/team.preferences.list/POST/requestBody/content/application\/json`.
                case json(Operations.TeamPreferencesList.Input.Body.JsonPayload)
            }

            public var body: Operations.TeamPreferencesList.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamPreferencesList.Input.Headers = .init(),
                body: Operations.TeamPreferencesList.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.preferences.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.preferences.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamPreferencesListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamPreferencesListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.TeamPreferencesList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamPreferencesList.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.preferences.list/post(teamPreferencesList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamPreferencesList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamPreferencesList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum TeamProfileGet {
        public static let id: Swift.String = "teamProfileGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.profile.get/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamProfileGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamProfileGet.AcceptableContentType>] =
                    .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.TeamProfileGet.Input.Headers
            /// - Remark: Generated from `#/paths/team.profile.get/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.profile.get/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Filter by visibility.
                    ///
                    /// - Remark: Generated from `#/paths/team.profile.get/POST/requestBody/json/visibility`.
                    public var visibility: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - visibility: Filter by visibility.
                    public init(visibility: Swift.String? = nil) {
                        self.visibility = visibility
                    }

                    public enum CodingKeys: String, CodingKey {
                        case visibility
                    }
                }

                /// - Remark: Generated from `#/paths/team.profile.get/POST/requestBody/content/application\/json`.
                case json(Operations.TeamProfileGet.Input.Body.JsonPayload)
            }

            public var body: Operations.TeamProfileGet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamProfileGet.Input.Headers = .init(),
                body: Operations.TeamProfileGet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.profile.get/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.profile.get/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamProfileGetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamProfileGetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.TeamProfileGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamProfileGet.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.profile.get/post(teamProfileGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamProfileGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamProfileGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self,
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }
}
#endif
