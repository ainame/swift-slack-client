// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Users
extension Operations {
    public enum UsersConversations {
        public static let id: Swift.String = "usersConversations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.conversations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersConversations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersConversations.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersConversations.Input.Headers
            /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a
                    /// previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for
                    /// more detail.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Set to true to exclude archived channels from the list.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/exclude_archived`.
                    public var excludeArchived: Swift.Bool?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of
                    /// the list hasn't been reached. Must be an integer with a max value of 999.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// encoded team id to list conversations in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Mix and match channel types by providing a comma-separated list of any combination of public_channel,
                    /// private_channel, mpim, im.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/types`.
                    public var types: Swift.String?
                    /// Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the
                    /// calling user shares membership.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned
                    /// by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination
                    /// for more detail.
                    ///   - excludeArchived: Set to true to exclude archived channels from the list.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if
                    /// the end of the list hasn't been reached. Must be an integer with a max value of 999.
                    ///   - teamId: encoded team id to list conversations in, required if org token is used.
                    ///   - types: Mix and match channel types by providing a comma-separated list of any combination of public_channel,
                    /// private_channel, mpim, im.
                    ///   - user: Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where
                    /// the calling user shares membership.
                    public init(
                        cursor: Swift.String? = nil,
                        excludeArchived: Swift.Bool? = nil,
                        limit: Swift.Double? = nil,
                        teamId: Swift.String? = nil,
                        types: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.excludeArchived = excludeArchived
                        self.limit = limit
                        self.teamId = teamId
                        self.types = types
                        self.user = user
                    }

                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case excludeArchived = "exclude_archived"
                        case limit
                        case teamId = "team_id"
                        case types
                        case user
                    }
                }

                /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/content/application\/json`.
                case json(Operations.UsersConversations.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersConversations.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersConversations.Input.Headers = .init(),
                body: Operations.UsersConversations.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.conversations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.conversations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersConversationsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersConversationsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersConversations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersConversations.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.conversations/post(usersConversations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersConversations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersConversations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersDeletePhoto {
        public static let id: Swift.String = "usersDeletePhoto"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.deletePhoto/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersDeletePhoto.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersDeletePhoto.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersDeletePhoto.Input.Headers
            /// - Remark: Generated from `#/paths/users.deletePhoto/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.deletePhoto/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creates a new `JsonPayload`.
                    public init() {}
                    public init(from decoder: any Decoder) throws {
                        try decoder.ensureNoAdditionalProperties(knownKeys: [])
                    }
                }

                /// - Remark: Generated from `#/paths/users.deletePhoto/POST/requestBody/content/application\/json`.
                case json(Operations.UsersDeletePhoto.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersDeletePhoto.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersDeletePhoto.Input.Headers = .init(),
                body: Operations.UsersDeletePhoto.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.deletePhoto/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.deletePhoto/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersDeletePhotoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersDeletePhotoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersDeletePhoto.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersDeletePhoto.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.deletePhoto/post(usersDeletePhoto)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersDeletePhoto.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersDeletePhoto.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersDiscoverableContactsLookup {
        public static let id: Swift.String = "usersDiscoverableContactsLookup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.UsersDiscoverableContactsLookup.AcceptableContentType>
                ]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [
                    OpenAPIRuntime
                        .AcceptHeaderContentType<Operations.UsersDiscoverableContactsLookup.AcceptableContentType>,
                ] = .defaultValues()) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersDiscoverableContactsLookup.Input.Headers
            /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/requestBody/json/email`.
                    public var email: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email: .
                    public init(email: Swift.String) {
                        self.email = email
                    }

                    public enum CodingKeys: String, CodingKey {
                        case email
                    }
                }

                /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/requestBody/content/application\/json`.
                case json(Operations.UsersDiscoverableContactsLookup.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersDiscoverableContactsLookup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersDiscoverableContactsLookup.Input.Headers = .init(),
                body: Operations.UsersDiscoverableContactsLookup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersDiscoverableContactsLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersDiscoverableContactsLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersDiscoverableContactsLookup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersDiscoverableContactsLookup.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.discoverableContacts.lookup/post(usersDiscoverableContactsLookup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersDiscoverableContactsLookup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersDiscoverableContactsLookup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersGetPresence {
        public static let id: Swift.String = "usersGetPresence"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.getPresence/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersGetPresence.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersGetPresence.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersGetPresence.Input.Headers
            /// - Remark: Generated from `#/paths/users.getPresence/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.getPresence/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// User to get presence info on. Defaults to the authed user.
                    ///
                    /// - Remark: Generated from `#/paths/users.getPresence/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - user: User to get presence info on. Defaults to the authed user.
                    public init(user: Swift.String? = nil) {
                        self.user = user
                    }

                    public enum CodingKeys: String, CodingKey {
                        case user
                    }
                }

                /// - Remark: Generated from `#/paths/users.getPresence/POST/requestBody/content/application\/json`.
                case json(Operations.UsersGetPresence.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersGetPresence.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersGetPresence.Input.Headers = .init(),
                body: Operations.UsersGetPresence.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.getPresence/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.getPresence/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersGetPresenceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersGetPresenceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersGetPresence.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersGetPresence.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.getPresence/post(usersGetPresence)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersGetPresence.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersGetPresence.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersIdentity {
        public static let id: Swift.String = "usersIdentity"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.identity/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersIdentity.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersIdentity.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersIdentity.Input.Headers
            /// - Remark: Generated from `#/paths/users.identity/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.identity/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creates a new `JsonPayload`.
                    public init() {}
                    public init(from decoder: any Decoder) throws {
                        try decoder.ensureNoAdditionalProperties(knownKeys: [])
                    }
                }

                /// - Remark: Generated from `#/paths/users.identity/POST/requestBody/content/application\/json`.
                case json(Operations.UsersIdentity.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersIdentity.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersIdentity.Input.Headers = .init(),
                body: Operations.UsersIdentity.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.identity/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.identity/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersIdentityResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersIdentityResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersIdentity.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersIdentity.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.identity/post(usersIdentity)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersIdentity.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersIdentity.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersInfo {
        public static let id: Swift.String = "usersInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersInfo.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersInfo.Input.Headers
            /// - Remark: Generated from `#/paths/users.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// User to get info on.
                    ///
                    /// - Remark: Generated from `#/paths/users.info/POST/requestBody/json/user`.
                    public var user: Swift.String
                    /// Set this to true to receive the locale for this user. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/users.info/POST/requestBody/json/include_locale`.
                    public var includeLocale: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - user: User to get info on.
                    ///   - includeLocale: Set this to true to receive the locale for this user. Defaults to false.
                    public init(
                        user: Swift.String,
                        includeLocale: Swift.Bool? = nil
                    ) {
                        self.user = user
                        self.includeLocale = includeLocale
                    }

                    public enum CodingKeys: String, CodingKey {
                        case user
                        case includeLocale = "include_locale"
                    }
                }

                /// - Remark: Generated from `#/paths/users.info/POST/requestBody/content/application\/json`.
                case json(Operations.UsersInfo.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersInfo.Input.Headers = .init(),
                body: Operations.UsersInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersInfo.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.info/post(usersInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersList {
        public static let id: Swift.String = "usersList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersList.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersList.Input.Headers
            /// - Remark: Generated from `#/paths/users.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a
                    /// previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for
                    /// more detail.
                    ///
                    /// - Remark: Generated from `#/paths/users.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Set this to true to receive the locale for users. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/users.list/POST/requestBody/json/include_locale`.
                    public var includeLocale: Swift.Bool?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of
                    /// the users list hasn't been reached. Providing no limit value will result in Slack attempting to deliver you the
                    /// entire result set. If the collection is too large you may experience limit_required or HTTP 500 errors.
                    ///
                    /// - Remark: Generated from `#/paths/users.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// encoded team id to list users in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/users.list/POST/requestBody/json/team_id`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned
                    /// by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination
                    /// for more detail.
                    ///   - includeLocale: Set this to true to receive the locale for users. Defaults to false.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if
                    /// the end of the users list hasn't been reached. Providing no limit value will result in Slack attempting to deliver
                    /// you the entire result set. If the collection is too large you may experience limit_required or HTTP 500 errors.
                    ///   - teamId: encoded team id to list users in, required if org token is used.
                    public init(
                        cursor: Swift.String? = nil,
                        includeLocale: Swift.Bool? = nil,
                        limit: Swift.Double? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.includeLocale = includeLocale
                        self.limit = limit
                        self.teamId = teamId
                    }

                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case includeLocale = "include_locale"
                        case limit
                        case teamId = "team_id"
                    }
                }

                /// - Remark: Generated from `#/paths/users.list/POST/requestBody/content/application\/json`.
                case json(Operations.UsersList.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersList.Input.Headers = .init(),
                body: Operations.UsersList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersList.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.list/post(usersList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersLookupByEmail {
        public static let id: Swift.String = "usersLookupByEmail"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersLookupByEmail.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersLookupByEmail.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersLookupByEmail.Input.Headers
            /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// An email address belonging to a user in the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/requestBody/json/email`.
                    public var email: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email: An email address belonging to a user in the workspace.
                    public init(email: Swift.String) {
                        self.email = email
                    }

                    public enum CodingKeys: String, CodingKey {
                        case email
                    }
                }

                /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/requestBody/content/application\/json`.
                case json(Operations.UsersLookupByEmail.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersLookupByEmail.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersLookupByEmail.Input.Headers = .init(),
                body: Operations.UsersLookupByEmail.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersLookupByEmailResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersLookupByEmailResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersLookupByEmail.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersLookupByEmail.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.lookupByEmail/post(usersLookupByEmail)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersLookupByEmail.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersLookupByEmail.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersProfileGet {
        public static let id: Swift.String = "usersProfileGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.profile.get/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersProfileGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersProfileGet.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersProfileGet.Input.Headers
            /// - Remark: Generated from `#/paths/users.profile.get/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.profile.get/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Include labels for each ID in custom profile fields. Using this parameter will heavily rate-limit your requests and
                    /// is not recommended.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.get/POST/requestBody/json/include_labels`.
                    public var includeLabels: Swift.Bool?
                    /// User to retrieve profile info for.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.get/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - includeLabels: Include labels for each ID in custom profile fields. Using this parameter will heavily rate-limit
                    /// your requests and is not recommended.
                    ///   - user: User to retrieve profile info for.
                    public init(
                        includeLabels: Swift.Bool? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.includeLabels = includeLabels
                        self.user = user
                    }

                    public enum CodingKeys: String, CodingKey {
                        case includeLabels = "include_labels"
                        case user
                    }
                }

                /// - Remark: Generated from `#/paths/users.profile.get/POST/requestBody/content/application\/json`.
                case json(Operations.UsersProfileGet.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersProfileGet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersProfileGet.Input.Headers = .init(),
                body: Operations.UsersProfileGet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.profile.get/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.profile.get/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersProfileGetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersProfileGetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersProfileGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersProfileGet.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.profile.get/post(usersProfileGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersProfileGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersProfileGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersProfileSet {
        public static let id: Swift.String = "usersProfileSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.profile.set/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersProfileSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersProfileSet.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersProfileSet.Input.Headers
            /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of a single key to set. Usable only if profile is not passed.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/json/name`.
                    public var name: Swift.String?
                    /// Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is
                    /// limited to 255 characters.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/json/profile`.
                    public var profile: Swift.String?
                    /// ID of user to change. This argument may only be specified by admins on paid teams.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Value to set a single key to. Usable only if profile is not passed.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/json/value`.
                    public var value: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of a single key to set. Usable only if profile is not passed.
                    ///   - profile: Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each
                    /// field name is limited to 255 characters.
                    ///   - user: ID of user to change. This argument may only be specified by admins on paid teams.
                    ///   - value: Value to set a single key to. Usable only if profile is not passed.
                    public init(
                        name: Swift.String? = nil,
                        profile: Swift.String? = nil,
                        user: Swift.String? = nil,
                        value: Swift.String? = nil
                    ) {
                        self.name = name
                        self.profile = profile
                        self.user = user
                        self.value = value
                    }

                    public enum CodingKeys: String, CodingKey {
                        case name
                        case profile
                        case user
                        case value
                    }
                }

                /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/content/application\/json`.
                case json(Operations.UsersProfileSet.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersProfileSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersProfileSet.Input.Headers = .init(),
                body: Operations.UsersProfileSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.profile.set/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.profile.set/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersProfileSetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersProfileSetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersProfileSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersProfileSet.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.profile.set/post(usersProfileSet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersProfileSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersProfileSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersSetActive {
        public static let id: Swift.String = "usersSetActive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.setActive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetActive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetActive.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersSetActive.Input.Headers
            /// - Remark: Generated from `#/paths/users.setActive/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setActive/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creates a new `JsonPayload`.
                    public init() {}
                    public init(from decoder: any Decoder) throws {
                        try decoder.ensureNoAdditionalProperties(knownKeys: [])
                    }
                }

                /// - Remark: Generated from `#/paths/users.setActive/POST/requestBody/content/application\/json`.
                case json(Operations.UsersSetActive.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersSetActive.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersSetActive.Input.Headers = .init(),
                body: Operations.UsersSetActive.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setActive/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.setActive/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersSetActiveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersSetActiveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersSetActive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersSetActive.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.setActive/post(usersSetActive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersSetActive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersSetActive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersSetPhoto {
        public static let id: Swift.String = "usersSetPhoto"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.setPhoto/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetPhoto.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetPhoto.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersSetPhoto.Input.Headers
            /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Width/height of crop box (always square).
                    ///
                    /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/json/crop_w`.
                    public var cropW: Swift.String?
                    /// X coordinate of top-left corner of crop box.
                    ///
                    /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/json/crop_x`.
                    public var cropX: Swift.String?
                    /// Y coordinate of top-left corner of crop box.
                    ///
                    /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/json/crop_y`.
                    public var cropY: Swift.String?
                    /// File contents via multipart/form-data.
                    ///
                    /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/json/image`.
                    public var image: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cropW: Width/height of crop box (always square).
                    ///   - cropX: X coordinate of top-left corner of crop box.
                    ///   - cropY: Y coordinate of top-left corner of crop box.
                    ///   - image: File contents via multipart/form-data.
                    public init(
                        cropW: Swift.String? = nil,
                        cropX: Swift.String? = nil,
                        cropY: Swift.String? = nil,
                        image: Swift.String? = nil
                    ) {
                        self.cropW = cropW
                        self.cropX = cropX
                        self.cropY = cropY
                        self.image = image
                    }

                    public enum CodingKeys: String, CodingKey {
                        case cropW = "crop_w"
                        case cropX = "crop_x"
                        case cropY = "crop_y"
                        case image
                    }
                }

                /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/content/application\/json`.
                case json(Operations.UsersSetPhoto.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersSetPhoto.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersSetPhoto.Input.Headers = .init(),
                body: Operations.UsersSetPhoto.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setPhoto/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.setPhoto/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersSetPhotoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersSetPhotoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersSetPhoto.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersSetPhoto.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.setPhoto/post(usersSetPhoto)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersSetPhoto.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersSetPhoto.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum UsersSetPresence {
        public static let id: Swift.String = "usersSetPresence"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.setPresence/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetPresence.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetPresence.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.UsersSetPresence.Input.Headers
            /// - Remark: Generated from `#/paths/users.setPresence/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setPresence/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Either auto or away.
                    ///
                    /// - Remark: Generated from `#/paths/users.setPresence/POST/requestBody/json/presence`.
                    public var presence: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - presence: Either auto or away.
                    public init(presence: Swift.String) {
                        self.presence = presence
                    }

                    public enum CodingKeys: String, CodingKey {
                        case presence
                    }
                }

                /// - Remark: Generated from `#/paths/users.setPresence/POST/requestBody/content/application\/json`.
                case json(Operations.UsersSetPresence.Input.Body.JsonPayload)
            }

            public var body: Operations.UsersSetPresence.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersSetPresence.Input.Headers = .init(),
                body: Operations.UsersSetPresence.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setPresence/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.setPresence/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersSetPresenceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersSetPresenceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.UsersSetPresence.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersSetPresence.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.setPresence/post(usersSetPresence)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersSetPresence.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersSetPresence.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }
}
#endif
