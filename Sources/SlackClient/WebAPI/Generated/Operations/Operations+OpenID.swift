// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_OpenID
extension Operations {
    public enum OpenidConnectToken {
        public static let id: Swift.String = "openidConnectToken"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/openid.connect.token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OpenidConnectToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OpenidConnectToken.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.OpenidConnectToken.Input.Headers
            /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Issued when you created your application.
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/client_id`.
                    public var clientId: Swift.String?
                    /// Issued when you created your application.
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/client_secret`.
                    public var clientSecret: Swift.String?
                    /// The code param returned via the OAuth callback.
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/code`.
                    public var code: Swift.String?
                    /// The grant_type param as described in the OAuth spec.
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/grant_type`.
                    public var grantType: Swift.String?
                    /// This must match the originally submitted URI (if one was sent).
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/redirect_uri`.
                    public var redirectUri: Swift.String?
                    /// The refresh_token param as described in the OAuth spec.
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/refresh_token`.
                    public var refreshToken: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - clientId: Issued when you created your application.
                    ///   - clientSecret: Issued when you created your application.
                    ///   - code: The code param returned via the OAuth callback.
                    ///   - grantType: The grant_type param as described in the OAuth spec.
                    ///   - redirectUri: This must match the originally submitted URI (if one was sent).
                    ///   - refreshToken: The refresh_token param as described in the OAuth spec.
                    public init(
                        clientId: Swift.String? = nil,
                        clientSecret: Swift.String? = nil,
                        code: Swift.String? = nil,
                        grantType: Swift.String? = nil,
                        redirectUri: Swift.String? = nil,
                        refreshToken: Swift.String? = nil
                    ) {
                        self.clientId = clientId
                        self.clientSecret = clientSecret
                        self.code = code
                        self.grantType = grantType
                        self.redirectUri = redirectUri
                        self.refreshToken = refreshToken
                    }

                    public enum CodingKeys: String, CodingKey {
                        case clientId = "client_id"
                        case clientSecret = "client_secret"
                        case code
                        case grantType = "grant_type"
                        case redirectUri = "redirect_uri"
                        case refreshToken = "refresh_token"
                    }
                }

                /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/content/application\/json`.
                case json(Operations.OpenidConnectToken.Input.Body.JsonPayload)
            }

            public var body: Operations.OpenidConnectToken.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.OpenidConnectToken.Input.Headers = .init(),
                body: Operations.OpenidConnectToken.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/openid.connect.token/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpenidConnectTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OpenidConnectTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.OpenidConnectToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.OpenidConnectToken.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//openid.connect.token/post(openidConnectToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.OpenidConnectToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.OpenidConnectToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }

    public enum OpenidConnectUserInfo {
        public static let id: Swift.String = "openidConnectUserInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OpenidConnectUserInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OpenidConnectUserInfo.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.accept = accept
                }
            }

            public var headers: Operations.OpenidConnectUserInfo.Input.Headers
            /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creates a new `JsonPayload`.
                    public init() {}
                    public init(from decoder: any Decoder) throws {
                        try decoder.ensureNoAdditionalProperties(knownKeys: [])
                    }
                }

                /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/requestBody/content/application\/json`.
                case json(Operations.OpenidConnectUserInfo.Input.Body.JsonPayload)
            }

            public var body: Operations.OpenidConnectUserInfo.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.OpenidConnectUserInfo.Input.Headers = .init(),
                body: Operations.OpenidConnectUserInfo.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }

        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpenidConnectUserInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OpenidConnectUserInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                body
                            }
                        }
                    }
                }

                /// Received HTTP response body
                public var body: Operations.OpenidConnectUserInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.OpenidConnectUserInfo.Output.Ok.Body) {
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//openid.connect.userInfo/post(openidConnectUserInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.OpenidConnectUserInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.OpenidConnectUserInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }

            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }

        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }

            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    string
                case .json:
                    "application/json"
                }
            }

            public static var allCases: [Self] {
                [
                    .json,
                ]
            }
        }
    }
}
#endif
