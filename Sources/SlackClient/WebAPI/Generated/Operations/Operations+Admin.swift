// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.

#if WebAPI_Admin
extension Operations {
public enum AdminAppsActivitiesList {
    public static let id: Swift.String = "adminAppsActivitiesList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsActivitiesList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsActivitiesList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsActivitiesList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID of the app to get activities from.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/app_id`.
                public var appId: Swift.String?
                /// The component ID of log events to be returned. Will be FnXXXXXX for functions, and WfXXXXXX for worflows.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/component_id`.
                public var componentId: Swift.String?
                /// The component type of log events to be returned. Acceptable values are events_api, workflows, functions and tables.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/component_type`.
                public var componentType: Swift.String?
                /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. See pagination for more detail.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The maximum number of items to return.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// The event type of log events to be returned.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/log_event_type`.
                public var logEventType: Swift.String?
                /// The latest timestamp of the log to retrieve (epoch microseconds).
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/max_date_created`.
                public var maxDateCreated: Swift.Int?
                /// The earliest timestamp of the log to retrieve (epoch microseconds).
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/min_date_created`.
                public var minDateCreated: Swift.Int?
                /// The minimum log level of the log events to be returned. Defaults to info. Acceptable values (in order of relative importance from smallest to largest) are trace, debug, info, warn, error and fatal.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/min_log_level`.
                public var minLogLevel: Swift.String?
                /// The direction you want the data sorted by (always by timestamp).
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/sort_direction`.
                public var sortDirection: Swift.String?
                /// The source of log events to be returned. Acceptable values are slack and developer.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/source`.
                public var source: Swift.String?
                /// The team who owns this log.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// The trace ID of log events to be returned.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/trace_id`.
                public var traceId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - appId: The ID of the app to get activities from.
                ///   - componentId: The component ID of log events to be returned. Will be FnXXXXXX for functions, and WfXXXXXX for worflows.
                ///   - componentType: The component type of log events to be returned. Acceptable values are events_api, workflows, functions and tables.
                ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. See pagination for more detail.
                ///   - limit: The maximum number of items to return.
                ///   - logEventType: The event type of log events to be returned.
                ///   - maxDateCreated: The latest timestamp of the log to retrieve (epoch microseconds).
                ///   - minDateCreated: The earliest timestamp of the log to retrieve (epoch microseconds).
                ///   - minLogLevel: The minimum log level of the log events to be returned. Defaults to info. Acceptable values (in order of relative importance from smallest to largest) are trace, debug, info, warn, error and fatal.
                ///   - sortDirection: The direction you want the data sorted by (always by timestamp).
                ///   - source: The source of log events to be returned. Acceptable values are slack and developer.
                ///   - teamId: The team who owns this log.
                ///   - traceId: The trace ID of log events to be returned.
                public init(
                    appId: Swift.String? = nil,
                    componentId: Swift.String? = nil,
                    componentType: Swift.String? = nil,
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    logEventType: Swift.String? = nil,
                    maxDateCreated: Swift.Int? = nil,
                    minDateCreated: Swift.Int? = nil,
                    minLogLevel: Swift.String? = nil,
                    sortDirection: Swift.String? = nil,
                    source: Swift.String? = nil,
                    teamId: Swift.String? = nil,
                    traceId: Swift.String? = nil
                ) {
                    self.appId = appId
                    self.componentId = componentId
                    self.componentType = componentType
                    self.cursor = cursor
                    self.limit = limit
                    self.logEventType = logEventType
                    self.maxDateCreated = maxDateCreated
                    self.minDateCreated = minDateCreated
                    self.minLogLevel = minLogLevel
                    self.sortDirection = sortDirection
                    self.source = source
                    self.teamId = teamId
                    self.traceId = traceId
                }
                public enum CodingKeys: String, CodingKey {
                    case appId = "app_id"
                    case componentId = "component_id"
                    case componentType = "component_type"
                    case cursor
                    case limit
                    case logEventType = "log_event_type"
                    case maxDateCreated = "max_date_created"
                    case minDateCreated = "min_date_created"
                    case minLogLevel = "min_log_level"
                    case sortDirection = "sort_direction"
                    case source
                    case teamId = "team_id"
                    case traceId = "trace_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsActivitiesList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsActivitiesList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsActivitiesList.Input.Headers = .init(),
            body: Operations.AdminAppsActivitiesList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsActivitiesListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsActivitiesListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsActivitiesList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsActivitiesList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.activities.list/post(adminAppsActivitiesList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsActivitiesList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsActivitiesList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAppsApprove {
    public static let id: Swift.String = "adminAppsApprove"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.approve/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsApprove.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsApprove.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsApprove.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The id of the app to approve.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/json/app_id`.
                public var appId: Swift.String?
                /// The ID of the enterprise to approve the app on.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/json/enterprise_id`.
                public var enterpriseId: Swift.String?
                /// The id of the request to approve.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/json/request_id`.
                public var requestId: Swift.String?
                /// The ID of the workspace to approve the app on.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - appId: The id of the app to approve.
                ///   - enterpriseId: The ID of the enterprise to approve the app on.
                ///   - requestId: The id of the request to approve.
                ///   - teamId: The ID of the workspace to approve the app on.
                public init(
                    appId: Swift.String? = nil,
                    enterpriseId: Swift.String? = nil,
                    requestId: Swift.String? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.appId = appId
                    self.enterpriseId = enterpriseId
                    self.requestId = requestId
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case appId = "app_id"
                    case enterpriseId = "enterprise_id"
                    case requestId = "request_id"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsApprove.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsApprove.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsApprove.Input.Headers = .init(),
            body: Operations.AdminAppsApprove.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.approve/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.approve/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsApproveResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsApproveResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsApprove.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsApprove.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.approve/post(adminAppsApprove)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsApprove.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsApprove.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAppsApprovedList {
    public static let id: Swift.String = "adminAppsApprovedList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsApprovedList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsApprovedList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsApprovedList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Limit the results to only include certified apps. When false, no certified apps will appear in the result.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json/certified`.
                public var certified: Swift.Bool?
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json/enterprise_id`.
                public var enterpriseId: Swift.String?
                /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - certified: Limit the results to only include certified apps. When false, no certified apps will appear in the result.
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - enterpriseId: .
                ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///   - teamId: .
                public init(
                    certified: Swift.Bool? = nil,
                    cursor: Swift.String? = nil,
                    enterpriseId: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.certified = certified
                    self.cursor = cursor
                    self.enterpriseId = enterpriseId
                    self.limit = limit
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case certified
                    case cursor
                    case enterpriseId = "enterprise_id"
                    case limit
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsApprovedList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsApprovedList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsApprovedList.Input.Headers = .init(),
            body: Operations.AdminAppsApprovedList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsApprovedListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsApprovedListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsApprovedList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsApprovedList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.approved.list/post(adminAppsApprovedList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsApprovedList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsApprovedList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAppsClearResolution {
    public static let id: Swift.String = "adminAppsClearResolution"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsClearResolution.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsClearResolution.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsClearResolution.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The id of the app whose resolution you want to clear/undo.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody/json/app_id`.
                public var appId: Swift.String
                /// The enterprise to clear the app resolution from.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody/json/enterprise_id`.
                public var enterpriseId: Swift.String?
                /// The workspace to clear the app resolution from.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - appId: The id of the app whose resolution you want to clear/undo.
                ///   - enterpriseId: The enterprise to clear the app resolution from.
                ///   - teamId: The workspace to clear the app resolution from.
                public init(
                    appId: Swift.String,
                    enterpriseId: Swift.String? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.appId = appId
                    self.enterpriseId = enterpriseId
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case appId = "app_id"
                    case enterpriseId = "enterprise_id"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsClearResolution.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsClearResolution.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsClearResolution.Input.Headers = .init(),
            body: Operations.AdminAppsClearResolution.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsClearResolutionResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsClearResolutionResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsClearResolution.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsClearResolution.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.clearResolution/post(adminAppsClearResolution)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsClearResolution.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsClearResolution.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAppsConfigLookup {
    public static let id: Swift.String = "adminAppsConfigLookup"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsConfigLookup.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsConfigLookup.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsConfigLookup.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// An array of app IDs to get app configs for.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/requestBody/json/app_ids`.
                public var appIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - appIds: An array of app IDs to get app configs for.
                public init(appIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                    self.appIds = appIds
                }
                public enum CodingKeys: String, CodingKey {
                    case appIds = "app_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsConfigLookup.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsConfigLookup.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsConfigLookup.Input.Headers = .init(),
            body: Operations.AdminAppsConfigLookup.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsConfigLookupResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsConfigLookupResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsConfigLookup.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsConfigLookup.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.config.lookup/post(adminAppsConfigLookup)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsConfigLookup.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsConfigLookup.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAppsConfigSet {
    public static let id: Swift.String = "adminAppsConfigSet"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsConfigSet.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsConfigSet.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsConfigSet.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The encoded app ID to set the app config for.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody/json/app_id`.
                public var appId: Swift.String
                /// Domain restrictions for the app. Should be an object with two properties: urls and emails. Each is an array of strings, and each sets the allowed URLs and emails for connector authorization, respectively.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody/json/domain_restrictions`.
                public var domainRestrictions: OpenAPIRuntime.OpenAPIObjectContainer?
                /// The workflow auth permission. Can be one of builder_choice or end_user_only.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody/json/workflow_auth_strategy`.
                public var workflowAuthStrategy: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - appId: The encoded app ID to set the app config for.
                ///   - domainRestrictions: Domain restrictions for the app. Should be an object with two properties: urls and emails. Each is an array of strings, and each sets the allowed URLs and emails for connector authorization, respectively.
                ///   - workflowAuthStrategy: The workflow auth permission. Can be one of builder_choice or end_user_only.
                public init(
                    appId: Swift.String,
                    domainRestrictions: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                    workflowAuthStrategy: Swift.String? = nil
                ) {
                    self.appId = appId
                    self.domainRestrictions = domainRestrictions
                    self.workflowAuthStrategy = workflowAuthStrategy
                }
                public enum CodingKeys: String, CodingKey {
                    case appId = "app_id"
                    case domainRestrictions = "domain_restrictions"
                    case workflowAuthStrategy = "workflow_auth_strategy"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsConfigSet.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsConfigSet.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsConfigSet.Input.Headers = .init(),
            body: Operations.AdminAppsConfigSet.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsConfigSetResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsConfigSetResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsConfigSet.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsConfigSet.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.config.set/post(adminAppsConfigSet)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsConfigSet.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsConfigSet.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAppsRequestsCancel {
    public static let id: Swift.String = "adminAppsRequestsCancel"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRequestsCancel.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRequestsCancel.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsRequestsCancel.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The id of the request to cancel.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody/json/request_id`.
                public var requestId: Swift.String
                /// The ID of the enterprise where this request belongs.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody/json/enterprise_id`.
                public var enterpriseId: Swift.String?
                /// The ID of the workspace where this request belongs.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - requestId: The id of the request to cancel.
                ///   - enterpriseId: The ID of the enterprise where this request belongs.
                ///   - teamId: The ID of the workspace where this request belongs.
                public init(
                    requestId: Swift.String,
                    enterpriseId: Swift.String? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.requestId = requestId
                    self.enterpriseId = enterpriseId
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case requestId = "request_id"
                    case enterpriseId = "enterprise_id"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsRequestsCancel.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsRequestsCancel.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsRequestsCancel.Input.Headers = .init(),
            body: Operations.AdminAppsRequestsCancel.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsRequestsCancelResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsRequestsCancelResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsRequestsCancel.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsRequestsCancel.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.requests.cancel/post(adminAppsRequestsCancel)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsRequestsCancel.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsRequestsCancel.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAppsRequestsList {
    public static let id: Swift.String = "adminAppsRequestsList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRequestsList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRequestsList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsRequestsList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Include requests for certified apps.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json/certified`.
                public var certified: Swift.Bool?
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json/enterprise_id`.
                public var enterpriseId: Swift.String?
                /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - certified: Include requests for certified apps.
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - enterpriseId: .
                ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///   - teamId: .
                public init(
                    certified: Swift.Bool? = nil,
                    cursor: Swift.String? = nil,
                    enterpriseId: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.certified = certified
                    self.cursor = cursor
                    self.enterpriseId = enterpriseId
                    self.limit = limit
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case certified
                    case cursor
                    case enterpriseId = "enterprise_id"
                    case limit
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsRequestsList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsRequestsList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsRequestsList.Input.Headers = .init(),
            body: Operations.AdminAppsRequestsList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsRequestsListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsRequestsListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsRequestsList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsRequestsList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.requests.list/post(adminAppsRequestsList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsRequestsList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsRequestsList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAppsRestrict {
    public static let id: Swift.String = "adminAppsRestrict"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRestrict.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRestrict.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsRestrict.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The id of the app to restrict.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/json/app_id`.
                public var appId: Swift.String?
                /// The ID of the enterprise to approve the app on.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/json/enterprise_id`.
                public var enterpriseId: Swift.String?
                /// The id of the request to restrict.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/json/request_id`.
                public var requestId: Swift.String?
                /// The ID of the workspace to approve the app on.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - appId: The id of the app to restrict.
                ///   - enterpriseId: The ID of the enterprise to approve the app on.
                ///   - requestId: The id of the request to restrict.
                ///   - teamId: The ID of the workspace to approve the app on.
                public init(
                    appId: Swift.String? = nil,
                    enterpriseId: Swift.String? = nil,
                    requestId: Swift.String? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.appId = appId
                    self.enterpriseId = enterpriseId
                    self.requestId = requestId
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case appId = "app_id"
                    case enterpriseId = "enterprise_id"
                    case requestId = "request_id"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsRestrict.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsRestrict.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsRestrict.Input.Headers = .init(),
            body: Operations.AdminAppsRestrict.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsRestrictResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsRestrictResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsRestrict.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsRestrict.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.restrict/post(adminAppsRestrict)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsRestrict.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsRestrict.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAppsRestrictedList {
    public static let id: Swift.String = "adminAppsRestrictedList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRestrictedList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRestrictedList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsRestrictedList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Limit the results to only include certified apps. When false, no certified apps will appear in the result.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json/certified`.
                public var certified: Swift.Bool?
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json/enterprise_id`.
                public var enterpriseId: Swift.String?
                /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - certified: Limit the results to only include certified apps. When false, no certified apps will appear in the result.
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - enterpriseId: .
                ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///   - teamId: .
                public init(
                    certified: Swift.Bool? = nil,
                    cursor: Swift.String? = nil,
                    enterpriseId: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.certified = certified
                    self.cursor = cursor
                    self.enterpriseId = enterpriseId
                    self.limit = limit
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case certified
                    case cursor
                    case enterpriseId = "enterprise_id"
                    case limit
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsRestrictedList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsRestrictedList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsRestrictedList.Input.Headers = .init(),
            body: Operations.AdminAppsRestrictedList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsRestrictedListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsRestrictedListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsRestrictedList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsRestrictedList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.restricted.list/post(adminAppsRestrictedList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsRestrictedList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsRestrictedList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAppsUninstall {
    public static let id: Swift.String = "adminAppsUninstall"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsUninstall.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsUninstall.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAppsUninstall.Input.Headers
        /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID of the app to uninstall.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody/json/app_id`.
                public var appId: Swift.String
                /// The enterprise to completely uninstall the application from (across all workspaces). With an org-level token, this or team_ids is required.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody/json/enterprise_id`.
                public var enterpriseId: Swift.String?
                /// IDs of the teams to uninstall from (max 100). With an org-level token, this or enterprise_id is required.
                ///
                /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody/json/team_ids`.
                public var teamIds: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - appId: The ID of the app to uninstall.
                ///   - enterpriseId: The enterprise to completely uninstall the application from (across all workspaces). With an org-level token, this or team_ids is required.
                ///   - teamIds: IDs of the teams to uninstall from (max 100). With an org-level token, this or enterprise_id is required.
                public init(
                    appId: Swift.String,
                    enterpriseId: Swift.String? = nil,
                    teamIds: Swift.String? = nil
                ) {
                    self.appId = appId
                    self.enterpriseId = enterpriseId
                    self.teamIds = teamIds
                }
                public enum CodingKeys: String, CodingKey {
                    case appId = "app_id"
                    case enterpriseId = "enterprise_id"
                    case teamIds = "team_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAppsUninstall.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAppsUninstall.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAppsUninstall.Input.Headers = .init(),
            body: Operations.AdminAppsUninstall.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAppsUninstallResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAppsUninstallResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAppsUninstall.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAppsUninstall.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.apps.uninstall/post(adminAppsUninstall)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAppsUninstall.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAppsUninstall.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAuthPolicyAssignEntities {
    public static let id: Swift.String = "adminAuthPolicyAssignEntities"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyAssignEntities.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyAssignEntities.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAuthPolicyAssignEntities.Input.Headers
        /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Array of IDs to assign to the policy.
                ///
                /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody/json/entity_ids`.
                public var entityIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// The type of entity to assign to the policy. Currently, USER is supported.
                ///
                /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody/json/entity_type`.
                public var entityType: Swift.String
                /// The name of the authentication policy to assign the entities to. Currently, email_password is the only policy that may be used with this method.
                ///
                /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody/json/policy_name`.
                public var policyName: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - entityIds: Array of IDs to assign to the policy.
                ///   - entityType: The type of entity to assign to the policy. Currently, USER is supported.
                ///   - policyName: The name of the authentication policy to assign the entities to. Currently, email_password is the only policy that may be used with this method.
                public init(
                    entityIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    entityType: Swift.String,
                    policyName: Swift.String
                ) {
                    self.entityIds = entityIds
                    self.entityType = entityType
                    self.policyName = policyName
                }
                public enum CodingKeys: String, CodingKey {
                    case entityIds = "entity_ids"
                    case entityType = "entity_type"
                    case policyName = "policy_name"
                }
            }
            /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAuthPolicyAssignEntities.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAuthPolicyAssignEntities.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAuthPolicyAssignEntities.Input.Headers = .init(),
            body: Operations.AdminAuthPolicyAssignEntities.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAuthPolicyAssignEntitiesResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAuthPolicyAssignEntitiesResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAuthPolicyAssignEntities.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAuthPolicyAssignEntities.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.auth.policy.assignEntities/post(adminAuthPolicyAssignEntities)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAuthPolicyAssignEntities.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAuthPolicyAssignEntities.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAuthPolicyGetEntities {
    public static let id: Swift.String = "adminAuthPolicyGetEntities"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyGetEntities.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyGetEntities.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAuthPolicyGetEntities.Input.Headers
        /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The name of the policy to fetch entities for. Currently, email_password is the only policy that may be used with this method.
                ///
                /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/json/policy_name`.
                public var policyName: Swift.String
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The type of entity to assign to the policy. Currently, USER is supported.
                ///
                /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/json/entity_type`.
                public var entityType: Swift.String?
                /// The maximum number of items to return. Must be between 1 and 1000, both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - policyName: The name of the policy to fetch entities for. Currently, email_password is the only policy that may be used with this method.
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - entityType: The type of entity to assign to the policy. Currently, USER is supported.
                ///   - limit: The maximum number of items to return. Must be between 1 and 1000, both inclusive.
                public init(
                    policyName: Swift.String,
                    cursor: Swift.String? = nil,
                    entityType: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.policyName = policyName
                    self.cursor = cursor
                    self.entityType = entityType
                    self.limit = limit
                }
                public enum CodingKeys: String, CodingKey {
                    case policyName = "policy_name"
                    case cursor
                    case entityType = "entity_type"
                    case limit
                }
            }
            /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAuthPolicyGetEntities.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAuthPolicyGetEntities.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAuthPolicyGetEntities.Input.Headers = .init(),
            body: Operations.AdminAuthPolicyGetEntities.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAuthPolicyGetEntitiesResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAuthPolicyGetEntitiesResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAuthPolicyGetEntities.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAuthPolicyGetEntities.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.auth.policy.getEntities/post(adminAuthPolicyGetEntities)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAuthPolicyGetEntities.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAuthPolicyGetEntities.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminAuthPolicyRemoveEntities {
    public static let id: Swift.String = "adminAuthPolicyRemoveEntities"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyRemoveEntities.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyRemoveEntities.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminAuthPolicyRemoveEntities.Input.Headers
        /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Encoded IDs of the entities you'd like to remove from the policy.
                ///
                /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody/json/entity_ids`.
                public var entityIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// The type of entity to assign to the policy. Currently, USER is supported.
                ///
                /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody/json/entity_type`.
                public var entityType: Swift.String
                /// The name of the policy to remove entities from. Currently, email_password is the only policy that may be used with this method.
                ///
                /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody/json/policy_name`.
                public var policyName: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - entityIds: Encoded IDs of the entities you'd like to remove from the policy.
                ///   - entityType: The type of entity to assign to the policy. Currently, USER is supported.
                ///   - policyName: The name of the policy to remove entities from. Currently, email_password is the only policy that may be used with this method.
                public init(
                    entityIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    entityType: Swift.String,
                    policyName: Swift.String
                ) {
                    self.entityIds = entityIds
                    self.entityType = entityType
                    self.policyName = policyName
                }
                public enum CodingKeys: String, CodingKey {
                    case entityIds = "entity_ids"
                    case entityType = "entity_type"
                    case policyName = "policy_name"
                }
            }
            /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody/content/application\/json`.
            case json(Operations.AdminAuthPolicyRemoveEntities.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminAuthPolicyRemoveEntities.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminAuthPolicyRemoveEntities.Input.Headers = .init(),
            body: Operations.AdminAuthPolicyRemoveEntities.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminAuthPolicyRemoveEntitiesResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminAuthPolicyRemoveEntitiesResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminAuthPolicyRemoveEntities.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminAuthPolicyRemoveEntities.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.auth.policy.removeEntities/post(adminAuthPolicyRemoveEntities)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminAuthPolicyRemoveEntities.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminAuthPolicyRemoveEntities.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminBarriersCreate {
    public static let id: Swift.String = "adminBarriersCreate"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.barriers.create/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersCreate.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersCreate.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminBarriersCreate.Input.Headers
        /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// A list of IDP Groups ids that the primary usergroup is to be barriered from.
                ///
                /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody/json/barriered_from_usergroup_ids`.
                public var barrieredFromUsergroupIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// The id of the primary IDP Group.
                ///
                /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody/json/primary_usergroup_id`.
                public var primaryUsergroupId: Swift.String
                /// What kind of interactions are blocked by this barrier? For v1, we only support a list of all 3, eg im, mpim, call.
                ///
                /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody/json/restricted_subjects`.
                public var restrictedSubjects: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - barrieredFromUsergroupIds: A list of IDP Groups ids that the primary usergroup is to be barriered from.
                ///   - primaryUsergroupId: The id of the primary IDP Group.
                ///   - restrictedSubjects: What kind of interactions are blocked by this barrier? For v1, we only support a list of all 3, eg im, mpim, call.
                public init(
                    barrieredFromUsergroupIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    primaryUsergroupId: Swift.String,
                    restrictedSubjects: OpenAPIRuntime.OpenAPIArrayContainer
                ) {
                    self.barrieredFromUsergroupIds = barrieredFromUsergroupIds
                    self.primaryUsergroupId = primaryUsergroupId
                    self.restrictedSubjects = restrictedSubjects
                }
                public enum CodingKeys: String, CodingKey {
                    case barrieredFromUsergroupIds = "barriered_from_usergroup_ids"
                    case primaryUsergroupId = "primary_usergroup_id"
                    case restrictedSubjects = "restricted_subjects"
                }
            }
            /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody/content/application\/json`.
            case json(Operations.AdminBarriersCreate.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminBarriersCreate.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminBarriersCreate.Input.Headers = .init(),
            body: Operations.AdminBarriersCreate.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.create/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.create/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminBarriersCreateResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminBarriersCreateResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminBarriersCreate.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminBarriersCreate.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.barriers.create/post(adminBarriersCreate)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminBarriersCreate.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminBarriersCreate.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminBarriersDelete {
    public static let id: Swift.String = "adminBarriersDelete"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersDelete.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersDelete.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminBarriersDelete.Input.Headers
        /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID of the barrier you're trying to delete.
                ///
                /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/requestBody/json/barrier_id`.
                public var barrierId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - barrierId: The ID of the barrier you're trying to delete.
                public init(barrierId: Swift.String) {
                    self.barrierId = barrierId
                }
                public enum CodingKeys: String, CodingKey {
                    case barrierId = "barrier_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/requestBody/content/application\/json`.
            case json(Operations.AdminBarriersDelete.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminBarriersDelete.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminBarriersDelete.Input.Headers = .init(),
            body: Operations.AdminBarriersDelete.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminBarriersDeleteResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminBarriersDeleteResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminBarriersDelete.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminBarriersDelete.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.barriers.delete/post(adminBarriersDelete)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminBarriersDelete.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminBarriersDelete.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminBarriersList {
    public static let id: Swift.String = "adminBarriersList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.barriers.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminBarriersList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.barriers.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.barriers.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.barriers.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                public init(
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.cursor = cursor
                    self.limit = limit
                }
                public enum CodingKeys: String, CodingKey {
                    case cursor
                    case limit
                }
            }
            /// - Remark: Generated from `#/paths/admin.barriers.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminBarriersList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminBarriersList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminBarriersList.Input.Headers = .init(),
            body: Operations.AdminBarriersList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminBarriersListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminBarriersListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminBarriersList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminBarriersList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.barriers.list/post(adminBarriersList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminBarriersList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminBarriersList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminBarriersUpdate {
    public static let id: Swift.String = "adminBarriersUpdate"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.barriers.update/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersUpdate.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersUpdate.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminBarriersUpdate.Input.Headers
        /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID of the barrier you're trying to modify.
                ///
                /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/json/barrier_id`.
                public var barrierId: Swift.String
                /// A list of IDP Groups ids that the primary usergroup is to be barriered from.
                ///
                /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/json/barriered_from_usergroup_ids`.
                public var barrieredFromUsergroupIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// The id of the primary IDP Group.
                ///
                /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/json/primary_usergroup_id`.
                public var primaryUsergroupId: Swift.String
                /// What kind of interactions are blocked by this barrier? For v1, we only support a list of all 3, eg im, mpim, call.
                ///
                /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/json/restricted_subjects`.
                public var restrictedSubjects: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - barrierId: The ID of the barrier you're trying to modify.
                ///   - barrieredFromUsergroupIds: A list of IDP Groups ids that the primary usergroup is to be barriered from.
                ///   - primaryUsergroupId: The id of the primary IDP Group.
                ///   - restrictedSubjects: What kind of interactions are blocked by this barrier? For v1, we only support a list of all 3, eg im, mpim, call.
                public init(
                    barrierId: Swift.String,
                    barrieredFromUsergroupIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    primaryUsergroupId: Swift.String,
                    restrictedSubjects: OpenAPIRuntime.OpenAPIArrayContainer
                ) {
                    self.barrierId = barrierId
                    self.barrieredFromUsergroupIds = barrieredFromUsergroupIds
                    self.primaryUsergroupId = primaryUsergroupId
                    self.restrictedSubjects = restrictedSubjects
                }
                public enum CodingKeys: String, CodingKey {
                    case barrierId = "barrier_id"
                    case barrieredFromUsergroupIds = "barriered_from_usergroup_ids"
                    case primaryUsergroupId = "primary_usergroup_id"
                    case restrictedSubjects = "restricted_subjects"
                }
            }
            /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/content/application\/json`.
            case json(Operations.AdminBarriersUpdate.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminBarriersUpdate.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminBarriersUpdate.Input.Headers = .init(),
            body: Operations.AdminBarriersUpdate.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.update/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.update/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminBarriersUpdateResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminBarriersUpdateResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminBarriersUpdate.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminBarriersUpdate.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.barriers.update/post(adminBarriersUpdate)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminBarriersUpdate.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminBarriersUpdate.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsArchive {
    public static let id: Swift.String = "adminConversationsArchive"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsArchive.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsArchive.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsArchive.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to archive.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to archive.
                public init(channelId: Swift.String) {
                    self.channelId = channelId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsArchive.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsArchive.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsArchive.Input.Headers = .init(),
            body: Operations.AdminConversationsArchive.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsArchiveResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsArchiveResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsArchive.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsArchive.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.archive/post(adminConversationsArchive)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsArchive.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsArchive.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsBulkArchive {
    public static let id: Swift.String = "adminConversationsBulkArchive"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkArchive.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkArchive.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsBulkArchive.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// An array of channel IDs to archive. No more than 100 items are allowed.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/requestBody/json/channel_ids`.
                public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelIds: An array of channel IDs to archive. No more than 100 items are allowed.
                public init(channelIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                    self.channelIds = channelIds
                }
                public enum CodingKeys: String, CodingKey {
                    case channelIds = "channel_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsBulkArchive.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsBulkArchive.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsBulkArchive.Input.Headers = .init(),
            body: Operations.AdminConversationsBulkArchive.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsBulkArchiveResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsBulkArchiveResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsBulkArchive.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsBulkArchive.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.bulkArchive/post(adminConversationsBulkArchive)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsBulkArchive.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsBulkArchive.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsBulkDelete {
    public static let id: Swift.String = "adminConversationsBulkDelete"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkDelete.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkDelete.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsBulkDelete.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// An array of channel IDs.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/requestBody/json/channel_ids`.
                public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelIds: An array of channel IDs.
                public init(channelIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                    self.channelIds = channelIds
                }
                public enum CodingKeys: String, CodingKey {
                    case channelIds = "channel_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsBulkDelete.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsBulkDelete.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsBulkDelete.Input.Headers = .init(),
            body: Operations.AdminConversationsBulkDelete.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsBulkDeleteResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsBulkDeleteResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsBulkDelete.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsBulkDelete.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.bulkDelete/post(adminConversationsBulkDelete)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsBulkDelete.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsBulkDelete.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsBulkMove {
    public static let id: Swift.String = "adminConversationsBulkMove"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkMove.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkMove.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsBulkMove.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// An array of channel IDs.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/requestBody/json/channel_ids`.
                public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Target team ID.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/requestBody/json/target_team_id`.
                public var targetTeamId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelIds: An array of channel IDs.
                ///   - targetTeamId: Target team ID.
                public init(
                    channelIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    targetTeamId: Swift.String
                ) {
                    self.channelIds = channelIds
                    self.targetTeamId = targetTeamId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelIds = "channel_ids"
                    case targetTeamId = "target_team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsBulkMove.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsBulkMove.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsBulkMove.Input.Headers = .init(),
            body: Operations.AdminConversationsBulkMove.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsBulkMoveResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsBulkMoveResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsBulkMove.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsBulkMove.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.bulkMove/post(adminConversationsBulkMove)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsBulkMove.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsBulkMove.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsConvertToPrivate {
    public static let id: Swift.String = "adminConversationsConvertToPrivate"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsConvertToPrivate.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsConvertToPrivate.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsConvertToPrivate.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to convert to private.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// Name of private channel to create. Only respected when converting an MPIM.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/requestBody/json/name`.
                public var name: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to convert to private.
                ///   - name: Name of private channel to create. Only respected when converting an MPIM.
                public init(
                    channelId: Swift.String,
                    name: Swift.String? = nil
                ) {
                    self.channelId = channelId
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case name
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsConvertToPrivate.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsConvertToPrivate.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsConvertToPrivate.Input.Headers = .init(),
            body: Operations.AdminConversationsConvertToPrivate.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsConvertToPrivateResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsConvertToPrivateResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsConvertToPrivate.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsConvertToPrivate.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.convertToPrivate/post(adminConversationsConvertToPrivate)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsConvertToPrivate.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsConvertToPrivate.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsConvertToPublic {
    public static let id: Swift.String = "adminConversationsConvertToPublic"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsConvertToPublic.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsConvertToPublic.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsConvertToPublic.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to convert to public.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to convert to public.
                public init(channelId: Swift.String) {
                    self.channelId = channelId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsConvertToPublic.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsConvertToPublic.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsConvertToPublic.Input.Headers = .init(),
            body: Operations.AdminConversationsConvertToPublic.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsConvertToPublicResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsConvertToPublicResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsConvertToPublic.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsConvertToPublic.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.convertToPublic/post(adminConversationsConvertToPublic)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsConvertToPublic.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsConvertToPublic.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsCreate {
    public static let id: Swift.String = "adminConversationsCreate"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.create/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsCreate.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsCreate.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsCreate.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// When true, creates a private channel instead of a public channel.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json/is_private`.
                public var isPrivate: Swift.Bool
                /// Name of the public or private channel to create.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json/name`.
                public var name: Swift.String
                /// Description of the public or private channel to create.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json/description`.
                public var description: Swift.String?
                /// When true, the channel will be available org-wide. Note: if the channel is not org_wide=true, you must specify a team_id for this channel.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json/org_wide`.
                public var orgWide: Swift.Bool?
                /// The workspace to create the channel in. Note: this argument is required unless you set org_wide=true.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - isPrivate: When true, creates a private channel instead of a public channel.
                ///   - name: Name of the public or private channel to create.
                ///   - description: Description of the public or private channel to create.
                ///   - orgWide: When true, the channel will be available org-wide. Note: if the channel is not org_wide=true, you must specify a team_id for this channel.
                ///   - teamId: The workspace to create the channel in. Note: this argument is required unless you set org_wide=true.
                public init(
                    isPrivate: Swift.Bool,
                    name: Swift.String,
                    description: Swift.String? = nil,
                    orgWide: Swift.Bool? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.isPrivate = isPrivate
                    self.name = name
                    self.description = description
                    self.orgWide = orgWide
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case isPrivate = "is_private"
                    case name
                    case description
                    case orgWide = "org_wide"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsCreate.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsCreate.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsCreate.Input.Headers = .init(),
            body: Operations.AdminConversationsCreate.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.create/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.create/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsCreateResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsCreateResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsCreate.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsCreate.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.create/post(adminConversationsCreate)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsCreate.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsCreate.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsDelete {
    public static let id: Swift.String = "adminConversationsDelete"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsDelete.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsDelete.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsDelete.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to delete.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to delete.
                public init(channelId: Swift.String) {
                    self.channelId = channelId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsDelete.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsDelete.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsDelete.Input.Headers = .init(),
            body: Operations.AdminConversationsDelete.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsDeleteResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsDeleteResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsDelete.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsDelete.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.delete/post(adminConversationsDelete)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsDelete.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsDelete.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsDisconnectShared {
    public static let id: Swift.String = "adminConversationsDisconnectShared"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsDisconnectShared.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsDisconnectShared.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsDisconnectShared.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to be disconnected from some workspaces.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// team IDs getting removed from the channel, optional if there are only two teams in the channel.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/requestBody/json/leaving_team_ids`.
                public var leavingTeamIds: OpenAPIRuntime.OpenAPIArrayContainer?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to be disconnected from some workspaces.
                ///   - leavingTeamIds: team IDs getting removed from the channel, optional if there are only two teams in the channel.
                public init(
                    channelId: Swift.String,
                    leavingTeamIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                ) {
                    self.channelId = channelId
                    self.leavingTeamIds = leavingTeamIds
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case leavingTeamIds = "leaving_team_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsDisconnectShared.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsDisconnectShared.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsDisconnectShared.Input.Headers = .init(),
            body: Operations.AdminConversationsDisconnectShared.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsDisconnectSharedResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsDisconnectSharedResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsDisconnectShared.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsDisconnectShared.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.disconnectShared/post(adminConversationsDisconnectShared)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsDisconnectShared.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsDisconnectShared.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsEkmListOriginalConnectedChannelInfo {
    public static let id: Swift.String = "adminConversationsEkmListOriginalConnectedChannelInfo"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// A comma-separated list of channels to filter to.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/json/channel_ids`.
                public var channelIds: Swift.String?
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// A comma-separated list of the workspaces to which the channels you would like returned belong.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/json/team_ids`.
                public var teamIds: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelIds: A comma-separated list of channels to filter to.
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///   - teamIds: A comma-separated list of the workspaces to which the channels you would like returned belong.
                public init(
                    channelIds: Swift.String? = nil,
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    teamIds: Swift.String? = nil
                ) {
                    self.channelIds = channelIds
                    self.cursor = cursor
                    self.limit = limit
                    self.teamIds = teamIds
                }
                public enum CodingKeys: String, CodingKey {
                    case channelIds = "channel_ids"
                    case cursor
                    case limit
                    case teamIds = "team_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Headers = .init(),
            body: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsEkmListOriginalConnectedChannelInfoResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsEkmListOriginalConnectedChannelInfoResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.ekm.listOriginalConnectedChannelInfo/post(adminConversationsEkmListOriginalConnectedChannelInfo)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsGetConversationPrefs {
    public static let id: Swift.String = "adminConversationsGetConversationPrefs"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetConversationPrefs.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetConversationPrefs.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsGetConversationPrefs.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to get preferences for.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to get preferences for.
                public init(channelId: Swift.String) {
                    self.channelId = channelId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsGetConversationPrefs.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsGetConversationPrefs.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsGetConversationPrefs.Input.Headers = .init(),
            body: Operations.AdminConversationsGetConversationPrefs.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsGetConversationPrefsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsGetConversationPrefsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsGetConversationPrefs.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsGetConversationPrefs.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.getConversationPrefs/post(adminConversationsGetConversationPrefs)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsGetConversationPrefs.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsGetConversationPrefs.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsGetCustomRetention {
    public static let id: Swift.String = "adminConversationsGetCustomRetention"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetCustomRetention.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetCustomRetention.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsGetCustomRetention.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The conversation to get the retention policy for.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The conversation to get the retention policy for.
                public init(channelId: Swift.String) {
                    self.channelId = channelId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsGetCustomRetention.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsGetCustomRetention.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsGetCustomRetention.Input.Headers = .init(),
            body: Operations.AdminConversationsGetCustomRetention.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsGetCustomRetentionResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsGetCustomRetentionResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsGetCustomRetention.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsGetCustomRetention.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.getCustomRetention/post(adminConversationsGetCustomRetention)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsGetCustomRetention.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsGetCustomRetention.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsGetTeams {
    public static let id: Swift.String = "adminConversationsGetTeams"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetTeams.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetTeams.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsGetTeams.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to determine connected workspaces within the organization for.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to determine connected workspaces within the organization for.
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                public init(
                    channelId: Swift.String,
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.channelId = channelId
                    self.cursor = cursor
                    self.limit = limit
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case cursor
                    case limit
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsGetTeams.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsGetTeams.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsGetTeams.Input.Headers = .init(),
            body: Operations.AdminConversationsGetTeams.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsGetTeamsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsGetTeamsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsGetTeams.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsGetTeams.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.getTeams/post(adminConversationsGetTeams)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsGetTeams.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsGetTeams.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsInvite {
    public static let id: Swift.String = "adminConversationsInvite"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsInvite.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsInvite.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsInvite.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel that the users will be invited to.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// The users to invite.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/requestBody/json/user_ids`.
                public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel that the users will be invited to.
                ///   - userIds: The users to invite.
                public init(
                    channelId: Swift.String,
                    userIds: OpenAPIRuntime.OpenAPIArrayContainer
                ) {
                    self.channelId = channelId
                    self.userIds = userIds
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case userIds = "user_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsInvite.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsInvite.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsInvite.Input.Headers = .init(),
            body: Operations.AdminConversationsInvite.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsInviteResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsInviteResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsInvite.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsInvite.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.invite/post(adminConversationsInvite)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsInvite.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsInvite.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsLookup {
    public static let id: Swift.String = "adminConversationsLookup"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsLookup.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsLookup.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsLookup.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Filter by public channels where the most recent message was sent before last_message_activity.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json/last_message_activity_before`.
                public var lastMessageActivityBefore: Swift.Int
                /// Array of team IDs to filter by.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json/team_ids`.
                public var teamIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Set cursor to next_cursor returned in the previous call, to fetch the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// Maximum number of results.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// Filter by public channels with member count equal to or less than the specified number.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json/max_member_count`.
                public var maxMemberCount: Swift.Int?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - lastMessageActivityBefore: Filter by public channels where the most recent message was sent before last_message_activity.
                ///   - teamIds: Array of team IDs to filter by.
                ///   - cursor: Set cursor to next_cursor returned in the previous call, to fetch the next page.
                ///   - limit: Maximum number of results.
                ///   - maxMemberCount: Filter by public channels with member count equal to or less than the specified number.
                public init(
                    lastMessageActivityBefore: Swift.Int,
                    teamIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    maxMemberCount: Swift.Int? = nil
                ) {
                    self.lastMessageActivityBefore = lastMessageActivityBefore
                    self.teamIds = teamIds
                    self.cursor = cursor
                    self.limit = limit
                    self.maxMemberCount = maxMemberCount
                }
                public enum CodingKeys: String, CodingKey {
                    case lastMessageActivityBefore = "last_message_activity_before"
                    case teamIds = "team_ids"
                    case cursor
                    case limit
                    case maxMemberCount = "max_member_count"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsLookup.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsLookup.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsLookup.Input.Headers = .init(),
            body: Operations.AdminConversationsLookup.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsLookupResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsLookupResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsLookup.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsLookup.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.lookup/post(adminConversationsLookup)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsLookup.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsLookup.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsRemoveCustomRetention {
    public static let id: Swift.String = "adminConversationsRemoveCustomRetention"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRemoveCustomRetention.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRemoveCustomRetention.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsRemoveCustomRetention.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The conversation to set the retention policy for.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The conversation to set the retention policy for.
                public init(channelId: Swift.String) {
                    self.channelId = channelId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsRemoveCustomRetention.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsRemoveCustomRetention.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsRemoveCustomRetention.Input.Headers = .init(),
            body: Operations.AdminConversationsRemoveCustomRetention.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsRemoveCustomRetentionResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsRemoveCustomRetentionResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsRemoveCustomRetention.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsRemoveCustomRetention.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.removeCustomRetention/post(adminConversationsRemoveCustomRetention)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsRemoveCustomRetention.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsRemoveCustomRetention.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsRename {
    public static let id: Swift.String = "adminConversationsRename"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRename.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRename.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsRename.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to rename.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/requestBody/json/name`.
                public var name: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to rename.
                ///   - name: .
                public init(
                    channelId: Swift.String,
                    name: Swift.String
                ) {
                    self.channelId = channelId
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case name
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsRename.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsRename.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsRename.Input.Headers = .init(),
            body: Operations.AdminConversationsRename.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsRenameResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsRenameResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsRename.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsRename.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.rename/post(adminConversationsRename)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsRename.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsRename.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsRestrictAccessAddGroup {
    public static let id: Swift.String = "adminConversationsRestrictAccessAddGroup"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessAddGroup.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessAddGroup.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsRestrictAccessAddGroup.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to link this group to.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// The IDP Group ID to be an allowlist for the private channel.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody/json/group_id`.
                public var groupId: Swift.String
                /// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to link this group to.
                ///   - groupId: The IDP Group ID to be an allowlist for the private channel.
                ///   - teamId: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                public init(
                    channelId: Swift.String,
                    groupId: Swift.String,
                    teamId: Swift.String? = nil
                ) {
                    self.channelId = channelId
                    self.groupId = groupId
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case groupId = "group_id"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsRestrictAccessAddGroup.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsRestrictAccessAddGroup.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsRestrictAccessAddGroup.Input.Headers = .init(),
            body: Operations.AdminConversationsRestrictAccessAddGroup.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsRestrictAccessAddGroupResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsRestrictAccessAddGroupResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsRestrictAccessAddGroup.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsRestrictAccessAddGroup.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.addGroup/post(adminConversationsRestrictAccessAddGroup)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsRestrictAccessAddGroup.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsRestrictAccessAddGroup.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsRestrictAccessListGroups {
    public static let id: Swift.String = "adminConversationsRestrictAccessListGroups"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessListGroups.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessListGroups.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsRestrictAccessListGroups.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: .
                ///   - teamId: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                public init(
                    channelId: Swift.String,
                    teamId: Swift.String? = nil
                ) {
                    self.channelId = channelId
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsRestrictAccessListGroups.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsRestrictAccessListGroups.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsRestrictAccessListGroups.Input.Headers = .init(),
            body: Operations.AdminConversationsRestrictAccessListGroups.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsRestrictAccessListGroupsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsRestrictAccessListGroupsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsRestrictAccessListGroups.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsRestrictAccessListGroups.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.listGroups/post(adminConversationsRestrictAccessListGroups)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsRestrictAccessListGroups.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsRestrictAccessListGroups.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsRestrictAccessRemoveGroup {
    public static let id: Swift.String = "adminConversationsRestrictAccessRemoveGroup"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessRemoveGroup.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessRemoveGroup.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to remove the linked group from.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// The IDP Group ID to remove from the private channel.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody/json/group_id`.
                public var groupId: Swift.String
                /// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to remove the linked group from.
                ///   - groupId: The IDP Group ID to remove from the private channel.
                ///   - teamId: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                public init(
                    channelId: Swift.String,
                    groupId: Swift.String,
                    teamId: Swift.String
                ) {
                    self.channelId = channelId
                    self.groupId = groupId
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case groupId = "group_id"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Headers = .init(),
            body: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsRestrictAccessRemoveGroupResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsRestrictAccessRemoveGroupResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsRestrictAccessRemoveGroup.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsRestrictAccessRemoveGroup.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.removeGroup/post(adminConversationsRestrictAccessRemoveGroup)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsRestrictAccessRemoveGroup.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsRestrictAccessRemoveGroup.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsSearch {
    public static let id: Swift.String = "adminConversationsSearch"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.search/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSearch.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSearch.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsSearch.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Array of encoded team IDs, signifying the external orgs to search through.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/connected_team_ids`.
                public var connectedTeamIds: OpenAPIRuntime.OpenAPIArrayContainer?
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// Name of the the channel to query by.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/query`.
                public var query: Swift.String?
                /// The type of channel to include or exclude in the search. For example private will search private channels, while private_exclude will exclude them. For a full list of types, check the Types section.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/search_channel_types`.
                public var searchChannelTypes: OpenAPIRuntime.OpenAPIArrayContainer?
                /// Possible values are relevant (search ranking based on what we think is closest), name (alphabetical), member_count (number of users in the channel), and created (date channel was created). You can optionally pair this with the sort_dir arg to change how it is sorted.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/sort`.
                public var sort: Swift.String?
                /// Sort direction. Possible values are asc for ascending order like (1, 2, 3) or (a, b, c), and desc for descending order like (3, 2, 1) or (c, b, a).
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/sort_dir`.
                public var sortDir: Swift.String?
                /// Comma separated string of team IDs, signifying the internal workspaces to search through.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/team_ids`.
                public var teamIds: OpenAPIRuntime.OpenAPIArrayContainer?
                /// Only return the total_count of channels. Omits channel data and allows access for admins without channel manager permissions.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/total_count_only`.
                public var totalCountOnly: Swift.Bool?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - connectedTeamIds: Array of encoded team IDs, signifying the external orgs to search through.
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - limit: Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
                ///   - query: Name of the the channel to query by.
                ///   - searchChannelTypes: The type of channel to include or exclude in the search. For example private will search private channels, while private_exclude will exclude them. For a full list of types, check the Types section.
                ///   - sort: Possible values are relevant (search ranking based on what we think is closest), name (alphabetical), member_count (number of users in the channel), and created (date channel was created). You can optionally pair this with the sort_dir arg to change how it is sorted.
                ///   - sortDir: Sort direction. Possible values are asc for ascending order like (1, 2, 3) or (a, b, c), and desc for descending order like (3, 2, 1) or (c, b, a).
                ///   - teamIds: Comma separated string of team IDs, signifying the internal workspaces to search through.
                ///   - totalCountOnly: Only return the total_count of channels. Omits channel data and allows access for admins without channel manager permissions.
                public init(
                    connectedTeamIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    query: Swift.String? = nil,
                    searchChannelTypes: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                    sort: Swift.String? = nil,
                    sortDir: Swift.String? = nil,
                    teamIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                    totalCountOnly: Swift.Bool? = nil
                ) {
                    self.connectedTeamIds = connectedTeamIds
                    self.cursor = cursor
                    self.limit = limit
                    self.query = query
                    self.searchChannelTypes = searchChannelTypes
                    self.sort = sort
                    self.sortDir = sortDir
                    self.teamIds = teamIds
                    self.totalCountOnly = totalCountOnly
                }
                public enum CodingKeys: String, CodingKey {
                    case connectedTeamIds = "connected_team_ids"
                    case cursor
                    case limit
                    case query
                    case searchChannelTypes = "search_channel_types"
                    case sort
                    case sortDir = "sort_dir"
                    case teamIds = "team_ids"
                    case totalCountOnly = "total_count_only"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsSearch.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsSearch.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsSearch.Input.Headers = .init(),
            body: Operations.AdminConversationsSearch.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.search/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsSearchResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsSearchResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsSearch.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsSearch.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.search/post(adminConversationsSearch)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsSearch.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsSearch.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsSetConversationPrefs {
    public static let id: Swift.String = "adminConversationsSetConversationPrefs"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetConversationPrefs.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetConversationPrefs.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsSetConversationPrefs.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to set the prefs for.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// The prefs for this channel in a stringified JSON format.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/requestBody/json/prefs`.
                public var prefs: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to set the prefs for.
                ///   - prefs: The prefs for this channel in a stringified JSON format.
                public init(
                    channelId: Swift.String,
                    prefs: Swift.String
                ) {
                    self.channelId = channelId
                    self.prefs = prefs
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case prefs
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsSetConversationPrefs.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsSetConversationPrefs.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsSetConversationPrefs.Input.Headers = .init(),
            body: Operations.AdminConversationsSetConversationPrefs.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsSetConversationPrefsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsSetConversationPrefsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsSetConversationPrefs.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsSetConversationPrefs.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.setConversationPrefs/post(adminConversationsSetConversationPrefs)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsSetConversationPrefs.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsSetConversationPrefs.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsSetCustomRetention {
    public static let id: Swift.String = "adminConversationsSetCustomRetention"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetCustomRetention.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetCustomRetention.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsSetCustomRetention.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The conversation to set the retention policy for.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// The message retention duration in days to set for this conversation.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/requestBody/json/duration_days`.
                public var durationDays: Swift.Int
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The conversation to set the retention policy for.
                ///   - durationDays: The message retention duration in days to set for this conversation.
                public init(
                    channelId: Swift.String,
                    durationDays: Swift.Int
                ) {
                    self.channelId = channelId
                    self.durationDays = durationDays
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case durationDays = "duration_days"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsSetCustomRetention.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsSetCustomRetention.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsSetCustomRetention.Input.Headers = .init(),
            body: Operations.AdminConversationsSetCustomRetention.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsSetCustomRetentionResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsSetCustomRetentionResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsSetCustomRetention.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsSetCustomRetention.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.setCustomRetention/post(adminConversationsSetCustomRetention)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsSetCustomRetention.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsSetCustomRetention.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsSetTeams {
    public static let id: Swift.String = "adminConversationsSetTeams"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetTeams.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetTeams.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsSetTeams.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The encoded channel_id to add or remove to workspaces.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// True if channel has to be converted to an org channel.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/json/org_channel`.
                public var orgChannel: Swift.Bool?
                /// A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/json/target_team_ids`.
                public var targetTeamIds: OpenAPIRuntime.OpenAPIArrayContainer?
                /// The workspace to which the channel belongs if the channel is a local workspace channel. Omit this argument if the channel is a cross-workspace or org-wide shared channel.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The encoded channel_id to add or remove to workspaces.
                ///   - orgChannel: True if channel has to be converted to an org channel.
                ///   - targetTeamIds: A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
                ///   - teamId: The workspace to which the channel belongs if the channel is a local workspace channel. Omit this argument if the channel is a cross-workspace or org-wide shared channel.
                public init(
                    channelId: Swift.String,
                    orgChannel: Swift.Bool? = nil,
                    targetTeamIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.channelId = channelId
                    self.orgChannel = orgChannel
                    self.targetTeamIds = targetTeamIds
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                    case orgChannel = "org_channel"
                    case targetTeamIds = "target_team_ids"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsSetTeams.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsSetTeams.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsSetTeams.Input.Headers = .init(),
            body: Operations.AdminConversationsSetTeams.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsSetTeamsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsSetTeamsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsSetTeams.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsSetTeams.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.setTeams/post(adminConversationsSetTeams)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsSetTeams.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsSetTeams.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminConversationsUnarchive {
    public static let id: Swift.String = "adminConversationsUnarchive"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsUnarchive.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsUnarchive.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminConversationsUnarchive.Input.Headers
        /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The channel to unarchive.
                ///
                /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/requestBody/json/channel_id`.
                public var channelId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelId: The channel to unarchive.
                public init(channelId: Swift.String) {
                    self.channelId = channelId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelId = "channel_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/requestBody/content/application\/json`.
            case json(Operations.AdminConversationsUnarchive.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminConversationsUnarchive.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminConversationsUnarchive.Input.Headers = .init(),
            body: Operations.AdminConversationsUnarchive.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminConversationsUnarchiveResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminConversationsUnarchiveResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminConversationsUnarchive.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminConversationsUnarchive.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.conversations.unarchive/post(adminConversationsUnarchive)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminConversationsUnarchive.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminConversationsUnarchive.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminEmojiAdd {
    public static let id: Swift.String = "adminEmojiAdd"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.emoji.add/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiAdd.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiAdd.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminEmojiAdd.Input.Headers
        /// - Remark: Generated from `#/paths/admin.emoji.add/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.add/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The name of the emoji to be added (using lower-case letters only). Colons (:myemoji:) around the value are not required, although they may be included.
                ///
                /// - Remark: Generated from `#/paths/admin.emoji.add/POST/requestBody/json/name`.
                public var name: Swift.String
                /// The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
                ///
                /// - Remark: Generated from `#/paths/admin.emoji.add/POST/requestBody/json/url`.
                public var url: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the emoji to be added (using lower-case letters only). Colons (:myemoji:) around the value are not required, although they may be included.
                ///   - url: The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
                public init(
                    name: Swift.String,
                    url: Swift.String
                ) {
                    self.name = name
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case url
                }
            }
            /// - Remark: Generated from `#/paths/admin.emoji.add/POST/requestBody/content/application\/json`.
            case json(Operations.AdminEmojiAdd.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminEmojiAdd.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminEmojiAdd.Input.Headers = .init(),
            body: Operations.AdminEmojiAdd.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.add/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.add/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminEmojiAddResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminEmojiAddResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminEmojiAdd.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminEmojiAdd.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.emoji.add/post(adminEmojiAdd)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminEmojiAdd.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminEmojiAdd.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminEmojiAddAlias {
    public static let id: Swift.String = "adminEmojiAddAlias"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiAddAlias.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiAddAlias.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminEmojiAddAlias.Input.Headers
        /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Name of the emoji for which the alias is being made. Any wrapping whitespace or colons will be automatically trimmed.
                ///
                /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/requestBody/json/alias_for`.
                public var aliasFor: Swift.String
                /// The new alias for the specified emoji. Any wrapping whitespace or colons will be automatically trimmed.
                ///
                /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/requestBody/json/name`.
                public var name: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - aliasFor: Name of the emoji for which the alias is being made. Any wrapping whitespace or colons will be automatically trimmed.
                ///   - name: The new alias for the specified emoji. Any wrapping whitespace or colons will be automatically trimmed.
                public init(
                    aliasFor: Swift.String,
                    name: Swift.String
                ) {
                    self.aliasFor = aliasFor
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case aliasFor = "alias_for"
                    case name
                }
            }
            /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/requestBody/content/application\/json`.
            case json(Operations.AdminEmojiAddAlias.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminEmojiAddAlias.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminEmojiAddAlias.Input.Headers = .init(),
            body: Operations.AdminEmojiAddAlias.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminEmojiAddAliasResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminEmojiAddAliasResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminEmojiAddAlias.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminEmojiAddAlias.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.emoji.addAlias/post(adminEmojiAddAlias)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminEmojiAddAlias.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminEmojiAddAlias.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminEmojiList {
    public static let id: Swift.String = "adminEmojiList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.emoji.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminEmojiList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.emoji.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.emoji.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.emoji.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                public init(
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.cursor = cursor
                    self.limit = limit
                }
                public enum CodingKeys: String, CodingKey {
                    case cursor
                    case limit
                }
            }
            /// - Remark: Generated from `#/paths/admin.emoji.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminEmojiList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminEmojiList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminEmojiList.Input.Headers = .init(),
            body: Operations.AdminEmojiList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminEmojiListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminEmojiListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminEmojiList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminEmojiList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.emoji.list/post(adminEmojiList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminEmojiList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminEmojiList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminEmojiRemove {
    public static let id: Swift.String = "adminEmojiRemove"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiRemove.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiRemove.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminEmojiRemove.Input.Headers
        /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The name of the emoji to be removed. Colons (:myemoji:) around the value are not required, although they may be included.
                ///
                /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/requestBody/json/name`.
                public var name: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the emoji to be removed. Colons (:myemoji:) around the value are not required, although they may be included.
                public init(name: Swift.String) {
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                }
            }
            /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/requestBody/content/application\/json`.
            case json(Operations.AdminEmojiRemove.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminEmojiRemove.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminEmojiRemove.Input.Headers = .init(),
            body: Operations.AdminEmojiRemove.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminEmojiRemoveResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminEmojiRemoveResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminEmojiRemove.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminEmojiRemove.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.emoji.remove/post(adminEmojiRemove)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminEmojiRemove.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminEmojiRemove.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminEmojiRename {
    public static let id: Swift.String = "adminEmojiRename"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiRename.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiRename.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminEmojiRename.Input.Headers
        /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The name of the emoji to be renamed. Colons (:myemoji:) around the value are not required, although they may be included.
                ///
                /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/requestBody/json/name`.
                public var name: Swift.String
                /// The new name of the emoji.
                ///
                /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/requestBody/json/new_name`.
                public var newName: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the emoji to be renamed. Colons (:myemoji:) around the value are not required, although they may be included.
                ///   - newName: The new name of the emoji.
                public init(
                    name: Swift.String,
                    newName: Swift.String
                ) {
                    self.name = name
                    self.newName = newName
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case newName = "new_name"
                }
            }
            /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/requestBody/content/application\/json`.
            case json(Operations.AdminEmojiRename.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminEmojiRename.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminEmojiRename.Input.Headers = .init(),
            body: Operations.AdminEmojiRename.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminEmojiRenameResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminEmojiRenameResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminEmojiRename.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminEmojiRename.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.emoji.rename/post(adminEmojiRename)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminEmojiRename.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminEmojiRename.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminFunctionsList {
    public static let id: Swift.String = "adminFunctionsList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.functions.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminFunctionsList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Comma-separated array of app IDs to get functions for; max 50.
                ///
                /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/json/app_ids`.
                public var appIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The number of results that will be returned by the API on each invocation. Must be between 1 and 1000, both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// The team context to retrieve functions from.
                ///
                /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - appIds: Comma-separated array of app IDs to get functions for; max 50.
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - limit: The number of results that will be returned by the API on each invocation. Must be between 1 and 1000, both inclusive.
                ///   - teamId: The team context to retrieve functions from.
                public init(
                    appIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.appIds = appIds
                    self.cursor = cursor
                    self.limit = limit
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case appIds = "app_ids"
                    case cursor
                    case limit
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminFunctionsList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminFunctionsList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminFunctionsList.Input.Headers = .init(),
            body: Operations.AdminFunctionsList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.functions.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.functions.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminFunctionsListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminFunctionsListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminFunctionsList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminFunctionsList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.functions.list/post(adminFunctionsList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminFunctionsList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminFunctionsList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminFunctionsPermissionsLookup {
    public static let id: Swift.String = "adminFunctionsPermissionsLookup"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsPermissionsLookup.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsPermissionsLookup.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminFunctionsPermissionsLookup.Input.Headers
        /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// An array of function IDs to get permissions for.
                ///
                /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/requestBody/json/function_ids`.
                public var functionIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - functionIds: An array of function IDs to get permissions for.
                public init(functionIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                    self.functionIds = functionIds
                }
                public enum CodingKeys: String, CodingKey {
                    case functionIds = "function_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/requestBody/content/application\/json`.
            case json(Operations.AdminFunctionsPermissionsLookup.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminFunctionsPermissionsLookup.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminFunctionsPermissionsLookup.Input.Headers = .init(),
            body: Operations.AdminFunctionsPermissionsLookup.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminFunctionsPermissionsLookupResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminFunctionsPermissionsLookupResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminFunctionsPermissionsLookup.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminFunctionsPermissionsLookup.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.functions.permissions.lookup/post(adminFunctionsPermissionsLookup)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminFunctionsPermissionsLookup.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminFunctionsPermissionsLookup.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminFunctionsPermissionsSet {
    public static let id: Swift.String = "adminFunctionsPermissionsSet"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsPermissionsSet.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsPermissionsSet.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminFunctionsPermissionsSet.Input.Headers
        /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The function ID to set permissions for.
                ///
                /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody/json/function_id`.
                public var functionId: Swift.String
                /// The function visibility.
                ///
                /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody/json/visibility`.
                public var visibility: Swift.String
                /// List of user IDs to allow for named_entities visibility.
                ///
                /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody/json/user_ids`.
                public var userIds: OpenAPIRuntime.OpenAPIArrayContainer?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - functionId: The function ID to set permissions for.
                ///   - visibility: The function visibility.
                ///   - userIds: List of user IDs to allow for named_entities visibility.
                public init(
                    functionId: Swift.String,
                    visibility: Swift.String,
                    userIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                ) {
                    self.functionId = functionId
                    self.visibility = visibility
                    self.userIds = userIds
                }
                public enum CodingKeys: String, CodingKey {
                    case functionId = "function_id"
                    case visibility
                    case userIds = "user_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody/content/application\/json`.
            case json(Operations.AdminFunctionsPermissionsSet.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminFunctionsPermissionsSet.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminFunctionsPermissionsSet.Input.Headers = .init(),
            body: Operations.AdminFunctionsPermissionsSet.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminFunctionsPermissionsSetResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminFunctionsPermissionsSetResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminFunctionsPermissionsSet.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminFunctionsPermissionsSet.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.functions.permissions.set/post(adminFunctionsPermissionsSet)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminFunctionsPermissionsSet.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminFunctionsPermissionsSet.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminInviteRequestsApprove {
    public static let id: Swift.String = "adminInviteRequestsApprove"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsApprove.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsApprove.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminInviteRequestsApprove.Input.Headers
        /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// ID of the request to invite.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/requestBody/json/invite_request_id`.
                public var inviteRequestId: Swift.String
                /// ID for the workspace where the invite request was made.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - inviteRequestId: ID of the request to invite.
                ///   - teamId: ID for the workspace where the invite request was made.
                public init(
                    inviteRequestId: Swift.String,
                    teamId: Swift.String? = nil
                ) {
                    self.inviteRequestId = inviteRequestId
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case inviteRequestId = "invite_request_id"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/requestBody/content/application\/json`.
            case json(Operations.AdminInviteRequestsApprove.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminInviteRequestsApprove.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminInviteRequestsApprove.Input.Headers = .init(),
            body: Operations.AdminInviteRequestsApprove.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminInviteRequestsApproveResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminInviteRequestsApproveResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminInviteRequestsApprove.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminInviteRequestsApprove.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.inviteRequests.approve/post(adminInviteRequestsApprove)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminInviteRequestsApprove.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminInviteRequestsApprove.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminInviteRequestsApprovedList {
    public static let id: Swift.String = "adminInviteRequestsApprovedList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsApprovedList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsApprovedList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminInviteRequestsApprovedList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Value of the next_cursor field sent as part of the previous API response.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// ID for the workspace where the invite requests were made.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - cursor: Value of the next_cursor field sent as part of the previous API response.
                ///   - limit: The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive.
                ///   - teamId: ID for the workspace where the invite requests were made.
                public init(
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.cursor = cursor
                    self.limit = limit
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case cursor
                    case limit
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminInviteRequestsApprovedList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminInviteRequestsApprovedList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminInviteRequestsApprovedList.Input.Headers = .init(),
            body: Operations.AdminInviteRequestsApprovedList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminInviteRequestsApprovedListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminInviteRequestsApprovedListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminInviteRequestsApprovedList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminInviteRequestsApprovedList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.inviteRequests.approved.list/post(adminInviteRequestsApprovedList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminInviteRequestsApprovedList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminInviteRequestsApprovedList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminInviteRequestsDeniedList {
    public static let id: Swift.String = "adminInviteRequestsDeniedList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsDeniedList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsDeniedList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminInviteRequestsDeniedList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Value of the next_cursor field sent as part of the previous api response.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// ID for the workspace where the invite requests were made.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - cursor: Value of the next_cursor field sent as part of the previous api response.
                ///   - limit: The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive.
                ///   - teamId: ID for the workspace where the invite requests were made.
                public init(
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.cursor = cursor
                    self.limit = limit
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case cursor
                    case limit
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminInviteRequestsDeniedList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminInviteRequestsDeniedList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminInviteRequestsDeniedList.Input.Headers = .init(),
            body: Operations.AdminInviteRequestsDeniedList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminInviteRequestsDeniedListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminInviteRequestsDeniedListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminInviteRequestsDeniedList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminInviteRequestsDeniedList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.inviteRequests.denied.list/post(adminInviteRequestsDeniedList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminInviteRequestsDeniedList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminInviteRequestsDeniedList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminInviteRequestsDeny {
    public static let id: Swift.String = "adminInviteRequestsDeny"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsDeny.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsDeny.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminInviteRequestsDeny.Input.Headers
        /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// ID of the request to invite.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/requestBody/json/invite_request_id`.
                public var inviteRequestId: Swift.String
                /// ID for the workspace where the invite request was made.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - inviteRequestId: ID of the request to invite.
                ///   - teamId: ID for the workspace where the invite request was made.
                public init(
                    inviteRequestId: Swift.String,
                    teamId: Swift.String? = nil
                ) {
                    self.inviteRequestId = inviteRequestId
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case inviteRequestId = "invite_request_id"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/requestBody/content/application\/json`.
            case json(Operations.AdminInviteRequestsDeny.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminInviteRequestsDeny.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminInviteRequestsDeny.Input.Headers = .init(),
            body: Operations.AdminInviteRequestsDeny.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminInviteRequestsDenyResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminInviteRequestsDenyResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminInviteRequestsDeny.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminInviteRequestsDeny.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.inviteRequests.deny/post(adminInviteRequestsDeny)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminInviteRequestsDeny.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminInviteRequestsDeny.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminInviteRequestsList {
    public static let id: Swift.String = "adminInviteRequestsList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminInviteRequestsList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Value of the next_cursor field sent as part of the previous API response.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// ID for the workspace where the invite requests were made.
                ///
                /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - cursor: Value of the next_cursor field sent as part of the previous API response.
                ///   - limit: The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive.
                ///   - teamId: ID for the workspace where the invite requests were made.
                public init(
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.cursor = cursor
                    self.limit = limit
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case cursor
                    case limit
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminInviteRequestsList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminInviteRequestsList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminInviteRequestsList.Input.Headers = .init(),
            body: Operations.AdminInviteRequestsList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminInviteRequestsListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminInviteRequestsListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminInviteRequestsList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminInviteRequestsList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.inviteRequests.list/post(adminInviteRequestsList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminInviteRequestsList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminInviteRequestsList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminRolesAddAssignments {
    public static let id: Swift.String = "adminRolesAddAssignments"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesAddAssignments.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesAddAssignments.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminRolesAddAssignments.Input.Headers
        /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// List of the entity IDs for which roles will be assigned. These can be Org IDs, Team IDs or Channel IDs.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody/json/entity_ids`.
                public var entityIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// ID of the role to which users will be assigned.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody/json/role_id`.
                public var roleId: Swift.String
                /// List of IDs from the users to be added to the given role.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody/json/user_ids`.
                public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - entityIds: List of the entity IDs for which roles will be assigned. These can be Org IDs, Team IDs or Channel IDs.
                ///   - roleId: ID of the role to which users will be assigned.
                ///   - userIds: List of IDs from the users to be added to the given role.
                public init(
                    entityIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    roleId: Swift.String,
                    userIds: OpenAPIRuntime.OpenAPIArrayContainer
                ) {
                    self.entityIds = entityIds
                    self.roleId = roleId
                    self.userIds = userIds
                }
                public enum CodingKeys: String, CodingKey {
                    case entityIds = "entity_ids"
                    case roleId = "role_id"
                    case userIds = "user_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody/content/application\/json`.
            case json(Operations.AdminRolesAddAssignments.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminRolesAddAssignments.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminRolesAddAssignments.Input.Headers = .init(),
            body: Operations.AdminRolesAddAssignments.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminRolesAddAssignmentsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminRolesAddAssignmentsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminRolesAddAssignments.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminRolesAddAssignments.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.roles.addAssignments/post(adminRolesAddAssignments)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminRolesAddAssignments.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminRolesAddAssignments.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminRolesListAssignments {
    public static let id: Swift.String = "adminRolesListAssignments"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesListAssignments.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesListAssignments.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminRolesListAssignments.Input.Headers
        /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The entities for which the roles apply.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json/entity_ids`.
                public var entityIds: OpenAPIRuntime.OpenAPIArrayContainer?
                /// The maximum number of items to return. Must be between 1 - 200 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// collection of role ids to scope results by.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json/role_ids`.
                public var roleIds: OpenAPIRuntime.OpenAPIArrayContainer?
                /// Sort direction. Default is descending on date_create, can be either ASC or DESC.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json/sort_dir`.
                public var sortDir: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - entityIds: The entities for which the roles apply.
                ///   - limit: The maximum number of items to return. Must be between 1 - 200 both inclusive.
                ///   - roleIds: collection of role ids to scope results by.
                ///   - sortDir: Sort direction. Default is descending on date_create, can be either ASC or DESC.
                public init(
                    cursor: Swift.String? = nil,
                    entityIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                    limit: Swift.Int? = nil,
                    roleIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                    sortDir: Swift.String? = nil
                ) {
                    self.cursor = cursor
                    self.entityIds = entityIds
                    self.limit = limit
                    self.roleIds = roleIds
                    self.sortDir = sortDir
                }
                public enum CodingKeys: String, CodingKey {
                    case cursor
                    case entityIds = "entity_ids"
                    case limit
                    case roleIds = "role_ids"
                    case sortDir = "sort_dir"
                }
            }
            /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/content/application\/json`.
            case json(Operations.AdminRolesListAssignments.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminRolesListAssignments.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminRolesListAssignments.Input.Headers = .init(),
            body: Operations.AdminRolesListAssignments.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminRolesListAssignmentsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminRolesListAssignmentsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminRolesListAssignments.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminRolesListAssignments.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.roles.listAssignments/post(adminRolesListAssignments)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminRolesListAssignments.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminRolesListAssignments.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminRolesRemoveAssignments {
    public static let id: Swift.String = "adminRolesRemoveAssignments"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesRemoveAssignments.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesRemoveAssignments.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminRolesRemoveAssignments.Input.Headers
        /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// List of the entity IDs for which roles will be revoked. These can be Org IDs, Team IDs or Channel IDs.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody/json/entity_ids`.
                public var entityIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// ID of the role to which users will be assigned.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody/json/role_id`.
                public var roleId: Swift.String
                /// List of IDs of the users whose roles will be revoked.
                ///
                /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody/json/user_ids`.
                public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - entityIds: List of the entity IDs for which roles will be revoked. These can be Org IDs, Team IDs or Channel IDs.
                ///   - roleId: ID of the role to which users will be assigned.
                ///   - userIds: List of IDs of the users whose roles will be revoked.
                public init(
                    entityIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    roleId: Swift.String,
                    userIds: OpenAPIRuntime.OpenAPIArrayContainer
                ) {
                    self.entityIds = entityIds
                    self.roleId = roleId
                    self.userIds = userIds
                }
                public enum CodingKeys: String, CodingKey {
                    case entityIds = "entity_ids"
                    case roleId = "role_id"
                    case userIds = "user_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody/content/application\/json`.
            case json(Operations.AdminRolesRemoveAssignments.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminRolesRemoveAssignments.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminRolesRemoveAssignments.Input.Headers = .init(),
            body: Operations.AdminRolesRemoveAssignments.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminRolesRemoveAssignmentsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminRolesRemoveAssignmentsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminRolesRemoveAssignments.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminRolesRemoveAssignments.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.roles.removeAssignments/post(adminRolesRemoveAssignments)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminRolesRemoveAssignments.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminRolesRemoveAssignments.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminTeamsAdminsList {
    public static let id: Swift.String = "adminTeamsAdminsList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsAdminsList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsAdminsList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminTeamsAdminsList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The maximum number of items to return.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - teamId: .
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - limit: The maximum number of items to return.
                public init(
                    teamId: Swift.String,
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.teamId = teamId
                    self.cursor = cursor
                    self.limit = limit
                }
                public enum CodingKeys: String, CodingKey {
                    case teamId = "team_id"
                    case cursor
                    case limit
                }
            }
            /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminTeamsAdminsList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminTeamsAdminsList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminTeamsAdminsList.Input.Headers = .init(),
            body: Operations.AdminTeamsAdminsList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminTeamsAdminsListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminTeamsAdminsListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminTeamsAdminsList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminTeamsAdminsList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.teams.admins.list/post(adminTeamsAdminsList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminTeamsAdminsList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminTeamsAdminsList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminTeamsCreate {
    public static let id: Swift.String = "adminTeamsCreate"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.teams.create/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsCreate.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsCreate.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminTeamsCreate.Input.Headers
        /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Team domain (for example, slacksoftballteam). Domains are limited to 21 characters.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/json/team_domain`.
                public var teamDomain: Swift.String
                /// Team name (for example, Slack Softball Team).
                ///
                /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/json/team_name`.
                public var teamName: Swift.String
                /// Description for the team.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/json/team_description`.
                public var teamDescription: Swift.String?
                /// Who can join the team. A team's discoverability can be open, closed, invite_only, or unlisted.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/json/team_discoverability`.
                public var teamDiscoverability: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - teamDomain: Team domain (for example, slacksoftballteam). Domains are limited to 21 characters.
                ///   - teamName: Team name (for example, Slack Softball Team).
                ///   - teamDescription: Description for the team.
                ///   - teamDiscoverability: Who can join the team. A team's discoverability can be open, closed, invite_only, or unlisted.
                public init(
                    teamDomain: Swift.String,
                    teamName: Swift.String,
                    teamDescription: Swift.String? = nil,
                    teamDiscoverability: Swift.String? = nil
                ) {
                    self.teamDomain = teamDomain
                    self.teamName = teamName
                    self.teamDescription = teamDescription
                    self.teamDiscoverability = teamDiscoverability
                }
                public enum CodingKeys: String, CodingKey {
                    case teamDomain = "team_domain"
                    case teamName = "team_name"
                    case teamDescription = "team_description"
                    case teamDiscoverability = "team_discoverability"
                }
            }
            /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/content/application\/json`.
            case json(Operations.AdminTeamsCreate.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminTeamsCreate.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminTeamsCreate.Input.Headers = .init(),
            body: Operations.AdminTeamsCreate.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.create/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.create/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminTeamsCreateResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminTeamsCreateResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminTeamsCreate.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminTeamsCreate.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.teams.create/post(adminTeamsCreate)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminTeamsCreate.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminTeamsCreate.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminTeamsList {
    public static let id: Swift.String = "adminTeamsList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.teams.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminTeamsList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.teams.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The maximum number of items to return. Must be a positive integer no larger than 1000.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - limit: The maximum number of items to return. Must be a positive integer no larger than 1000.
                public init(
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.cursor = cursor
                    self.limit = limit
                }
                public enum CodingKeys: String, CodingKey {
                    case cursor
                    case limit
                }
            }
            /// - Remark: Generated from `#/paths/admin.teams.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminTeamsList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminTeamsList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminTeamsList.Input.Headers = .init(),
            body: Operations.AdminTeamsList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminTeamsListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminTeamsListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminTeamsList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminTeamsList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.teams.list/post(adminTeamsList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminTeamsList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminTeamsList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminTeamsOwnersList {
    public static let id: Swift.String = "adminTeamsOwnersList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsOwnersList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsOwnersList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminTeamsOwnersList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - teamId: .
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                public init(
                    teamId: Swift.String,
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.teamId = teamId
                    self.cursor = cursor
                    self.limit = limit
                }
                public enum CodingKeys: String, CodingKey {
                    case teamId = "team_id"
                    case cursor
                    case limit
                }
            }
            /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminTeamsOwnersList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminTeamsOwnersList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminTeamsOwnersList.Input.Headers = .init(),
            body: Operations.AdminTeamsOwnersList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminTeamsOwnersListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminTeamsOwnersListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminTeamsOwnersList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminTeamsOwnersList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.teams.owners.list/post(adminTeamsOwnersList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminTeamsOwnersList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminTeamsOwnersList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminTeamsSettingsInfo {
    public static let id: Swift.String = "adminTeamsSettingsInfo"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsInfo.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsInfo.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminTeamsSettingsInfo.Input.Headers
        /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// .
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - teamId: .
                public init(teamId: Swift.String) {
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/requestBody/content/application\/json`.
            case json(Operations.AdminTeamsSettingsInfo.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminTeamsSettingsInfo.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminTeamsSettingsInfo.Input.Headers = .init(),
            body: Operations.AdminTeamsSettingsInfo.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminTeamsSettingsInfoResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminTeamsSettingsInfoResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminTeamsSettingsInfo.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminTeamsSettingsInfo.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.teams.settings.info/post(adminTeamsSettingsInfo)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminTeamsSettingsInfo.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminTeamsSettingsInfo.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminTeamsSettingsSetDefaultChannels {
    public static let id: Swift.String = "adminTeamsSettingsSetDefaultChannels"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDefaultChannels.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDefaultChannels.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Headers
        /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// An array of channel IDs.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/requestBody/json/channel_ids`.
                public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// ID for the workspace to set the default channel for.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelIds: An array of channel IDs.
                ///   - teamId: ID for the workspace to set the default channel for.
                public init(
                    channelIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    teamId: Swift.String
                ) {
                    self.channelIds = channelIds
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case channelIds = "channel_ids"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/requestBody/content/application\/json`.
            case json(Operations.AdminTeamsSettingsSetDefaultChannels.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Headers = .init(),
            body: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminTeamsSettingsSetDefaultChannelsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminTeamsSettingsSetDefaultChannelsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminTeamsSettingsSetDefaultChannels.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminTeamsSettingsSetDefaultChannels.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.teams.settings.setDefaultChannels/post(adminTeamsSettingsSetDefaultChannels)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminTeamsSettingsSetDefaultChannels.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminTeamsSettingsSetDefaultChannels.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminTeamsSettingsSetDescription {
    public static let id: Swift.String = "adminTeamsSettingsSetDescription"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDescription.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDescription.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminTeamsSettingsSetDescription.Input.Headers
        /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The new description for the workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/requestBody/json/description`.
                public var description: Swift.String
                /// ID for the workspace to set the description for.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - description: The new description for the workspace.
                ///   - teamId: ID for the workspace to set the description for.
                public init(
                    description: Swift.String,
                    teamId: Swift.String
                ) {
                    self.description = description
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case description
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/requestBody/content/application\/json`.
            case json(Operations.AdminTeamsSettingsSetDescription.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminTeamsSettingsSetDescription.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminTeamsSettingsSetDescription.Input.Headers = .init(),
            body: Operations.AdminTeamsSettingsSetDescription.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminTeamsSettingsSetDescriptionResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminTeamsSettingsSetDescriptionResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminTeamsSettingsSetDescription.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminTeamsSettingsSetDescription.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.teams.settings.setDescription/post(adminTeamsSettingsSetDescription)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminTeamsSettingsSetDescription.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminTeamsSettingsSetDescription.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminTeamsSettingsSetDiscoverability {
    public static let id: Swift.String = "adminTeamsSettingsSetDiscoverability"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDiscoverability.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDiscoverability.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminTeamsSettingsSetDiscoverability.Input.Headers
        /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// This workspace's discovery setting. It must be set to one of open, invite_only, closed, or unlisted.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/requestBody/json/discoverability`.
                public var discoverability: Swift.String
                /// The ID of the workspace to set discoverability on.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - discoverability: This workspace's discovery setting. It must be set to one of open, invite_only, closed, or unlisted.
                ///   - teamId: The ID of the workspace to set discoverability on.
                public init(
                    discoverability: Swift.String,
                    teamId: Swift.String
                ) {
                    self.discoverability = discoverability
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case discoverability
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/requestBody/content/application\/json`.
            case json(Operations.AdminTeamsSettingsSetDiscoverability.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminTeamsSettingsSetDiscoverability.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminTeamsSettingsSetDiscoverability.Input.Headers = .init(),
            body: Operations.AdminTeamsSettingsSetDiscoverability.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminTeamsSettingsSetDiscoverabilityResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminTeamsSettingsSetDiscoverabilityResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminTeamsSettingsSetDiscoverability.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminTeamsSettingsSetDiscoverability.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.teams.settings.setDiscoverability/post(adminTeamsSettingsSetDiscoverability)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminTeamsSettingsSetDiscoverability.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminTeamsSettingsSetDiscoverability.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminTeamsSettingsSetIcon {
    public static let id: Swift.String = "adminTeamsSettingsSetIcon"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetIcon.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetIcon.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminTeamsSettingsSetIcon.Input.Headers
        /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Image URL for the icon.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/requestBody/json/image_url`.
                public var imageUrl: Swift.String
                /// ID for the workspace to set the icon for.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - imageUrl: Image URL for the icon.
                ///   - teamId: ID for the workspace to set the icon for.
                public init(
                    imageUrl: Swift.String,
                    teamId: Swift.String
                ) {
                    self.imageUrl = imageUrl
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case imageUrl = "image_url"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/requestBody/content/application\/json`.
            case json(Operations.AdminTeamsSettingsSetIcon.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminTeamsSettingsSetIcon.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminTeamsSettingsSetIcon.Input.Headers = .init(),
            body: Operations.AdminTeamsSettingsSetIcon.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminTeamsSettingsSetIconResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminTeamsSettingsSetIconResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminTeamsSettingsSetIcon.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminTeamsSettingsSetIcon.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.teams.settings.setIcon/post(adminTeamsSettingsSetIcon)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminTeamsSettingsSetIcon.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminTeamsSettingsSetIcon.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminTeamsSettingsSetName {
    public static let id: Swift.String = "adminTeamsSettingsSetName"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetName.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetName.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminTeamsSettingsSetName.Input.Headers
        /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The new name of the workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/requestBody/json/name`.
                public var name: Swift.String
                /// ID for the workspace to set the name for.
                ///
                /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - name: The new name of the workspace.
                ///   - teamId: ID for the workspace to set the name for.
                public init(
                    name: Swift.String,
                    teamId: Swift.String
                ) {
                    self.name = name
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/requestBody/content/application\/json`.
            case json(Operations.AdminTeamsSettingsSetName.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminTeamsSettingsSetName.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminTeamsSettingsSetName.Input.Headers = .init(),
            body: Operations.AdminTeamsSettingsSetName.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminTeamsSettingsSetNameResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminTeamsSettingsSetNameResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminTeamsSettingsSetName.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminTeamsSettingsSetName.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.teams.settings.setName/post(adminTeamsSettingsSetName)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminTeamsSettingsSetName.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminTeamsSettingsSetName.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersAssign {
    public static let id: Swift.String = "adminUsersAssign"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.assign/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersAssign.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersAssign.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersAssign.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID (T1234) of the workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// The ID of the user to add to the workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json/user_id`.
                public var userId: Swift.String
                /// Comma separated values of channel IDs to add user in the new workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json/channel_ids`.
                public var channelIds: Swift.String?
                /// True if user should be added to the workspace as a guest.
                ///
                /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json/is_restricted`.
                public var isRestricted: Swift.Bool?
                /// True if user should be added to the workspace as a single-channel guest.
                ///
                /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json/is_ultra_restricted`.
                public var isUltraRestricted: Swift.Bool?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - teamId: The ID (T1234) of the workspace.
                ///   - userId: The ID of the user to add to the workspace.
                ///   - channelIds: Comma separated values of channel IDs to add user in the new workspace.
                ///   - isRestricted: True if user should be added to the workspace as a guest.
                ///   - isUltraRestricted: True if user should be added to the workspace as a single-channel guest.
                public init(
                    teamId: Swift.String,
                    userId: Swift.String,
                    channelIds: Swift.String? = nil,
                    isRestricted: Swift.Bool? = nil,
                    isUltraRestricted: Swift.Bool? = nil
                ) {
                    self.teamId = teamId
                    self.userId = userId
                    self.channelIds = channelIds
                    self.isRestricted = isRestricted
                    self.isUltraRestricted = isUltraRestricted
                }
                public enum CodingKeys: String, CodingKey {
                    case teamId = "team_id"
                    case userId = "user_id"
                    case channelIds = "channel_ids"
                    case isRestricted = "is_restricted"
                    case isUltraRestricted = "is_ultra_restricted"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersAssign.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersAssign.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersAssign.Input.Headers = .init(),
            body: Operations.AdminUsersAssign.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.assign/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.assign/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersAssignResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersAssignResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersAssign.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersAssign.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.assign/post(adminUsersAssign)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersAssign.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersAssign.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersInvite {
    public static let id: Swift.String = "adminUsersInvite"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.invite/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersInvite.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersInvite.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersInvite.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// A comma-separated list of channel_ids for this user to join. At least one channel is required.
                ///
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/channel_ids`.
                public var channelIds: Swift.String
                /// The email address of the person to invite.
                ///
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/email`.
                public var email: Swift.String
                /// The ID (T1234) of the workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// An optional message to send to the user in the invite email.
                ///
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/custom_message`.
                public var customMessage: Swift.String?
                /// Allow invited user to sign in via email and password. Only available for Enterprise Grid teams via admin invite.
                ///
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/email_password_policy_enabled`.
                public var emailPasswordPolicyEnabled: Swift.Bool?
                /// Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
                ///
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/guest_expiration_ts`.
                public var guestExpirationTs: Swift.String?
                /// Is this user a multi-channel guest user? (default: false).
                ///
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/is_restricted`.
                public var isRestricted: Swift.Bool?
                /// Is this user a single channel guest user? (default: false).
                ///
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/is_ultra_restricted`.
                public var isUltraRestricted: Swift.Bool?
                /// Full name of the user.
                ///
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/real_name`.
                public var realName: Swift.String?
                /// Allow this invite to be resent in the future if a user has not signed up yet. Resending can only be done via the UI and has no expiration. (default: false).
                ///
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/resend`.
                public var resend: Swift.Bool?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - channelIds: A comma-separated list of channel_ids for this user to join. At least one channel is required.
                ///   - email: The email address of the person to invite.
                ///   - teamId: The ID (T1234) of the workspace.
                ///   - customMessage: An optional message to send to the user in the invite email.
                ///   - emailPasswordPolicyEnabled: Allow invited user to sign in via email and password. Only available for Enterprise Grid teams via admin invite.
                ///   - guestExpirationTs: Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
                ///   - isRestricted: Is this user a multi-channel guest user? (default: false).
                ///   - isUltraRestricted: Is this user a single channel guest user? (default: false).
                ///   - realName: Full name of the user.
                ///   - resend: Allow this invite to be resent in the future if a user has not signed up yet. Resending can only be done via the UI and has no expiration. (default: false).
                public init(
                    channelIds: Swift.String,
                    email: Swift.String,
                    teamId: Swift.String,
                    customMessage: Swift.String? = nil,
                    emailPasswordPolicyEnabled: Swift.Bool? = nil,
                    guestExpirationTs: Swift.String? = nil,
                    isRestricted: Swift.Bool? = nil,
                    isUltraRestricted: Swift.Bool? = nil,
                    realName: Swift.String? = nil,
                    resend: Swift.Bool? = nil
                ) {
                    self.channelIds = channelIds
                    self.email = email
                    self.teamId = teamId
                    self.customMessage = customMessage
                    self.emailPasswordPolicyEnabled = emailPasswordPolicyEnabled
                    self.guestExpirationTs = guestExpirationTs
                    self.isRestricted = isRestricted
                    self.isUltraRestricted = isUltraRestricted
                    self.realName = realName
                    self.resend = resend
                }
                public enum CodingKeys: String, CodingKey {
                    case channelIds = "channel_ids"
                    case email
                    case teamId = "team_id"
                    case customMessage = "custom_message"
                    case emailPasswordPolicyEnabled = "email_password_policy_enabled"
                    case guestExpirationTs = "guest_expiration_ts"
                    case isRestricted = "is_restricted"
                    case isUltraRestricted = "is_ultra_restricted"
                    case realName = "real_name"
                    case resend
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersInvite.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersInvite.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersInvite.Input.Headers = .init(),
            body: Operations.AdminUsersInvite.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.invite/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersInviteResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersInviteResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersInvite.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersInvite.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.invite/post(adminUsersInvite)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersInvite.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersInvite.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersList {
    public static let id: Swift.String = "adminUsersList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// Only applies with org token and no team_id. If true, return workspaces for a user even if they may be deactivated on them. If false, return workspaces for a user only when user is active on them. Default is false.
                ///
                /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json/include_deactivated_user_workspaces`.
                public var includeDeactivatedUserWorkspaces: Swift.Bool?
                /// If true, only active users will be returned. If false, only deactivated users will be returned. Default is true.
                ///
                /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json/is_active`.
                public var isActive: Swift.Bool?
                /// Limit for how many users to be retrieved per page.
                ///
                /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// The ID (T1234) of a workspace. Filters results to just the specified workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - includeDeactivatedUserWorkspaces: Only applies with org token and no team_id. If true, return workspaces for a user even if they may be deactivated on them. If false, return workspaces for a user only when user is active on them. Default is false.
                ///   - isActive: If true, only active users will be returned. If false, only deactivated users will be returned. Default is true.
                ///   - limit: Limit for how many users to be retrieved per page.
                ///   - teamId: The ID (T1234) of a workspace. Filters results to just the specified workspace.
                public init(
                    cursor: Swift.String? = nil,
                    includeDeactivatedUserWorkspaces: Swift.Bool? = nil,
                    isActive: Swift.Bool? = nil,
                    limit: Swift.Int? = nil,
                    teamId: Swift.String? = nil
                ) {
                    self.cursor = cursor
                    self.includeDeactivatedUserWorkspaces = includeDeactivatedUserWorkspaces
                    self.isActive = isActive
                    self.limit = limit
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case cursor
                    case includeDeactivatedUserWorkspaces = "include_deactivated_user_workspaces"
                    case isActive = "is_active"
                    case limit
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersList.Input.Headers = .init(),
            body: Operations.AdminUsersList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.list/post(adminUsersList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersRemove {
    public static let id: Swift.String = "adminUsersRemove"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.remove/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersRemove.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersRemove.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersRemove.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.remove/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.remove/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID (T1234) of the workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.users.remove/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// The ID of the user to remove.
                ///
                /// - Remark: Generated from `#/paths/admin.users.remove/POST/requestBody/json/user_id`.
                public var userId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - teamId: The ID (T1234) of the workspace.
                ///   - userId: The ID of the user to remove.
                public init(
                    teamId: Swift.String,
                    userId: Swift.String
                ) {
                    self.teamId = teamId
                    self.userId = userId
                }
                public enum CodingKeys: String, CodingKey {
                    case teamId = "team_id"
                    case userId = "user_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.remove/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersRemove.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersRemove.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersRemove.Input.Headers = .init(),
            body: Operations.AdminUsersRemove.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.remove/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.remove/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersRemoveResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersRemoveResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersRemove.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersRemove.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.remove/post(adminUsersRemove)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersRemove.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersRemove.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSessionClearSettings {
    public static let id: Swift.String = "adminUsersSessionClearSettings"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionClearSettings.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionClearSettings.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSessionClearSettings.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The IDs of users you'd like to clear session settings for.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/requestBody/json/user_ids`.
                public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - userIds: The IDs of users you'd like to clear session settings for.
                public init(userIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                    self.userIds = userIds
                }
                public enum CodingKeys: String, CodingKey {
                    case userIds = "user_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSessionClearSettings.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSessionClearSettings.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSessionClearSettings.Input.Headers = .init(),
            body: Operations.AdminUsersSessionClearSettings.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSessionClearSettingsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSessionClearSettingsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSessionClearSettings.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSessionClearSettings.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.session.clearSettings/post(adminUsersSessionClearSettings)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSessionClearSettings.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSessionClearSettings.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSessionGetSettings {
    public static let id: Swift.String = "adminUsersSessionGetSettings"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionGetSettings.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionGetSettings.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSessionGetSettings.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The IDs of users you'd like to fetch session settings for. Note: if a user does not have any active sessions, they will not be returned in the response.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/requestBody/json/user_ids`.
                public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - userIds: The IDs of users you'd like to fetch session settings for. Note: if a user does not have any active sessions, they will not be returned in the response.
                public init(userIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                    self.userIds = userIds
                }
                public enum CodingKeys: String, CodingKey {
                    case userIds = "user_ids"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSessionGetSettings.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSessionGetSettings.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSessionGetSettings.Input.Headers = .init(),
            body: Operations.AdminUsersSessionGetSettings.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSessionGetSettingsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSessionGetSettingsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSessionGetSettings.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSessionGetSettings.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.session.getSettings/post(adminUsersSessionGetSettings)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSessionGetSettings.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSessionGetSettings.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSessionInvalidate {
    public static let id: Swift.String = "adminUsersSessionInvalidate"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionInvalidate.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionInvalidate.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSessionInvalidate.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// ID of the session to invalidate.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/requestBody/json/session_id`.
                public var sessionId: Swift.Int
                /// ID of the user that the session belongs to.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/requestBody/json/user_id`.
                public var userId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - sessionId: ID of the session to invalidate.
                ///   - userId: ID of the user that the session belongs to.
                public init(
                    sessionId: Swift.Int,
                    userId: Swift.String? = nil
                ) {
                    self.sessionId = sessionId
                    self.userId = userId
                }
                public enum CodingKeys: String, CodingKey {
                    case sessionId = "session_id"
                    case userId = "user_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSessionInvalidate.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSessionInvalidate.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSessionInvalidate.Input.Headers = .init(),
            body: Operations.AdminUsersSessionInvalidate.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSessionInvalidateResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSessionInvalidateResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSessionInvalidate.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSessionInvalidate.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.session.invalidate/post(adminUsersSessionInvalidate)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSessionInvalidate.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSessionInvalidate.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSessionList {
    public static let id: Swift.String = "adminUsersSessionList"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.session.list/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionList.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionList.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSessionList.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/json/cursor`.
                public var cursor: Swift.String?
                /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/json/limit`.
                public var limit: Swift.Int?
                /// The ID of the workspace you'd like active sessions for. If you pass a team_id, you'll need to pass a user_id as well.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// The ID of user you'd like active sessions for. If you pass a user_id, you'll need to pass a team_id as well.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/json/user_id`.
                public var userId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                ///   - teamId: The ID of the workspace you'd like active sessions for. If you pass a team_id, you'll need to pass a user_id as well.
                ///   - userId: The ID of user you'd like active sessions for. If you pass a user_id, you'll need to pass a team_id as well.
                public init(
                    cursor: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    teamId: Swift.String? = nil,
                    userId: Swift.String? = nil
                ) {
                    self.cursor = cursor
                    self.limit = limit
                    self.teamId = teamId
                    self.userId = userId
                }
                public enum CodingKeys: String, CodingKey {
                    case cursor
                    case limit
                    case teamId = "team_id"
                    case userId = "user_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSessionList.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSessionList.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSessionList.Input.Headers = .init(),
            body: Operations.AdminUsersSessionList.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.list/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.list/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSessionListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSessionListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSessionList.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSessionList.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.session.list/post(adminUsersSessionList)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSessionList.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSessionList.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSessionReset {
    public static let id: Swift.String = "adminUsersSessionReset"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionReset.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionReset.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSessionReset.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID of the user to wipe sessions for.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody/json/user_id`.
                public var userId: Swift.String
                /// Only expire mobile sessions (default: false).
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody/json/mobile_only`.
                public var mobileOnly: Swift.Bool?
                /// Only expire web sessions (default: false).
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody/json/web_only`.
                public var webOnly: Swift.Bool?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - userId: The ID of the user to wipe sessions for.
                ///   - mobileOnly: Only expire mobile sessions (default: false).
                ///   - webOnly: Only expire web sessions (default: false).
                public init(
                    userId: Swift.String,
                    mobileOnly: Swift.Bool? = nil,
                    webOnly: Swift.Bool? = nil
                ) {
                    self.userId = userId
                    self.mobileOnly = mobileOnly
                    self.webOnly = webOnly
                }
                public enum CodingKeys: String, CodingKey {
                    case userId = "user_id"
                    case mobileOnly = "mobile_only"
                    case webOnly = "web_only"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSessionReset.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSessionReset.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSessionReset.Input.Headers = .init(),
            body: Operations.AdminUsersSessionReset.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSessionResetResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSessionResetResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSessionReset.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSessionReset.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.session.reset/post(adminUsersSessionReset)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSessionReset.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSessionReset.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSessionResetBulk {
    public static let id: Swift.String = "adminUsersSessionResetBulk"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionResetBulk.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionResetBulk.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSessionResetBulk.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID of the user to wipe sessions for.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody/json/user_ids`.
                public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Only expire mobile sessions (default: false).
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody/json/mobile_only`.
                public var mobileOnly: Swift.Bool?
                /// Only expire web sessions (default: false).
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody/json/web_only`.
                public var webOnly: Swift.Bool?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - userIds: The ID of the user to wipe sessions for.
                ///   - mobileOnly: Only expire mobile sessions (default: false).
                ///   - webOnly: Only expire web sessions (default: false).
                public init(
                    userIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    mobileOnly: Swift.Bool? = nil,
                    webOnly: Swift.Bool? = nil
                ) {
                    self.userIds = userIds
                    self.mobileOnly = mobileOnly
                    self.webOnly = webOnly
                }
                public enum CodingKeys: String, CodingKey {
                    case userIds = "user_ids"
                    case mobileOnly = "mobile_only"
                    case webOnly = "web_only"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSessionResetBulk.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSessionResetBulk.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSessionResetBulk.Input.Headers = .init(),
            body: Operations.AdminUsersSessionResetBulk.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSessionResetBulkResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSessionResetBulkResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSessionResetBulk.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSessionResetBulk.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.session.resetBulk/post(adminUsersSessionResetBulk)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSessionResetBulk.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSessionResetBulk.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSessionSetSettings {
    public static let id: Swift.String = "adminUsersSessionSetSettings"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionSetSettings.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionSetSettings.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSessionSetSettings.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The list of up to 1,000 user IDs to apply the session settings for.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody/json/user_ids`.
                public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                /// Terminate the session when the client—either the desktop app or a browser window—is closed.
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody/json/desktop_app_browser_quit`.
                public var desktopAppBrowserQuit: Swift.Bool?
                /// The session duration, in seconds. The minimum value is 28800, which represents 8 hours; the max value is 315569520 or 10 years (that's a long Slack session).
                ///
                /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody/json/duration`.
                public var duration: Swift.Int?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - userIds: The list of up to 1,000 user IDs to apply the session settings for.
                ///   - desktopAppBrowserQuit: Terminate the session when the client—either the desktop app or a browser window—is closed.
                ///   - duration: The session duration, in seconds. The minimum value is 28800, which represents 8 hours; the max value is 315569520 or 10 years (that's a long Slack session).
                public init(
                    userIds: OpenAPIRuntime.OpenAPIArrayContainer,
                    desktopAppBrowserQuit: Swift.Bool? = nil,
                    duration: Swift.Int? = nil
                ) {
                    self.userIds = userIds
                    self.desktopAppBrowserQuit = desktopAppBrowserQuit
                    self.duration = duration
                }
                public enum CodingKeys: String, CodingKey {
                    case userIds = "user_ids"
                    case desktopAppBrowserQuit = "desktop_app_browser_quit"
                    case duration
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSessionSetSettings.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSessionSetSettings.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSessionSetSettings.Input.Headers = .init(),
            body: Operations.AdminUsersSessionSetSettings.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSessionSetSettingsResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSessionSetSettingsResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSessionSetSettings.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSessionSetSettings.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.session.setSettings/post(adminUsersSessionSetSettings)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSessionSetSettings.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSessionSetSettings.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSetAdmin {
    public static let id: Swift.String = "adminUsersSetAdmin"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetAdmin.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetAdmin.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSetAdmin.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID (T1234) of the workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// The ID of the user to designate as an admin.
                ///
                /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/requestBody/json/user_id`.
                public var userId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - teamId: The ID (T1234) of the workspace.
                ///   - userId: The ID of the user to designate as an admin.
                public init(
                    teamId: Swift.String,
                    userId: Swift.String
                ) {
                    self.teamId = teamId
                    self.userId = userId
                }
                public enum CodingKeys: String, CodingKey {
                    case teamId = "team_id"
                    case userId = "user_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSetAdmin.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSetAdmin.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSetAdmin.Input.Headers = .init(),
            body: Operations.AdminUsersSetAdmin.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSetAdminResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSetAdminResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSetAdmin.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSetAdmin.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.setAdmin/post(adminUsersSetAdmin)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSetAdmin.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSetAdmin.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSetExpiration {
    public static let id: Swift.String = "adminUsersSetExpiration"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetExpiration.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetExpiration.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSetExpiration.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Epoch timestamp in seconds when guest account should be disabled.
                ///
                /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody/json/expiration_ts`.
                public var expirationTs: Swift.Int
                /// The ID of the user to set an expiration for.
                ///
                /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody/json/user_id`.
                public var userId: Swift.String
                /// The ID (T1234) of the workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody/json/team_id`.
                public var teamId: Swift.String?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - expirationTs: Epoch timestamp in seconds when guest account should be disabled.
                ///   - userId: The ID of the user to set an expiration for.
                ///   - teamId: The ID (T1234) of the workspace.
                public init(
                    expirationTs: Swift.Int,
                    userId: Swift.String,
                    teamId: Swift.String? = nil
                ) {
                    self.expirationTs = expirationTs
                    self.userId = userId
                    self.teamId = teamId
                }
                public enum CodingKeys: String, CodingKey {
                    case expirationTs = "expiration_ts"
                    case userId = "user_id"
                    case teamId = "team_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSetExpiration.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSetExpiration.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSetExpiration.Input.Headers = .init(),
            body: Operations.AdminUsersSetExpiration.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSetExpirationResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSetExpirationResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSetExpiration.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSetExpiration.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.setExpiration/post(adminUsersSetExpiration)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSetExpiration.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSetExpiration.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSetOwner {
    public static let id: Swift.String = "adminUsersSetOwner"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetOwner.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetOwner.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSetOwner.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID (T1234) of the workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// Id of the user to promote to owner.
                ///
                /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/requestBody/json/user_id`.
                public var userId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - teamId: The ID (T1234) of the workspace.
                ///   - userId: Id of the user to promote to owner.
                public init(
                    teamId: Swift.String,
                    userId: Swift.String
                ) {
                    self.teamId = teamId
                    self.userId = userId
                }
                public enum CodingKeys: String, CodingKey {
                    case teamId = "team_id"
                    case userId = "user_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSetOwner.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSetOwner.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSetOwner.Input.Headers = .init(),
            body: Operations.AdminUsersSetOwner.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSetOwnerResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSetOwnerResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSetOwner.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSetOwner.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.setOwner/post(adminUsersSetOwner)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSetOwner.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSetOwner.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersSetRegular {
    public static let id: Swift.String = "adminUsersSetRegular"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetRegular.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetRegular.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersSetRegular.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// The ID (T1234) of the workspace.
                ///
                /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/requestBody/json/team_id`.
                public var teamId: Swift.String
                /// The ID of the user to designate as a regular user.
                ///
                /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/requestBody/json/user_id`.
                public var userId: Swift.String
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - teamId: The ID (T1234) of the workspace.
                ///   - userId: The ID of the user to designate as a regular user.
                public init(
                    teamId: Swift.String,
                    userId: Swift.String
                ) {
                    self.teamId = teamId
                    self.userId = userId
                }
                public enum CodingKeys: String, CodingKey {
                    case teamId = "team_id"
                    case userId = "user_id"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersSetRegular.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersSetRegular.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersSetRegular.Input.Headers = .init(),
            body: Operations.AdminUsersSetRegular.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersSetRegularResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersSetRegularResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersSetRegular.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersSetRegular.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.setRegular/post(adminUsersSetRegular)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersSetRegular.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersSetRegular.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
public enum AdminUsersUnsupportedVersionsExport {
    public static let id: Swift.String = "adminUsersUnsupportedVersionsExport"
    public struct Input: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/header`.
        public struct Headers: Sendable, Hashable {
            public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersUnsupportedVersionsExport.AcceptableContentType>]
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - accept:
            public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersUnsupportedVersionsExport.AcceptableContentType>] = .defaultValues()) {
                self.accept = accept
            }
        }
        public var headers: Operations.AdminUsersUnsupportedVersionsExport.Input.Headers
        /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/requestBody`.
        @frozen public enum Body: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/requestBody/json`.
            public struct JsonPayload: Codable, Hashable, Sendable {
                /// Unix timestamp of the date of past or upcoming end of support cycles. If not provided will include all announced end of support cycles.
                ///
                /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/requestBody/json/date_end_of_support`.
                public var dateEndOfSupport: Swift.Int?
                /// Unix timestamp of a date to start looking for user sessions. If not provided will start six months ago.
                ///
                /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/requestBody/json/date_sessions_started`.
                public var dateSessionsStarted: Swift.Int?
                /// Creates a new `JsonPayload`.
                ///
                /// - Parameters:
                ///   - dateEndOfSupport: Unix timestamp of the date of past or upcoming end of support cycles. If not provided will include all announced end of support cycles.
                ///   - dateSessionsStarted: Unix timestamp of a date to start looking for user sessions. If not provided will start six months ago.
                public init(
                    dateEndOfSupport: Swift.Int? = nil,
                    dateSessionsStarted: Swift.Int? = nil
                ) {
                    self.dateEndOfSupport = dateEndOfSupport
                    self.dateSessionsStarted = dateSessionsStarted
                }
                public enum CodingKeys: String, CodingKey {
                    case dateEndOfSupport = "date_end_of_support"
                    case dateSessionsStarted = "date_sessions_started"
                }
            }
            /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/requestBody/content/application\/json`.
            case json(Operations.AdminUsersUnsupportedVersionsExport.Input.Body.JsonPayload)
        }
        public var body: Operations.AdminUsersUnsupportedVersionsExport.Input.Body
        /// Creates a new `Input`.
        ///
        /// - Parameters:
        ///   - headers:
        ///   - body:
        public init(
            headers: Operations.AdminUsersUnsupportedVersionsExport.Input.Headers = .init(),
            body: Operations.AdminUsersUnsupportedVersionsExport.Input.Body
        ) {
            self.headers = headers
            self.body = body
        }
    }
    @frozen public enum Output: Sendable, Hashable {
        public struct Ok: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/responses/200/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/responses/200/content/application\/json`.
                case json(Components.Schemas.AdminUsersUnsupportedVersionsExportResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.AdminUsersUnsupportedVersionsExportResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Operations.AdminUsersUnsupportedVersionsExport.Output.Ok.Body
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Operations.AdminUsersUnsupportedVersionsExport.Output.Ok.Body) {
                self.body = body
            }
        }
        /// OK
        ///
        /// - Remark: Generated from `#/paths//admin.users.unsupportedVersions.export/post(adminUsersUnsupportedVersionsExport)/responses/200`.
        ///
        /// HTTP response code: `200 ok`.
        case ok(Operations.AdminUsersUnsupportedVersionsExport.Output.Ok)
        /// The associated value of the enum case if `self` is `.ok`.
        ///
        /// - Throws: An error if `self` is not `.ok`.
        /// - SeeAlso: `.ok`.
        public var ok: Operations.AdminUsersUnsupportedVersionsExport.Output.Ok {
            get throws {
                switch self {
                case let .ok(response):
                    return response
                default:
                    try throwUnexpectedResponseStatus(
                        expectedStatus: "ok",
                        response: self
                    )
                }
            }
        }
        /// Undocumented response.
        ///
        /// A response with a code that is not documented in the OpenAPI document.
        case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
        case json
        case other(Swift.String)
        public init?(rawValue: Swift.String) {
            switch rawValue.lowercased() {
            case "application/json":
                self = .json
            default:
                self = .other(rawValue)
            }
        }
        public var rawValue: Swift.String {
            switch self {
            case let .other(string):
                return string
            case .json:
                return "application/json"
            }
        }
        public static var allCases: [Self] {
            [
                .json
            ]
        }
    }
}
}
#endif
