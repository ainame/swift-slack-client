#if WebAPI_Team
// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
import HTTPTypes

extension Client {
    /// Gets the access logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.accessLogs`.
    /// - Remark: Generated from `#/paths//team.accessLogs/post(teamAccessLogs)`.
    func teamAccessLogs(_ input: Operations.TeamAccessLogs.Input) async throws -> Operations.TeamAccessLogs.Output {
        try await client.send(
            input: input,
            forOperation: Operations.TeamAccessLogs.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/team.accessLogs",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case let .json(value):
                    try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.TeamAccessLogs.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.TeamAccessLogsResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }

    /// Gets billable users information for the current team.
    ///
    /// - Remark: HTTP `POST /team.billableInfo`.
    /// - Remark: Generated from `#/paths//team.billableInfo/post(teamBillableInfo)`.
    func teamBillableInfo(_ input: Operations.TeamBillableInfo.Input) async throws -> Operations.TeamBillableInfo.Output {
        try await client.send(
            input: input,
            forOperation: Operations.TeamBillableInfo.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/team.billableInfo",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case let .json(value):
                    try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.TeamBillableInfo.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.TeamBillableInfoResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }

    /// Reads a workspace's billing plan information.
    ///
    /// - Remark: HTTP `POST /team.billing.info`.
    /// - Remark: Generated from `#/paths//team.billing.info/post(teamBillingInfo)`.
    func teamBillingInfo(_ input: Operations.TeamBillingInfo.Input) async throws -> Operations.TeamBillingInfo.Output {
        try await client.send(
            input: input,
            forOperation: Operations.TeamBillingInfo.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/team.billing.info",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case .none:
                    nil
                case let .json(value):
                    try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.TeamBillingInfo.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.TeamBillingInfoResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }

    /// Disconnect an external organization.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.disconnect`.
    /// - Remark: Generated from `#/paths//team.externalTeams.disconnect/post(teamExternalTeamsDisconnect)`.
    func teamExternalTeamsDisconnect(_ input: Operations.TeamExternalTeamsDisconnect.Input) async throws -> Operations.TeamExternalTeamsDisconnect.Output {
        try await client.send(
            input: input,
            forOperation: Operations.TeamExternalTeamsDisconnect.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/team.externalTeams.disconnect",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case let .json(value):
                    try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.TeamExternalTeamsDisconnect.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.TeamExternalTeamsDisconnectResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }

    /// Returns a list of all the external teams connected and details about the connection.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.list`.
    /// - Remark: Generated from `#/paths//team.externalTeams.list/post(teamExternalTeamsList)`.
    func teamExternalTeamsList(_ input: Operations.TeamExternalTeamsList.Input) async throws -> Operations.TeamExternalTeamsList.Output {
        try await client.send(
            input: input,
            forOperation: Operations.TeamExternalTeamsList.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/team.externalTeams.list",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case let .json(value):
                    try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.TeamExternalTeamsList.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.TeamExternalTeamsListResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }

    /// Gets information about the current team.
    ///
    /// - Remark: HTTP `POST /team.info`.
    /// - Remark: Generated from `#/paths//team.info/post(teamInfo)`.
    func teamInfo(_ input: Operations.TeamInfo.Input) async throws -> Operations.TeamInfo.Output {
        try await client.send(
            input: input,
            forOperation: Operations.TeamInfo.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/team.info",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case let .json(value):
                    try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.TeamInfo.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.TeamInfoResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }

    /// Gets the integration logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.integrationLogs`.
    /// - Remark: Generated from `#/paths//team.integrationLogs/post(teamIntegrationLogs)`.
    func teamIntegrationLogs(_ input: Operations.TeamIntegrationLogs.Input) async throws -> Operations.TeamIntegrationLogs.Output {
        try await client.send(
            input: input,
            forOperation: Operations.TeamIntegrationLogs.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/team.integrationLogs",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case let .json(value):
                    try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.TeamIntegrationLogs.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.TeamIntegrationLogsResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }

    /// Retrieve a list of a workspace's team preferences.
    ///
    /// - Remark: HTTP `POST /team.preferences.list`.
    /// - Remark: Generated from `#/paths//team.preferences.list/post(teamPreferencesList)`.
    func teamPreferencesList(_ input: Operations.TeamPreferencesList.Input) async throws -> Operations.TeamPreferencesList.Output {
        try await client.send(
            input: input,
            forOperation: Operations.TeamPreferencesList.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/team.preferences.list",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case .none:
                    nil
                case let .json(value):
                    try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.TeamPreferencesList.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.TeamPreferencesListResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }

    /// Retrieve a team's profile.
    ///
    /// - Remark: HTTP `POST /team.profile.get`.
    /// - Remark: Generated from `#/paths//team.profile.get/post(teamProfileGet)`.
    func teamProfileGet(_ input: Operations.TeamProfileGet.Input) async throws -> Operations.TeamProfileGet.Output {
        try await client.send(
            input: input,
            forOperation: Operations.TeamProfileGet.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/team.profile.get",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case let .json(value):
                    try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.TeamProfileGet.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.TeamProfileGetResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }
}
#endif
