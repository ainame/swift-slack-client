#if WebAPI_Assistant
// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
@preconcurrency import struct Foundation.URL
#else
import struct Foundation.Data
import struct Foundation.Date
import struct Foundation.URL
#endif
import HTTPTypes

extension Client {
    /// Set the status for an AI assistant thread.
    ///
    /// - Remark: HTTP `POST /assistant.threads.setStatus`.
    /// - Remark: Generated from `#/paths//assistant.threads.setStatus/post(assistantThreadsSetStatus)`.
    func assistantThreadsSetStatus(_ input: Operations.AssistantThreadsSetStatus.Input) async throws -> Operations.AssistantThreadsSetStatus.Output {
        try await client.send(
            input: input,
            forOperation: Operations.AssistantThreadsSetStatus.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/assistant.threads.setStatus",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case let .json(value):
                    try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.AssistantThreadsSetStatus.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.AssistantThreadsSetStatusResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }

    /// Set suggested prompts for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setSuggestedPrompts`.
    /// - Remark: Generated from `#/paths//assistant.threads.setSuggestedPrompts/post(assistantThreadsSetSuggestedPrompts)`.
    func assistantThreadsSetSuggestedPrompts(_ input: Operations.AssistantThreadsSetSuggestedPrompts.Input) async throws -> Operations.AssistantThreadsSetSuggestedPrompts.Output {
        try await client.send(
            input: input,
            forOperation: Operations.AssistantThreadsSetSuggestedPrompts.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/assistant.threads.setSuggestedPrompts",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case let .json(value):
                    try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.AssistantThreadsSetSuggestedPrompts.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.AssistantThreadsSetSuggestedPromptsResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }

    /// Set the title for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setTitle`.
    /// - Remark: Generated from `#/paths//assistant.threads.setTitle/post(assistantThreadsSetTitle)`.
    func assistantThreadsSetTitle(_ input: Operations.AssistantThreadsSetTitle.Input) async throws -> Operations.AssistantThreadsSetTitle.Output {
        try await client.send(
            input: input,
            forOperation: Operations.AssistantThreadsSetTitle.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/assistant.threads.setTitle",
                    parameters: [],
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post,
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept,
                )
                let body: OpenAPIRuntime.HTTPBody? = switch input.body {
                case let .json(value):
                    try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8",
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.AssistantThreadsSetTitle.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                        ],
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.AssistantThreadsSetTitleResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            },
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody,
                        ),
                    )
                }
            },
        )
    }
}
#endif
