// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get logs for a specified team/org
    ///
    /// - Remark: HTTP `POST /admin.apps.activities.list`.
    /// - Remark: Generated from `#/paths//admin.apps.activities.list/post(adminAppsActivitiesList)`.
    func adminAppsActivitiesList(_ input: Operations.AdminAppsActivitiesList.Input) async throws -> Operations.AdminAppsActivitiesList.Output
    /// Approve an app for installation on a workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.approve`.
    /// - Remark: Generated from `#/paths//admin.apps.approve/post(adminAppsApprove)`.
    func adminAppsApprove(_ input: Operations.AdminAppsApprove.Input) async throws -> Operations.AdminAppsApprove.Output
    /// List approved apps for an org or workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.approved.list`.
    /// - Remark: Generated from `#/paths//admin.apps.approved.list/post(adminAppsApprovedList)`.
    func adminAppsApprovedList(_ input: Operations.AdminAppsApprovedList.Input) async throws -> Operations.AdminAppsApprovedList.Output
    /// Clear an app resolution
    ///
    /// - Remark: HTTP `POST /admin.apps.clearResolution`.
    /// - Remark: Generated from `#/paths//admin.apps.clearResolution/post(adminAppsClearResolution)`.
    func adminAppsClearResolution(_ input: Operations.AdminAppsClearResolution.Input) async throws -> Operations.AdminAppsClearResolution.Output
    /// Look up the app config for connectors by their IDs
    ///
    /// - Remark: HTTP `POST /admin.apps.config.lookup`.
    /// - Remark: Generated from `#/paths//admin.apps.config.lookup/post(adminAppsConfigLookup)`.
    func adminAppsConfigLookup(_ input: Operations.AdminAppsConfigLookup.Input) async throws -> Operations.AdminAppsConfigLookup.Output
    /// Set the app config for a connector
    ///
    /// - Remark: HTTP `POST /admin.apps.config.set`.
    /// - Remark: Generated from `#/paths//admin.apps.config.set/post(adminAppsConfigSet)`.
    func adminAppsConfigSet(_ input: Operations.AdminAppsConfigSet.Input) async throws -> Operations.AdminAppsConfigSet.Output
    /// Cancel app request for team
    ///
    /// - Remark: HTTP `POST /admin.apps.requests.cancel`.
    /// - Remark: Generated from `#/paths//admin.apps.requests.cancel/post(adminAppsRequestsCancel)`.
    func adminAppsRequestsCancel(_ input: Operations.AdminAppsRequestsCancel.Input) async throws -> Operations.AdminAppsRequestsCancel.Output
    /// List app requests for a team/workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.requests.list`.
    /// - Remark: Generated from `#/paths//admin.apps.requests.list/post(adminAppsRequestsList)`.
    func adminAppsRequestsList(_ input: Operations.AdminAppsRequestsList.Input) async throws -> Operations.AdminAppsRequestsList.Output
    /// Restrict an app for installation on a workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.restrict`.
    /// - Remark: Generated from `#/paths//admin.apps.restrict/post(adminAppsRestrict)`.
    func adminAppsRestrict(_ input: Operations.AdminAppsRestrict.Input) async throws -> Operations.AdminAppsRestrict.Output
    /// List restricted apps for an org or workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.restricted.list`.
    /// - Remark: Generated from `#/paths//admin.apps.restricted.list/post(adminAppsRestrictedList)`.
    func adminAppsRestrictedList(_ input: Operations.AdminAppsRestrictedList.Input) async throws -> Operations.AdminAppsRestrictedList.Output
    /// Uninstall an app from one or many workspaces, or an entire enterprise organization.
    ///
    /// - Remark: HTTP `POST /admin.apps.uninstall`.
    /// - Remark: Generated from `#/paths//admin.apps.uninstall/post(adminAppsUninstall)`.
    func adminAppsUninstall(_ input: Operations.AdminAppsUninstall.Input) async throws -> Operations.AdminAppsUninstall.Output
    /// Assign entities to a particular authentication policy.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.assignEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.assignEntities/post(adminAuthPolicyAssignEntities)`.
    func adminAuthPolicyAssignEntities(_ input: Operations.AdminAuthPolicyAssignEntities.Input) async throws -> Operations.AdminAuthPolicyAssignEntities.Output
    /// Fetch all the entities assigned to a particular authentication policy by name.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.getEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.getEntities/post(adminAuthPolicyGetEntities)`.
    func adminAuthPolicyGetEntities(_ input: Operations.AdminAuthPolicyGetEntities.Input) async throws -> Operations.AdminAuthPolicyGetEntities.Output
    /// Remove specified entities from a specified authentication policy.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.removeEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.removeEntities/post(adminAuthPolicyRemoveEntities)`.
    func adminAuthPolicyRemoveEntities(_ input: Operations.AdminAuthPolicyRemoveEntities.Input) async throws -> Operations.AdminAuthPolicyRemoveEntities.Output
    /// Create an Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.create`.
    /// - Remark: Generated from `#/paths//admin.barriers.create/post(adminBarriersCreate)`.
    func adminBarriersCreate(_ input: Operations.AdminBarriersCreate.Input) async throws -> Operations.AdminBarriersCreate.Output
    /// Delete an existing Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.delete`.
    /// - Remark: Generated from `#/paths//admin.barriers.delete/post(adminBarriersDelete)`.
    func adminBarriersDelete(_ input: Operations.AdminBarriersDelete.Input) async throws -> Operations.AdminBarriersDelete.Output
    /// Get all Information Barriers for your organization
    ///
    /// - Remark: HTTP `POST /admin.barriers.list`.
    /// - Remark: Generated from `#/paths//admin.barriers.list/post(adminBarriersList)`.
    func adminBarriersList(_ input: Operations.AdminBarriersList.Input) async throws -> Operations.AdminBarriersList.Output
    /// Update an existing Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.update`.
    /// - Remark: Generated from `#/paths//admin.barriers.update/post(adminBarriersUpdate)`.
    func adminBarriersUpdate(_ input: Operations.AdminBarriersUpdate.Input) async throws -> Operations.AdminBarriersUpdate.Output
    /// Archive a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.archive`.
    /// - Remark: Generated from `#/paths//admin.conversations.archive/post(adminConversationsArchive)`.
    func adminConversationsArchive(_ input: Operations.AdminConversationsArchive.Input) async throws -> Operations.AdminConversationsArchive.Output
    /// Archive public or private channels in bulk.
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkArchive`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkArchive/post(adminConversationsBulkArchive)`.
    func adminConversationsBulkArchive(_ input: Operations.AdminConversationsBulkArchive.Input) async throws -> Operations.AdminConversationsBulkArchive.Output
    /// Delete public or private channels in bulk
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkDelete`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkDelete/post(adminConversationsBulkDelete)`.
    func adminConversationsBulkDelete(_ input: Operations.AdminConversationsBulkDelete.Input) async throws -> Operations.AdminConversationsBulkDelete.Output
    /// Move public or private channels in bulk.
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkMove`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkMove/post(adminConversationsBulkMove)`.
    func adminConversationsBulkMove(_ input: Operations.AdminConversationsBulkMove.Input) async throws -> Operations.AdminConversationsBulkMove.Output
    /// Convert a public channel to a private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.convertToPrivate`.
    /// - Remark: Generated from `#/paths//admin.conversations.convertToPrivate/post(adminConversationsConvertToPrivate)`.
    func adminConversationsConvertToPrivate(_ input: Operations.AdminConversationsConvertToPrivate.Input) async throws -> Operations.AdminConversationsConvertToPrivate.Output
    /// Convert a private channel to a public channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.convertToPublic`.
    /// - Remark: Generated from `#/paths//admin.conversations.convertToPublic/post(adminConversationsConvertToPublic)`.
    func adminConversationsConvertToPublic(_ input: Operations.AdminConversationsConvertToPublic.Input) async throws -> Operations.AdminConversationsConvertToPublic.Output
    /// Create a public or private channel-based conversation.
    ///
    /// - Remark: HTTP `POST /admin.conversations.create`.
    /// - Remark: Generated from `#/paths//admin.conversations.create/post(adminConversationsCreate)`.
    func adminConversationsCreate(_ input: Operations.AdminConversationsCreate.Input) async throws -> Operations.AdminConversationsCreate.Output
    /// Delete a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.delete`.
    /// - Remark: Generated from `#/paths//admin.conversations.delete/post(adminConversationsDelete)`.
    func adminConversationsDelete(_ input: Operations.AdminConversationsDelete.Input) async throws -> Operations.AdminConversationsDelete.Output
    /// Disconnect a connected channel from one or more workspaces.
    ///
    /// - Remark: HTTP `POST /admin.conversations.disconnectShared`.
    /// - Remark: Generated from `#/paths//admin.conversations.disconnectShared/post(adminConversationsDisconnectShared)`.
    func adminConversationsDisconnectShared(_ input: Operations.AdminConversationsDisconnectShared.Input) async throws -> Operations.AdminConversationsDisconnectShared.Output
    /// List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
    ///
    /// - Remark: HTTP `POST /admin.conversations.ekm.listOriginalConnectedChannelInfo`.
    /// - Remark: Generated from `#/paths//admin.conversations.ekm.listOriginalConnectedChannelInfo/post(adminConversationsEkmListOriginalConnectedChannelInfo)`.
    func adminConversationsEkmListOriginalConnectedChannelInfo(_ input: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input) async throws -> Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output
    /// Get conversation preferences for a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getConversationPrefs`.
    /// - Remark: Generated from `#/paths//admin.conversations.getConversationPrefs/post(adminConversationsGetConversationPrefs)`.
    func adminConversationsGetConversationPrefs(_ input: Operations.AdminConversationsGetConversationPrefs.Input) async throws -> Operations.AdminConversationsGetConversationPrefs.Output
    /// This API endpoint can be used by any admin to get a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.getCustomRetention/post(adminConversationsGetCustomRetention)`.
    func adminConversationsGetCustomRetention(_ input: Operations.AdminConversationsGetCustomRetention.Input) async throws -> Operations.AdminConversationsGetCustomRetention.Output
    /// Get all the workspaces a given public or private channel is connected to within this Enterprise org.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getTeams`.
    /// - Remark: Generated from `#/paths//admin.conversations.getTeams/post(adminConversationsGetTeams)`.
    func adminConversationsGetTeams(_ input: Operations.AdminConversationsGetTeams.Input) async throws -> Operations.AdminConversationsGetTeams.Output
    /// Invite a user to a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.invite`.
    /// - Remark: Generated from `#/paths//admin.conversations.invite/post(adminConversationsInvite)`.
    func adminConversationsInvite(_ input: Operations.AdminConversationsInvite.Input) async throws -> Operations.AdminConversationsInvite.Output
    /// Returns channels on the given team using the filters.
    ///
    /// - Remark: HTTP `POST /admin.conversations.lookup`.
    /// - Remark: Generated from `#/paths//admin.conversations.lookup/post(adminConversationsLookup)`.
    func adminConversationsLookup(_ input: Operations.AdminConversationsLookup.Input) async throws -> Operations.AdminConversationsLookup.Output
    /// This API endpoint can be used by any admin to remove a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.removeCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.removeCustomRetention/post(adminConversationsRemoveCustomRetention)`.
    func adminConversationsRemoveCustomRetention(_ input: Operations.AdminConversationsRemoveCustomRetention.Input) async throws -> Operations.AdminConversationsRemoveCustomRetention.Output
    /// Rename a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.rename`.
    /// - Remark: Generated from `#/paths//admin.conversations.rename/post(adminConversationsRename)`.
    func adminConversationsRename(_ input: Operations.AdminConversationsRename.Input) async throws -> Operations.AdminConversationsRename.Output
    /// Add an allowlist of IDP groups for accessing a channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.addGroup`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.addGroup/post(adminConversationsRestrictAccessAddGroup)`.
    func adminConversationsRestrictAccessAddGroup(_ input: Operations.AdminConversationsRestrictAccessAddGroup.Input) async throws -> Operations.AdminConversationsRestrictAccessAddGroup.Output
    /// List all IDP Groups linked to a channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.listGroups`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.listGroups/post(adminConversationsRestrictAccessListGroups)`.
    func adminConversationsRestrictAccessListGroups(_ input: Operations.AdminConversationsRestrictAccessListGroups.Input) async throws -> Operations.AdminConversationsRestrictAccessListGroups.Output
    /// Remove a linked IDP group linked from a private channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.removeGroup`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.removeGroup/post(adminConversationsRestrictAccessRemoveGroup)`.
    func adminConversationsRestrictAccessRemoveGroup(_ input: Operations.AdminConversationsRestrictAccessRemoveGroup.Input) async throws -> Operations.AdminConversationsRestrictAccessRemoveGroup.Output
    /// Search for public or private channels in an Enterprise organization.
    ///
    /// - Remark: HTTP `POST /admin.conversations.search`.
    /// - Remark: Generated from `#/paths//admin.conversations.search/post(adminConversationsSearch)`.
    func adminConversationsSearch(_ input: Operations.AdminConversationsSearch.Input) async throws -> Operations.AdminConversationsSearch.Output
    /// Set the posting permissions for a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setConversationPrefs`.
    /// - Remark: Generated from `#/paths//admin.conversations.setConversationPrefs/post(adminConversationsSetConversationPrefs)`.
    func adminConversationsSetConversationPrefs(_ input: Operations.AdminConversationsSetConversationPrefs.Input) async throws -> Operations.AdminConversationsSetConversationPrefs.Output
    /// This API endpoint can be used by any admin to set a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.setCustomRetention/post(adminConversationsSetCustomRetention)`.
    func adminConversationsSetCustomRetention(_ input: Operations.AdminConversationsSetCustomRetention.Input) async throws -> Operations.AdminConversationsSetCustomRetention.Output
    /// Set the workspaces in an Enterprise grid org that connect to a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setTeams`.
    /// - Remark: Generated from `#/paths//admin.conversations.setTeams/post(adminConversationsSetTeams)`.
    func adminConversationsSetTeams(_ input: Operations.AdminConversationsSetTeams.Input) async throws -> Operations.AdminConversationsSetTeams.Output
    /// Unarchive a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.unarchive`.
    /// - Remark: Generated from `#/paths//admin.conversations.unarchive/post(adminConversationsUnarchive)`.
    func adminConversationsUnarchive(_ input: Operations.AdminConversationsUnarchive.Input) async throws -> Operations.AdminConversationsUnarchive.Output
    /// Add an emoji.
    ///
    /// - Remark: HTTP `POST /admin.emoji.add`.
    /// - Remark: Generated from `#/paths//admin.emoji.add/post(adminEmojiAdd)`.
    func adminEmojiAdd(_ input: Operations.AdminEmojiAdd.Input) async throws -> Operations.AdminEmojiAdd.Output
    /// Add an emoji alias.
    ///
    /// - Remark: HTTP `POST /admin.emoji.addAlias`.
    /// - Remark: Generated from `#/paths//admin.emoji.addAlias/post(adminEmojiAddAlias)`.
    func adminEmojiAddAlias(_ input: Operations.AdminEmojiAddAlias.Input) async throws -> Operations.AdminEmojiAddAlias.Output
    /// List emoji for an Enterprise Grid organization.
    ///
    /// - Remark: HTTP `POST /admin.emoji.list`.
    /// - Remark: Generated from `#/paths//admin.emoji.list/post(adminEmojiList)`.
    func adminEmojiList(_ input: Operations.AdminEmojiList.Input) async throws -> Operations.AdminEmojiList.Output
    /// Remove an emoji across an Enterprise Grid organization
    ///
    /// - Remark: HTTP `POST /admin.emoji.remove`.
    /// - Remark: Generated from `#/paths//admin.emoji.remove/post(adminEmojiRemove)`.
    func adminEmojiRemove(_ input: Operations.AdminEmojiRemove.Input) async throws -> Operations.AdminEmojiRemove.Output
    /// Rename an emoji.
    ///
    /// - Remark: HTTP `POST /admin.emoji.rename`.
    /// - Remark: Generated from `#/paths//admin.emoji.rename/post(adminEmojiRename)`.
    func adminEmojiRename(_ input: Operations.AdminEmojiRename.Input) async throws -> Operations.AdminEmojiRename.Output
    /// Look up functions by a set of apps
    ///
    /// - Remark: HTTP `POST /admin.functions.list`.
    /// - Remark: Generated from `#/paths//admin.functions.list/post(adminFunctionsList)`.
    func adminFunctionsList(_ input: Operations.AdminFunctionsList.Input) async throws -> Operations.AdminFunctionsList.Output
    /// Lookup the visibility of multiple Slack functions and include the users if it is limited to particular named entities.
    ///
    /// - Remark: HTTP `POST /admin.functions.permissions.lookup`.
    /// - Remark: Generated from `#/paths//admin.functions.permissions.lookup/post(adminFunctionsPermissionsLookup)`.
    func adminFunctionsPermissionsLookup(_ input: Operations.AdminFunctionsPermissionsLookup.Input) async throws -> Operations.AdminFunctionsPermissionsLookup.Output
    /// Set the visibility of a Slack function and define the users or workspaces if it is set to named_entities
    ///
    /// - Remark: HTTP `POST /admin.functions.permissions.set`.
    /// - Remark: Generated from `#/paths//admin.functions.permissions.set/post(adminFunctionsPermissionsSet)`.
    func adminFunctionsPermissionsSet(_ input: Operations.AdminFunctionsPermissionsSet.Input) async throws -> Operations.AdminFunctionsPermissionsSet.Output
    /// Approve a workspace invite request.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.approve`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.approve/post(adminInviteRequestsApprove)`.
    func adminInviteRequestsApprove(_ input: Operations.AdminInviteRequestsApprove.Input) async throws -> Operations.AdminInviteRequestsApprove.Output
    /// List all approved workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.approved.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.approved.list/post(adminInviteRequestsApprovedList)`.
    func adminInviteRequestsApprovedList(_ input: Operations.AdminInviteRequestsApprovedList.Input) async throws -> Operations.AdminInviteRequestsApprovedList.Output
    /// List all denied workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.denied.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.denied.list/post(adminInviteRequestsDeniedList)`.
    func adminInviteRequestsDeniedList(_ input: Operations.AdminInviteRequestsDeniedList.Input) async throws -> Operations.AdminInviteRequestsDeniedList.Output
    /// Deny a workspace invite request.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.deny`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.deny/post(adminInviteRequestsDeny)`.
    func adminInviteRequestsDeny(_ input: Operations.AdminInviteRequestsDeny.Input) async throws -> Operations.AdminInviteRequestsDeny.Output
    /// List all pending workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.list/post(adminInviteRequestsList)`.
    func adminInviteRequestsList(_ input: Operations.AdminInviteRequestsList.Input) async throws -> Operations.AdminInviteRequestsList.Output
    /// Adds members to the specified role with the specified scopes
    ///
    /// - Remark: HTTP `POST /admin.roles.addAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.addAssignments/post(adminRolesAddAssignments)`.
    func adminRolesAddAssignments(_ input: Operations.AdminRolesAddAssignments.Input) async throws -> Operations.AdminRolesAddAssignments.Output
    /// Lists assignments for all roles across entities. Options to scope results by any combination of roles or entities
    ///
    /// - Remark: HTTP `POST /admin.roles.listAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.listAssignments/post(adminRolesListAssignments)`.
    func adminRolesListAssignments(_ input: Operations.AdminRolesListAssignments.Input) async throws -> Operations.AdminRolesListAssignments.Output
    /// Removes a set of users from a role for the given scopes and entities
    ///
    /// - Remark: HTTP `POST /admin.roles.removeAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.removeAssignments/post(adminRolesRemoveAssignments)`.
    func adminRolesRemoveAssignments(_ input: Operations.AdminRolesRemoveAssignments.Input) async throws -> Operations.AdminRolesRemoveAssignments.Output
    /// List all of the admins on a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.admins.list`.
    /// - Remark: Generated from `#/paths//admin.teams.admins.list/post(adminTeamsAdminsList)`.
    func adminTeamsAdminsList(_ input: Operations.AdminTeamsAdminsList.Input) async throws -> Operations.AdminTeamsAdminsList.Output
    /// Create an Enterprise team.
    ///
    /// - Remark: HTTP `POST /admin.teams.create`.
    /// - Remark: Generated from `#/paths//admin.teams.create/post(adminTeamsCreate)`.
    func adminTeamsCreate(_ input: Operations.AdminTeamsCreate.Input) async throws -> Operations.AdminTeamsCreate.Output
    /// List all teams on an Enterprise organization
    ///
    /// - Remark: HTTP `POST /admin.teams.list`.
    /// - Remark: Generated from `#/paths//admin.teams.list/post(adminTeamsList)`.
    func adminTeamsList(_ input: Operations.AdminTeamsList.Input) async throws -> Operations.AdminTeamsList.Output
    /// List all of the owners on a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.owners.list`.
    /// - Remark: Generated from `#/paths//admin.teams.owners.list/post(adminTeamsOwnersList)`.
    func adminTeamsOwnersList(_ input: Operations.AdminTeamsOwnersList.Input) async throws -> Operations.AdminTeamsOwnersList.Output
    /// Fetch information about settings in a workspace
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.info`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.info/post(adminTeamsSettingsInfo)`.
    func adminTeamsSettingsInfo(_ input: Operations.AdminTeamsSettingsInfo.Input) async throws -> Operations.AdminTeamsSettingsInfo.Output
    /// Set the default channels of a workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDefaultChannels`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDefaultChannels/post(adminTeamsSettingsSetDefaultChannels)`.
    func adminTeamsSettingsSetDefaultChannels(_ input: Operations.AdminTeamsSettingsSetDefaultChannels.Input) async throws -> Operations.AdminTeamsSettingsSetDefaultChannels.Output
    /// Set the description of a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDescription`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDescription/post(adminTeamsSettingsSetDescription)`.
    func adminTeamsSettingsSetDescription(_ input: Operations.AdminTeamsSettingsSetDescription.Input) async throws -> Operations.AdminTeamsSettingsSetDescription.Output
    /// An API method that allows admins to set the discoverability of a given workspace
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDiscoverability`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDiscoverability/post(adminTeamsSettingsSetDiscoverability)`.
    func adminTeamsSettingsSetDiscoverability(_ input: Operations.AdminTeamsSettingsSetDiscoverability.Input) async throws -> Operations.AdminTeamsSettingsSetDiscoverability.Output
    /// Sets the icon of a workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setIcon`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setIcon/post(adminTeamsSettingsSetIcon)`.
    func adminTeamsSettingsSetIcon(_ input: Operations.AdminTeamsSettingsSetIcon.Input) async throws -> Operations.AdminTeamsSettingsSetIcon.Output
    /// Set the name of a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setName`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setName/post(adminTeamsSettingsSetName)`.
    func adminTeamsSettingsSetName(_ input: Operations.AdminTeamsSettingsSetName.Input) async throws -> Operations.AdminTeamsSettingsSetName.Output
    /// Add an Enterprise user to a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.assign`.
    /// - Remark: Generated from `#/paths//admin.users.assign/post(adminUsersAssign)`.
    func adminUsersAssign(_ input: Operations.AdminUsersAssign.Input) async throws -> Operations.AdminUsersAssign.Output
    /// Invite a user to a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.invite`.
    /// - Remark: Generated from `#/paths//admin.users.invite/post(adminUsersInvite)`.
    func adminUsersInvite(_ input: Operations.AdminUsersInvite.Input) async throws -> Operations.AdminUsersInvite.Output
    /// List users on a workspace
    ///
    /// - Remark: HTTP `POST /admin.users.list`.
    /// - Remark: Generated from `#/paths//admin.users.list/post(adminUsersList)`.
    func adminUsersList(_ input: Operations.AdminUsersList.Input) async throws -> Operations.AdminUsersList.Output
    /// Remove a user from a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.remove`.
    /// - Remark: Generated from `#/paths//admin.users.remove/post(adminUsersRemove)`.
    func adminUsersRemove(_ input: Operations.AdminUsersRemove.Input) async throws -> Operations.AdminUsersRemove.Output
    /// Clear user-specific session settings—the session duration and what happens when the client closes—for a list of users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.clearSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.clearSettings/post(adminUsersSessionClearSettings)`.
    func adminUsersSessionClearSettings(_ input: Operations.AdminUsersSessionClearSettings.Input) async throws -> Operations.AdminUsersSessionClearSettings.Output
    /// Get user-specific session settings—the session duration and what happens when the client closes—given a list of users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.getSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.getSettings/post(adminUsersSessionGetSettings)`.
    func adminUsersSessionGetSettings(_ input: Operations.AdminUsersSessionGetSettings.Input) async throws -> Operations.AdminUsersSessionGetSettings.Output
    /// Revoke a single session for a user. The user will be forced to login to Slack.
    ///
    /// - Remark: HTTP `POST /admin.users.session.invalidate`.
    /// - Remark: Generated from `#/paths//admin.users.session.invalidate/post(adminUsersSessionInvalidate)`.
    func adminUsersSessionInvalidate(_ input: Operations.AdminUsersSessionInvalidate.Input) async throws -> Operations.AdminUsersSessionInvalidate.Output
    /// List active user sessions for an organization
    ///
    /// - Remark: HTTP `POST /admin.users.session.list`.
    /// - Remark: Generated from `#/paths//admin.users.session.list/post(adminUsersSessionList)`.
    func adminUsersSessionList(_ input: Operations.AdminUsersSessionList.Input) async throws -> Operations.AdminUsersSessionList.Output
    /// Wipes all valid sessions on all devices for a given user
    ///
    /// - Remark: HTTP `POST /admin.users.session.reset`.
    /// - Remark: Generated from `#/paths//admin.users.session.reset/post(adminUsersSessionReset)`.
    func adminUsersSessionReset(_ input: Operations.AdminUsersSessionReset.Input) async throws -> Operations.AdminUsersSessionReset.Output
    /// Enqueues an asynchronous job to wipe all valid sessions on all devices for a given list of users
    ///
    /// - Remark: HTTP `POST /admin.users.session.resetBulk`.
    /// - Remark: Generated from `#/paths//admin.users.session.resetBulk/post(adminUsersSessionResetBulk)`.
    func adminUsersSessionResetBulk(_ input: Operations.AdminUsersSessionResetBulk.Input) async throws -> Operations.AdminUsersSessionResetBulk.Output
    /// Configure the user-level session settings—the session duration and what happens when the client closes—for one or more users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.setSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.setSettings/post(adminUsersSessionSetSettings)`.
    func adminUsersSessionSetSettings(_ input: Operations.AdminUsersSessionSetSettings.Input) async throws -> Operations.AdminUsersSessionSetSettings.Output
    /// Set an existing regular user or owner to be a workspace admin.
    ///
    /// - Remark: HTTP `POST /admin.users.setAdmin`.
    /// - Remark: Generated from `#/paths//admin.users.setAdmin/post(adminUsersSetAdmin)`.
    func adminUsersSetAdmin(_ input: Operations.AdminUsersSetAdmin.Input) async throws -> Operations.AdminUsersSetAdmin.Output
    /// Set an expiration for a guest user
    ///
    /// - Remark: HTTP `POST /admin.users.setExpiration`.
    /// - Remark: Generated from `#/paths//admin.users.setExpiration/post(adminUsersSetExpiration)`.
    func adminUsersSetExpiration(_ input: Operations.AdminUsersSetExpiration.Input) async throws -> Operations.AdminUsersSetExpiration.Output
    /// Set an existing regular user or admin to be a workspace owner.
    ///
    /// - Remark: HTTP `POST /admin.users.setOwner`.
    /// - Remark: Generated from `#/paths//admin.users.setOwner/post(adminUsersSetOwner)`.
    func adminUsersSetOwner(_ input: Operations.AdminUsersSetOwner.Input) async throws -> Operations.AdminUsersSetOwner.Output
    /// Set an existing guest user, admin user, or owner to be a regular user.
    ///
    /// - Remark: HTTP `POST /admin.users.setRegular`.
    /// - Remark: Generated from `#/paths//admin.users.setRegular/post(adminUsersSetRegular)`.
    func adminUsersSetRegular(_ input: Operations.AdminUsersSetRegular.Input) async throws -> Operations.AdminUsersSetRegular.Output
    /// Ask Slackbot to send you an export listing all workspace members using unsupported software, presented as a zipped CSV file.
    ///
    /// - Remark: HTTP `POST /admin.users.unsupportedVersions.export`.
    /// - Remark: Generated from `#/paths//admin.users.unsupportedVersions.export/post(adminUsersUnsupportedVersionsExport)`.
    func adminUsersUnsupportedVersionsExport(_ input: Operations.AdminUsersUnsupportedVersionsExport.Input) async throws -> Operations.AdminUsersUnsupportedVersionsExport.Output
    /// Generate a temporary Socket Mode WebSocket URL that your app can connect to in order to receive events and interactive payloads over.
    ///
    /// - Remark: HTTP `POST /apps.connections.open`.
    /// - Remark: Generated from `#/paths//apps.connections.open/post(appsConnectionsOpen)`.
    func appsConnectionsOpen(_ input: Operations.AppsConnectionsOpen.Input) async throws -> Operations.AppsConnectionsOpen.Output
    /// Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
    ///
    /// - Remark: HTTP `POST /apps.event.authorizations.list`.
    /// - Remark: Generated from `#/paths//apps.event.authorizations.list/post(appsEventAuthorizationsList)`.
    func appsEventAuthorizationsList(_ input: Operations.AppsEventAuthorizationsList.Input) async throws -> Operations.AppsEventAuthorizationsList.Output
    /// Create an app from an app manifest.
    ///
    /// - Remark: HTTP `POST /apps.manifest.create`.
    /// - Remark: Generated from `#/paths//apps.manifest.create/post(appsManifestCreate)`.
    func appsManifestCreate(_ input: Operations.AppsManifestCreate.Input) async throws -> Operations.AppsManifestCreate.Output
    /// Permanently deletes an app created through app manifests
    ///
    /// - Remark: HTTP `POST /apps.manifest.delete`.
    /// - Remark: Generated from `#/paths//apps.manifest.delete/post(appsManifestDelete)`.
    func appsManifestDelete(_ input: Operations.AppsManifestDelete.Input) async throws -> Operations.AppsManifestDelete.Output
    /// Export an app manifest from an existing app
    ///
    /// - Remark: HTTP `POST /apps.manifest.export`.
    /// - Remark: Generated from `#/paths//apps.manifest.export/post(appsManifestExport)`.
    func appsManifestExport(_ input: Operations.AppsManifestExport.Input) async throws -> Operations.AppsManifestExport.Output
    /// Update an app from an app manifest
    ///
    /// - Remark: HTTP `POST /apps.manifest.update`.
    /// - Remark: Generated from `#/paths//apps.manifest.update/post(appsManifestUpdate)`.
    func appsManifestUpdate(_ input: Operations.AppsManifestUpdate.Input) async throws -> Operations.AppsManifestUpdate.Output
    /// Validate an app manifest
    ///
    /// - Remark: HTTP `POST /apps.manifest.validate`.
    /// - Remark: Generated from `#/paths//apps.manifest.validate/post(appsManifestValidate)`.
    func appsManifestValidate(_ input: Operations.AppsManifestValidate.Input) async throws -> Operations.AppsManifestValidate.Output
    /// Uninstalls your app from a workspace.
    ///
    /// - Remark: HTTP `POST /apps.uninstall`.
    /// - Remark: Generated from `#/paths//apps.uninstall/post(appsUninstall)`.
    func appsUninstall(_ input: Operations.AppsUninstall.Input) async throws -> Operations.AppsUninstall.Output
    /// Set the status for an AI assistant thread.
    ///
    /// - Remark: HTTP `POST /assistant.threads.setStatus`.
    /// - Remark: Generated from `#/paths//assistant.threads.setStatus/post(assistantThreadsSetStatus)`.
    func assistantThreadsSetStatus(_ input: Operations.AssistantThreadsSetStatus.Input) async throws -> Operations.AssistantThreadsSetStatus.Output
    /// Set suggested prompts for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setSuggestedPrompts`.
    /// - Remark: Generated from `#/paths//assistant.threads.setSuggestedPrompts/post(assistantThreadsSetSuggestedPrompts)`.
    func assistantThreadsSetSuggestedPrompts(_ input: Operations.AssistantThreadsSetSuggestedPrompts.Input) async throws -> Operations.AssistantThreadsSetSuggestedPrompts.Output
    /// Set the title for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setTitle`.
    /// - Remark: Generated from `#/paths//assistant.threads.setTitle/post(assistantThreadsSetTitle)`.
    func assistantThreadsSetTitle(_ input: Operations.AssistantThreadsSetTitle.Input) async throws -> Operations.AssistantThreadsSetTitle.Output
    /// Revokes a token.
    ///
    /// - Remark: HTTP `POST /auth.revoke`.
    /// - Remark: Generated from `#/paths//auth.revoke/post(authRevoke)`.
    func authRevoke(_ input: Operations.AuthRevoke.Input) async throws -> Operations.AuthRevoke.Output
    /// Obtain a full list of workspaces your org-wide app has been approved for.
    ///
    /// - Remark: HTTP `POST /auth.teams.list`.
    /// - Remark: Generated from `#/paths//auth.teams.list/post(authTeamsList)`.
    func authTeamsList(_ input: Operations.AuthTeamsList.Input) async throws -> Operations.AuthTeamsList.Output
    /// Checks authentication & identity.
    ///
    /// - Remark: HTTP `POST /auth.test`.
    /// - Remark: Generated from `#/paths//auth.test/post(authTest)`.
    func authTest(_ input: Operations.AuthTest.Input) async throws -> Operations.AuthTest.Output
    /// Add bookmark to a channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.add`.
    /// - Remark: Generated from `#/paths//bookmarks.add/post(bookmarksAdd)`.
    func bookmarksAdd(_ input: Operations.BookmarksAdd.Input) async throws -> Operations.BookmarksAdd.Output
    /// Edit bookmark.
    ///
    /// - Remark: HTTP `POST /bookmarks.edit`.
    /// - Remark: Generated from `#/paths//bookmarks.edit/post(bookmarksEdit)`.
    func bookmarksEdit(_ input: Operations.BookmarksEdit.Input) async throws -> Operations.BookmarksEdit.Output
    /// List bookmark for the channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.list`.
    /// - Remark: Generated from `#/paths//bookmarks.list/post(bookmarksList)`.
    func bookmarksList(_ input: Operations.BookmarksList.Input) async throws -> Operations.BookmarksList.Output
    /// Remove bookmark from the channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.remove`.
    /// - Remark: Generated from `#/paths//bookmarks.remove/post(bookmarksRemove)`.
    func bookmarksRemove(_ input: Operations.BookmarksRemove.Input) async throws -> Operations.BookmarksRemove.Output
    /// Gets information about a bot user.
    ///
    /// - Remark: HTTP `POST /bots.info`.
    /// - Remark: Generated from `#/paths//bots.info/post(botsInfo)`.
    func botsInfo(_ input: Operations.BotsInfo.Input) async throws -> Operations.BotsInfo.Output
    /// Remove access to a canvas for specified entities
    ///
    /// - Remark: HTTP `POST /canvases.access.delete`.
    /// - Remark: Generated from `#/paths//canvases.access.delete/post(canvasesAccessDelete)`.
    func canvasesAccessDelete(_ input: Operations.CanvasesAccessDelete.Input) async throws -> Operations.CanvasesAccessDelete.Output
    /// Sets the access level to a canvas for specified entities
    ///
    /// - Remark: HTTP `POST /canvases.access.set`.
    /// - Remark: Generated from `#/paths//canvases.access.set/post(canvasesAccessSet)`.
    func canvasesAccessSet(_ input: Operations.CanvasesAccessSet.Input) async throws -> Operations.CanvasesAccessSet.Output
    /// Create canvas for a user
    ///
    /// - Remark: HTTP `POST /canvases.create`.
    /// - Remark: Generated from `#/paths//canvases.create/post(canvasesCreate)`.
    func canvasesCreate(_ input: Operations.CanvasesCreate.Input) async throws -> Operations.CanvasesCreate.Output
    /// Deletes a canvas
    ///
    /// - Remark: HTTP `POST /canvases.delete`.
    /// - Remark: Generated from `#/paths//canvases.delete/post(canvasesDelete)`.
    func canvasesDelete(_ input: Operations.CanvasesDelete.Input) async throws -> Operations.CanvasesDelete.Output
    /// Update an existing canvas
    ///
    /// - Remark: HTTP `POST /canvases.edit`.
    /// - Remark: Generated from `#/paths//canvases.edit/post(canvasesEdit)`.
    func canvasesEdit(_ input: Operations.CanvasesEdit.Input) async throws -> Operations.CanvasesEdit.Output
    /// Find sections matching the provided criteria
    ///
    /// - Remark: HTTP `POST /canvases.sections.lookup`.
    /// - Remark: Generated from `#/paths//canvases.sections.lookup/post(canvasesSectionsLookup)`.
    func canvasesSectionsLookup(_ input: Operations.CanvasesSectionsLookup.Input) async throws -> Operations.CanvasesSectionsLookup.Output
    /// Deletes a message.
    ///
    /// - Remark: HTTP `POST /chat.delete`.
    /// - Remark: Generated from `#/paths//chat.delete/post(chatDelete)`.
    func chatDelete(_ input: Operations.ChatDelete.Input) async throws -> Operations.ChatDelete.Output
    /// Deletes a pending scheduled message from the queue.
    ///
    /// - Remark: HTTP `POST /chat.deleteScheduledMessage`.
    /// - Remark: Generated from `#/paths//chat.deleteScheduledMessage/post(chatDeleteScheduledMessage)`.
    func chatDeleteScheduledMessage(_ input: Operations.ChatDeleteScheduledMessage.Input) async throws -> Operations.ChatDeleteScheduledMessage.Output
    /// Retrieve a permalink URL for a specific extant message
    ///
    /// - Remark: HTTP `POST /chat.getPermalink`.
    /// - Remark: Generated from `#/paths//chat.getPermalink/post(chatGetPermalink)`.
    func chatGetPermalink(_ input: Operations.ChatGetPermalink.Input) async throws -> Operations.ChatGetPermalink.Output
    /// Share a me message into a channel.
    ///
    /// - Remark: HTTP `POST /chat.meMessage`.
    /// - Remark: Generated from `#/paths//chat.meMessage/post(chatMeMessage)`.
    func chatMeMessage(_ input: Operations.ChatMeMessage.Input) async throws -> Operations.ChatMeMessage.Output
    /// Sends an ephemeral message to a user in a channel.
    ///
    /// - Remark: HTTP `POST /chat.postEphemeral`.
    /// - Remark: Generated from `#/paths//chat.postEphemeral/post(chatPostEphemeral)`.
    func chatPostEphemeral(_ input: Operations.ChatPostEphemeral.Input) async throws -> Operations.ChatPostEphemeral.Output
    /// Sends a message to a channel.
    ///
    /// - Remark: HTTP `POST /chat.postMessage`.
    /// - Remark: Generated from `#/paths//chat.postMessage/post(chatPostMessage)`.
    func chatPostMessage(_ input: Operations.ChatPostMessage.Input) async throws -> Operations.ChatPostMessage.Output
    /// Schedules a message to be sent to a channel.
    ///
    /// - Remark: HTTP `POST /chat.scheduleMessage`.
    /// - Remark: Generated from `#/paths//chat.scheduleMessage/post(chatScheduleMessage)`.
    func chatScheduleMessage(_ input: Operations.ChatScheduleMessage.Input) async throws -> Operations.ChatScheduleMessage.Output
    /// Returns a list of scheduled messages.
    ///
    /// - Remark: HTTP `POST /chat.scheduledMessages.list`.
    /// - Remark: Generated from `#/paths//chat.scheduledMessages.list/post(chatScheduledMessagesList)`.
    func chatScheduledMessagesList(_ input: Operations.ChatScheduledMessagesList.Input) async throws -> Operations.ChatScheduledMessagesList.Output
    /// Provide custom unfurl behavior for user-posted URLs
    ///
    /// - Remark: HTTP `POST /chat.unfurl`.
    /// - Remark: Generated from `#/paths//chat.unfurl/post(chatUnfurl)`.
    func chatUnfurl(_ input: Operations.ChatUnfurl.Input) async throws -> Operations.ChatUnfurl.Output
    /// Updates a message.
    ///
    /// - Remark: HTTP `POST /chat.update`.
    /// - Remark: Generated from `#/paths//chat.update/post(chatUpdate)`.
    func chatUpdate(_ input: Operations.ChatUpdate.Input) async throws -> Operations.ChatUpdate.Output
    /// Accepts an invitation to a Slack Connect channel.
    ///
    /// - Remark: HTTP `POST /conversations.acceptSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.acceptSharedInvite/post(conversationsAcceptSharedInvite)`.
    func conversationsAcceptSharedInvite(_ input: Operations.ConversationsAcceptSharedInvite.Input) async throws -> Operations.ConversationsAcceptSharedInvite.Output
    /// Approves an invitation to a Slack Connect channel
    ///
    /// - Remark: HTTP `POST /conversations.approveSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.approveSharedInvite/post(conversationsApproveSharedInvite)`.
    func conversationsApproveSharedInvite(_ input: Operations.ConversationsApproveSharedInvite.Input) async throws -> Operations.ConversationsApproveSharedInvite.Output
    /// Archives a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.archive`.
    /// - Remark: Generated from `#/paths//conversations.archive/post(conversationsArchive)`.
    func conversationsArchive(_ input: Operations.ConversationsArchive.Input) async throws -> Operations.ConversationsArchive.Output
    /// Create a channel canvas for a channel
    ///
    /// - Remark: HTTP `POST /conversations.canvases.create`.
    /// - Remark: Generated from `#/paths//conversations.canvases.create/post(conversationsCanvasesCreate)`.
    func conversationsCanvasesCreate(_ input: Operations.ConversationsCanvasesCreate.Input) async throws -> Operations.ConversationsCanvasesCreate.Output
    /// Closes a direct message or multi-person direct message.
    ///
    /// - Remark: HTTP `POST /conversations.close`.
    /// - Remark: Generated from `#/paths//conversations.close/post(conversationsClose)`.
    func conversationsClose(_ input: Operations.ConversationsClose.Input) async throws -> Operations.ConversationsClose.Output
    /// Initiates a public or private channel-based conversation
    ///
    /// - Remark: HTTP `POST /conversations.create`.
    /// - Remark: Generated from `#/paths//conversations.create/post(conversationsCreate)`.
    func conversationsCreate(_ input: Operations.ConversationsCreate.Input) async throws -> Operations.ConversationsCreate.Output
    /// Declines a Slack Connect channel invite.
    ///
    /// - Remark: HTTP `POST /conversations.declineSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.declineSharedInvite/post(conversationsDeclineSharedInvite)`.
    func conversationsDeclineSharedInvite(_ input: Operations.ConversationsDeclineSharedInvite.Input) async throws -> Operations.ConversationsDeclineSharedInvite.Output
    /// Upgrade or downgrade Slack Connect channel permissions between 'can post only' and 'can post and invite'.
    ///
    /// - Remark: HTTP `POST /conversations.externalInvitePermissions.set`.
    /// - Remark: Generated from `#/paths//conversations.externalInvitePermissions.set/post(conversationsExternalInvitePermissionsSet)`.
    func conversationsExternalInvitePermissionsSet(_ input: Operations.ConversationsExternalInvitePermissionsSet.Input) async throws -> Operations.ConversationsExternalInvitePermissionsSet.Output
    /// Fetches a conversation's history of messages and events.
    ///
    /// - Remark: HTTP `POST /conversations.history`.
    /// - Remark: Generated from `#/paths//conversations.history/post(conversationsHistory)`.
    func conversationsHistory(_ input: Operations.ConversationsHistory.Input) async throws -> Operations.ConversationsHistory.Output
    /// Retrieve information about a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.info`.
    /// - Remark: Generated from `#/paths//conversations.info/post(conversationsInfo)`.
    func conversationsInfo(_ input: Operations.ConversationsInfo.Input) async throws -> Operations.ConversationsInfo.Output
    /// Invites users to a channel.
    ///
    /// - Remark: HTTP `POST /conversations.invite`.
    /// - Remark: Generated from `#/paths//conversations.invite/post(conversationsInvite)`.
    func conversationsInvite(_ input: Operations.ConversationsInvite.Input) async throws -> Operations.ConversationsInvite.Output
    /// Sends an invitation to a Slack Connect channel
    ///
    /// - Remark: HTTP `POST /conversations.inviteShared`.
    /// - Remark: Generated from `#/paths//conversations.inviteShared/post(conversationsInviteShared)`.
    func conversationsInviteShared(_ input: Operations.ConversationsInviteShared.Input) async throws -> Operations.ConversationsInviteShared.Output
    /// Joins an existing conversation.
    ///
    /// - Remark: HTTP `POST /conversations.join`.
    /// - Remark: Generated from `#/paths//conversations.join/post(conversationsJoin)`.
    func conversationsJoin(_ input: Operations.ConversationsJoin.Input) async throws -> Operations.ConversationsJoin.Output
    /// Removes a user from a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.kick`.
    /// - Remark: Generated from `#/paths//conversations.kick/post(conversationsKick)`.
    func conversationsKick(_ input: Operations.ConversationsKick.Input) async throws -> Operations.ConversationsKick.Output
    /// Leaves a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.leave`.
    /// - Remark: Generated from `#/paths//conversations.leave/post(conversationsLeave)`.
    func conversationsLeave(_ input: Operations.ConversationsLeave.Input) async throws -> Operations.ConversationsLeave.Output
    /// Lists all channels in a Slack team.
    ///
    /// - Remark: HTTP `POST /conversations.list`.
    /// - Remark: Generated from `#/paths//conversations.list/post(conversationsList)`.
    func conversationsList(_ input: Operations.ConversationsList.Input) async throws -> Operations.ConversationsList.Output
    /// Lists shared channel invites that have been generated or received but have not been approved by all parties
    ///
    /// - Remark: HTTP `POST /conversations.listConnectInvites`.
    /// - Remark: Generated from `#/paths//conversations.listConnectInvites/post(conversationsListConnectInvites)`.
    func conversationsListConnectInvites(_ input: Operations.ConversationsListConnectInvites.Input) async throws -> Operations.ConversationsListConnectInvites.Output
    /// Sets the read cursor in a channel.
    ///
    /// - Remark: HTTP `POST /conversations.mark`.
    /// - Remark: Generated from `#/paths//conversations.mark/post(conversationsMark)`.
    func conversationsMark(_ input: Operations.ConversationsMark.Input) async throws -> Operations.ConversationsMark.Output
    /// Retrieve members of a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.members`.
    /// - Remark: Generated from `#/paths//conversations.members/post(conversationsMembers)`.
    func conversationsMembers(_ input: Operations.ConversationsMembers.Input) async throws -> Operations.ConversationsMembers.Output
    /// Opens or resumes a direct message or multi-person direct message.
    ///
    /// - Remark: HTTP `POST /conversations.open`.
    /// - Remark: Generated from `#/paths//conversations.open/post(conversationsOpen)`.
    func conversationsOpen(_ input: Operations.ConversationsOpen.Input) async throws -> Operations.ConversationsOpen.Output
    /// Renames a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.rename`.
    /// - Remark: Generated from `#/paths//conversations.rename/post(conversationsRename)`.
    func conversationsRename(_ input: Operations.ConversationsRename.Input) async throws -> Operations.ConversationsRename.Output
    /// Retrieve a thread of messages posted to a conversation
    ///
    /// - Remark: HTTP `POST /conversations.replies`.
    /// - Remark: Generated from `#/paths//conversations.replies/post(conversationsReplies)`.
    func conversationsReplies(_ input: Operations.ConversationsReplies.Input) async throws -> Operations.ConversationsReplies.Output
    /// Approves a request to add an external user to a channel and sends them a Slack Connect invite
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.approve`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.approve/post(conversationsRequestSharedInviteApprove)`.
    func conversationsRequestSharedInviteApprove(_ input: Operations.ConversationsRequestSharedInviteApprove.Input) async throws -> Operations.ConversationsRequestSharedInviteApprove.Output
    /// Denies a request to invite an external user to a channel
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.deny`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.deny/post(conversationsRequestSharedInviteDeny)`.
    func conversationsRequestSharedInviteDeny(_ input: Operations.ConversationsRequestSharedInviteDeny.Input) async throws -> Operations.ConversationsRequestSharedInviteDeny.Output
    /// Lists requests to add external users to channels with ability to filter.
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.list`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.list/post(conversationsRequestSharedInviteList)`.
    func conversationsRequestSharedInviteList(_ input: Operations.ConversationsRequestSharedInviteList.Input) async throws -> Operations.ConversationsRequestSharedInviteList.Output
    /// Sets the channel description.
    ///
    /// - Remark: HTTP `POST /conversations.setPurpose`.
    /// - Remark: Generated from `#/paths//conversations.setPurpose/post(conversationsSetPurpose)`.
    func conversationsSetPurpose(_ input: Operations.ConversationsSetPurpose.Input) async throws -> Operations.ConversationsSetPurpose.Output
    /// Sets the topic for a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.setTopic`.
    /// - Remark: Generated from `#/paths//conversations.setTopic/post(conversationsSetTopic)`.
    func conversationsSetTopic(_ input: Operations.ConversationsSetTopic.Input) async throws -> Operations.ConversationsSetTopic.Output
    /// Reverses conversation archival.
    ///
    /// - Remark: HTTP `POST /conversations.unarchive`.
    /// - Remark: Generated from `#/paths//conversations.unarchive/post(conversationsUnarchive)`.
    func conversationsUnarchive(_ input: Operations.ConversationsUnarchive.Input) async throws -> Operations.ConversationsUnarchive.Output
    /// Ends the current user's Do Not Disturb session immediately.
    ///
    /// - Remark: HTTP `POST /dnd.endDnd`.
    /// - Remark: Generated from `#/paths//dnd.endDnd/post(dndEndDnd)`.
    func dndEndDnd(_ input: Operations.DndEndDnd.Input) async throws -> Operations.DndEndDnd.Output
    /// Ends the current user's snooze mode immediately.
    ///
    /// - Remark: HTTP `POST /dnd.endSnooze`.
    /// - Remark: Generated from `#/paths//dnd.endSnooze/post(dndEndSnooze)`.
    func dndEndSnooze(_ input: Operations.DndEndSnooze.Input) async throws -> Operations.DndEndSnooze.Output
    /// Retrieves a user's current Do Not Disturb status.
    ///
    /// - Remark: HTTP `POST /dnd.info`.
    /// - Remark: Generated from `#/paths//dnd.info/post(dndInfo)`.
    func dndInfo(_ input: Operations.DndInfo.Input) async throws -> Operations.DndInfo.Output
    /// Turns on Do Not Disturb mode for the current user, or changes its duration.
    ///
    /// - Remark: HTTP `POST /dnd.setSnooze`.
    /// - Remark: Generated from `#/paths//dnd.setSnooze/post(dndSetSnooze)`.
    func dndSetSnooze(_ input: Operations.DndSetSnooze.Input) async throws -> Operations.DndSetSnooze.Output
    /// Retrieves the Do Not Disturb status for up to 50 users on a team.
    ///
    /// - Remark: HTTP `POST /dnd.teamInfo`.
    /// - Remark: Generated from `#/paths//dnd.teamInfo/post(dndTeamInfo)`.
    func dndTeamInfo(_ input: Operations.DndTeamInfo.Input) async throws -> Operations.DndTeamInfo.Output
    /// Lists custom emoji for a team.
    ///
    /// - Remark: HTTP `POST /emoji.list`.
    /// - Remark: Generated from `#/paths//emoji.list/post(emojiList)`.
    func emojiList(_ input: Operations.EmojiList.Input) async throws -> Operations.EmojiList.Output
    /// Finishes an upload started with files.getUploadURLExternal
    ///
    /// - Remark: HTTP `POST /files.completeUploadExternal`.
    /// - Remark: Generated from `#/paths//files.completeUploadExternal/post(filesCompleteUploadExternal)`.
    func filesCompleteUploadExternal(_ input: Operations.FilesCompleteUploadExternal.Input) async throws -> Operations.FilesCompleteUploadExternal.Output
    /// Deletes a file.
    ///
    /// - Remark: HTTP `POST /files.delete`.
    /// - Remark: Generated from `#/paths//files.delete/post(filesDelete)`.
    func filesDelete(_ input: Operations.FilesDelete.Input) async throws -> Operations.FilesDelete.Output
    /// Gets a URL for an edge external file upload
    ///
    /// - Remark: HTTP `POST /files.getUploadURLExternal`.
    /// - Remark: Generated from `#/paths//files.getUploadURLExternal/post(filesGetUploadURLExternal)`.
    func filesGetUploadURLExternal(_ input: Operations.FilesGetUploadURLExternal.Input) async throws -> Operations.FilesGetUploadURLExternal.Output
    /// Gets information about a file.
    ///
    /// - Remark: HTTP `POST /files.info`.
    /// - Remark: Generated from `#/paths//files.info/post(filesInfo)`.
    func filesInfo(_ input: Operations.FilesInfo.Input) async throws -> Operations.FilesInfo.Output
    /// List for a team, in a channel, or from a user with applied filters.
    ///
    /// - Remark: HTTP `POST /files.list`.
    /// - Remark: Generated from `#/paths//files.list/post(filesList)`.
    func filesList(_ input: Operations.FilesList.Input) async throws -> Operations.FilesList.Output
    /// Adds a file from a remote service
    ///
    /// - Remark: HTTP `POST /files.remote.add`.
    /// - Remark: Generated from `#/paths//files.remote.add/post(filesRemoteAdd)`.
    func filesRemoteAdd(_ input: Operations.FilesRemoteAdd.Input) async throws -> Operations.FilesRemoteAdd.Output
    /// Retrieve information about a remote file added to Slack
    ///
    /// - Remark: HTTP `POST /files.remote.info`.
    /// - Remark: Generated from `#/paths//files.remote.info/post(filesRemoteInfo)`.
    func filesRemoteInfo(_ input: Operations.FilesRemoteInfo.Input) async throws -> Operations.FilesRemoteInfo.Output
    /// Retrieve information about a remote file added to Slack
    ///
    /// - Remark: HTTP `POST /files.remote.list`.
    /// - Remark: Generated from `#/paths//files.remote.list/post(filesRemoteList)`.
    func filesRemoteList(_ input: Operations.FilesRemoteList.Input) async throws -> Operations.FilesRemoteList.Output
    /// Remove a remote file.
    ///
    /// - Remark: HTTP `POST /files.remote.remove`.
    /// - Remark: Generated from `#/paths//files.remote.remove/post(filesRemoteRemove)`.
    func filesRemoteRemove(_ input: Operations.FilesRemoteRemove.Input) async throws -> Operations.FilesRemoteRemove.Output
    /// Share a remote file into a channel.
    ///
    /// - Remark: HTTP `POST /files.remote.share`.
    /// - Remark: Generated from `#/paths//files.remote.share/post(filesRemoteShare)`.
    func filesRemoteShare(_ input: Operations.FilesRemoteShare.Input) async throws -> Operations.FilesRemoteShare.Output
    /// Updates an existing remote file.
    ///
    /// - Remark: HTTP `POST /files.remote.update`.
    /// - Remark: Generated from `#/paths//files.remote.update/post(filesRemoteUpdate)`.
    func filesRemoteUpdate(_ input: Operations.FilesRemoteUpdate.Input) async throws -> Operations.FilesRemoteUpdate.Output
    /// Revokes public/external sharing access for a file
    ///
    /// - Remark: HTTP `POST /files.revokePublicURL`.
    /// - Remark: Generated from `#/paths//files.revokePublicURL/post(filesRevokePublicURL)`.
    func filesRevokePublicURL(_ input: Operations.FilesRevokePublicURL.Input) async throws -> Operations.FilesRevokePublicURL.Output
    /// Enables a file for public/external sharing.
    ///
    /// - Remark: HTTP `POST /files.sharedPublicURL`.
    /// - Remark: Generated from `#/paths//files.sharedPublicURL/post(filesSharedPublicURL)`.
    func filesSharedPublicURL(_ input: Operations.FilesSharedPublicURL.Input) async throws -> Operations.FilesSharedPublicURL.Output
    /// Uploads or creates a file.
    ///
    /// - Remark: HTTP `POST /files.upload`.
    /// - Remark: Generated from `#/paths//files.upload/post(filesUpload)`.
    func filesUpload(_ input: Operations.FilesUpload.Input) async throws -> Operations.FilesUpload.Output
    /// Signal that a function failed to complete
    ///
    /// - Remark: HTTP `POST /functions.completeError`.
    /// - Remark: Generated from `#/paths//functions.completeError/post(functionsCompleteError)`.
    func functionsCompleteError(_ input: Operations.FunctionsCompleteError.Input) async throws -> Operations.FunctionsCompleteError.Output
    /// Signal the successful completion of a function
    ///
    /// - Remark: HTTP `POST /functions.completeSuccess`.
    /// - Remark: Generated from `#/paths//functions.completeSuccess/post(functionsCompleteSuccess)`.
    func functionsCompleteSuccess(_ input: Operations.FunctionsCompleteSuccess.Input) async throws -> Operations.FunctionsCompleteSuccess.Output
    /// For Enterprise Grid workspaces, map local user IDs to global user IDs
    ///
    /// - Remark: HTTP `POST /migration.exchange`.
    /// - Remark: Generated from `#/paths//migration.exchange/post(migrationExchange)`.
    func migrationExchange(_ input: Operations.MigrationExchange.Input) async throws -> Operations.MigrationExchange.Output
    /// Exchanges a temporary OAuth verifier code for an access token.
    ///
    /// - Remark: HTTP `POST /oauth.v2.access`.
    /// - Remark: Generated from `#/paths//oauth.v2.access/post(oauthV2Access)`.
    func oauthV2Access(_ input: Operations.OauthV2Access.Input) async throws -> Operations.OauthV2Access.Output
    /// Exchanges a legacy access token for a new expiring access token and refresh token
    ///
    /// - Remark: HTTP `POST /oauth.v2.exchange`.
    /// - Remark: Generated from `#/paths//oauth.v2.exchange/post(oauthV2Exchange)`.
    func oauthV2Exchange(_ input: Operations.OauthV2Exchange.Input) async throws -> Operations.OauthV2Exchange.Output
    /// Exchanges a temporary OAuth verifier code for an access token for Sign in with Slack.
    ///
    /// - Remark: HTTP `POST /openid.connect.token`.
    /// - Remark: Generated from `#/paths//openid.connect.token/post(openidConnectToken)`.
    func openidConnectToken(_ input: Operations.OpenidConnectToken.Input) async throws -> Operations.OpenidConnectToken.Output
    /// Get the identity of a user who has authorized Sign in with Slack.
    ///
    /// - Remark: HTTP `POST /openid.connect.userInfo`.
    /// - Remark: Generated from `#/paths//openid.connect.userInfo/post(openidConnectUserInfo)`.
    func openidConnectUserInfo(_ input: Operations.OpenidConnectUserInfo.Input) async throws -> Operations.OpenidConnectUserInfo.Output
    /// Pins an item to a channel.
    ///
    /// - Remark: HTTP `POST /pins.add`.
    /// - Remark: Generated from `#/paths//pins.add/post(pinsAdd)`.
    func pinsAdd(_ input: Operations.PinsAdd.Input) async throws -> Operations.PinsAdd.Output
    /// Lists items pinned to a channel.
    ///
    /// - Remark: HTTP `POST /pins.list`.
    /// - Remark: Generated from `#/paths//pins.list/post(pinsList)`.
    func pinsList(_ input: Operations.PinsList.Input) async throws -> Operations.PinsList.Output
    /// Un-pins an item from a channel.
    ///
    /// - Remark: HTTP `POST /pins.remove`.
    /// - Remark: Generated from `#/paths//pins.remove/post(pinsRemove)`.
    func pinsRemove(_ input: Operations.PinsRemove.Input) async throws -> Operations.PinsRemove.Output
    /// Adds a reaction to an item.
    ///
    /// - Remark: HTTP `POST /reactions.add`.
    /// - Remark: Generated from `#/paths//reactions.add/post(reactionsAdd)`.
    func reactionsAdd(_ input: Operations.ReactionsAdd.Input) async throws -> Operations.ReactionsAdd.Output
    /// Gets reactions for an item.
    ///
    /// - Remark: HTTP `POST /reactions.get`.
    /// - Remark: Generated from `#/paths//reactions.get/post(reactionsGet)`.
    func reactionsGet(_ input: Operations.ReactionsGet.Input) async throws -> Operations.ReactionsGet.Output
    /// Lists reactions made by a user.
    ///
    /// - Remark: HTTP `POST /reactions.list`.
    /// - Remark: Generated from `#/paths//reactions.list/post(reactionsList)`.
    func reactionsList(_ input: Operations.ReactionsList.Input) async throws -> Operations.ReactionsList.Output
    /// Removes a reaction from an item.
    ///
    /// - Remark: HTTP `POST /reactions.remove`.
    /// - Remark: Generated from `#/paths//reactions.remove/post(reactionsRemove)`.
    func reactionsRemove(_ input: Operations.ReactionsRemove.Input) async throws -> Operations.ReactionsRemove.Output
    /// Creates a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.add`.
    /// - Remark: Generated from `#/paths//reminders.add/post(remindersAdd)`.
    func remindersAdd(_ input: Operations.RemindersAdd.Input) async throws -> Operations.RemindersAdd.Output
    /// Marks a reminder as complete.
    ///
    /// - Remark: HTTP `POST /reminders.complete`.
    /// - Remark: Generated from `#/paths//reminders.complete/post(remindersComplete)`.
    func remindersComplete(_ input: Operations.RemindersComplete.Input) async throws -> Operations.RemindersComplete.Output
    /// Deletes a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.delete`.
    /// - Remark: Generated from `#/paths//reminders.delete/post(remindersDelete)`.
    func remindersDelete(_ input: Operations.RemindersDelete.Input) async throws -> Operations.RemindersDelete.Output
    /// Gets information about a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.info`.
    /// - Remark: Generated from `#/paths//reminders.info/post(remindersInfo)`.
    func remindersInfo(_ input: Operations.RemindersInfo.Input) async throws -> Operations.RemindersInfo.Output
    /// Lists all reminders created by or for a given user.
    ///
    /// - Remark: HTTP `POST /reminders.list`.
    /// - Remark: Generated from `#/paths//reminders.list/post(remindersList)`.
    func remindersList(_ input: Operations.RemindersList.Input) async throws -> Operations.RemindersList.Output
    /// Starts a Real Time Messaging session.
    ///
    /// - Remark: HTTP `POST /rtm.connect`.
    /// - Remark: Generated from `#/paths//rtm.connect/post(rtmConnect)`.
    func rtmConnect(_ input: Operations.RtmConnect.Input) async throws -> Operations.RtmConnect.Output
    /// Searches for messages and files matching a query.
    ///
    /// - Remark: HTTP `POST /search.all`.
    /// - Remark: Generated from `#/paths//search.all/post(searchAll)`.
    func searchAll(_ input: Operations.SearchAll.Input) async throws -> Operations.SearchAll.Output
    /// Searches for files matching a query.
    ///
    /// - Remark: HTTP `POST /search.files`.
    /// - Remark: Generated from `#/paths//search.files/post(searchFiles)`.
    func searchFiles(_ input: Operations.SearchFiles.Input) async throws -> Operations.SearchFiles.Output
    /// Searches for messages matching a query.
    ///
    /// - Remark: HTTP `POST /search.messages`.
    /// - Remark: Generated from `#/paths//search.messages/post(searchMessages)`.
    func searchMessages(_ input: Operations.SearchMessages.Input) async throws -> Operations.SearchMessages.Output
    /// Save an item for later. Formerly known as adding a star.
    ///
    /// - Remark: HTTP `POST /stars.add`.
    /// - Remark: Generated from `#/paths//stars.add/post(starsAdd)`.
    func starsAdd(_ input: Operations.StarsAdd.Input) async throws -> Operations.StarsAdd.Output
    /// Listed a user's saved items, formerly known as stars.
    ///
    /// - Remark: HTTP `POST /stars.list`.
    /// - Remark: Generated from `#/paths//stars.list/post(starsList)`.
    func starsList(_ input: Operations.StarsList.Input) async throws -> Operations.StarsList.Output
    /// Removes a saved item (star) from an item.
    ///
    /// - Remark: HTTP `POST /stars.remove`.
    /// - Remark: Generated from `#/paths//stars.remove/post(starsRemove)`.
    func starsRemove(_ input: Operations.StarsRemove.Input) async throws -> Operations.StarsRemove.Output
    /// Gets the access logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.accessLogs`.
    /// - Remark: Generated from `#/paths//team.accessLogs/post(teamAccessLogs)`.
    func teamAccessLogs(_ input: Operations.TeamAccessLogs.Input) async throws -> Operations.TeamAccessLogs.Output
    /// Gets billable users information for the current team.
    ///
    /// - Remark: HTTP `POST /team.billableInfo`.
    /// - Remark: Generated from `#/paths//team.billableInfo/post(teamBillableInfo)`.
    func teamBillableInfo(_ input: Operations.TeamBillableInfo.Input) async throws -> Operations.TeamBillableInfo.Output
    /// Reads a workspace's billing plan information.
    ///
    /// - Remark: HTTP `POST /team.billing.info`.
    /// - Remark: Generated from `#/paths//team.billing.info/post(teamBillingInfo)`.
    func teamBillingInfo(_ input: Operations.TeamBillingInfo.Input) async throws -> Operations.TeamBillingInfo.Output
    /// Disconnect an external organization.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.disconnect`.
    /// - Remark: Generated from `#/paths//team.externalTeams.disconnect/post(teamExternalTeamsDisconnect)`.
    func teamExternalTeamsDisconnect(_ input: Operations.TeamExternalTeamsDisconnect.Input) async throws -> Operations.TeamExternalTeamsDisconnect.Output
    /// Returns a list of all the external teams connected and details about the connection.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.list`.
    /// - Remark: Generated from `#/paths//team.externalTeams.list/post(teamExternalTeamsList)`.
    func teamExternalTeamsList(_ input: Operations.TeamExternalTeamsList.Input) async throws -> Operations.TeamExternalTeamsList.Output
    /// Gets information about the current team.
    ///
    /// - Remark: HTTP `POST /team.info`.
    /// - Remark: Generated from `#/paths//team.info/post(teamInfo)`.
    func teamInfo(_ input: Operations.TeamInfo.Input) async throws -> Operations.TeamInfo.Output
    /// Gets the integration logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.integrationLogs`.
    /// - Remark: Generated from `#/paths//team.integrationLogs/post(teamIntegrationLogs)`.
    func teamIntegrationLogs(_ input: Operations.TeamIntegrationLogs.Input) async throws -> Operations.TeamIntegrationLogs.Output
    /// Retrieve a list of a workspace's team preferences.
    ///
    /// - Remark: HTTP `POST /team.preferences.list`.
    /// - Remark: Generated from `#/paths//team.preferences.list/post(teamPreferencesList)`.
    func teamPreferencesList(_ input: Operations.TeamPreferencesList.Input) async throws -> Operations.TeamPreferencesList.Output
    /// Retrieve a team's profile.
    ///
    /// - Remark: HTTP `POST /team.profile.get`.
    /// - Remark: Generated from `#/paths//team.profile.get/post(teamProfileGet)`.
    func teamProfileGet(_ input: Operations.TeamProfileGet.Input) async throws -> Operations.TeamProfileGet.Output
    /// Exchanges a refresh token for a new app configuration token.
    ///
    /// - Remark: HTTP `POST /tooling.tokens.rotate`.
    /// - Remark: Generated from `#/paths//tooling.tokens.rotate/post(toolingTokensRotate)`.
    func toolingTokensRotate(_ input: Operations.ToolingTokensRotate.Input) async throws -> Operations.ToolingTokensRotate.Output
    /// List conversations the calling user may access.
    ///
    /// - Remark: HTTP `POST /users.conversations`.
    /// - Remark: Generated from `#/paths//users.conversations/post(usersConversations)`.
    func usersConversations(_ input: Operations.UsersConversations.Input) async throws -> Operations.UsersConversations.Output
    /// Delete the user profile photo
    ///
    /// - Remark: HTTP `POST /users.deletePhoto`.
    /// - Remark: Generated from `#/paths//users.deletePhoto/post(usersDeletePhoto)`.
    func usersDeletePhoto(_ input: Operations.UsersDeletePhoto.Input) async throws -> Operations.UsersDeletePhoto.Output
    /// Look up an email address to see if someone is discoverable on Slack
    ///
    /// - Remark: HTTP `POST /users.discoverableContacts.lookup`.
    /// - Remark: Generated from `#/paths//users.discoverableContacts.lookup/post(usersDiscoverableContactsLookup)`.
    func usersDiscoverableContactsLookup(_ input: Operations.UsersDiscoverableContactsLookup.Input) async throws -> Operations.UsersDiscoverableContactsLookup.Output
    /// Gets user presence information.
    ///
    /// - Remark: HTTP `POST /users.getPresence`.
    /// - Remark: Generated from `#/paths//users.getPresence/post(usersGetPresence)`.
    func usersGetPresence(_ input: Operations.UsersGetPresence.Input) async throws -> Operations.UsersGetPresence.Output
    /// Get a user's identity.
    ///
    /// - Remark: HTTP `POST /users.identity`.
    /// - Remark: Generated from `#/paths//users.identity/post(usersIdentity)`.
    func usersIdentity(_ input: Operations.UsersIdentity.Input) async throws -> Operations.UsersIdentity.Output
    /// Gets information about a user.
    ///
    /// - Remark: HTTP `POST /users.info`.
    /// - Remark: Generated from `#/paths//users.info/post(usersInfo)`.
    func usersInfo(_ input: Operations.UsersInfo.Input) async throws -> Operations.UsersInfo.Output
    /// Lists all users in a Slack team.
    ///
    /// - Remark: HTTP `POST /users.list`.
    /// - Remark: Generated from `#/paths//users.list/post(usersList)`.
    func usersList(_ input: Operations.UsersList.Input) async throws -> Operations.UsersList.Output
    /// Find a user with an email address.
    ///
    /// - Remark: HTTP `POST /users.lookupByEmail`.
    /// - Remark: Generated from `#/paths//users.lookupByEmail/post(usersLookupByEmail)`.
    func usersLookupByEmail(_ input: Operations.UsersLookupByEmail.Input) async throws -> Operations.UsersLookupByEmail.Output
    /// Retrieve a user's profile information, including their custom status.
    ///
    /// - Remark: HTTP `POST /users.profile.get`.
    /// - Remark: Generated from `#/paths//users.profile.get/post(usersProfileGet)`.
    func usersProfileGet(_ input: Operations.UsersProfileGet.Input) async throws -> Operations.UsersProfileGet.Output
    /// Set a user's profile information, including custom status.
    ///
    /// - Remark: HTTP `POST /users.profile.set`.
    /// - Remark: Generated from `#/paths//users.profile.set/post(usersProfileSet)`.
    func usersProfileSet(_ input: Operations.UsersProfileSet.Input) async throws -> Operations.UsersProfileSet.Output
    /// Marked a user as active. Deprecated and non-functional.
    ///
    /// - Remark: HTTP `POST /users.setActive`.
    /// - Remark: Generated from `#/paths//users.setActive/post(usersSetActive)`.
    func usersSetActive(_ input: Operations.UsersSetActive.Input) async throws -> Operations.UsersSetActive.Output
    /// Set the user profile photo
    ///
    /// - Remark: HTTP `POST /users.setPhoto`.
    /// - Remark: Generated from `#/paths//users.setPhoto/post(usersSetPhoto)`.
    func usersSetPhoto(_ input: Operations.UsersSetPhoto.Input) async throws -> Operations.UsersSetPhoto.Output
    /// Manually sets user presence.
    ///
    /// - Remark: HTTP `POST /users.setPresence`.
    /// - Remark: Generated from `#/paths//users.setPresence/post(usersSetPresence)`.
    func usersSetPresence(_ input: Operations.UsersSetPresence.Input) async throws -> Operations.UsersSetPresence.Output
    /// Open a view for a user.
    ///
    /// - Remark: HTTP `POST /views.open`.
    /// - Remark: Generated from `#/paths//views.open/post(viewsOpen)`.
    func viewsOpen(_ input: Operations.ViewsOpen.Input) async throws -> Operations.ViewsOpen.Output
    /// Publish a static view for a User.
    ///
    /// - Remark: HTTP `POST /views.publish`.
    /// - Remark: Generated from `#/paths//views.publish/post(viewsPublish)`.
    func viewsPublish(_ input: Operations.ViewsPublish.Input) async throws -> Operations.ViewsPublish.Output
    /// Push a view onto the stack of a root view.
    ///
    /// - Remark: HTTP `POST /views.push`.
    /// - Remark: Generated from `#/paths//views.push/post(viewsPush)`.
    func viewsPush(_ input: Operations.ViewsPush.Input) async throws -> Operations.ViewsPush.Output
    /// Update an existing view.
    ///
    /// - Remark: HTTP `POST /views.update`.
    /// - Remark: Generated from `#/paths//views.update/post(viewsUpdate)`.
    func viewsUpdate(_ input: Operations.ViewsUpdate.Input) async throws -> Operations.ViewsUpdate.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get logs for a specified team/org
    ///
    /// - Remark: HTTP `POST /admin.apps.activities.list`.
    /// - Remark: Generated from `#/paths//admin.apps.activities.list/post(adminAppsActivitiesList)`.
    public func adminAppsActivitiesList(
        headers: Operations.AdminAppsActivitiesList.Input.Headers = .init(),
        body: Operations.AdminAppsActivitiesList.Input.Body
    ) async throws -> Operations.AdminAppsActivitiesList.Output {
        try await adminAppsActivitiesList(Operations.AdminAppsActivitiesList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Approve an app for installation on a workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.approve`.
    /// - Remark: Generated from `#/paths//admin.apps.approve/post(adminAppsApprove)`.
    public func adminAppsApprove(
        headers: Operations.AdminAppsApprove.Input.Headers = .init(),
        body: Operations.AdminAppsApprove.Input.Body
    ) async throws -> Operations.AdminAppsApprove.Output {
        try await adminAppsApprove(Operations.AdminAppsApprove.Input(
            headers: headers,
            body: body
        ))
    }
    /// List approved apps for an org or workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.approved.list`.
    /// - Remark: Generated from `#/paths//admin.apps.approved.list/post(adminAppsApprovedList)`.
    public func adminAppsApprovedList(
        headers: Operations.AdminAppsApprovedList.Input.Headers = .init(),
        body: Operations.AdminAppsApprovedList.Input.Body
    ) async throws -> Operations.AdminAppsApprovedList.Output {
        try await adminAppsApprovedList(Operations.AdminAppsApprovedList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Clear an app resolution
    ///
    /// - Remark: HTTP `POST /admin.apps.clearResolution`.
    /// - Remark: Generated from `#/paths//admin.apps.clearResolution/post(adminAppsClearResolution)`.
    public func adminAppsClearResolution(
        headers: Operations.AdminAppsClearResolution.Input.Headers = .init(),
        body: Operations.AdminAppsClearResolution.Input.Body
    ) async throws -> Operations.AdminAppsClearResolution.Output {
        try await adminAppsClearResolution(Operations.AdminAppsClearResolution.Input(
            headers: headers,
            body: body
        ))
    }
    /// Look up the app config for connectors by their IDs
    ///
    /// - Remark: HTTP `POST /admin.apps.config.lookup`.
    /// - Remark: Generated from `#/paths//admin.apps.config.lookup/post(adminAppsConfigLookup)`.
    public func adminAppsConfigLookup(
        headers: Operations.AdminAppsConfigLookup.Input.Headers = .init(),
        body: Operations.AdminAppsConfigLookup.Input.Body
    ) async throws -> Operations.AdminAppsConfigLookup.Output {
        try await adminAppsConfigLookup(Operations.AdminAppsConfigLookup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the app config for a connector
    ///
    /// - Remark: HTTP `POST /admin.apps.config.set`.
    /// - Remark: Generated from `#/paths//admin.apps.config.set/post(adminAppsConfigSet)`.
    public func adminAppsConfigSet(
        headers: Operations.AdminAppsConfigSet.Input.Headers = .init(),
        body: Operations.AdminAppsConfigSet.Input.Body
    ) async throws -> Operations.AdminAppsConfigSet.Output {
        try await adminAppsConfigSet(Operations.AdminAppsConfigSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Cancel app request for team
    ///
    /// - Remark: HTTP `POST /admin.apps.requests.cancel`.
    /// - Remark: Generated from `#/paths//admin.apps.requests.cancel/post(adminAppsRequestsCancel)`.
    public func adminAppsRequestsCancel(
        headers: Operations.AdminAppsRequestsCancel.Input.Headers = .init(),
        body: Operations.AdminAppsRequestsCancel.Input.Body
    ) async throws -> Operations.AdminAppsRequestsCancel.Output {
        try await adminAppsRequestsCancel(Operations.AdminAppsRequestsCancel.Input(
            headers: headers,
            body: body
        ))
    }
    /// List app requests for a team/workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.requests.list`.
    /// - Remark: Generated from `#/paths//admin.apps.requests.list/post(adminAppsRequestsList)`.
    public func adminAppsRequestsList(
        headers: Operations.AdminAppsRequestsList.Input.Headers = .init(),
        body: Operations.AdminAppsRequestsList.Input.Body
    ) async throws -> Operations.AdminAppsRequestsList.Output {
        try await adminAppsRequestsList(Operations.AdminAppsRequestsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Restrict an app for installation on a workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.restrict`.
    /// - Remark: Generated from `#/paths//admin.apps.restrict/post(adminAppsRestrict)`.
    public func adminAppsRestrict(
        headers: Operations.AdminAppsRestrict.Input.Headers = .init(),
        body: Operations.AdminAppsRestrict.Input.Body
    ) async throws -> Operations.AdminAppsRestrict.Output {
        try await adminAppsRestrict(Operations.AdminAppsRestrict.Input(
            headers: headers,
            body: body
        ))
    }
    /// List restricted apps for an org or workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.restricted.list`.
    /// - Remark: Generated from `#/paths//admin.apps.restricted.list/post(adminAppsRestrictedList)`.
    public func adminAppsRestrictedList(
        headers: Operations.AdminAppsRestrictedList.Input.Headers = .init(),
        body: Operations.AdminAppsRestrictedList.Input.Body
    ) async throws -> Operations.AdminAppsRestrictedList.Output {
        try await adminAppsRestrictedList(Operations.AdminAppsRestrictedList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Uninstall an app from one or many workspaces, or an entire enterprise organization.
    ///
    /// - Remark: HTTP `POST /admin.apps.uninstall`.
    /// - Remark: Generated from `#/paths//admin.apps.uninstall/post(adminAppsUninstall)`.
    public func adminAppsUninstall(
        headers: Operations.AdminAppsUninstall.Input.Headers = .init(),
        body: Operations.AdminAppsUninstall.Input.Body
    ) async throws -> Operations.AdminAppsUninstall.Output {
        try await adminAppsUninstall(Operations.AdminAppsUninstall.Input(
            headers: headers,
            body: body
        ))
    }
    /// Assign entities to a particular authentication policy.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.assignEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.assignEntities/post(adminAuthPolicyAssignEntities)`.
    public func adminAuthPolicyAssignEntities(
        headers: Operations.AdminAuthPolicyAssignEntities.Input.Headers = .init(),
        body: Operations.AdminAuthPolicyAssignEntities.Input.Body
    ) async throws -> Operations.AdminAuthPolicyAssignEntities.Output {
        try await adminAuthPolicyAssignEntities(Operations.AdminAuthPolicyAssignEntities.Input(
            headers: headers,
            body: body
        ))
    }
    /// Fetch all the entities assigned to a particular authentication policy by name.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.getEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.getEntities/post(adminAuthPolicyGetEntities)`.
    public func adminAuthPolicyGetEntities(
        headers: Operations.AdminAuthPolicyGetEntities.Input.Headers = .init(),
        body: Operations.AdminAuthPolicyGetEntities.Input.Body
    ) async throws -> Operations.AdminAuthPolicyGetEntities.Output {
        try await adminAuthPolicyGetEntities(Operations.AdminAuthPolicyGetEntities.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove specified entities from a specified authentication policy.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.removeEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.removeEntities/post(adminAuthPolicyRemoveEntities)`.
    public func adminAuthPolicyRemoveEntities(
        headers: Operations.AdminAuthPolicyRemoveEntities.Input.Headers = .init(),
        body: Operations.AdminAuthPolicyRemoveEntities.Input.Body
    ) async throws -> Operations.AdminAuthPolicyRemoveEntities.Output {
        try await adminAuthPolicyRemoveEntities(Operations.AdminAuthPolicyRemoveEntities.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create an Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.create`.
    /// - Remark: Generated from `#/paths//admin.barriers.create/post(adminBarriersCreate)`.
    public func adminBarriersCreate(
        headers: Operations.AdminBarriersCreate.Input.Headers = .init(),
        body: Operations.AdminBarriersCreate.Input.Body
    ) async throws -> Operations.AdminBarriersCreate.Output {
        try await adminBarriersCreate(Operations.AdminBarriersCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete an existing Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.delete`.
    /// - Remark: Generated from `#/paths//admin.barriers.delete/post(adminBarriersDelete)`.
    public func adminBarriersDelete(
        headers: Operations.AdminBarriersDelete.Input.Headers = .init(),
        body: Operations.AdminBarriersDelete.Input.Body
    ) async throws -> Operations.AdminBarriersDelete.Output {
        try await adminBarriersDelete(Operations.AdminBarriersDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get all Information Barriers for your organization
    ///
    /// - Remark: HTTP `POST /admin.barriers.list`.
    /// - Remark: Generated from `#/paths//admin.barriers.list/post(adminBarriersList)`.
    public func adminBarriersList(
        headers: Operations.AdminBarriersList.Input.Headers = .init(),
        body: Operations.AdminBarriersList.Input.Body
    ) async throws -> Operations.AdminBarriersList.Output {
        try await adminBarriersList(Operations.AdminBarriersList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Update an existing Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.update`.
    /// - Remark: Generated from `#/paths//admin.barriers.update/post(adminBarriersUpdate)`.
    public func adminBarriersUpdate(
        headers: Operations.AdminBarriersUpdate.Input.Headers = .init(),
        body: Operations.AdminBarriersUpdate.Input.Body
    ) async throws -> Operations.AdminBarriersUpdate.Output {
        try await adminBarriersUpdate(Operations.AdminBarriersUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Archive a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.archive`.
    /// - Remark: Generated from `#/paths//admin.conversations.archive/post(adminConversationsArchive)`.
    public func adminConversationsArchive(
        headers: Operations.AdminConversationsArchive.Input.Headers = .init(),
        body: Operations.AdminConversationsArchive.Input.Body
    ) async throws -> Operations.AdminConversationsArchive.Output {
        try await adminConversationsArchive(Operations.AdminConversationsArchive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Archive public or private channels in bulk.
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkArchive`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkArchive/post(adminConversationsBulkArchive)`.
    public func adminConversationsBulkArchive(
        headers: Operations.AdminConversationsBulkArchive.Input.Headers = .init(),
        body: Operations.AdminConversationsBulkArchive.Input.Body
    ) async throws -> Operations.AdminConversationsBulkArchive.Output {
        try await adminConversationsBulkArchive(Operations.AdminConversationsBulkArchive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete public or private channels in bulk
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkDelete`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkDelete/post(adminConversationsBulkDelete)`.
    public func adminConversationsBulkDelete(
        headers: Operations.AdminConversationsBulkDelete.Input.Headers = .init(),
        body: Operations.AdminConversationsBulkDelete.Input.Body
    ) async throws -> Operations.AdminConversationsBulkDelete.Output {
        try await adminConversationsBulkDelete(Operations.AdminConversationsBulkDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Move public or private channels in bulk.
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkMove`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkMove/post(adminConversationsBulkMove)`.
    public func adminConversationsBulkMove(
        headers: Operations.AdminConversationsBulkMove.Input.Headers = .init(),
        body: Operations.AdminConversationsBulkMove.Input.Body
    ) async throws -> Operations.AdminConversationsBulkMove.Output {
        try await adminConversationsBulkMove(Operations.AdminConversationsBulkMove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Convert a public channel to a private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.convertToPrivate`.
    /// - Remark: Generated from `#/paths//admin.conversations.convertToPrivate/post(adminConversationsConvertToPrivate)`.
    public func adminConversationsConvertToPrivate(
        headers: Operations.AdminConversationsConvertToPrivate.Input.Headers = .init(),
        body: Operations.AdminConversationsConvertToPrivate.Input.Body
    ) async throws -> Operations.AdminConversationsConvertToPrivate.Output {
        try await adminConversationsConvertToPrivate(Operations.AdminConversationsConvertToPrivate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Convert a private channel to a public channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.convertToPublic`.
    /// - Remark: Generated from `#/paths//admin.conversations.convertToPublic/post(adminConversationsConvertToPublic)`.
    public func adminConversationsConvertToPublic(
        headers: Operations.AdminConversationsConvertToPublic.Input.Headers = .init(),
        body: Operations.AdminConversationsConvertToPublic.Input.Body
    ) async throws -> Operations.AdminConversationsConvertToPublic.Output {
        try await adminConversationsConvertToPublic(Operations.AdminConversationsConvertToPublic.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create a public or private channel-based conversation.
    ///
    /// - Remark: HTTP `POST /admin.conversations.create`.
    /// - Remark: Generated from `#/paths//admin.conversations.create/post(adminConversationsCreate)`.
    public func adminConversationsCreate(
        headers: Operations.AdminConversationsCreate.Input.Headers = .init(),
        body: Operations.AdminConversationsCreate.Input.Body
    ) async throws -> Operations.AdminConversationsCreate.Output {
        try await adminConversationsCreate(Operations.AdminConversationsCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.delete`.
    /// - Remark: Generated from `#/paths//admin.conversations.delete/post(adminConversationsDelete)`.
    public func adminConversationsDelete(
        headers: Operations.AdminConversationsDelete.Input.Headers = .init(),
        body: Operations.AdminConversationsDelete.Input.Body
    ) async throws -> Operations.AdminConversationsDelete.Output {
        try await adminConversationsDelete(Operations.AdminConversationsDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Disconnect a connected channel from one or more workspaces.
    ///
    /// - Remark: HTTP `POST /admin.conversations.disconnectShared`.
    /// - Remark: Generated from `#/paths//admin.conversations.disconnectShared/post(adminConversationsDisconnectShared)`.
    public func adminConversationsDisconnectShared(
        headers: Operations.AdminConversationsDisconnectShared.Input.Headers = .init(),
        body: Operations.AdminConversationsDisconnectShared.Input.Body
    ) async throws -> Operations.AdminConversationsDisconnectShared.Output {
        try await adminConversationsDisconnectShared(Operations.AdminConversationsDisconnectShared.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
    ///
    /// - Remark: HTTP `POST /admin.conversations.ekm.listOriginalConnectedChannelInfo`.
    /// - Remark: Generated from `#/paths//admin.conversations.ekm.listOriginalConnectedChannelInfo/post(adminConversationsEkmListOriginalConnectedChannelInfo)`.
    public func adminConversationsEkmListOriginalConnectedChannelInfo(
        headers: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Headers = .init(),
        body: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Body
    ) async throws -> Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output {
        try await adminConversationsEkmListOriginalConnectedChannelInfo(Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get conversation preferences for a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getConversationPrefs`.
    /// - Remark: Generated from `#/paths//admin.conversations.getConversationPrefs/post(adminConversationsGetConversationPrefs)`.
    public func adminConversationsGetConversationPrefs(
        headers: Operations.AdminConversationsGetConversationPrefs.Input.Headers = .init(),
        body: Operations.AdminConversationsGetConversationPrefs.Input.Body
    ) async throws -> Operations.AdminConversationsGetConversationPrefs.Output {
        try await adminConversationsGetConversationPrefs(Operations.AdminConversationsGetConversationPrefs.Input(
            headers: headers,
            body: body
        ))
    }
    /// This API endpoint can be used by any admin to get a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.getCustomRetention/post(adminConversationsGetCustomRetention)`.
    public func adminConversationsGetCustomRetention(
        headers: Operations.AdminConversationsGetCustomRetention.Input.Headers = .init(),
        body: Operations.AdminConversationsGetCustomRetention.Input.Body
    ) async throws -> Operations.AdminConversationsGetCustomRetention.Output {
        try await adminConversationsGetCustomRetention(Operations.AdminConversationsGetCustomRetention.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get all the workspaces a given public or private channel is connected to within this Enterprise org.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getTeams`.
    /// - Remark: Generated from `#/paths//admin.conversations.getTeams/post(adminConversationsGetTeams)`.
    public func adminConversationsGetTeams(
        headers: Operations.AdminConversationsGetTeams.Input.Headers = .init(),
        body: Operations.AdminConversationsGetTeams.Input.Body
    ) async throws -> Operations.AdminConversationsGetTeams.Output {
        try await adminConversationsGetTeams(Operations.AdminConversationsGetTeams.Input(
            headers: headers,
            body: body
        ))
    }
    /// Invite a user to a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.invite`.
    /// - Remark: Generated from `#/paths//admin.conversations.invite/post(adminConversationsInvite)`.
    public func adminConversationsInvite(
        headers: Operations.AdminConversationsInvite.Input.Headers = .init(),
        body: Operations.AdminConversationsInvite.Input.Body
    ) async throws -> Operations.AdminConversationsInvite.Output {
        try await adminConversationsInvite(Operations.AdminConversationsInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns channels on the given team using the filters.
    ///
    /// - Remark: HTTP `POST /admin.conversations.lookup`.
    /// - Remark: Generated from `#/paths//admin.conversations.lookup/post(adminConversationsLookup)`.
    public func adminConversationsLookup(
        headers: Operations.AdminConversationsLookup.Input.Headers = .init(),
        body: Operations.AdminConversationsLookup.Input.Body
    ) async throws -> Operations.AdminConversationsLookup.Output {
        try await adminConversationsLookup(Operations.AdminConversationsLookup.Input(
            headers: headers,
            body: body
        ))
    }
    /// This API endpoint can be used by any admin to remove a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.removeCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.removeCustomRetention/post(adminConversationsRemoveCustomRetention)`.
    public func adminConversationsRemoveCustomRetention(
        headers: Operations.AdminConversationsRemoveCustomRetention.Input.Headers = .init(),
        body: Operations.AdminConversationsRemoveCustomRetention.Input.Body
    ) async throws -> Operations.AdminConversationsRemoveCustomRetention.Output {
        try await adminConversationsRemoveCustomRetention(Operations.AdminConversationsRemoveCustomRetention.Input(
            headers: headers,
            body: body
        ))
    }
    /// Rename a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.rename`.
    /// - Remark: Generated from `#/paths//admin.conversations.rename/post(adminConversationsRename)`.
    public func adminConversationsRename(
        headers: Operations.AdminConversationsRename.Input.Headers = .init(),
        body: Operations.AdminConversationsRename.Input.Body
    ) async throws -> Operations.AdminConversationsRename.Output {
        try await adminConversationsRename(Operations.AdminConversationsRename.Input(
            headers: headers,
            body: body
        ))
    }
    /// Add an allowlist of IDP groups for accessing a channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.addGroup`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.addGroup/post(adminConversationsRestrictAccessAddGroup)`.
    public func adminConversationsRestrictAccessAddGroup(
        headers: Operations.AdminConversationsRestrictAccessAddGroup.Input.Headers = .init(),
        body: Operations.AdminConversationsRestrictAccessAddGroup.Input.Body
    ) async throws -> Operations.AdminConversationsRestrictAccessAddGroup.Output {
        try await adminConversationsRestrictAccessAddGroup(Operations.AdminConversationsRestrictAccessAddGroup.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all IDP Groups linked to a channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.listGroups`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.listGroups/post(adminConversationsRestrictAccessListGroups)`.
    public func adminConversationsRestrictAccessListGroups(
        headers: Operations.AdminConversationsRestrictAccessListGroups.Input.Headers = .init(),
        body: Operations.AdminConversationsRestrictAccessListGroups.Input.Body
    ) async throws -> Operations.AdminConversationsRestrictAccessListGroups.Output {
        try await adminConversationsRestrictAccessListGroups(Operations.AdminConversationsRestrictAccessListGroups.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove a linked IDP group linked from a private channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.removeGroup`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.removeGroup/post(adminConversationsRestrictAccessRemoveGroup)`.
    public func adminConversationsRestrictAccessRemoveGroup(
        headers: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Headers = .init(),
        body: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Body
    ) async throws -> Operations.AdminConversationsRestrictAccessRemoveGroup.Output {
        try await adminConversationsRestrictAccessRemoveGroup(Operations.AdminConversationsRestrictAccessRemoveGroup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Search for public or private channels in an Enterprise organization.
    ///
    /// - Remark: HTTP `POST /admin.conversations.search`.
    /// - Remark: Generated from `#/paths//admin.conversations.search/post(adminConversationsSearch)`.
    public func adminConversationsSearch(
        headers: Operations.AdminConversationsSearch.Input.Headers = .init(),
        body: Operations.AdminConversationsSearch.Input.Body
    ) async throws -> Operations.AdminConversationsSearch.Output {
        try await adminConversationsSearch(Operations.AdminConversationsSearch.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the posting permissions for a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setConversationPrefs`.
    /// - Remark: Generated from `#/paths//admin.conversations.setConversationPrefs/post(adminConversationsSetConversationPrefs)`.
    public func adminConversationsSetConversationPrefs(
        headers: Operations.AdminConversationsSetConversationPrefs.Input.Headers = .init(),
        body: Operations.AdminConversationsSetConversationPrefs.Input.Body
    ) async throws -> Operations.AdminConversationsSetConversationPrefs.Output {
        try await adminConversationsSetConversationPrefs(Operations.AdminConversationsSetConversationPrefs.Input(
            headers: headers,
            body: body
        ))
    }
    /// This API endpoint can be used by any admin to set a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.setCustomRetention/post(adminConversationsSetCustomRetention)`.
    public func adminConversationsSetCustomRetention(
        headers: Operations.AdminConversationsSetCustomRetention.Input.Headers = .init(),
        body: Operations.AdminConversationsSetCustomRetention.Input.Body
    ) async throws -> Operations.AdminConversationsSetCustomRetention.Output {
        try await adminConversationsSetCustomRetention(Operations.AdminConversationsSetCustomRetention.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the workspaces in an Enterprise grid org that connect to a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setTeams`.
    /// - Remark: Generated from `#/paths//admin.conversations.setTeams/post(adminConversationsSetTeams)`.
    public func adminConversationsSetTeams(
        headers: Operations.AdminConversationsSetTeams.Input.Headers = .init(),
        body: Operations.AdminConversationsSetTeams.Input.Body
    ) async throws -> Operations.AdminConversationsSetTeams.Output {
        try await adminConversationsSetTeams(Operations.AdminConversationsSetTeams.Input(
            headers: headers,
            body: body
        ))
    }
    /// Unarchive a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.unarchive`.
    /// - Remark: Generated from `#/paths//admin.conversations.unarchive/post(adminConversationsUnarchive)`.
    public func adminConversationsUnarchive(
        headers: Operations.AdminConversationsUnarchive.Input.Headers = .init(),
        body: Operations.AdminConversationsUnarchive.Input.Body
    ) async throws -> Operations.AdminConversationsUnarchive.Output {
        try await adminConversationsUnarchive(Operations.AdminConversationsUnarchive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Add an emoji.
    ///
    /// - Remark: HTTP `POST /admin.emoji.add`.
    /// - Remark: Generated from `#/paths//admin.emoji.add/post(adminEmojiAdd)`.
    public func adminEmojiAdd(
        headers: Operations.AdminEmojiAdd.Input.Headers = .init(),
        body: Operations.AdminEmojiAdd.Input.Body
    ) async throws -> Operations.AdminEmojiAdd.Output {
        try await adminEmojiAdd(Operations.AdminEmojiAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Add an emoji alias.
    ///
    /// - Remark: HTTP `POST /admin.emoji.addAlias`.
    /// - Remark: Generated from `#/paths//admin.emoji.addAlias/post(adminEmojiAddAlias)`.
    public func adminEmojiAddAlias(
        headers: Operations.AdminEmojiAddAlias.Input.Headers = .init(),
        body: Operations.AdminEmojiAddAlias.Input.Body
    ) async throws -> Operations.AdminEmojiAddAlias.Output {
        try await adminEmojiAddAlias(Operations.AdminEmojiAddAlias.Input(
            headers: headers,
            body: body
        ))
    }
    /// List emoji for an Enterprise Grid organization.
    ///
    /// - Remark: HTTP `POST /admin.emoji.list`.
    /// - Remark: Generated from `#/paths//admin.emoji.list/post(adminEmojiList)`.
    public func adminEmojiList(
        headers: Operations.AdminEmojiList.Input.Headers = .init(),
        body: Operations.AdminEmojiList.Input.Body
    ) async throws -> Operations.AdminEmojiList.Output {
        try await adminEmojiList(Operations.AdminEmojiList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove an emoji across an Enterprise Grid organization
    ///
    /// - Remark: HTTP `POST /admin.emoji.remove`.
    /// - Remark: Generated from `#/paths//admin.emoji.remove/post(adminEmojiRemove)`.
    public func adminEmojiRemove(
        headers: Operations.AdminEmojiRemove.Input.Headers = .init(),
        body: Operations.AdminEmojiRemove.Input.Body
    ) async throws -> Operations.AdminEmojiRemove.Output {
        try await adminEmojiRemove(Operations.AdminEmojiRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Rename an emoji.
    ///
    /// - Remark: HTTP `POST /admin.emoji.rename`.
    /// - Remark: Generated from `#/paths//admin.emoji.rename/post(adminEmojiRename)`.
    public func adminEmojiRename(
        headers: Operations.AdminEmojiRename.Input.Headers = .init(),
        body: Operations.AdminEmojiRename.Input.Body
    ) async throws -> Operations.AdminEmojiRename.Output {
        try await adminEmojiRename(Operations.AdminEmojiRename.Input(
            headers: headers,
            body: body
        ))
    }
    /// Look up functions by a set of apps
    ///
    /// - Remark: HTTP `POST /admin.functions.list`.
    /// - Remark: Generated from `#/paths//admin.functions.list/post(adminFunctionsList)`.
    public func adminFunctionsList(
        headers: Operations.AdminFunctionsList.Input.Headers = .init(),
        body: Operations.AdminFunctionsList.Input.Body
    ) async throws -> Operations.AdminFunctionsList.Output {
        try await adminFunctionsList(Operations.AdminFunctionsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lookup the visibility of multiple Slack functions and include the users if it is limited to particular named entities.
    ///
    /// - Remark: HTTP `POST /admin.functions.permissions.lookup`.
    /// - Remark: Generated from `#/paths//admin.functions.permissions.lookup/post(adminFunctionsPermissionsLookup)`.
    public func adminFunctionsPermissionsLookup(
        headers: Operations.AdminFunctionsPermissionsLookup.Input.Headers = .init(),
        body: Operations.AdminFunctionsPermissionsLookup.Input.Body
    ) async throws -> Operations.AdminFunctionsPermissionsLookup.Output {
        try await adminFunctionsPermissionsLookup(Operations.AdminFunctionsPermissionsLookup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the visibility of a Slack function and define the users or workspaces if it is set to named_entities
    ///
    /// - Remark: HTTP `POST /admin.functions.permissions.set`.
    /// - Remark: Generated from `#/paths//admin.functions.permissions.set/post(adminFunctionsPermissionsSet)`.
    public func adminFunctionsPermissionsSet(
        headers: Operations.AdminFunctionsPermissionsSet.Input.Headers = .init(),
        body: Operations.AdminFunctionsPermissionsSet.Input.Body
    ) async throws -> Operations.AdminFunctionsPermissionsSet.Output {
        try await adminFunctionsPermissionsSet(Operations.AdminFunctionsPermissionsSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Approve a workspace invite request.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.approve`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.approve/post(adminInviteRequestsApprove)`.
    public func adminInviteRequestsApprove(
        headers: Operations.AdminInviteRequestsApprove.Input.Headers = .init(),
        body: Operations.AdminInviteRequestsApprove.Input.Body
    ) async throws -> Operations.AdminInviteRequestsApprove.Output {
        try await adminInviteRequestsApprove(Operations.AdminInviteRequestsApprove.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all approved workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.approved.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.approved.list/post(adminInviteRequestsApprovedList)`.
    public func adminInviteRequestsApprovedList(
        headers: Operations.AdminInviteRequestsApprovedList.Input.Headers = .init(),
        body: Operations.AdminInviteRequestsApprovedList.Input.Body
    ) async throws -> Operations.AdminInviteRequestsApprovedList.Output {
        try await adminInviteRequestsApprovedList(Operations.AdminInviteRequestsApprovedList.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all denied workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.denied.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.denied.list/post(adminInviteRequestsDeniedList)`.
    public func adminInviteRequestsDeniedList(
        headers: Operations.AdminInviteRequestsDeniedList.Input.Headers = .init(),
        body: Operations.AdminInviteRequestsDeniedList.Input.Body
    ) async throws -> Operations.AdminInviteRequestsDeniedList.Output {
        try await adminInviteRequestsDeniedList(Operations.AdminInviteRequestsDeniedList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deny a workspace invite request.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.deny`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.deny/post(adminInviteRequestsDeny)`.
    public func adminInviteRequestsDeny(
        headers: Operations.AdminInviteRequestsDeny.Input.Headers = .init(),
        body: Operations.AdminInviteRequestsDeny.Input.Body
    ) async throws -> Operations.AdminInviteRequestsDeny.Output {
        try await adminInviteRequestsDeny(Operations.AdminInviteRequestsDeny.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all pending workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.list/post(adminInviteRequestsList)`.
    public func adminInviteRequestsList(
        headers: Operations.AdminInviteRequestsList.Input.Headers = .init(),
        body: Operations.AdminInviteRequestsList.Input.Body
    ) async throws -> Operations.AdminInviteRequestsList.Output {
        try await adminInviteRequestsList(Operations.AdminInviteRequestsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Adds members to the specified role with the specified scopes
    ///
    /// - Remark: HTTP `POST /admin.roles.addAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.addAssignments/post(adminRolesAddAssignments)`.
    public func adminRolesAddAssignments(
        headers: Operations.AdminRolesAddAssignments.Input.Headers = .init(),
        body: Operations.AdminRolesAddAssignments.Input.Body
    ) async throws -> Operations.AdminRolesAddAssignments.Output {
        try await adminRolesAddAssignments(Operations.AdminRolesAddAssignments.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists assignments for all roles across entities. Options to scope results by any combination of roles or entities
    ///
    /// - Remark: HTTP `POST /admin.roles.listAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.listAssignments/post(adminRolesListAssignments)`.
    public func adminRolesListAssignments(
        headers: Operations.AdminRolesListAssignments.Input.Headers = .init(),
        body: Operations.AdminRolesListAssignments.Input.Body
    ) async throws -> Operations.AdminRolesListAssignments.Output {
        try await adminRolesListAssignments(Operations.AdminRolesListAssignments.Input(
            headers: headers,
            body: body
        ))
    }
    /// Removes a set of users from a role for the given scopes and entities
    ///
    /// - Remark: HTTP `POST /admin.roles.removeAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.removeAssignments/post(adminRolesRemoveAssignments)`.
    public func adminRolesRemoveAssignments(
        headers: Operations.AdminRolesRemoveAssignments.Input.Headers = .init(),
        body: Operations.AdminRolesRemoveAssignments.Input.Body
    ) async throws -> Operations.AdminRolesRemoveAssignments.Output {
        try await adminRolesRemoveAssignments(Operations.AdminRolesRemoveAssignments.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all of the admins on a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.admins.list`.
    /// - Remark: Generated from `#/paths//admin.teams.admins.list/post(adminTeamsAdminsList)`.
    public func adminTeamsAdminsList(
        headers: Operations.AdminTeamsAdminsList.Input.Headers = .init(),
        body: Operations.AdminTeamsAdminsList.Input.Body
    ) async throws -> Operations.AdminTeamsAdminsList.Output {
        try await adminTeamsAdminsList(Operations.AdminTeamsAdminsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create an Enterprise team.
    ///
    /// - Remark: HTTP `POST /admin.teams.create`.
    /// - Remark: Generated from `#/paths//admin.teams.create/post(adminTeamsCreate)`.
    public func adminTeamsCreate(
        headers: Operations.AdminTeamsCreate.Input.Headers = .init(),
        body: Operations.AdminTeamsCreate.Input.Body
    ) async throws -> Operations.AdminTeamsCreate.Output {
        try await adminTeamsCreate(Operations.AdminTeamsCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all teams on an Enterprise organization
    ///
    /// - Remark: HTTP `POST /admin.teams.list`.
    /// - Remark: Generated from `#/paths//admin.teams.list/post(adminTeamsList)`.
    public func adminTeamsList(
        headers: Operations.AdminTeamsList.Input.Headers = .init(),
        body: Operations.AdminTeamsList.Input.Body
    ) async throws -> Operations.AdminTeamsList.Output {
        try await adminTeamsList(Operations.AdminTeamsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// List all of the owners on a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.owners.list`.
    /// - Remark: Generated from `#/paths//admin.teams.owners.list/post(adminTeamsOwnersList)`.
    public func adminTeamsOwnersList(
        headers: Operations.AdminTeamsOwnersList.Input.Headers = .init(),
        body: Operations.AdminTeamsOwnersList.Input.Body
    ) async throws -> Operations.AdminTeamsOwnersList.Output {
        try await adminTeamsOwnersList(Operations.AdminTeamsOwnersList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Fetch information about settings in a workspace
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.info`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.info/post(adminTeamsSettingsInfo)`.
    public func adminTeamsSettingsInfo(
        headers: Operations.AdminTeamsSettingsInfo.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsInfo.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsInfo.Output {
        try await adminTeamsSettingsInfo(Operations.AdminTeamsSettingsInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the default channels of a workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDefaultChannels`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDefaultChannels/post(adminTeamsSettingsSetDefaultChannels)`.
    public func adminTeamsSettingsSetDefaultChannels(
        headers: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsSetDefaultChannels.Output {
        try await adminTeamsSettingsSetDefaultChannels(Operations.AdminTeamsSettingsSetDefaultChannels.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the description of a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDescription`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDescription/post(adminTeamsSettingsSetDescription)`.
    public func adminTeamsSettingsSetDescription(
        headers: Operations.AdminTeamsSettingsSetDescription.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsSetDescription.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsSetDescription.Output {
        try await adminTeamsSettingsSetDescription(Operations.AdminTeamsSettingsSetDescription.Input(
            headers: headers,
            body: body
        ))
    }
    /// An API method that allows admins to set the discoverability of a given workspace
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDiscoverability`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDiscoverability/post(adminTeamsSettingsSetDiscoverability)`.
    public func adminTeamsSettingsSetDiscoverability(
        headers: Operations.AdminTeamsSettingsSetDiscoverability.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsSetDiscoverability.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsSetDiscoverability.Output {
        try await adminTeamsSettingsSetDiscoverability(Operations.AdminTeamsSettingsSetDiscoverability.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sets the icon of a workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setIcon`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setIcon/post(adminTeamsSettingsSetIcon)`.
    public func adminTeamsSettingsSetIcon(
        headers: Operations.AdminTeamsSettingsSetIcon.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsSetIcon.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsSetIcon.Output {
        try await adminTeamsSettingsSetIcon(Operations.AdminTeamsSettingsSetIcon.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the name of a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setName`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setName/post(adminTeamsSettingsSetName)`.
    public func adminTeamsSettingsSetName(
        headers: Operations.AdminTeamsSettingsSetName.Input.Headers = .init(),
        body: Operations.AdminTeamsSettingsSetName.Input.Body
    ) async throws -> Operations.AdminTeamsSettingsSetName.Output {
        try await adminTeamsSettingsSetName(Operations.AdminTeamsSettingsSetName.Input(
            headers: headers,
            body: body
        ))
    }
    /// Add an Enterprise user to a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.assign`.
    /// - Remark: Generated from `#/paths//admin.users.assign/post(adminUsersAssign)`.
    public func adminUsersAssign(
        headers: Operations.AdminUsersAssign.Input.Headers = .init(),
        body: Operations.AdminUsersAssign.Input.Body
    ) async throws -> Operations.AdminUsersAssign.Output {
        try await adminUsersAssign(Operations.AdminUsersAssign.Input(
            headers: headers,
            body: body
        ))
    }
    /// Invite a user to a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.invite`.
    /// - Remark: Generated from `#/paths//admin.users.invite/post(adminUsersInvite)`.
    public func adminUsersInvite(
        headers: Operations.AdminUsersInvite.Input.Headers = .init(),
        body: Operations.AdminUsersInvite.Input.Body
    ) async throws -> Operations.AdminUsersInvite.Output {
        try await adminUsersInvite(Operations.AdminUsersInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// List users on a workspace
    ///
    /// - Remark: HTTP `POST /admin.users.list`.
    /// - Remark: Generated from `#/paths//admin.users.list/post(adminUsersList)`.
    public func adminUsersList(
        headers: Operations.AdminUsersList.Input.Headers = .init(),
        body: Operations.AdminUsersList.Input.Body
    ) async throws -> Operations.AdminUsersList.Output {
        try await adminUsersList(Operations.AdminUsersList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove a user from a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.remove`.
    /// - Remark: Generated from `#/paths//admin.users.remove/post(adminUsersRemove)`.
    public func adminUsersRemove(
        headers: Operations.AdminUsersRemove.Input.Headers = .init(),
        body: Operations.AdminUsersRemove.Input.Body
    ) async throws -> Operations.AdminUsersRemove.Output {
        try await adminUsersRemove(Operations.AdminUsersRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Clear user-specific session settings—the session duration and what happens when the client closes—for a list of users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.clearSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.clearSettings/post(adminUsersSessionClearSettings)`.
    public func adminUsersSessionClearSettings(
        headers: Operations.AdminUsersSessionClearSettings.Input.Headers = .init(),
        body: Operations.AdminUsersSessionClearSettings.Input.Body
    ) async throws -> Operations.AdminUsersSessionClearSettings.Output {
        try await adminUsersSessionClearSettings(Operations.AdminUsersSessionClearSettings.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get user-specific session settings—the session duration and what happens when the client closes—given a list of users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.getSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.getSettings/post(adminUsersSessionGetSettings)`.
    public func adminUsersSessionGetSettings(
        headers: Operations.AdminUsersSessionGetSettings.Input.Headers = .init(),
        body: Operations.AdminUsersSessionGetSettings.Input.Body
    ) async throws -> Operations.AdminUsersSessionGetSettings.Output {
        try await adminUsersSessionGetSettings(Operations.AdminUsersSessionGetSettings.Input(
            headers: headers,
            body: body
        ))
    }
    /// Revoke a single session for a user. The user will be forced to login to Slack.
    ///
    /// - Remark: HTTP `POST /admin.users.session.invalidate`.
    /// - Remark: Generated from `#/paths//admin.users.session.invalidate/post(adminUsersSessionInvalidate)`.
    public func adminUsersSessionInvalidate(
        headers: Operations.AdminUsersSessionInvalidate.Input.Headers = .init(),
        body: Operations.AdminUsersSessionInvalidate.Input.Body
    ) async throws -> Operations.AdminUsersSessionInvalidate.Output {
        try await adminUsersSessionInvalidate(Operations.AdminUsersSessionInvalidate.Input(
            headers: headers,
            body: body
        ))
    }
    /// List active user sessions for an organization
    ///
    /// - Remark: HTTP `POST /admin.users.session.list`.
    /// - Remark: Generated from `#/paths//admin.users.session.list/post(adminUsersSessionList)`.
    public func adminUsersSessionList(
        headers: Operations.AdminUsersSessionList.Input.Headers = .init(),
        body: Operations.AdminUsersSessionList.Input.Body
    ) async throws -> Operations.AdminUsersSessionList.Output {
        try await adminUsersSessionList(Operations.AdminUsersSessionList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Wipes all valid sessions on all devices for a given user
    ///
    /// - Remark: HTTP `POST /admin.users.session.reset`.
    /// - Remark: Generated from `#/paths//admin.users.session.reset/post(adminUsersSessionReset)`.
    public func adminUsersSessionReset(
        headers: Operations.AdminUsersSessionReset.Input.Headers = .init(),
        body: Operations.AdminUsersSessionReset.Input.Body
    ) async throws -> Operations.AdminUsersSessionReset.Output {
        try await adminUsersSessionReset(Operations.AdminUsersSessionReset.Input(
            headers: headers,
            body: body
        ))
    }
    /// Enqueues an asynchronous job to wipe all valid sessions on all devices for a given list of users
    ///
    /// - Remark: HTTP `POST /admin.users.session.resetBulk`.
    /// - Remark: Generated from `#/paths//admin.users.session.resetBulk/post(adminUsersSessionResetBulk)`.
    public func adminUsersSessionResetBulk(
        headers: Operations.AdminUsersSessionResetBulk.Input.Headers = .init(),
        body: Operations.AdminUsersSessionResetBulk.Input.Body
    ) async throws -> Operations.AdminUsersSessionResetBulk.Output {
        try await adminUsersSessionResetBulk(Operations.AdminUsersSessionResetBulk.Input(
            headers: headers,
            body: body
        ))
    }
    /// Configure the user-level session settings—the session duration and what happens when the client closes—for one or more users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.setSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.setSettings/post(adminUsersSessionSetSettings)`.
    public func adminUsersSessionSetSettings(
        headers: Operations.AdminUsersSessionSetSettings.Input.Headers = .init(),
        body: Operations.AdminUsersSessionSetSettings.Input.Body
    ) async throws -> Operations.AdminUsersSessionSetSettings.Output {
        try await adminUsersSessionSetSettings(Operations.AdminUsersSessionSetSettings.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set an existing regular user or owner to be a workspace admin.
    ///
    /// - Remark: HTTP `POST /admin.users.setAdmin`.
    /// - Remark: Generated from `#/paths//admin.users.setAdmin/post(adminUsersSetAdmin)`.
    public func adminUsersSetAdmin(
        headers: Operations.AdminUsersSetAdmin.Input.Headers = .init(),
        body: Operations.AdminUsersSetAdmin.Input.Body
    ) async throws -> Operations.AdminUsersSetAdmin.Output {
        try await adminUsersSetAdmin(Operations.AdminUsersSetAdmin.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set an expiration for a guest user
    ///
    /// - Remark: HTTP `POST /admin.users.setExpiration`.
    /// - Remark: Generated from `#/paths//admin.users.setExpiration/post(adminUsersSetExpiration)`.
    public func adminUsersSetExpiration(
        headers: Operations.AdminUsersSetExpiration.Input.Headers = .init(),
        body: Operations.AdminUsersSetExpiration.Input.Body
    ) async throws -> Operations.AdminUsersSetExpiration.Output {
        try await adminUsersSetExpiration(Operations.AdminUsersSetExpiration.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set an existing regular user or admin to be a workspace owner.
    ///
    /// - Remark: HTTP `POST /admin.users.setOwner`.
    /// - Remark: Generated from `#/paths//admin.users.setOwner/post(adminUsersSetOwner)`.
    public func adminUsersSetOwner(
        headers: Operations.AdminUsersSetOwner.Input.Headers = .init(),
        body: Operations.AdminUsersSetOwner.Input.Body
    ) async throws -> Operations.AdminUsersSetOwner.Output {
        try await adminUsersSetOwner(Operations.AdminUsersSetOwner.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set an existing guest user, admin user, or owner to be a regular user.
    ///
    /// - Remark: HTTP `POST /admin.users.setRegular`.
    /// - Remark: Generated from `#/paths//admin.users.setRegular/post(adminUsersSetRegular)`.
    public func adminUsersSetRegular(
        headers: Operations.AdminUsersSetRegular.Input.Headers = .init(),
        body: Operations.AdminUsersSetRegular.Input.Body
    ) async throws -> Operations.AdminUsersSetRegular.Output {
        try await adminUsersSetRegular(Operations.AdminUsersSetRegular.Input(
            headers: headers,
            body: body
        ))
    }
    /// Ask Slackbot to send you an export listing all workspace members using unsupported software, presented as a zipped CSV file.
    ///
    /// - Remark: HTTP `POST /admin.users.unsupportedVersions.export`.
    /// - Remark: Generated from `#/paths//admin.users.unsupportedVersions.export/post(adminUsersUnsupportedVersionsExport)`.
    public func adminUsersUnsupportedVersionsExport(
        headers: Operations.AdminUsersUnsupportedVersionsExport.Input.Headers = .init(),
        body: Operations.AdminUsersUnsupportedVersionsExport.Input.Body
    ) async throws -> Operations.AdminUsersUnsupportedVersionsExport.Output {
        try await adminUsersUnsupportedVersionsExport(Operations.AdminUsersUnsupportedVersionsExport.Input(
            headers: headers,
            body: body
        ))
    }
    /// Generate a temporary Socket Mode WebSocket URL that your app can connect to in order to receive events and interactive payloads over.
    ///
    /// - Remark: HTTP `POST /apps.connections.open`.
    /// - Remark: Generated from `#/paths//apps.connections.open/post(appsConnectionsOpen)`.
    public func appsConnectionsOpen(
        headers: Operations.AppsConnectionsOpen.Input.Headers = .init(),
        body: Operations.AppsConnectionsOpen.Input.Body
    ) async throws -> Operations.AppsConnectionsOpen.Output {
        try await appsConnectionsOpen(Operations.AppsConnectionsOpen.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
    ///
    /// - Remark: HTTP `POST /apps.event.authorizations.list`.
    /// - Remark: Generated from `#/paths//apps.event.authorizations.list/post(appsEventAuthorizationsList)`.
    public func appsEventAuthorizationsList(
        headers: Operations.AppsEventAuthorizationsList.Input.Headers = .init(),
        body: Operations.AppsEventAuthorizationsList.Input.Body
    ) async throws -> Operations.AppsEventAuthorizationsList.Output {
        try await appsEventAuthorizationsList(Operations.AppsEventAuthorizationsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create an app from an app manifest.
    ///
    /// - Remark: HTTP `POST /apps.manifest.create`.
    /// - Remark: Generated from `#/paths//apps.manifest.create/post(appsManifestCreate)`.
    public func appsManifestCreate(
        headers: Operations.AppsManifestCreate.Input.Headers = .init(),
        body: Operations.AppsManifestCreate.Input.Body
    ) async throws -> Operations.AppsManifestCreate.Output {
        try await appsManifestCreate(Operations.AppsManifestCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Permanently deletes an app created through app manifests
    ///
    /// - Remark: HTTP `POST /apps.manifest.delete`.
    /// - Remark: Generated from `#/paths//apps.manifest.delete/post(appsManifestDelete)`.
    public func appsManifestDelete(
        headers: Operations.AppsManifestDelete.Input.Headers = .init(),
        body: Operations.AppsManifestDelete.Input.Body
    ) async throws -> Operations.AppsManifestDelete.Output {
        try await appsManifestDelete(Operations.AppsManifestDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Export an app manifest from an existing app
    ///
    /// - Remark: HTTP `POST /apps.manifest.export`.
    /// - Remark: Generated from `#/paths//apps.manifest.export/post(appsManifestExport)`.
    public func appsManifestExport(
        headers: Operations.AppsManifestExport.Input.Headers = .init(),
        body: Operations.AppsManifestExport.Input.Body
    ) async throws -> Operations.AppsManifestExport.Output {
        try await appsManifestExport(Operations.AppsManifestExport.Input(
            headers: headers,
            body: body
        ))
    }
    /// Update an app from an app manifest
    ///
    /// - Remark: HTTP `POST /apps.manifest.update`.
    /// - Remark: Generated from `#/paths//apps.manifest.update/post(appsManifestUpdate)`.
    public func appsManifestUpdate(
        headers: Operations.AppsManifestUpdate.Input.Headers = .init(),
        body: Operations.AppsManifestUpdate.Input.Body
    ) async throws -> Operations.AppsManifestUpdate.Output {
        try await appsManifestUpdate(Operations.AppsManifestUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Validate an app manifest
    ///
    /// - Remark: HTTP `POST /apps.manifest.validate`.
    /// - Remark: Generated from `#/paths//apps.manifest.validate/post(appsManifestValidate)`.
    public func appsManifestValidate(
        headers: Operations.AppsManifestValidate.Input.Headers = .init(),
        body: Operations.AppsManifestValidate.Input.Body
    ) async throws -> Operations.AppsManifestValidate.Output {
        try await appsManifestValidate(Operations.AppsManifestValidate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Uninstalls your app from a workspace.
    ///
    /// - Remark: HTTP `POST /apps.uninstall`.
    /// - Remark: Generated from `#/paths//apps.uninstall/post(appsUninstall)`.
    public func appsUninstall(
        headers: Operations.AppsUninstall.Input.Headers = .init(),
        body: Operations.AppsUninstall.Input.Body
    ) async throws -> Operations.AppsUninstall.Output {
        try await appsUninstall(Operations.AppsUninstall.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the status for an AI assistant thread.
    ///
    /// - Remark: HTTP `POST /assistant.threads.setStatus`.
    /// - Remark: Generated from `#/paths//assistant.threads.setStatus/post(assistantThreadsSetStatus)`.
    public func assistantThreadsSetStatus(
        headers: Operations.AssistantThreadsSetStatus.Input.Headers = .init(),
        body: Operations.AssistantThreadsSetStatus.Input.Body
    ) async throws -> Operations.AssistantThreadsSetStatus.Output {
        try await assistantThreadsSetStatus(Operations.AssistantThreadsSetStatus.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set suggested prompts for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setSuggestedPrompts`.
    /// - Remark: Generated from `#/paths//assistant.threads.setSuggestedPrompts/post(assistantThreadsSetSuggestedPrompts)`.
    public func assistantThreadsSetSuggestedPrompts(
        headers: Operations.AssistantThreadsSetSuggestedPrompts.Input.Headers = .init(),
        body: Operations.AssistantThreadsSetSuggestedPrompts.Input.Body
    ) async throws -> Operations.AssistantThreadsSetSuggestedPrompts.Output {
        try await assistantThreadsSetSuggestedPrompts(Operations.AssistantThreadsSetSuggestedPrompts.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the title for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setTitle`.
    /// - Remark: Generated from `#/paths//assistant.threads.setTitle/post(assistantThreadsSetTitle)`.
    public func assistantThreadsSetTitle(
        headers: Operations.AssistantThreadsSetTitle.Input.Headers = .init(),
        body: Operations.AssistantThreadsSetTitle.Input.Body
    ) async throws -> Operations.AssistantThreadsSetTitle.Output {
        try await assistantThreadsSetTitle(Operations.AssistantThreadsSetTitle.Input(
            headers: headers,
            body: body
        ))
    }
    /// Revokes a token.
    ///
    /// - Remark: HTTP `POST /auth.revoke`.
    /// - Remark: Generated from `#/paths//auth.revoke/post(authRevoke)`.
    public func authRevoke(
        headers: Operations.AuthRevoke.Input.Headers = .init(),
        body: Operations.AuthRevoke.Input.Body
    ) async throws -> Operations.AuthRevoke.Output {
        try await authRevoke(Operations.AuthRevoke.Input(
            headers: headers,
            body: body
        ))
    }
    /// Obtain a full list of workspaces your org-wide app has been approved for.
    ///
    /// - Remark: HTTP `POST /auth.teams.list`.
    /// - Remark: Generated from `#/paths//auth.teams.list/post(authTeamsList)`.
    public func authTeamsList(
        headers: Operations.AuthTeamsList.Input.Headers = .init(),
        body: Operations.AuthTeamsList.Input.Body
    ) async throws -> Operations.AuthTeamsList.Output {
        try await authTeamsList(Operations.AuthTeamsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Checks authentication & identity.
    ///
    /// - Remark: HTTP `POST /auth.test`.
    /// - Remark: Generated from `#/paths//auth.test/post(authTest)`.
    public func authTest(
        headers: Operations.AuthTest.Input.Headers = .init(),
        body: Operations.AuthTest.Input.Body
    ) async throws -> Operations.AuthTest.Output {
        try await authTest(Operations.AuthTest.Input(
            headers: headers,
            body: body
        ))
    }
    /// Add bookmark to a channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.add`.
    /// - Remark: Generated from `#/paths//bookmarks.add/post(bookmarksAdd)`.
    public func bookmarksAdd(
        headers: Operations.BookmarksAdd.Input.Headers = .init(),
        body: Operations.BookmarksAdd.Input.Body
    ) async throws -> Operations.BookmarksAdd.Output {
        try await bookmarksAdd(Operations.BookmarksAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Edit bookmark.
    ///
    /// - Remark: HTTP `POST /bookmarks.edit`.
    /// - Remark: Generated from `#/paths//bookmarks.edit/post(bookmarksEdit)`.
    public func bookmarksEdit(
        headers: Operations.BookmarksEdit.Input.Headers = .init(),
        body: Operations.BookmarksEdit.Input.Body
    ) async throws -> Operations.BookmarksEdit.Output {
        try await bookmarksEdit(Operations.BookmarksEdit.Input(
            headers: headers,
            body: body
        ))
    }
    /// List bookmark for the channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.list`.
    /// - Remark: Generated from `#/paths//bookmarks.list/post(bookmarksList)`.
    public func bookmarksList(
        headers: Operations.BookmarksList.Input.Headers = .init(),
        body: Operations.BookmarksList.Input.Body
    ) async throws -> Operations.BookmarksList.Output {
        try await bookmarksList(Operations.BookmarksList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove bookmark from the channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.remove`.
    /// - Remark: Generated from `#/paths//bookmarks.remove/post(bookmarksRemove)`.
    public func bookmarksRemove(
        headers: Operations.BookmarksRemove.Input.Headers = .init(),
        body: Operations.BookmarksRemove.Input.Body
    ) async throws -> Operations.BookmarksRemove.Output {
        try await bookmarksRemove(Operations.BookmarksRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets information about a bot user.
    ///
    /// - Remark: HTTP `POST /bots.info`.
    /// - Remark: Generated from `#/paths//bots.info/post(botsInfo)`.
    public func botsInfo(
        headers: Operations.BotsInfo.Input.Headers = .init(),
        body: Operations.BotsInfo.Input.Body
    ) async throws -> Operations.BotsInfo.Output {
        try await botsInfo(Operations.BotsInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove access to a canvas for specified entities
    ///
    /// - Remark: HTTP `POST /canvases.access.delete`.
    /// - Remark: Generated from `#/paths//canvases.access.delete/post(canvasesAccessDelete)`.
    public func canvasesAccessDelete(
        headers: Operations.CanvasesAccessDelete.Input.Headers = .init(),
        body: Operations.CanvasesAccessDelete.Input.Body
    ) async throws -> Operations.CanvasesAccessDelete.Output {
        try await canvasesAccessDelete(Operations.CanvasesAccessDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sets the access level to a canvas for specified entities
    ///
    /// - Remark: HTTP `POST /canvases.access.set`.
    /// - Remark: Generated from `#/paths//canvases.access.set/post(canvasesAccessSet)`.
    public func canvasesAccessSet(
        headers: Operations.CanvasesAccessSet.Input.Headers = .init(),
        body: Operations.CanvasesAccessSet.Input.Body
    ) async throws -> Operations.CanvasesAccessSet.Output {
        try await canvasesAccessSet(Operations.CanvasesAccessSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create canvas for a user
    ///
    /// - Remark: HTTP `POST /canvases.create`.
    /// - Remark: Generated from `#/paths//canvases.create/post(canvasesCreate)`.
    public func canvasesCreate(
        headers: Operations.CanvasesCreate.Input.Headers = .init(),
        body: Operations.CanvasesCreate.Input.Body
    ) async throws -> Operations.CanvasesCreate.Output {
        try await canvasesCreate(Operations.CanvasesCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a canvas
    ///
    /// - Remark: HTTP `POST /canvases.delete`.
    /// - Remark: Generated from `#/paths//canvases.delete/post(canvasesDelete)`.
    public func canvasesDelete(
        headers: Operations.CanvasesDelete.Input.Headers = .init(),
        body: Operations.CanvasesDelete.Input.Body
    ) async throws -> Operations.CanvasesDelete.Output {
        try await canvasesDelete(Operations.CanvasesDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Update an existing canvas
    ///
    /// - Remark: HTTP `POST /canvases.edit`.
    /// - Remark: Generated from `#/paths//canvases.edit/post(canvasesEdit)`.
    public func canvasesEdit(
        headers: Operations.CanvasesEdit.Input.Headers = .init(),
        body: Operations.CanvasesEdit.Input.Body
    ) async throws -> Operations.CanvasesEdit.Output {
        try await canvasesEdit(Operations.CanvasesEdit.Input(
            headers: headers,
            body: body
        ))
    }
    /// Find sections matching the provided criteria
    ///
    /// - Remark: HTTP `POST /canvases.sections.lookup`.
    /// - Remark: Generated from `#/paths//canvases.sections.lookup/post(canvasesSectionsLookup)`.
    public func canvasesSectionsLookup(
        headers: Operations.CanvasesSectionsLookup.Input.Headers = .init(),
        body: Operations.CanvasesSectionsLookup.Input.Body
    ) async throws -> Operations.CanvasesSectionsLookup.Output {
        try await canvasesSectionsLookup(Operations.CanvasesSectionsLookup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a message.
    ///
    /// - Remark: HTTP `POST /chat.delete`.
    /// - Remark: Generated from `#/paths//chat.delete/post(chatDelete)`.
    public func chatDelete(
        headers: Operations.ChatDelete.Input.Headers = .init(),
        body: Operations.ChatDelete.Input.Body
    ) async throws -> Operations.ChatDelete.Output {
        try await chatDelete(Operations.ChatDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a pending scheduled message from the queue.
    ///
    /// - Remark: HTTP `POST /chat.deleteScheduledMessage`.
    /// - Remark: Generated from `#/paths//chat.deleteScheduledMessage/post(chatDeleteScheduledMessage)`.
    public func chatDeleteScheduledMessage(
        headers: Operations.ChatDeleteScheduledMessage.Input.Headers = .init(),
        body: Operations.ChatDeleteScheduledMessage.Input.Body
    ) async throws -> Operations.ChatDeleteScheduledMessage.Output {
        try await chatDeleteScheduledMessage(Operations.ChatDeleteScheduledMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a permalink URL for a specific extant message
    ///
    /// - Remark: HTTP `POST /chat.getPermalink`.
    /// - Remark: Generated from `#/paths//chat.getPermalink/post(chatGetPermalink)`.
    public func chatGetPermalink(
        headers: Operations.ChatGetPermalink.Input.Headers = .init(),
        body: Operations.ChatGetPermalink.Input.Body
    ) async throws -> Operations.ChatGetPermalink.Output {
        try await chatGetPermalink(Operations.ChatGetPermalink.Input(
            headers: headers,
            body: body
        ))
    }
    /// Share a me message into a channel.
    ///
    /// - Remark: HTTP `POST /chat.meMessage`.
    /// - Remark: Generated from `#/paths//chat.meMessage/post(chatMeMessage)`.
    public func chatMeMessage(
        headers: Operations.ChatMeMessage.Input.Headers = .init(),
        body: Operations.ChatMeMessage.Input.Body
    ) async throws -> Operations.ChatMeMessage.Output {
        try await chatMeMessage(Operations.ChatMeMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sends an ephemeral message to a user in a channel.
    ///
    /// - Remark: HTTP `POST /chat.postEphemeral`.
    /// - Remark: Generated from `#/paths//chat.postEphemeral/post(chatPostEphemeral)`.
    public func chatPostEphemeral(
        headers: Operations.ChatPostEphemeral.Input.Headers = .init(),
        body: Operations.ChatPostEphemeral.Input.Body
    ) async throws -> Operations.ChatPostEphemeral.Output {
        try await chatPostEphemeral(Operations.ChatPostEphemeral.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sends a message to a channel.
    ///
    /// - Remark: HTTP `POST /chat.postMessage`.
    /// - Remark: Generated from `#/paths//chat.postMessage/post(chatPostMessage)`.
    public func chatPostMessage(
        headers: Operations.ChatPostMessage.Input.Headers = .init(),
        body: Operations.ChatPostMessage.Input.Body
    ) async throws -> Operations.ChatPostMessage.Output {
        try await chatPostMessage(Operations.ChatPostMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Schedules a message to be sent to a channel.
    ///
    /// - Remark: HTTP `POST /chat.scheduleMessage`.
    /// - Remark: Generated from `#/paths//chat.scheduleMessage/post(chatScheduleMessage)`.
    public func chatScheduleMessage(
        headers: Operations.ChatScheduleMessage.Input.Headers = .init(),
        body: Operations.ChatScheduleMessage.Input.Body
    ) async throws -> Operations.ChatScheduleMessage.Output {
        try await chatScheduleMessage(Operations.ChatScheduleMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns a list of scheduled messages.
    ///
    /// - Remark: HTTP `POST /chat.scheduledMessages.list`.
    /// - Remark: Generated from `#/paths//chat.scheduledMessages.list/post(chatScheduledMessagesList)`.
    public func chatScheduledMessagesList(
        headers: Operations.ChatScheduledMessagesList.Input.Headers = .init(),
        body: Operations.ChatScheduledMessagesList.Input.Body
    ) async throws -> Operations.ChatScheduledMessagesList.Output {
        try await chatScheduledMessagesList(Operations.ChatScheduledMessagesList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Provide custom unfurl behavior for user-posted URLs
    ///
    /// - Remark: HTTP `POST /chat.unfurl`.
    /// - Remark: Generated from `#/paths//chat.unfurl/post(chatUnfurl)`.
    public func chatUnfurl(
        headers: Operations.ChatUnfurl.Input.Headers = .init(),
        body: Operations.ChatUnfurl.Input.Body
    ) async throws -> Operations.ChatUnfurl.Output {
        try await chatUnfurl(Operations.ChatUnfurl.Input(
            headers: headers,
            body: body
        ))
    }
    /// Updates a message.
    ///
    /// - Remark: HTTP `POST /chat.update`.
    /// - Remark: Generated from `#/paths//chat.update/post(chatUpdate)`.
    public func chatUpdate(
        headers: Operations.ChatUpdate.Input.Headers = .init(),
        body: Operations.ChatUpdate.Input.Body
    ) async throws -> Operations.ChatUpdate.Output {
        try await chatUpdate(Operations.ChatUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Accepts an invitation to a Slack Connect channel.
    ///
    /// - Remark: HTTP `POST /conversations.acceptSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.acceptSharedInvite/post(conversationsAcceptSharedInvite)`.
    public func conversationsAcceptSharedInvite(
        headers: Operations.ConversationsAcceptSharedInvite.Input.Headers = .init(),
        body: Operations.ConversationsAcceptSharedInvite.Input.Body
    ) async throws -> Operations.ConversationsAcceptSharedInvite.Output {
        try await conversationsAcceptSharedInvite(Operations.ConversationsAcceptSharedInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Approves an invitation to a Slack Connect channel
    ///
    /// - Remark: HTTP `POST /conversations.approveSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.approveSharedInvite/post(conversationsApproveSharedInvite)`.
    public func conversationsApproveSharedInvite(
        headers: Operations.ConversationsApproveSharedInvite.Input.Headers = .init(),
        body: Operations.ConversationsApproveSharedInvite.Input.Body
    ) async throws -> Operations.ConversationsApproveSharedInvite.Output {
        try await conversationsApproveSharedInvite(Operations.ConversationsApproveSharedInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Archives a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.archive`.
    /// - Remark: Generated from `#/paths//conversations.archive/post(conversationsArchive)`.
    public func conversationsArchive(
        headers: Operations.ConversationsArchive.Input.Headers = .init(),
        body: Operations.ConversationsArchive.Input.Body
    ) async throws -> Operations.ConversationsArchive.Output {
        try await conversationsArchive(Operations.ConversationsArchive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create a channel canvas for a channel
    ///
    /// - Remark: HTTP `POST /conversations.canvases.create`.
    /// - Remark: Generated from `#/paths//conversations.canvases.create/post(conversationsCanvasesCreate)`.
    public func conversationsCanvasesCreate(
        headers: Operations.ConversationsCanvasesCreate.Input.Headers = .init(),
        body: Operations.ConversationsCanvasesCreate.Input.Body
    ) async throws -> Operations.ConversationsCanvasesCreate.Output {
        try await conversationsCanvasesCreate(Operations.ConversationsCanvasesCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Closes a direct message or multi-person direct message.
    ///
    /// - Remark: HTTP `POST /conversations.close`.
    /// - Remark: Generated from `#/paths//conversations.close/post(conversationsClose)`.
    public func conversationsClose(
        headers: Operations.ConversationsClose.Input.Headers = .init(),
        body: Operations.ConversationsClose.Input.Body
    ) async throws -> Operations.ConversationsClose.Output {
        try await conversationsClose(Operations.ConversationsClose.Input(
            headers: headers,
            body: body
        ))
    }
    /// Initiates a public or private channel-based conversation
    ///
    /// - Remark: HTTP `POST /conversations.create`.
    /// - Remark: Generated from `#/paths//conversations.create/post(conversationsCreate)`.
    public func conversationsCreate(
        headers: Operations.ConversationsCreate.Input.Headers = .init(),
        body: Operations.ConversationsCreate.Input.Body
    ) async throws -> Operations.ConversationsCreate.Output {
        try await conversationsCreate(Operations.ConversationsCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Declines a Slack Connect channel invite.
    ///
    /// - Remark: HTTP `POST /conversations.declineSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.declineSharedInvite/post(conversationsDeclineSharedInvite)`.
    public func conversationsDeclineSharedInvite(
        headers: Operations.ConversationsDeclineSharedInvite.Input.Headers = .init(),
        body: Operations.ConversationsDeclineSharedInvite.Input.Body
    ) async throws -> Operations.ConversationsDeclineSharedInvite.Output {
        try await conversationsDeclineSharedInvite(Operations.ConversationsDeclineSharedInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Upgrade or downgrade Slack Connect channel permissions between 'can post only' and 'can post and invite'.
    ///
    /// - Remark: HTTP `POST /conversations.externalInvitePermissions.set`.
    /// - Remark: Generated from `#/paths//conversations.externalInvitePermissions.set/post(conversationsExternalInvitePermissionsSet)`.
    public func conversationsExternalInvitePermissionsSet(
        headers: Operations.ConversationsExternalInvitePermissionsSet.Input.Headers = .init(),
        body: Operations.ConversationsExternalInvitePermissionsSet.Input.Body
    ) async throws -> Operations.ConversationsExternalInvitePermissionsSet.Output {
        try await conversationsExternalInvitePermissionsSet(Operations.ConversationsExternalInvitePermissionsSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Fetches a conversation's history of messages and events.
    ///
    /// - Remark: HTTP `POST /conversations.history`.
    /// - Remark: Generated from `#/paths//conversations.history/post(conversationsHistory)`.
    public func conversationsHistory(
        headers: Operations.ConversationsHistory.Input.Headers = .init(),
        body: Operations.ConversationsHistory.Input.Body
    ) async throws -> Operations.ConversationsHistory.Output {
        try await conversationsHistory(Operations.ConversationsHistory.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve information about a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.info`.
    /// - Remark: Generated from `#/paths//conversations.info/post(conversationsInfo)`.
    public func conversationsInfo(
        headers: Operations.ConversationsInfo.Input.Headers = .init(),
        body: Operations.ConversationsInfo.Input.Body
    ) async throws -> Operations.ConversationsInfo.Output {
        try await conversationsInfo(Operations.ConversationsInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Invites users to a channel.
    ///
    /// - Remark: HTTP `POST /conversations.invite`.
    /// - Remark: Generated from `#/paths//conversations.invite/post(conversationsInvite)`.
    public func conversationsInvite(
        headers: Operations.ConversationsInvite.Input.Headers = .init(),
        body: Operations.ConversationsInvite.Input.Body
    ) async throws -> Operations.ConversationsInvite.Output {
        try await conversationsInvite(Operations.ConversationsInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sends an invitation to a Slack Connect channel
    ///
    /// - Remark: HTTP `POST /conversations.inviteShared`.
    /// - Remark: Generated from `#/paths//conversations.inviteShared/post(conversationsInviteShared)`.
    public func conversationsInviteShared(
        headers: Operations.ConversationsInviteShared.Input.Headers = .init(),
        body: Operations.ConversationsInviteShared.Input.Body
    ) async throws -> Operations.ConversationsInviteShared.Output {
        try await conversationsInviteShared(Operations.ConversationsInviteShared.Input(
            headers: headers,
            body: body
        ))
    }
    /// Joins an existing conversation.
    ///
    /// - Remark: HTTP `POST /conversations.join`.
    /// - Remark: Generated from `#/paths//conversations.join/post(conversationsJoin)`.
    public func conversationsJoin(
        headers: Operations.ConversationsJoin.Input.Headers = .init(),
        body: Operations.ConversationsJoin.Input.Body
    ) async throws -> Operations.ConversationsJoin.Output {
        try await conversationsJoin(Operations.ConversationsJoin.Input(
            headers: headers,
            body: body
        ))
    }
    /// Removes a user from a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.kick`.
    /// - Remark: Generated from `#/paths//conversations.kick/post(conversationsKick)`.
    public func conversationsKick(
        headers: Operations.ConversationsKick.Input.Headers = .init(),
        body: Operations.ConversationsKick.Input.Body
    ) async throws -> Operations.ConversationsKick.Output {
        try await conversationsKick(Operations.ConversationsKick.Input(
            headers: headers,
            body: body
        ))
    }
    /// Leaves a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.leave`.
    /// - Remark: Generated from `#/paths//conversations.leave/post(conversationsLeave)`.
    public func conversationsLeave(
        headers: Operations.ConversationsLeave.Input.Headers = .init(),
        body: Operations.ConversationsLeave.Input.Body
    ) async throws -> Operations.ConversationsLeave.Output {
        try await conversationsLeave(Operations.ConversationsLeave.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists all channels in a Slack team.
    ///
    /// - Remark: HTTP `POST /conversations.list`.
    /// - Remark: Generated from `#/paths//conversations.list/post(conversationsList)`.
    public func conversationsList(
        headers: Operations.ConversationsList.Input.Headers = .init(),
        body: Operations.ConversationsList.Input.Body
    ) async throws -> Operations.ConversationsList.Output {
        try await conversationsList(Operations.ConversationsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists shared channel invites that have been generated or received but have not been approved by all parties
    ///
    /// - Remark: HTTP `POST /conversations.listConnectInvites`.
    /// - Remark: Generated from `#/paths//conversations.listConnectInvites/post(conversationsListConnectInvites)`.
    public func conversationsListConnectInvites(
        headers: Operations.ConversationsListConnectInvites.Input.Headers = .init(),
        body: Operations.ConversationsListConnectInvites.Input.Body
    ) async throws -> Operations.ConversationsListConnectInvites.Output {
        try await conversationsListConnectInvites(Operations.ConversationsListConnectInvites.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sets the read cursor in a channel.
    ///
    /// - Remark: HTTP `POST /conversations.mark`.
    /// - Remark: Generated from `#/paths//conversations.mark/post(conversationsMark)`.
    public func conversationsMark(
        headers: Operations.ConversationsMark.Input.Headers = .init(),
        body: Operations.ConversationsMark.Input.Body
    ) async throws -> Operations.ConversationsMark.Output {
        try await conversationsMark(Operations.ConversationsMark.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve members of a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.members`.
    /// - Remark: Generated from `#/paths//conversations.members/post(conversationsMembers)`.
    public func conversationsMembers(
        headers: Operations.ConversationsMembers.Input.Headers = .init(),
        body: Operations.ConversationsMembers.Input.Body
    ) async throws -> Operations.ConversationsMembers.Output {
        try await conversationsMembers(Operations.ConversationsMembers.Input(
            headers: headers,
            body: body
        ))
    }
    /// Opens or resumes a direct message or multi-person direct message.
    ///
    /// - Remark: HTTP `POST /conversations.open`.
    /// - Remark: Generated from `#/paths//conversations.open/post(conversationsOpen)`.
    public func conversationsOpen(
        headers: Operations.ConversationsOpen.Input.Headers = .init(),
        body: Operations.ConversationsOpen.Input.Body
    ) async throws -> Operations.ConversationsOpen.Output {
        try await conversationsOpen(Operations.ConversationsOpen.Input(
            headers: headers,
            body: body
        ))
    }
    /// Renames a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.rename`.
    /// - Remark: Generated from `#/paths//conversations.rename/post(conversationsRename)`.
    public func conversationsRename(
        headers: Operations.ConversationsRename.Input.Headers = .init(),
        body: Operations.ConversationsRename.Input.Body
    ) async throws -> Operations.ConversationsRename.Output {
        try await conversationsRename(Operations.ConversationsRename.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a thread of messages posted to a conversation
    ///
    /// - Remark: HTTP `POST /conversations.replies`.
    /// - Remark: Generated from `#/paths//conversations.replies/post(conversationsReplies)`.
    public func conversationsReplies(
        headers: Operations.ConversationsReplies.Input.Headers = .init(),
        body: Operations.ConversationsReplies.Input.Body
    ) async throws -> Operations.ConversationsReplies.Output {
        try await conversationsReplies(Operations.ConversationsReplies.Input(
            headers: headers,
            body: body
        ))
    }
    /// Approves a request to add an external user to a channel and sends them a Slack Connect invite
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.approve`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.approve/post(conversationsRequestSharedInviteApprove)`.
    public func conversationsRequestSharedInviteApprove(
        headers: Operations.ConversationsRequestSharedInviteApprove.Input.Headers = .init(),
        body: Operations.ConversationsRequestSharedInviteApprove.Input.Body
    ) async throws -> Operations.ConversationsRequestSharedInviteApprove.Output {
        try await conversationsRequestSharedInviteApprove(Operations.ConversationsRequestSharedInviteApprove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Denies a request to invite an external user to a channel
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.deny`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.deny/post(conversationsRequestSharedInviteDeny)`.
    public func conversationsRequestSharedInviteDeny(
        headers: Operations.ConversationsRequestSharedInviteDeny.Input.Headers = .init(),
        body: Operations.ConversationsRequestSharedInviteDeny.Input.Body
    ) async throws -> Operations.ConversationsRequestSharedInviteDeny.Output {
        try await conversationsRequestSharedInviteDeny(Operations.ConversationsRequestSharedInviteDeny.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists requests to add external users to channels with ability to filter.
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.list`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.list/post(conversationsRequestSharedInviteList)`.
    public func conversationsRequestSharedInviteList(
        headers: Operations.ConversationsRequestSharedInviteList.Input.Headers = .init(),
        body: Operations.ConversationsRequestSharedInviteList.Input.Body
    ) async throws -> Operations.ConversationsRequestSharedInviteList.Output {
        try await conversationsRequestSharedInviteList(Operations.ConversationsRequestSharedInviteList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sets the channel description.
    ///
    /// - Remark: HTTP `POST /conversations.setPurpose`.
    /// - Remark: Generated from `#/paths//conversations.setPurpose/post(conversationsSetPurpose)`.
    public func conversationsSetPurpose(
        headers: Operations.ConversationsSetPurpose.Input.Headers = .init(),
        body: Operations.ConversationsSetPurpose.Input.Body
    ) async throws -> Operations.ConversationsSetPurpose.Output {
        try await conversationsSetPurpose(Operations.ConversationsSetPurpose.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sets the topic for a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.setTopic`.
    /// - Remark: Generated from `#/paths//conversations.setTopic/post(conversationsSetTopic)`.
    public func conversationsSetTopic(
        headers: Operations.ConversationsSetTopic.Input.Headers = .init(),
        body: Operations.ConversationsSetTopic.Input.Body
    ) async throws -> Operations.ConversationsSetTopic.Output {
        try await conversationsSetTopic(Operations.ConversationsSetTopic.Input(
            headers: headers,
            body: body
        ))
    }
    /// Reverses conversation archival.
    ///
    /// - Remark: HTTP `POST /conversations.unarchive`.
    /// - Remark: Generated from `#/paths//conversations.unarchive/post(conversationsUnarchive)`.
    public func conversationsUnarchive(
        headers: Operations.ConversationsUnarchive.Input.Headers = .init(),
        body: Operations.ConversationsUnarchive.Input.Body
    ) async throws -> Operations.ConversationsUnarchive.Output {
        try await conversationsUnarchive(Operations.ConversationsUnarchive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Ends the current user's Do Not Disturb session immediately.
    ///
    /// - Remark: HTTP `POST /dnd.endDnd`.
    /// - Remark: Generated from `#/paths//dnd.endDnd/post(dndEndDnd)`.
    public func dndEndDnd(
        headers: Operations.DndEndDnd.Input.Headers = .init(),
        body: Operations.DndEndDnd.Input.Body
    ) async throws -> Operations.DndEndDnd.Output {
        try await dndEndDnd(Operations.DndEndDnd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Ends the current user's snooze mode immediately.
    ///
    /// - Remark: HTTP `POST /dnd.endSnooze`.
    /// - Remark: Generated from `#/paths//dnd.endSnooze/post(dndEndSnooze)`.
    public func dndEndSnooze(
        headers: Operations.DndEndSnooze.Input.Headers = .init(),
        body: Operations.DndEndSnooze.Input.Body
    ) async throws -> Operations.DndEndSnooze.Output {
        try await dndEndSnooze(Operations.DndEndSnooze.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a user's current Do Not Disturb status.
    ///
    /// - Remark: HTTP `POST /dnd.info`.
    /// - Remark: Generated from `#/paths//dnd.info/post(dndInfo)`.
    public func dndInfo(
        headers: Operations.DndInfo.Input.Headers = .init(),
        body: Operations.DndInfo.Input.Body
    ) async throws -> Operations.DndInfo.Output {
        try await dndInfo(Operations.DndInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Turns on Do Not Disturb mode for the current user, or changes its duration.
    ///
    /// - Remark: HTTP `POST /dnd.setSnooze`.
    /// - Remark: Generated from `#/paths//dnd.setSnooze/post(dndSetSnooze)`.
    public func dndSetSnooze(
        headers: Operations.DndSetSnooze.Input.Headers = .init(),
        body: Operations.DndSetSnooze.Input.Body
    ) async throws -> Operations.DndSetSnooze.Output {
        try await dndSetSnooze(Operations.DndSetSnooze.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves the Do Not Disturb status for up to 50 users on a team.
    ///
    /// - Remark: HTTP `POST /dnd.teamInfo`.
    /// - Remark: Generated from `#/paths//dnd.teamInfo/post(dndTeamInfo)`.
    public func dndTeamInfo(
        headers: Operations.DndTeamInfo.Input.Headers = .init(),
        body: Operations.DndTeamInfo.Input.Body
    ) async throws -> Operations.DndTeamInfo.Output {
        try await dndTeamInfo(Operations.DndTeamInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists custom emoji for a team.
    ///
    /// - Remark: HTTP `POST /emoji.list`.
    /// - Remark: Generated from `#/paths//emoji.list/post(emojiList)`.
    public func emojiList(
        headers: Operations.EmojiList.Input.Headers = .init(),
        body: Operations.EmojiList.Input.Body
    ) async throws -> Operations.EmojiList.Output {
        try await emojiList(Operations.EmojiList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Finishes an upload started with files.getUploadURLExternal
    ///
    /// - Remark: HTTP `POST /files.completeUploadExternal`.
    /// - Remark: Generated from `#/paths//files.completeUploadExternal/post(filesCompleteUploadExternal)`.
    public func filesCompleteUploadExternal(
        headers: Operations.FilesCompleteUploadExternal.Input.Headers = .init(),
        body: Operations.FilesCompleteUploadExternal.Input.Body
    ) async throws -> Operations.FilesCompleteUploadExternal.Output {
        try await filesCompleteUploadExternal(Operations.FilesCompleteUploadExternal.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a file.
    ///
    /// - Remark: HTTP `POST /files.delete`.
    /// - Remark: Generated from `#/paths//files.delete/post(filesDelete)`.
    public func filesDelete(
        headers: Operations.FilesDelete.Input.Headers = .init(),
        body: Operations.FilesDelete.Input.Body
    ) async throws -> Operations.FilesDelete.Output {
        try await filesDelete(Operations.FilesDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets a URL for an edge external file upload
    ///
    /// - Remark: HTTP `POST /files.getUploadURLExternal`.
    /// - Remark: Generated from `#/paths//files.getUploadURLExternal/post(filesGetUploadURLExternal)`.
    public func filesGetUploadURLExternal(
        headers: Operations.FilesGetUploadURLExternal.Input.Headers = .init(),
        body: Operations.FilesGetUploadURLExternal.Input.Body
    ) async throws -> Operations.FilesGetUploadURLExternal.Output {
        try await filesGetUploadURLExternal(Operations.FilesGetUploadURLExternal.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets information about a file.
    ///
    /// - Remark: HTTP `POST /files.info`.
    /// - Remark: Generated from `#/paths//files.info/post(filesInfo)`.
    public func filesInfo(
        headers: Operations.FilesInfo.Input.Headers = .init(),
        body: Operations.FilesInfo.Input.Body
    ) async throws -> Operations.FilesInfo.Output {
        try await filesInfo(Operations.FilesInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// List for a team, in a channel, or from a user with applied filters.
    ///
    /// - Remark: HTTP `POST /files.list`.
    /// - Remark: Generated from `#/paths//files.list/post(filesList)`.
    public func filesList(
        headers: Operations.FilesList.Input.Headers = .init(),
        body: Operations.FilesList.Input.Body
    ) async throws -> Operations.FilesList.Output {
        try await filesList(Operations.FilesList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Adds a file from a remote service
    ///
    /// - Remark: HTTP `POST /files.remote.add`.
    /// - Remark: Generated from `#/paths//files.remote.add/post(filesRemoteAdd)`.
    public func filesRemoteAdd(
        headers: Operations.FilesRemoteAdd.Input.Headers = .init(),
        body: Operations.FilesRemoteAdd.Input.Body
    ) async throws -> Operations.FilesRemoteAdd.Output {
        try await filesRemoteAdd(Operations.FilesRemoteAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve information about a remote file added to Slack
    ///
    /// - Remark: HTTP `POST /files.remote.info`.
    /// - Remark: Generated from `#/paths//files.remote.info/post(filesRemoteInfo)`.
    public func filesRemoteInfo(
        headers: Operations.FilesRemoteInfo.Input.Headers = .init(),
        body: Operations.FilesRemoteInfo.Input.Body
    ) async throws -> Operations.FilesRemoteInfo.Output {
        try await filesRemoteInfo(Operations.FilesRemoteInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve information about a remote file added to Slack
    ///
    /// - Remark: HTTP `POST /files.remote.list`.
    /// - Remark: Generated from `#/paths//files.remote.list/post(filesRemoteList)`.
    public func filesRemoteList(
        headers: Operations.FilesRemoteList.Input.Headers = .init(),
        body: Operations.FilesRemoteList.Input.Body
    ) async throws -> Operations.FilesRemoteList.Output {
        try await filesRemoteList(Operations.FilesRemoteList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Remove a remote file.
    ///
    /// - Remark: HTTP `POST /files.remote.remove`.
    /// - Remark: Generated from `#/paths//files.remote.remove/post(filesRemoteRemove)`.
    public func filesRemoteRemove(
        headers: Operations.FilesRemoteRemove.Input.Headers = .init(),
        body: Operations.FilesRemoteRemove.Input.Body
    ) async throws -> Operations.FilesRemoteRemove.Output {
        try await filesRemoteRemove(Operations.FilesRemoteRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Share a remote file into a channel.
    ///
    /// - Remark: HTTP `POST /files.remote.share`.
    /// - Remark: Generated from `#/paths//files.remote.share/post(filesRemoteShare)`.
    public func filesRemoteShare(
        headers: Operations.FilesRemoteShare.Input.Headers = .init(),
        body: Operations.FilesRemoteShare.Input.Body
    ) async throws -> Operations.FilesRemoteShare.Output {
        try await filesRemoteShare(Operations.FilesRemoteShare.Input(
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing remote file.
    ///
    /// - Remark: HTTP `POST /files.remote.update`.
    /// - Remark: Generated from `#/paths//files.remote.update/post(filesRemoteUpdate)`.
    public func filesRemoteUpdate(
        headers: Operations.FilesRemoteUpdate.Input.Headers = .init(),
        body: Operations.FilesRemoteUpdate.Input.Body
    ) async throws -> Operations.FilesRemoteUpdate.Output {
        try await filesRemoteUpdate(Operations.FilesRemoteUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Revokes public/external sharing access for a file
    ///
    /// - Remark: HTTP `POST /files.revokePublicURL`.
    /// - Remark: Generated from `#/paths//files.revokePublicURL/post(filesRevokePublicURL)`.
    public func filesRevokePublicURL(
        headers: Operations.FilesRevokePublicURL.Input.Headers = .init(),
        body: Operations.FilesRevokePublicURL.Input.Body
    ) async throws -> Operations.FilesRevokePublicURL.Output {
        try await filesRevokePublicURL(Operations.FilesRevokePublicURL.Input(
            headers: headers,
            body: body
        ))
    }
    /// Enables a file for public/external sharing.
    ///
    /// - Remark: HTTP `POST /files.sharedPublicURL`.
    /// - Remark: Generated from `#/paths//files.sharedPublicURL/post(filesSharedPublicURL)`.
    public func filesSharedPublicURL(
        headers: Operations.FilesSharedPublicURL.Input.Headers = .init(),
        body: Operations.FilesSharedPublicURL.Input.Body
    ) async throws -> Operations.FilesSharedPublicURL.Output {
        try await filesSharedPublicURL(Operations.FilesSharedPublicURL.Input(
            headers: headers,
            body: body
        ))
    }
    /// Uploads or creates a file.
    ///
    /// - Remark: HTTP `POST /files.upload`.
    /// - Remark: Generated from `#/paths//files.upload/post(filesUpload)`.
    public func filesUpload(
        headers: Operations.FilesUpload.Input.Headers = .init(),
        body: Operations.FilesUpload.Input.Body
    ) async throws -> Operations.FilesUpload.Output {
        try await filesUpload(Operations.FilesUpload.Input(
            headers: headers,
            body: body
        ))
    }
    /// Signal that a function failed to complete
    ///
    /// - Remark: HTTP `POST /functions.completeError`.
    /// - Remark: Generated from `#/paths//functions.completeError/post(functionsCompleteError)`.
    public func functionsCompleteError(
        headers: Operations.FunctionsCompleteError.Input.Headers = .init(),
        body: Operations.FunctionsCompleteError.Input.Body
    ) async throws -> Operations.FunctionsCompleteError.Output {
        try await functionsCompleteError(Operations.FunctionsCompleteError.Input(
            headers: headers,
            body: body
        ))
    }
    /// Signal the successful completion of a function
    ///
    /// - Remark: HTTP `POST /functions.completeSuccess`.
    /// - Remark: Generated from `#/paths//functions.completeSuccess/post(functionsCompleteSuccess)`.
    public func functionsCompleteSuccess(
        headers: Operations.FunctionsCompleteSuccess.Input.Headers = .init(),
        body: Operations.FunctionsCompleteSuccess.Input.Body
    ) async throws -> Operations.FunctionsCompleteSuccess.Output {
        try await functionsCompleteSuccess(Operations.FunctionsCompleteSuccess.Input(
            headers: headers,
            body: body
        ))
    }
    /// For Enterprise Grid workspaces, map local user IDs to global user IDs
    ///
    /// - Remark: HTTP `POST /migration.exchange`.
    /// - Remark: Generated from `#/paths//migration.exchange/post(migrationExchange)`.
    public func migrationExchange(
        headers: Operations.MigrationExchange.Input.Headers = .init(),
        body: Operations.MigrationExchange.Input.Body
    ) async throws -> Operations.MigrationExchange.Output {
        try await migrationExchange(Operations.MigrationExchange.Input(
            headers: headers,
            body: body
        ))
    }
    /// Exchanges a temporary OAuth verifier code for an access token.
    ///
    /// - Remark: HTTP `POST /oauth.v2.access`.
    /// - Remark: Generated from `#/paths//oauth.v2.access/post(oauthV2Access)`.
    public func oauthV2Access(
        headers: Operations.OauthV2Access.Input.Headers = .init(),
        body: Operations.OauthV2Access.Input.Body
    ) async throws -> Operations.OauthV2Access.Output {
        try await oauthV2Access(Operations.OauthV2Access.Input(
            headers: headers,
            body: body
        ))
    }
    /// Exchanges a legacy access token for a new expiring access token and refresh token
    ///
    /// - Remark: HTTP `POST /oauth.v2.exchange`.
    /// - Remark: Generated from `#/paths//oauth.v2.exchange/post(oauthV2Exchange)`.
    public func oauthV2Exchange(
        headers: Operations.OauthV2Exchange.Input.Headers = .init(),
        body: Operations.OauthV2Exchange.Input.Body
    ) async throws -> Operations.OauthV2Exchange.Output {
        try await oauthV2Exchange(Operations.OauthV2Exchange.Input(
            headers: headers,
            body: body
        ))
    }
    /// Exchanges a temporary OAuth verifier code for an access token for Sign in with Slack.
    ///
    /// - Remark: HTTP `POST /openid.connect.token`.
    /// - Remark: Generated from `#/paths//openid.connect.token/post(openidConnectToken)`.
    public func openidConnectToken(
        headers: Operations.OpenidConnectToken.Input.Headers = .init(),
        body: Operations.OpenidConnectToken.Input.Body
    ) async throws -> Operations.OpenidConnectToken.Output {
        try await openidConnectToken(Operations.OpenidConnectToken.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get the identity of a user who has authorized Sign in with Slack.
    ///
    /// - Remark: HTTP `POST /openid.connect.userInfo`.
    /// - Remark: Generated from `#/paths//openid.connect.userInfo/post(openidConnectUserInfo)`.
    public func openidConnectUserInfo(
        headers: Operations.OpenidConnectUserInfo.Input.Headers = .init(),
        body: Operations.OpenidConnectUserInfo.Input.Body
    ) async throws -> Operations.OpenidConnectUserInfo.Output {
        try await openidConnectUserInfo(Operations.OpenidConnectUserInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Pins an item to a channel.
    ///
    /// - Remark: HTTP `POST /pins.add`.
    /// - Remark: Generated from `#/paths//pins.add/post(pinsAdd)`.
    public func pinsAdd(
        headers: Operations.PinsAdd.Input.Headers = .init(),
        body: Operations.PinsAdd.Input.Body
    ) async throws -> Operations.PinsAdd.Output {
        try await pinsAdd(Operations.PinsAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists items pinned to a channel.
    ///
    /// - Remark: HTTP `POST /pins.list`.
    /// - Remark: Generated from `#/paths//pins.list/post(pinsList)`.
    public func pinsList(
        headers: Operations.PinsList.Input.Headers = .init(),
        body: Operations.PinsList.Input.Body
    ) async throws -> Operations.PinsList.Output {
        try await pinsList(Operations.PinsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Un-pins an item from a channel.
    ///
    /// - Remark: HTTP `POST /pins.remove`.
    /// - Remark: Generated from `#/paths//pins.remove/post(pinsRemove)`.
    public func pinsRemove(
        headers: Operations.PinsRemove.Input.Headers = .init(),
        body: Operations.PinsRemove.Input.Body
    ) async throws -> Operations.PinsRemove.Output {
        try await pinsRemove(Operations.PinsRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Adds a reaction to an item.
    ///
    /// - Remark: HTTP `POST /reactions.add`.
    /// - Remark: Generated from `#/paths//reactions.add/post(reactionsAdd)`.
    public func reactionsAdd(
        headers: Operations.ReactionsAdd.Input.Headers = .init(),
        body: Operations.ReactionsAdd.Input.Body
    ) async throws -> Operations.ReactionsAdd.Output {
        try await reactionsAdd(Operations.ReactionsAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets reactions for an item.
    ///
    /// - Remark: HTTP `POST /reactions.get`.
    /// - Remark: Generated from `#/paths//reactions.get/post(reactionsGet)`.
    public func reactionsGet(
        headers: Operations.ReactionsGet.Input.Headers = .init(),
        body: Operations.ReactionsGet.Input.Body
    ) async throws -> Operations.ReactionsGet.Output {
        try await reactionsGet(Operations.ReactionsGet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists reactions made by a user.
    ///
    /// - Remark: HTTP `POST /reactions.list`.
    /// - Remark: Generated from `#/paths//reactions.list/post(reactionsList)`.
    public func reactionsList(
        headers: Operations.ReactionsList.Input.Headers = .init(),
        body: Operations.ReactionsList.Input.Body
    ) async throws -> Operations.ReactionsList.Output {
        try await reactionsList(Operations.ReactionsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Removes a reaction from an item.
    ///
    /// - Remark: HTTP `POST /reactions.remove`.
    /// - Remark: Generated from `#/paths//reactions.remove/post(reactionsRemove)`.
    public func reactionsRemove(
        headers: Operations.ReactionsRemove.Input.Headers = .init(),
        body: Operations.ReactionsRemove.Input.Body
    ) async throws -> Operations.ReactionsRemove.Output {
        try await reactionsRemove(Operations.ReactionsRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.add`.
    /// - Remark: Generated from `#/paths//reminders.add/post(remindersAdd)`.
    public func remindersAdd(
        headers: Operations.RemindersAdd.Input.Headers = .init(),
        body: Operations.RemindersAdd.Input.Body
    ) async throws -> Operations.RemindersAdd.Output {
        try await remindersAdd(Operations.RemindersAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Marks a reminder as complete.
    ///
    /// - Remark: HTTP `POST /reminders.complete`.
    /// - Remark: Generated from `#/paths//reminders.complete/post(remindersComplete)`.
    public func remindersComplete(
        headers: Operations.RemindersComplete.Input.Headers = .init(),
        body: Operations.RemindersComplete.Input.Body
    ) async throws -> Operations.RemindersComplete.Output {
        try await remindersComplete(Operations.RemindersComplete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.delete`.
    /// - Remark: Generated from `#/paths//reminders.delete/post(remindersDelete)`.
    public func remindersDelete(
        headers: Operations.RemindersDelete.Input.Headers = .init(),
        body: Operations.RemindersDelete.Input.Body
    ) async throws -> Operations.RemindersDelete.Output {
        try await remindersDelete(Operations.RemindersDelete.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets information about a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.info`.
    /// - Remark: Generated from `#/paths//reminders.info/post(remindersInfo)`.
    public func remindersInfo(
        headers: Operations.RemindersInfo.Input.Headers = .init(),
        body: Operations.RemindersInfo.Input.Body
    ) async throws -> Operations.RemindersInfo.Output {
        try await remindersInfo(Operations.RemindersInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists all reminders created by or for a given user.
    ///
    /// - Remark: HTTP `POST /reminders.list`.
    /// - Remark: Generated from `#/paths//reminders.list/post(remindersList)`.
    public func remindersList(
        headers: Operations.RemindersList.Input.Headers = .init(),
        body: Operations.RemindersList.Input.Body
    ) async throws -> Operations.RemindersList.Output {
        try await remindersList(Operations.RemindersList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Starts a Real Time Messaging session.
    ///
    /// - Remark: HTTP `POST /rtm.connect`.
    /// - Remark: Generated from `#/paths//rtm.connect/post(rtmConnect)`.
    public func rtmConnect(
        headers: Operations.RtmConnect.Input.Headers = .init(),
        body: Operations.RtmConnect.Input.Body
    ) async throws -> Operations.RtmConnect.Output {
        try await rtmConnect(Operations.RtmConnect.Input(
            headers: headers,
            body: body
        ))
    }
    /// Searches for messages and files matching a query.
    ///
    /// - Remark: HTTP `POST /search.all`.
    /// - Remark: Generated from `#/paths//search.all/post(searchAll)`.
    public func searchAll(
        headers: Operations.SearchAll.Input.Headers = .init(),
        body: Operations.SearchAll.Input.Body
    ) async throws -> Operations.SearchAll.Output {
        try await searchAll(Operations.SearchAll.Input(
            headers: headers,
            body: body
        ))
    }
    /// Searches for files matching a query.
    ///
    /// - Remark: HTTP `POST /search.files`.
    /// - Remark: Generated from `#/paths//search.files/post(searchFiles)`.
    public func searchFiles(
        headers: Operations.SearchFiles.Input.Headers = .init(),
        body: Operations.SearchFiles.Input.Body
    ) async throws -> Operations.SearchFiles.Output {
        try await searchFiles(Operations.SearchFiles.Input(
            headers: headers,
            body: body
        ))
    }
    /// Searches for messages matching a query.
    ///
    /// - Remark: HTTP `POST /search.messages`.
    /// - Remark: Generated from `#/paths//search.messages/post(searchMessages)`.
    public func searchMessages(
        headers: Operations.SearchMessages.Input.Headers = .init(),
        body: Operations.SearchMessages.Input.Body
    ) async throws -> Operations.SearchMessages.Output {
        try await searchMessages(Operations.SearchMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// Save an item for later. Formerly known as adding a star.
    ///
    /// - Remark: HTTP `POST /stars.add`.
    /// - Remark: Generated from `#/paths//stars.add/post(starsAdd)`.
    public func starsAdd(
        headers: Operations.StarsAdd.Input.Headers = .init(),
        body: Operations.StarsAdd.Input.Body
    ) async throws -> Operations.StarsAdd.Output {
        try await starsAdd(Operations.StarsAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Listed a user's saved items, formerly known as stars.
    ///
    /// - Remark: HTTP `POST /stars.list`.
    /// - Remark: Generated from `#/paths//stars.list/post(starsList)`.
    public func starsList(
        headers: Operations.StarsList.Input.Headers = .init(),
        body: Operations.StarsList.Input.Body
    ) async throws -> Operations.StarsList.Output {
        try await starsList(Operations.StarsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Removes a saved item (star) from an item.
    ///
    /// - Remark: HTTP `POST /stars.remove`.
    /// - Remark: Generated from `#/paths//stars.remove/post(starsRemove)`.
    public func starsRemove(
        headers: Operations.StarsRemove.Input.Headers = .init(),
        body: Operations.StarsRemove.Input.Body
    ) async throws -> Operations.StarsRemove.Output {
        try await starsRemove(Operations.StarsRemove.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets the access logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.accessLogs`.
    /// - Remark: Generated from `#/paths//team.accessLogs/post(teamAccessLogs)`.
    public func teamAccessLogs(
        headers: Operations.TeamAccessLogs.Input.Headers = .init(),
        body: Operations.TeamAccessLogs.Input.Body
    ) async throws -> Operations.TeamAccessLogs.Output {
        try await teamAccessLogs(Operations.TeamAccessLogs.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets billable users information for the current team.
    ///
    /// - Remark: HTTP `POST /team.billableInfo`.
    /// - Remark: Generated from `#/paths//team.billableInfo/post(teamBillableInfo)`.
    public func teamBillableInfo(
        headers: Operations.TeamBillableInfo.Input.Headers = .init(),
        body: Operations.TeamBillableInfo.Input.Body
    ) async throws -> Operations.TeamBillableInfo.Output {
        try await teamBillableInfo(Operations.TeamBillableInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Reads a workspace's billing plan information.
    ///
    /// - Remark: HTTP `POST /team.billing.info`.
    /// - Remark: Generated from `#/paths//team.billing.info/post(teamBillingInfo)`.
    public func teamBillingInfo(
        headers: Operations.TeamBillingInfo.Input.Headers = .init(),
        body: Operations.TeamBillingInfo.Input.Body
    ) async throws -> Operations.TeamBillingInfo.Output {
        try await teamBillingInfo(Operations.TeamBillingInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Disconnect an external organization.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.disconnect`.
    /// - Remark: Generated from `#/paths//team.externalTeams.disconnect/post(teamExternalTeamsDisconnect)`.
    public func teamExternalTeamsDisconnect(
        headers: Operations.TeamExternalTeamsDisconnect.Input.Headers = .init(),
        body: Operations.TeamExternalTeamsDisconnect.Input.Body
    ) async throws -> Operations.TeamExternalTeamsDisconnect.Output {
        try await teamExternalTeamsDisconnect(Operations.TeamExternalTeamsDisconnect.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns a list of all the external teams connected and details about the connection.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.list`.
    /// - Remark: Generated from `#/paths//team.externalTeams.list/post(teamExternalTeamsList)`.
    public func teamExternalTeamsList(
        headers: Operations.TeamExternalTeamsList.Input.Headers = .init(),
        body: Operations.TeamExternalTeamsList.Input.Body
    ) async throws -> Operations.TeamExternalTeamsList.Output {
        try await teamExternalTeamsList(Operations.TeamExternalTeamsList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets information about the current team.
    ///
    /// - Remark: HTTP `POST /team.info`.
    /// - Remark: Generated from `#/paths//team.info/post(teamInfo)`.
    public func teamInfo(
        headers: Operations.TeamInfo.Input.Headers = .init(),
        body: Operations.TeamInfo.Input.Body
    ) async throws -> Operations.TeamInfo.Output {
        try await teamInfo(Operations.TeamInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets the integration logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.integrationLogs`.
    /// - Remark: Generated from `#/paths//team.integrationLogs/post(teamIntegrationLogs)`.
    public func teamIntegrationLogs(
        headers: Operations.TeamIntegrationLogs.Input.Headers = .init(),
        body: Operations.TeamIntegrationLogs.Input.Body
    ) async throws -> Operations.TeamIntegrationLogs.Output {
        try await teamIntegrationLogs(Operations.TeamIntegrationLogs.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a list of a workspace's team preferences.
    ///
    /// - Remark: HTTP `POST /team.preferences.list`.
    /// - Remark: Generated from `#/paths//team.preferences.list/post(teamPreferencesList)`.
    public func teamPreferencesList(
        headers: Operations.TeamPreferencesList.Input.Headers = .init(),
        body: Operations.TeamPreferencesList.Input.Body
    ) async throws -> Operations.TeamPreferencesList.Output {
        try await teamPreferencesList(Operations.TeamPreferencesList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a team's profile.
    ///
    /// - Remark: HTTP `POST /team.profile.get`.
    /// - Remark: Generated from `#/paths//team.profile.get/post(teamProfileGet)`.
    public func teamProfileGet(
        headers: Operations.TeamProfileGet.Input.Headers = .init(),
        body: Operations.TeamProfileGet.Input.Body
    ) async throws -> Operations.TeamProfileGet.Output {
        try await teamProfileGet(Operations.TeamProfileGet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Exchanges a refresh token for a new app configuration token.
    ///
    /// - Remark: HTTP `POST /tooling.tokens.rotate`.
    /// - Remark: Generated from `#/paths//tooling.tokens.rotate/post(toolingTokensRotate)`.
    public func toolingTokensRotate(
        headers: Operations.ToolingTokensRotate.Input.Headers = .init(),
        body: Operations.ToolingTokensRotate.Input.Body
    ) async throws -> Operations.ToolingTokensRotate.Output {
        try await toolingTokensRotate(Operations.ToolingTokensRotate.Input(
            headers: headers,
            body: body
        ))
    }
    /// List conversations the calling user may access.
    ///
    /// - Remark: HTTP `POST /users.conversations`.
    /// - Remark: Generated from `#/paths//users.conversations/post(usersConversations)`.
    public func usersConversations(
        headers: Operations.UsersConversations.Input.Headers = .init(),
        body: Operations.UsersConversations.Input.Body
    ) async throws -> Operations.UsersConversations.Output {
        try await usersConversations(Operations.UsersConversations.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete the user profile photo
    ///
    /// - Remark: HTTP `POST /users.deletePhoto`.
    /// - Remark: Generated from `#/paths//users.deletePhoto/post(usersDeletePhoto)`.
    public func usersDeletePhoto(
        headers: Operations.UsersDeletePhoto.Input.Headers = .init(),
        body: Operations.UsersDeletePhoto.Input.Body
    ) async throws -> Operations.UsersDeletePhoto.Output {
        try await usersDeletePhoto(Operations.UsersDeletePhoto.Input(
            headers: headers,
            body: body
        ))
    }
    /// Look up an email address to see if someone is discoverable on Slack
    ///
    /// - Remark: HTTP `POST /users.discoverableContacts.lookup`.
    /// - Remark: Generated from `#/paths//users.discoverableContacts.lookup/post(usersDiscoverableContactsLookup)`.
    public func usersDiscoverableContactsLookup(
        headers: Operations.UsersDiscoverableContactsLookup.Input.Headers = .init(),
        body: Operations.UsersDiscoverableContactsLookup.Input.Body
    ) async throws -> Operations.UsersDiscoverableContactsLookup.Output {
        try await usersDiscoverableContactsLookup(Operations.UsersDiscoverableContactsLookup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets user presence information.
    ///
    /// - Remark: HTTP `POST /users.getPresence`.
    /// - Remark: Generated from `#/paths//users.getPresence/post(usersGetPresence)`.
    public func usersGetPresence(
        headers: Operations.UsersGetPresence.Input.Headers = .init(),
        body: Operations.UsersGetPresence.Input.Body
    ) async throws -> Operations.UsersGetPresence.Output {
        try await usersGetPresence(Operations.UsersGetPresence.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a user's identity.
    ///
    /// - Remark: HTTP `POST /users.identity`.
    /// - Remark: Generated from `#/paths//users.identity/post(usersIdentity)`.
    public func usersIdentity(
        headers: Operations.UsersIdentity.Input.Headers = .init(),
        body: Operations.UsersIdentity.Input.Body
    ) async throws -> Operations.UsersIdentity.Output {
        try await usersIdentity(Operations.UsersIdentity.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets information about a user.
    ///
    /// - Remark: HTTP `POST /users.info`.
    /// - Remark: Generated from `#/paths//users.info/post(usersInfo)`.
    public func usersInfo(
        headers: Operations.UsersInfo.Input.Headers = .init(),
        body: Operations.UsersInfo.Input.Body
    ) async throws -> Operations.UsersInfo.Output {
        try await usersInfo(Operations.UsersInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists all users in a Slack team.
    ///
    /// - Remark: HTTP `POST /users.list`.
    /// - Remark: Generated from `#/paths//users.list/post(usersList)`.
    public func usersList(
        headers: Operations.UsersList.Input.Headers = .init(),
        body: Operations.UsersList.Input.Body
    ) async throws -> Operations.UsersList.Output {
        try await usersList(Operations.UsersList.Input(
            headers: headers,
            body: body
        ))
    }
    /// Find a user with an email address.
    ///
    /// - Remark: HTTP `POST /users.lookupByEmail`.
    /// - Remark: Generated from `#/paths//users.lookupByEmail/post(usersLookupByEmail)`.
    public func usersLookupByEmail(
        headers: Operations.UsersLookupByEmail.Input.Headers = .init(),
        body: Operations.UsersLookupByEmail.Input.Body
    ) async throws -> Operations.UsersLookupByEmail.Output {
        try await usersLookupByEmail(Operations.UsersLookupByEmail.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a user's profile information, including their custom status.
    ///
    /// - Remark: HTTP `POST /users.profile.get`.
    /// - Remark: Generated from `#/paths//users.profile.get/post(usersProfileGet)`.
    public func usersProfileGet(
        headers: Operations.UsersProfileGet.Input.Headers = .init(),
        body: Operations.UsersProfileGet.Input.Body
    ) async throws -> Operations.UsersProfileGet.Output {
        try await usersProfileGet(Operations.UsersProfileGet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set a user's profile information, including custom status.
    ///
    /// - Remark: HTTP `POST /users.profile.set`.
    /// - Remark: Generated from `#/paths//users.profile.set/post(usersProfileSet)`.
    public func usersProfileSet(
        headers: Operations.UsersProfileSet.Input.Headers = .init(),
        body: Operations.UsersProfileSet.Input.Body
    ) async throws -> Operations.UsersProfileSet.Output {
        try await usersProfileSet(Operations.UsersProfileSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Marked a user as active. Deprecated and non-functional.
    ///
    /// - Remark: HTTP `POST /users.setActive`.
    /// - Remark: Generated from `#/paths//users.setActive/post(usersSetActive)`.
    public func usersSetActive(
        headers: Operations.UsersSetActive.Input.Headers = .init(),
        body: Operations.UsersSetActive.Input.Body
    ) async throws -> Operations.UsersSetActive.Output {
        try await usersSetActive(Operations.UsersSetActive.Input(
            headers: headers,
            body: body
        ))
    }
    /// Set the user profile photo
    ///
    /// - Remark: HTTP `POST /users.setPhoto`.
    /// - Remark: Generated from `#/paths//users.setPhoto/post(usersSetPhoto)`.
    public func usersSetPhoto(
        headers: Operations.UsersSetPhoto.Input.Headers = .init(),
        body: Operations.UsersSetPhoto.Input.Body
    ) async throws -> Operations.UsersSetPhoto.Output {
        try await usersSetPhoto(Operations.UsersSetPhoto.Input(
            headers: headers,
            body: body
        ))
    }
    /// Manually sets user presence.
    ///
    /// - Remark: HTTP `POST /users.setPresence`.
    /// - Remark: Generated from `#/paths//users.setPresence/post(usersSetPresence)`.
    public func usersSetPresence(
        headers: Operations.UsersSetPresence.Input.Headers = .init(),
        body: Operations.UsersSetPresence.Input.Body
    ) async throws -> Operations.UsersSetPresence.Output {
        try await usersSetPresence(Operations.UsersSetPresence.Input(
            headers: headers,
            body: body
        ))
    }
    /// Open a view for a user.
    ///
    /// - Remark: HTTP `POST /views.open`.
    /// - Remark: Generated from `#/paths//views.open/post(viewsOpen)`.
    public func viewsOpen(
        headers: Operations.ViewsOpen.Input.Headers = .init(),
        body: Operations.ViewsOpen.Input.Body
    ) async throws -> Operations.ViewsOpen.Output {
        try await viewsOpen(Operations.ViewsOpen.Input(
            headers: headers,
            body: body
        ))
    }
    /// Publish a static view for a User.
    ///
    /// - Remark: HTTP `POST /views.publish`.
    /// - Remark: Generated from `#/paths//views.publish/post(viewsPublish)`.
    public func viewsPublish(
        headers: Operations.ViewsPublish.Input.Headers = .init(),
        body: Operations.ViewsPublish.Input.Body
    ) async throws -> Operations.ViewsPublish.Output {
        try await viewsPublish(Operations.ViewsPublish.Input(
            headers: headers,
            body: body
        ))
    }
    /// Push a view onto the stack of a root view.
    ///
    /// - Remark: HTTP `POST /views.push`.
    /// - Remark: Generated from `#/paths//views.push/post(viewsPush)`.
    public func viewsPush(
        headers: Operations.ViewsPush.Input.Headers = .init(),
        body: Operations.ViewsPush.Input.Body
    ) async throws -> Operations.ViewsPush.Output {
        try await viewsPush(Operations.ViewsPush.Input(
            headers: headers,
            body: body
        ))
    }
    /// Update an existing view.
    ///
    /// - Remark: HTTP `POST /views.update`.
    /// - Remark: Generated from `#/paths//views.update/post(viewsUpdate)`.
    public func viewsUpdate(
        headers: Operations.ViewsUpdate.Input.Headers = .init(),
        body: Operations.ViewsUpdate.Input.Body
    ) async throws -> Operations.ViewsUpdate.Output {
        try await viewsUpdate(Operations.ViewsUpdate.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/AdminAnalyticsGetFileResponse`.
        public struct AdminAnalyticsGetFileResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAnalyticsGetFileResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAnalyticsGetFileResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAnalyticsGetFileResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAnalyticsGetFileResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAnalyticsGetFileResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminAnalyticsGetFileResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResponseMetadata`.
        public struct ResponseMetadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ResponseMetadata/messages`.
            public var messages: [Swift.String]?
            /// Creates a new `ResponseMetadata`.
            ///
            /// - Parameters:
            ///   - messages:
            public init(messages: [Swift.String]? = nil) {
                self.messages = messages
            }
            public enum CodingKeys: String, CodingKey {
                case messages
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsActivitiesListResponse`.
        public struct AdminAppsActivitiesListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsActivitiesListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsActivitiesListResponse/activities`.
            public var activities: [Components.Schemas.Activity]?
            /// - Remark: Generated from `#/components/schemas/AdminAppsActivitiesListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsActivitiesListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsActivitiesListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsActivitiesListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminAppsActivitiesListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - activities:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                activities: [Components.Schemas.Activity]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.activities = activities
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case activities
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Activity`.
        public struct Activity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Activity/level`.
            public var level: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Activity/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Activity/payload`.
            public var payload: Components.Schemas.Payload?
            /// - Remark: Generated from `#/components/schemas/Activity/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Activity/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Activity/eventType`.
            public var eventType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Activity/componentType`.
            public var componentType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Activity/componentId`.
            public var componentId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Activity/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Activity/enterpriseId`.
            public var enterpriseId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Activity/traceId`.
            public var traceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Activity/parentExecutionId`.
            public var parentExecutionId: Swift.String?
            /// Creates a new `Activity`.
            ///
            /// - Parameters:
            ///   - level:
            ///   - source:
            ///   - payload:
            ///   - created:
            ///   - appId:
            ///   - eventType:
            ///   - componentType:
            ///   - componentId:
            ///   - teamId:
            ///   - enterpriseId:
            ///   - traceId:
            ///   - parentExecutionId:
            public init(
                level: Swift.String? = nil,
                source: Swift.String? = nil,
                payload: Components.Schemas.Payload? = nil,
                created: Swift.Int? = nil,
                appId: Swift.String? = nil,
                eventType: Swift.String? = nil,
                componentType: Swift.String? = nil,
                componentId: Swift.String? = nil,
                teamId: Swift.String? = nil,
                enterpriseId: Swift.String? = nil,
                traceId: Swift.String? = nil,
                parentExecutionId: Swift.String? = nil
            ) {
                self.level = level
                self.source = source
                self.payload = payload
                self.created = created
                self.appId = appId
                self.eventType = eventType
                self.componentType = componentType
                self.componentId = componentId
                self.teamId = teamId
                self.enterpriseId = enterpriseId
                self.traceId = traceId
                self.parentExecutionId = parentExecutionId
            }
            public enum CodingKeys: String, CodingKey {
                case level
                case source
                case payload
                case created
                case appId
                case eventType
                case componentType
                case componentId
                case teamId
                case enterpriseId
                case traceId
                case parentExecutionId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Payload`.
        public struct Payload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Payload/actor`.
            public var actor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/log`.
            public var log: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/trigger`.
            public var trigger: Components.Schemas.Trigger?
            /// - Remark: Generated from `#/components/schemas/Payload/inputs`.
            public var inputs: Components.Schemas.Inputs?
            /// - Remark: Generated from `#/components/schemas/Payload/details`.
            public var details: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/action`.
            public var action: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/execOutcome`.
            public var execOutcome: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/workflowName`.
            public var workflowName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/functionName`.
            public var functionName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/functionType`.
            public var functionType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/functionId`.
            public var functionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/functionExecutionId`.
            public var functionExecutionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/totalSteps`.
            public var totalSteps: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Payload/currentStep`.
            public var currentStep: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Payload/billingReason`.
            public var billingReason: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Payload/isBillingExcluded`.
            public var isBillingExcluded: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Payload/channelId`.
            public var channelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/botUserId`.
            public var botUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/requestType`.
            public var requestType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/datastoreName`.
            public var datastoreName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Payload/bundleSizeKb`.
            public var bundleSizeKb: Swift.Int?
            /// Creates a new `Payload`.
            ///
            /// - Parameters:
            ///   - actor:
            ///   - error:
            ///   - log:
            ///   - _type:
            ///   - trigger:
            ///   - inputs:
            ///   - details:
            ///   - action:
            ///   - execOutcome:
            ///   - workflowName:
            ///   - functionName:
            ///   - functionType:
            ///   - functionId:
            ///   - functionExecutionId:
            ///   - totalSteps:
            ///   - currentStep:
            ///   - billingReason:
            ///   - isBillingExcluded:
            ///   - channelId:
            ///   - botUserId:
            ///   - requestType:
            ///   - datastoreName:
            ///   - teamId:
            ///   - userId:
            ///   - bundleSizeKb:
            public init(
                actor: Swift.String? = nil,
                error: Swift.String? = nil,
                log: Swift.String? = nil,
                _type: Swift.String? = nil,
                trigger: Components.Schemas.Trigger? = nil,
                inputs: Components.Schemas.Inputs? = nil,
                details: Swift.String? = nil,
                action: Swift.String? = nil,
                execOutcome: Swift.String? = nil,
                workflowName: Swift.String? = nil,
                functionName: Swift.String? = nil,
                functionType: Swift.String? = nil,
                functionId: Swift.String? = nil,
                functionExecutionId: Swift.String? = nil,
                totalSteps: Swift.Int? = nil,
                currentStep: Swift.Int? = nil,
                billingReason: [Swift.String]? = nil,
                isBillingExcluded: Swift.Bool? = nil,
                channelId: Swift.String? = nil,
                botUserId: Swift.String? = nil,
                requestType: Swift.String? = nil,
                datastoreName: Swift.String? = nil,
                teamId: Swift.String? = nil,
                userId: Swift.String? = nil,
                bundleSizeKb: Swift.Int? = nil
            ) {
                self.actor = actor
                self.error = error
                self.log = log
                self._type = _type
                self.trigger = trigger
                self.inputs = inputs
                self.details = details
                self.action = action
                self.execOutcome = execOutcome
                self.workflowName = workflowName
                self.functionName = functionName
                self.functionType = functionType
                self.functionId = functionId
                self.functionExecutionId = functionExecutionId
                self.totalSteps = totalSteps
                self.currentStep = currentStep
                self.billingReason = billingReason
                self.isBillingExcluded = isBillingExcluded
                self.channelId = channelId
                self.botUserId = botUserId
                self.requestType = requestType
                self.datastoreName = datastoreName
                self.teamId = teamId
                self.userId = userId
                self.bundleSizeKb = bundleSizeKb
            }
            public enum CodingKeys: String, CodingKey {
                case actor
                case error
                case log
                case _type = "type"
                case trigger
                case inputs
                case details
                case action
                case execOutcome
                case workflowName
                case functionName
                case functionType
                case functionId
                case functionExecutionId
                case totalSteps
                case currentStep
                case billingReason
                case isBillingExcluded
                case channelId
                case botUserId
                case requestType
                case datastoreName
                case teamId
                case userId
                case bundleSizeKb
            }
        }
        /// - Remark: Generated from `#/components/schemas/Inputs`.
        public typealias Inputs = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/Trigger`.
        public struct Trigger: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Trigger/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Trigger/customizableInputParameters`.
            public var customizableInputParameters: [Components.Schemas.CustomizableInputParameter]?
            /// Creates a new `Trigger`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - customizableInputParameters:
            public init(
                url: Swift.String? = nil,
                customizableInputParameters: [Components.Schemas.CustomizableInputParameter]? = nil
            ) {
                self.url = url
                self.customizableInputParameters = customizableInputParameters
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case customizableInputParameters
            }
        }
        /// - Remark: Generated from `#/components/schemas/Config`.
        public struct Config: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Config/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/workflowAuthStrategy`.
            public var workflowAuthStrategy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/domainRestrictions`.
            public var domainRestrictions: Components.Schemas.DomainRestrictions?
            /// Creates a new `Config`.
            ///
            /// - Parameters:
            ///   - appId:
            ///   - workflowAuthStrategy:
            ///   - domainRestrictions:
            public init(
                appId: Swift.String? = nil,
                workflowAuthStrategy: Swift.String? = nil,
                domainRestrictions: Components.Schemas.DomainRestrictions? = nil
            ) {
                self.appId = appId
                self.workflowAuthStrategy = workflowAuthStrategy
                self.domainRestrictions = domainRestrictions
            }
            public enum CodingKeys: String, CodingKey {
                case appId
                case workflowAuthStrategy
                case domainRestrictions
            }
        }
        /// - Remark: Generated from `#/components/schemas/TripInformation`.
        public struct TripInformation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TripInformation/reaction`.
            public var reaction: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TripInformation/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TripInformation/channelId`.
            public var channelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TripInformation/messageTs`.
            public var messageTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TripInformation/listId`.
            public var listId: Swift.String?
            /// Creates a new `TripInformation`.
            ///
            /// - Parameters:
            ///   - reaction:
            ///   - userId:
            ///   - channelId:
            ///   - messageTs:
            ///   - listId:
            public init(
                reaction: Swift.String? = nil,
                userId: Swift.String? = nil,
                channelId: Swift.String? = nil,
                messageTs: Swift.String? = nil,
                listId: Swift.String? = nil
            ) {
                self.reaction = reaction
                self.userId = userId
                self.channelId = channelId
                self.messageTs = messageTs
                self.listId = listId
            }
            public enum CodingKeys: String, CodingKey {
                case reaction
                case userId
                case channelId
                case messageTs
                case listId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsApproveResponse`.
        public struct AdminAppsApproveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsApproveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsApproveResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsApproveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsApproveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsApproveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminAppsApproveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsApprovedListResponse`.
        public struct AdminAppsApprovedListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsApprovedListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsApprovedListResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsApprovedListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsApprovedListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsApprovedListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsApprovedListResponse/approvedApps`.
            public var approvedApps: [Components.Schemas.ApprovedApp]?
            /// - Remark: Generated from `#/components/schemas/AdminAppsApprovedListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminAppsApprovedListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - approvedApps:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                approvedApps: [Components.Schemas.ApprovedApp]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.approvedApps = approvedApps
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case approvedApps
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ApprovedApp`.
        public struct ApprovedApp: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ApprovedApp/app`.
            public var app: Components.Schemas.App?
            /// - Remark: Generated from `#/components/schemas/ApprovedApp/scopes`.
            public var scopes: [Components.Schemas.Scope]?
            /// - Remark: Generated from `#/components/schemas/ApprovedApp/dateUpdated`.
            public var dateUpdated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ApprovedApp/lastResolvedBy`.
            public var lastResolvedBy: Components.Schemas.LastResolvedBy?
            /// Creates a new `ApprovedApp`.
            ///
            /// - Parameters:
            ///   - app:
            ///   - scopes:
            ///   - dateUpdated:
            ///   - lastResolvedBy:
            public init(
                app: Components.Schemas.App? = nil,
                scopes: [Components.Schemas.Scope]? = nil,
                dateUpdated: Swift.Int? = nil,
                lastResolvedBy: Components.Schemas.LastResolvedBy? = nil
            ) {
                self.app = app
                self.scopes = scopes
                self.dateUpdated = dateUpdated
                self.lastResolvedBy = lastResolvedBy
            }
            public enum CodingKeys: String, CodingKey {
                case app
                case scopes
                case dateUpdated
                case lastResolvedBy
            }
        }
        /// - Remark: Generated from `#/components/schemas/App`.
        public struct App: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/App/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/App/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/App/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/App/icons`.
            public var icons: Components.Schemas.Icons?
            /// - Remark: Generated from `#/components/schemas/App/helpUrl`.
            public var helpUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/App/privacyPolicyUrl`.
            public var privacyPolicyUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/App/appHomepageUrl`.
            public var appHomepageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/App/appDirectoryUrl`.
            public var appDirectoryUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/App/isAppDirectoryApproved`.
            public var isAppDirectoryApproved: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/App/isInternal`.
            public var isInternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/App/isGranularBotApp`.
            public var isGranularBotApp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/App/additionalInfo`.
            public var additionalInfo: Swift.String?
            /// Creates a new `App`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - description:
            ///   - icons:
            ///   - helpUrl:
            ///   - privacyPolicyUrl:
            ///   - appHomepageUrl:
            ///   - appDirectoryUrl:
            ///   - isAppDirectoryApproved:
            ///   - isInternal:
            ///   - isGranularBotApp:
            ///   - additionalInfo:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                icons: Components.Schemas.Icons? = nil,
                helpUrl: Swift.String? = nil,
                privacyPolicyUrl: Swift.String? = nil,
                appHomepageUrl: Swift.String? = nil,
                appDirectoryUrl: Swift.String? = nil,
                isAppDirectoryApproved: Swift.Bool? = nil,
                isInternal: Swift.Bool? = nil,
                isGranularBotApp: Swift.Bool? = nil,
                additionalInfo: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.description = description
                self.icons = icons
                self.helpUrl = helpUrl
                self.privacyPolicyUrl = privacyPolicyUrl
                self.appHomepageUrl = appHomepageUrl
                self.appDirectoryUrl = appDirectoryUrl
                self.isAppDirectoryApproved = isAppDirectoryApproved
                self.isInternal = isInternal
                self.isGranularBotApp = isGranularBotApp
                self.additionalInfo = additionalInfo
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case description
                case icons
                case helpUrl
                case privacyPolicyUrl
                case appHomepageUrl
                case appDirectoryUrl
                case isAppDirectoryApproved
                case isInternal
                case isGranularBotApp
                case additionalInfo
            }
        }
        /// - Remark: Generated from `#/components/schemas/Icons`.
        public struct Icons: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Icons/image36`.
            public var image36: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Icons/image48`.
            public var image48: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Icons/image72`.
            public var image72: Swift.String?
            /// Creates a new `Icons`.
            ///
            /// - Parameters:
            ///   - image36:
            ///   - image48:
            ///   - image72:
            public init(
                image36: Swift.String? = nil,
                image48: Swift.String? = nil,
                image72: Swift.String? = nil
            ) {
                self.image36 = image36
                self.image48 = image48
                self.image72 = image72
            }
            public enum CodingKeys: String, CodingKey {
                case image36
                case image48
                case image72
            }
        }
        /// - Remark: Generated from `#/components/schemas/LastResolvedBy`.
        public struct LastResolvedBy: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LastResolvedBy/actorId`.
            public var actorId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LastResolvedBy/actorType`.
            public var actorType: Swift.String?
            /// Creates a new `LastResolvedBy`.
            ///
            /// - Parameters:
            ///   - actorId:
            ///   - actorType:
            public init(
                actorId: Swift.String? = nil,
                actorType: Swift.String? = nil
            ) {
                self.actorId = actorId
                self.actorType = actorType
            }
            public enum CodingKeys: String, CodingKey {
                case actorId
                case actorType
            }
        }
        /// - Remark: Generated from `#/components/schemas/Scope`.
        public struct Scope: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Scope/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Scope/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Scope/isSensitive`.
            public var isSensitive: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Scope/tokenType`.
            public var tokenType: Swift.String?
            /// Creates a new `Scope`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - description:
            ///   - isSensitive:
            ///   - tokenType:
            public init(
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                isSensitive: Swift.Bool? = nil,
                tokenType: Swift.String? = nil
            ) {
                self.name = name
                self.description = description
                self.isSensitive = isSensitive
                self.tokenType = tokenType
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case description
                case isSensitive
                case tokenType
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsClearResolutionResponse`.
        public struct AdminAppsClearResolutionResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsClearResolutionResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsClearResolutionResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsClearResolutionResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsClearResolutionResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsClearResolutionResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminAppsClearResolutionResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsConfigLookupResponse`.
        public struct AdminAppsConfigLookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsConfigLookupResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsConfigLookupResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsConfigLookupResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsConfigLookupResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsConfigLookupResponse/configs`.
            public var configs: [Components.Schemas.Config]?
            /// - Remark: Generated from `#/components/schemas/AdminAppsConfigLookupResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminAppsConfigLookupResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - configs:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                configs: [Components.Schemas.Config]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.configs = configs
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case configs
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/DomainRestrictions`.
        public struct DomainRestrictions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DomainRestrictions/emails`.
            public var emails: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/DomainRestrictions/urls`.
            public var urls: [Swift.String]?
            /// Creates a new `DomainRestrictions`.
            ///
            /// - Parameters:
            ///   - emails:
            ///   - urls:
            public init(
                emails: [Swift.String]? = nil,
                urls: [Swift.String]? = nil
            ) {
                self.emails = emails
                self.urls = urls
            }
            public enum CodingKeys: String, CodingKey {
                case emails
                case urls
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsConfigSetResponse`.
        public struct AdminAppsConfigSetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsConfigSetResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsConfigSetResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsConfigSetResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsConfigSetResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminAppsConfigSetResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsCancelResponse`.
        public struct AdminAppsRequestsCancelResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsCancelResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsCancelResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsCancelResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsCancelResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsCancelResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminAppsRequestsCancelResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsListResponse`.
        public struct AdminAppsRequestsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsListResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsListResponse/appRequests`.
            public var appRequests: [Components.Schemas.AppRequest]?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRequestsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminAppsRequestsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - appRequests:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                appRequests: [Components.Schemas.AppRequest]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.appRequests = appRequests
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case appRequests
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppRequest`.
        public struct AppRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppRequest/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppRequest/app`.
            public var app: Components.Schemas.App?
            /// - Remark: Generated from `#/components/schemas/AppRequest/user`.
            public var user: Components.Schemas.User?
            /// - Remark: Generated from `#/components/schemas/AppRequest/team`.
            public var team: Components.Schemas.Team?
            /// - Remark: Generated from `#/components/schemas/AppRequest/scopes`.
            public var scopes: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/AppRequest/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppRequest/previousResolution`.
            public var previousResolution: Components.Schemas.PreviousResolution?
            /// - Remark: Generated from `#/components/schemas/AppRequest/isUserAppCollaborator`.
            public var isUserAppCollaborator: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AppRequest/dateCreated`.
            public var dateCreated: Swift.Int?
            /// Creates a new `AppRequest`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - app:
            ///   - user:
            ///   - team:
            ///   - scopes:
            ///   - message:
            ///   - previousResolution:
            ///   - isUserAppCollaborator:
            ///   - dateCreated:
            public init(
                id: Swift.String? = nil,
                app: Components.Schemas.App? = nil,
                user: Components.Schemas.User? = nil,
                team: Components.Schemas.Team? = nil,
                scopes: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                message: Swift.String? = nil,
                previousResolution: Components.Schemas.PreviousResolution? = nil,
                isUserAppCollaborator: Swift.Bool? = nil,
                dateCreated: Swift.Int? = nil
            ) {
                self.id = id
                self.app = app
                self.user = user
                self.team = team
                self.scopes = scopes
                self.message = message
                self.previousResolution = previousResolution
                self.isUserAppCollaborator = isUserAppCollaborator
                self.dateCreated = dateCreated
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case app
                case user
                case team
                case scopes
                case message
                case previousResolution
                case isUserAppCollaborator
                case dateCreated
            }
        }
        /// - Remark: Generated from `#/components/schemas/PreviousResolution`.
        public struct PreviousResolution: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PreviousResolution/status`.
            public var status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PreviousResolution/scopes`.
            public var scopes: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// Creates a new `PreviousResolution`.
            ///
            /// - Parameters:
            ///   - status:
            ///   - scopes:
            public init(
                status: Swift.String? = nil,
                scopes: [OpenAPIRuntime.OpenAPIValueContainer]? = nil
            ) {
                self.status = status
                self.scopes = scopes
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case scopes
            }
        }
        /// - Remark: Generated from `#/components/schemas/Team`.
        public struct Team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Team/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Team/id`.
            public var id: Swift.String?
            /// Creates a new `Team`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - id:
            public init(
                name: Swift.String? = nil,
                id: Swift.String? = nil
            ) {
                self.name = name
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case id
            }
        }
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/User/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/User/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/User/deleted`.
            public var deleted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/color`.
            public var color: Swift.String?
            /// - Remark: Generated from `#/components/schemas/User/tz`.
            public var tz: Swift.String?
            /// - Remark: Generated from `#/components/schemas/User/profile`.
            public var profile: Components.Schemas.Profile?
            /// - Remark: Generated from `#/components/schemas/User/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/User/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/User/realName`.
            public var realName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/User/tzLabel`.
            public var tzLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/User/tzOffset`.
            public var tzOffset: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/User/isAdmin`.
            public var isAdmin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/isOwner`.
            public var isOwner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/isPrimaryOwner`.
            public var isPrimaryOwner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/isRestricted`.
            public var isRestricted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/isUltraRestricted`.
            public var isUltraRestricted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/isBot`.
            public var isBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/isAppUser`.
            public var isAppUser: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/has2fa`.
            public var has2fa: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/isEmailConfirmed`.
            public var isEmailConfirmed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/whoCanShareContactCard`.
            public var whoCanShareContactCard: Swift.String?
            /// - Remark: Generated from `#/components/schemas/User/isInvitedUser`.
            public var isInvitedUser: Swift.Bool?
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - deleted:
            ///   - color:
            ///   - tz:
            ///   - profile:
            ///   - updated:
            ///   - teamId:
            ///   - realName:
            ///   - tzLabel:
            ///   - tzOffset:
            ///   - isAdmin:
            ///   - isOwner:
            ///   - isPrimaryOwner:
            ///   - isRestricted:
            ///   - isUltraRestricted:
            ///   - isBot:
            ///   - isAppUser:
            ///   - has2fa:
            ///   - isEmailConfirmed:
            ///   - whoCanShareContactCard:
            ///   - isInvitedUser:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                deleted: Swift.Bool? = nil,
                color: Swift.String? = nil,
                tz: Swift.String? = nil,
                profile: Components.Schemas.Profile? = nil,
                updated: Swift.Int? = nil,
                teamId: Swift.String? = nil,
                realName: Swift.String? = nil,
                tzLabel: Swift.String? = nil,
                tzOffset: Swift.Int? = nil,
                isAdmin: Swift.Bool? = nil,
                isOwner: Swift.Bool? = nil,
                isPrimaryOwner: Swift.Bool? = nil,
                isRestricted: Swift.Bool? = nil,
                isUltraRestricted: Swift.Bool? = nil,
                isBot: Swift.Bool? = nil,
                isAppUser: Swift.Bool? = nil,
                has2fa: Swift.Bool? = nil,
                isEmailConfirmed: Swift.Bool? = nil,
                whoCanShareContactCard: Swift.String? = nil,
                isInvitedUser: Swift.Bool? = nil
            ) {
                self.id = id
                self.name = name
                self.deleted = deleted
                self.color = color
                self.tz = tz
                self.profile = profile
                self.updated = updated
                self.teamId = teamId
                self.realName = realName
                self.tzLabel = tzLabel
                self.tzOffset = tzOffset
                self.isAdmin = isAdmin
                self.isOwner = isOwner
                self.isPrimaryOwner = isPrimaryOwner
                self.isRestricted = isRestricted
                self.isUltraRestricted = isUltraRestricted
                self.isBot = isBot
                self.isAppUser = isAppUser
                self.has2fa = has2fa
                self.isEmailConfirmed = isEmailConfirmed
                self.whoCanShareContactCard = whoCanShareContactCard
                self.isInvitedUser = isInvitedUser
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case deleted
                case color
                case tz
                case profile
                case updated
                case teamId
                case realName
                case tzLabel
                case tzOffset
                case isAdmin
                case isOwner
                case isPrimaryOwner
                case isRestricted
                case isUltraRestricted
                case isBot
                case isAppUser
                case has2fa
                case isEmailConfirmed
                case whoCanShareContactCard
                case isInvitedUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictResponse`.
        public struct AdminAppsRestrictResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminAppsRestrictResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictedListResponse`.
        public struct AdminAppsRestrictedListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictedListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictedListResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictedListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictedListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictedListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictedListResponse/restrictedApps`.
            public var restrictedApps: [Components.Schemas.RestrictedApp]?
            /// - Remark: Generated from `#/components/schemas/AdminAppsRestrictedListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminAppsRestrictedListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - restrictedApps:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                restrictedApps: [Components.Schemas.RestrictedApp]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.restrictedApps = restrictedApps
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case restrictedApps
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/RestrictedApp`.
        public struct RestrictedApp: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RestrictedApp/app`.
            public var app: Components.Schemas.App?
            /// - Remark: Generated from `#/components/schemas/RestrictedApp/scopes`.
            public var scopes: [Components.Schemas.Scope]?
            /// - Remark: Generated from `#/components/schemas/RestrictedApp/dateUpdated`.
            public var dateUpdated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RestrictedApp/lastResolvedBy`.
            public var lastResolvedBy: Components.Schemas.LastResolvedBy?
            /// Creates a new `RestrictedApp`.
            ///
            /// - Parameters:
            ///   - app:
            ///   - scopes:
            ///   - dateUpdated:
            ///   - lastResolvedBy:
            public init(
                app: Components.Schemas.App? = nil,
                scopes: [Components.Schemas.Scope]? = nil,
                dateUpdated: Swift.Int? = nil,
                lastResolvedBy: Components.Schemas.LastResolvedBy? = nil
            ) {
                self.app = app
                self.scopes = scopes
                self.dateUpdated = dateUpdated
                self.lastResolvedBy = lastResolvedBy
            }
            public enum CodingKeys: String, CodingKey {
                case app
                case scopes
                case dateUpdated
                case lastResolvedBy
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAppsUninstallResponse`.
        public struct AdminAppsUninstallResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAppsUninstallResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAppsUninstallResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsUninstallResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsUninstallResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAppsUninstallResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminAppsUninstallResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyAssignEntitiesResponse`.
        public struct AdminAuthPolicyAssignEntitiesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyAssignEntitiesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyAssignEntitiesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyAssignEntitiesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyAssignEntitiesResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyAssignEntitiesResponse/entityTotalCount`.
            public var entityTotalCount: Swift.Int?
            /// Creates a new `AdminAuthPolicyAssignEntitiesResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - entityTotalCount:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                entityTotalCount: Swift.Int? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.entityTotalCount = entityTotalCount
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case entityTotalCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyGetEntitiesResponse`.
        public struct AdminAuthPolicyGetEntitiesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyGetEntitiesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyGetEntitiesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyGetEntitiesResponse/entities`.
            public var entities: [Components.Schemas.Entity]?
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyGetEntitiesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyGetEntitiesResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyGetEntitiesResponse/entityTotalCount`.
            public var entityTotalCount: Swift.Int?
            /// Creates a new `AdminAuthPolicyGetEntitiesResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - entities:
            ///   - needed:
            ///   - provided:
            ///   - entityTotalCount:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                entities: [Components.Schemas.Entity]? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                entityTotalCount: Swift.Int? = nil
            ) {
                self.ok = ok
                self.error = error
                self.entities = entities
                self.needed = needed
                self.provided = provided
                self.entityTotalCount = entityTotalCount
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case entities
                case needed
                case provided
                case entityTotalCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/Entity`.
        public struct Entity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Entity/entityId`.
            public var entityId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Entity/entityType`.
            public var entityType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Entity/dateAdded`.
            public var dateAdded: Swift.Int?
            /// Creates a new `Entity`.
            ///
            /// - Parameters:
            ///   - entityId:
            ///   - entityType:
            ///   - dateAdded:
            public init(
                entityId: Swift.String? = nil,
                entityType: Swift.String? = nil,
                dateAdded: Swift.Int? = nil
            ) {
                self.entityId = entityId
                self.entityType = entityType
                self.dateAdded = dateAdded
            }
            public enum CodingKeys: String, CodingKey {
                case entityId
                case entityType
                case dateAdded
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyRemoveEntitiesResponse`.
        public struct AdminAuthPolicyRemoveEntitiesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyRemoveEntitiesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyRemoveEntitiesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyRemoveEntitiesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyRemoveEntitiesResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAuthPolicyRemoveEntitiesResponse/entityTotalCount`.
            public var entityTotalCount: Swift.Int?
            /// Creates a new `AdminAuthPolicyRemoveEntitiesResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - entityTotalCount:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                entityTotalCount: Swift.Int? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.entityTotalCount = entityTotalCount
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case entityTotalCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminBarriersCreateResponse`.
        public struct AdminBarriersCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminBarriersCreateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminBarriersCreateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersCreateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersCreateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersCreateResponse/barrier`.
            public var barrier: Components.Schemas.Barrier?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersCreateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminBarriersCreateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - barrier:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                barrier: Components.Schemas.Barrier? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.barrier = barrier
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case barrier
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Barrier`.
        public struct Barrier: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Barrier/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Barrier/enterpriseId`.
            public var enterpriseId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Barrier/primaryUsergroup`.
            public var primaryUsergroup: Components.Schemas.Usergroup?
            /// - Remark: Generated from `#/components/schemas/Barrier/barrieredFromUsergroups`.
            public var barrieredFromUsergroups: [Components.Schemas.Usergroup]?
            /// - Remark: Generated from `#/components/schemas/Barrier/restrictedSubjects`.
            public var restrictedSubjects: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Barrier/dateUpdate`.
            public var dateUpdate: Swift.Int?
            /// Creates a new `Barrier`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - enterpriseId:
            ///   - primaryUsergroup:
            ///   - barrieredFromUsergroups:
            ///   - restrictedSubjects:
            ///   - dateUpdate:
            public init(
                id: Swift.String? = nil,
                enterpriseId: Swift.String? = nil,
                primaryUsergroup: Components.Schemas.Usergroup? = nil,
                barrieredFromUsergroups: [Components.Schemas.Usergroup]? = nil,
                restrictedSubjects: [Swift.String]? = nil,
                dateUpdate: Swift.Int? = nil
            ) {
                self.id = id
                self.enterpriseId = enterpriseId
                self.primaryUsergroup = primaryUsergroup
                self.barrieredFromUsergroups = barrieredFromUsergroups
                self.restrictedSubjects = restrictedSubjects
                self.dateUpdate = dateUpdate
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case enterpriseId
                case primaryUsergroup
                case barrieredFromUsergroups
                case restrictedSubjects
                case dateUpdate
            }
        }
        /// - Remark: Generated from `#/components/schemas/Usergroup`.
        public struct Usergroup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Usergroup/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Usergroup/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Usergroup/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Usergroup/handle`.
            public var handle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Usergroup/prefs`.
            public var prefs: Components.Schemas.Prefs?
            /// - Remark: Generated from `#/components/schemas/Usergroup/users`.
            public var users: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Usergroup/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Usergroup/isUsergroup`.
            public var isUsergroup: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Usergroup/isSubteam`.
            public var isSubteam: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Usergroup/isExternal`.
            public var isExternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Usergroup/dateCreate`.
            public var dateCreate: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Usergroup/dateUpdate`.
            public var dateUpdate: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Usergroup/dateDelete`.
            public var dateDelete: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Usergroup/autoProvision`.
            public var autoProvision: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Usergroup/enterpriseSubteamId`.
            public var enterpriseSubteamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Usergroup/createdBy`.
            public var createdBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Usergroup/updatedBy`.
            public var updatedBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Usergroup/channelCount`.
            public var channelCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Usergroup/isSection`.
            public var isSection: Swift.Bool?
            /// Creates a new `Usergroup`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - description:
            ///   - handle:
            ///   - prefs:
            ///   - users:
            ///   - teamId:
            ///   - isUsergroup:
            ///   - isSubteam:
            ///   - isExternal:
            ///   - dateCreate:
            ///   - dateUpdate:
            ///   - dateDelete:
            ///   - autoProvision:
            ///   - enterpriseSubteamId:
            ///   - createdBy:
            ///   - updatedBy:
            ///   - channelCount:
            ///   - isSection:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                handle: Swift.String? = nil,
                prefs: Components.Schemas.Prefs? = nil,
                users: [Swift.String]? = nil,
                teamId: Swift.String? = nil,
                isUsergroup: Swift.Bool? = nil,
                isSubteam: Swift.Bool? = nil,
                isExternal: Swift.Bool? = nil,
                dateCreate: Swift.Int? = nil,
                dateUpdate: Swift.Int? = nil,
                dateDelete: Swift.Int? = nil,
                autoProvision: Swift.Bool? = nil,
                enterpriseSubteamId: Swift.String? = nil,
                createdBy: Swift.String? = nil,
                updatedBy: Swift.String? = nil,
                channelCount: Swift.Int? = nil,
                isSection: Swift.Bool? = nil
            ) {
                self.id = id
                self.name = name
                self.description = description
                self.handle = handle
                self.prefs = prefs
                self.users = users
                self.teamId = teamId
                self.isUsergroup = isUsergroup
                self.isSubteam = isSubteam
                self.isExternal = isExternal
                self.dateCreate = dateCreate
                self.dateUpdate = dateUpdate
                self.dateDelete = dateDelete
                self.autoProvision = autoProvision
                self.enterpriseSubteamId = enterpriseSubteamId
                self.createdBy = createdBy
                self.updatedBy = updatedBy
                self.channelCount = channelCount
                self.isSection = isSection
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case description
                case handle
                case prefs
                case users
                case teamId
                case isUsergroup
                case isSubteam
                case isExternal
                case dateCreate
                case dateUpdate
                case dateDelete
                case autoProvision
                case enterpriseSubteamId
                case createdBy
                case updatedBy
                case channelCount
                case isSection
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminBarriersDeleteResponse`.
        public struct AdminBarriersDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminBarriersDeleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminBarriersDeleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersDeleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersDeleteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminBarriersDeleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminBarriersListResponse`.
        public struct AdminBarriersListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminBarriersListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminBarriersListResponse/barriers`.
            public var barriers: [Components.Schemas.Barrier]?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminBarriersListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - barriers:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                barriers: [Components.Schemas.Barrier]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.barriers = barriers
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case barriers
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminBarriersUpdateResponse`.
        public struct AdminBarriersUpdateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminBarriersUpdateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminBarriersUpdateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersUpdateResponse/barrier`.
            public var barrier: Components.Schemas.Barrier?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersUpdateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminBarriersUpdateResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminBarriersUpdateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - barrier:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                barrier: Components.Schemas.Barrier? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.barrier = barrier
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case barrier
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsArchiveResponse`.
        public struct AdminConversationsArchiveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsArchiveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsArchiveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsArchiveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsArchiveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsArchiveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkArchiveResponse`.
        public struct AdminConversationsBulkArchiveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkArchiveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkArchiveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkArchiveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkArchiveResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkArchiveResponse/bulkActionId`.
            public var bulkActionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkArchiveResponse/notAdded`.
            public var notAdded: [Components.Schemas.NotAdded]?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkArchiveResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsBulkArchiveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - bulkActionId:
            ///   - notAdded:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                bulkActionId: Swift.String? = nil,
                notAdded: [Components.Schemas.NotAdded]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.bulkActionId = bulkActionId
                self.notAdded = notAdded
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case bulkActionId
                case notAdded
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotAdded`.
        public struct NotAdded: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NotAdded/errors`.
            public var errors: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/NotAdded/channelId`.
            public var channelId: Swift.String?
            /// Creates a new `NotAdded`.
            ///
            /// - Parameters:
            ///   - errors:
            ///   - channelId:
            public init(
                errors: [Swift.String]? = nil,
                channelId: Swift.String? = nil
            ) {
                self.errors = errors
                self.channelId = channelId
            }
            public enum CodingKeys: String, CodingKey {
                case errors
                case channelId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkDeleteResponse`.
        public struct AdminConversationsBulkDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkDeleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkDeleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkDeleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkDeleteResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkDeleteResponse/bulkActionId`.
            public var bulkActionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkDeleteResponse/notAdded`.
            public var notAdded: [Components.Schemas.NotAdded]?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkDeleteResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsBulkDeleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - bulkActionId:
            ///   - notAdded:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                bulkActionId: Swift.String? = nil,
                notAdded: [Components.Schemas.NotAdded]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.bulkActionId = bulkActionId
                self.notAdded = notAdded
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case bulkActionId
                case notAdded
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkMoveResponse`.
        public struct AdminConversationsBulkMoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkMoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkMoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkMoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkMoveResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkMoveResponse/bulkActionId`.
            public var bulkActionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkMoveResponse/notAdded`.
            public var notAdded: [Components.Schemas.NotAdded]?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsBulkMoveResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsBulkMoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - bulkActionId:
            ///   - notAdded:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                bulkActionId: Swift.String? = nil,
                notAdded: [Components.Schemas.NotAdded]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.bulkActionId = bulkActionId
                self.notAdded = notAdded
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case bulkActionId
                case notAdded
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPrivateResponse`.
        public struct AdminConversationsConvertToPrivateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPrivateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPrivateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPrivateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPrivateResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsConvertToPrivateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPublicResponse`.
        public struct AdminConversationsConvertToPublicResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPublicResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPublicResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPublicResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPublicResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsConvertToPublicResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsConvertToPublicResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsCreateResponse`.
        public struct AdminConversationsCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsCreateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsCreateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsCreateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsCreateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsCreateResponse/channelId`.
            public var channelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsCreateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsCreateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - channelId:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                channelId: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.channelId = channelId
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case channelId
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsDeleteResponse`.
        public struct AdminConversationsDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsDeleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsDeleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsDeleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsDeleteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsDeleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsDisconnectSharedResponse`.
        public struct AdminConversationsDisconnectSharedResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsDisconnectSharedResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsDisconnectSharedResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsDisconnectSharedResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsDisconnectSharedResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsDisconnectSharedResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsEkmListOriginalConnectedChannelInfoResponse`.
        public struct AdminConversationsEkmListOriginalConnectedChannelInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsEkmListOriginalConnectedChannelInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsEkmListOriginalConnectedChannelInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsEkmListOriginalConnectedChannelInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsEkmListOriginalConnectedChannelInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsEkmListOriginalConnectedChannelInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsGetConversationPrefsResponse`.
        public struct AdminConversationsGetConversationPrefsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetConversationPrefsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetConversationPrefsResponse/prefs`.
            public var prefs: Components.Schemas.Prefs?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetConversationPrefsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetConversationPrefsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetConversationPrefsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsGetConversationPrefsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - prefs:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                prefs: Components.Schemas.Prefs? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.prefs = prefs
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case prefs
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Prefs`.
        public struct Prefs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Prefs/channels`.
            public var channels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Prefs/groups`.
            public var groups: [Swift.String]?
            /// Creates a new `Prefs`.
            ///
            /// - Parameters:
            ///   - channels:
            ///   - groups:
            public init(
                channels: [Swift.String]? = nil,
                groups: [Swift.String]? = nil
            ) {
                self.channels = channels
                self.groups = groups
            }
            public enum CodingKeys: String, CodingKey {
                case channels
                case groups
            }
        }
        /// - Remark: Generated from `#/components/schemas/CanHuddle`.
        public struct CanHuddle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CanHuddle/enabled`.
            public var enabled: Swift.Bool?
            /// Creates a new `CanHuddle`.
            ///
            /// - Parameters:
            ///   - enabled:
            public init(enabled: Swift.Bool? = nil) {
                self.enabled = enabled
            }
            public enum CodingKeys: String, CodingKey {
                case enabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/CanThread`.
        public struct CanThread: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CanThread/type`.
            public var _type: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/CanThread/user`.
            public var user: [Swift.String]?
            /// Creates a new `CanThread`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - user:
            public init(
                _type: [Swift.String]? = nil,
                user: [Swift.String]? = nil
            ) {
                self._type = _type
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/MembershipLimit`.
        public struct MembershipLimit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MembershipLimit/value`.
            public var value: Swift.Int?
            /// Creates a new `MembershipLimit`.
            ///
            /// - Parameters:
            ///   - value:
            public init(value: Swift.Int? = nil) {
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsGetCustomRetentionResponse`.
        public struct AdminConversationsGetCustomRetentionResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetCustomRetentionResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetCustomRetentionResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetCustomRetentionResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetCustomRetentionResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetCustomRetentionResponse/isPolicyEnabled`.
            public var isPolicyEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetCustomRetentionResponse/durationDays`.
            public var durationDays: Swift.Int?
            /// Creates a new `AdminConversationsGetCustomRetentionResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - isPolicyEnabled:
            ///   - durationDays:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                isPolicyEnabled: Swift.Bool? = nil,
                durationDays: Swift.Int? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.isPolicyEnabled = isPolicyEnabled
                self.durationDays = durationDays
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case isPolicyEnabled
                case durationDays
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsGetTeamsResponse`.
        public struct AdminConversationsGetTeamsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetTeamsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetTeamsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetTeamsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetTeamsResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsGetTeamsResponse/teamIds`.
            public var teamIds: [Swift.String]?
            /// Creates a new `AdminConversationsGetTeamsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - teamIds:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                teamIds: [Swift.String]? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.teamIds = teamIds
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case teamIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsInviteResponse`.
        public struct AdminConversationsInviteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsInviteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsInviteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsInviteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsInviteResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsInviteResponse/failedUserIds`.
            public var failedUserIds: Components.Schemas.FailedUserIDS?
            /// Creates a new `AdminConversationsInviteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - failedUserIds:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                failedUserIds: Components.Schemas.FailedUserIDS? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.failedUserIds = failedUserIds
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case failedUserIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/FailedUserIDS`.
        public struct FailedUserIDS: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FailedUserIDS/U00000000`.
            public var u00000000: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FailedUserIDS/U00000001`.
            public var u00000001: Swift.String?
            /// Creates a new `FailedUserIDS`.
            ///
            /// - Parameters:
            ///   - u00000000:
            ///   - u00000001:
            public init(
                u00000000: Swift.String? = nil,
                u00000001: Swift.String? = nil
            ) {
                self.u00000000 = u00000000
                self.u00000001 = u00000001
            }
            public enum CodingKeys: String, CodingKey {
                case u00000000 = "U00000000"
                case u00000001 = "U00000001"
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsLookupResponse`.
        public struct AdminConversationsLookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsLookupResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsLookupResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsLookupResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsLookupResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsLookupResponse/channelIds`.
            public var channelIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsLookupResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsLookupResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - channelIds:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                channelIds: [Swift.String]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.channelIds = channelIds
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case channelIds
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsRemoveCustomRetentionResponse`.
        public struct AdminConversationsRemoveCustomRetentionResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRemoveCustomRetentionResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRemoveCustomRetentionResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRemoveCustomRetentionResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRemoveCustomRetentionResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsRemoveCustomRetentionResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsRenameResponse`.
        public struct AdminConversationsRenameResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRenameResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRenameResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRenameResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRenameResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsRenameResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessAddGroupResponse`.
        public struct AdminConversationsRestrictAccessAddGroupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessAddGroupResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessAddGroupResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessAddGroupResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessAddGroupResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessAddGroupResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsRestrictAccessAddGroupResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessListGroupsResponse`.
        public struct AdminConversationsRestrictAccessListGroupsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessListGroupsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessListGroupsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessListGroupsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessListGroupsResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessListGroupsResponse/groupIds`.
            public var groupIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessListGroupsResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsRestrictAccessListGroupsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - groupIds:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                groupIds: [Swift.String]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.groupIds = groupIds
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case groupIds
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessRemoveGroupResponse`.
        public struct AdminConversationsRestrictAccessRemoveGroupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessRemoveGroupResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessRemoveGroupResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessRemoveGroupResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessRemoveGroupResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsRestrictAccessRemoveGroupResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsRestrictAccessRemoveGroupResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsSearchResponse`.
        public struct AdminConversationsSearchResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSearchResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSearchResponse/conversations`.
            public var conversations: [Components.Schemas.Conversation]?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSearchResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSearchResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSearchResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSearchResponse/nextCursor`.
            public var nextCursor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSearchResponse/totalCount`.
            public var totalCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSearchResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsSearchResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - conversations:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - nextCursor:
            ///   - totalCount:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                conversations: [Components.Schemas.Conversation]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                nextCursor: Swift.String? = nil,
                totalCount: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.conversations = conversations
                self.error = error
                self.needed = needed
                self.provided = provided
                self.nextCursor = nextCursor
                self.totalCount = totalCount
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case conversations
                case error
                case needed
                case provided
                case nextCursor
                case totalCount
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Conversation`.
        public struct Conversation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Conversation/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Conversation/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Conversation/purpose`.
            public var purpose: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Conversation/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Conversation/canvas`.
            public var canvas: Components.Schemas.ListsClass?
            /// - Remark: Generated from `#/components/schemas/Conversation/lists`.
            public var lists: Components.Schemas.ListsClass?
            /// - Remark: Generated from `#/components/schemas/Conversation/properties`.
            public var properties: Components.Schemas.Properties?
            /// - Remark: Generated from `#/components/schemas/Conversation/memberCount`.
            public var memberCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Conversation/creatorId`.
            public var creatorId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Conversation/isPrivate`.
            public var isPrivate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/isArchived`.
            public var isArchived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/isGeneral`.
            public var isGeneral: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/lastActivityTs`.
            public var lastActivityTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Conversation/isExtShared`.
            public var isExtShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/isGlobalShared`.
            public var isGlobalShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/isOrgDefault`.
            public var isOrgDefault: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/isOrgMandatory`.
            public var isOrgMandatory: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/isOrgShared`.
            public var isOrgShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/isFrozen`.
            public var isFrozen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/internalTeamIdsCount`.
            public var internalTeamIdsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Conversation/internalTeamIdsSampleTeam`.
            public var internalTeamIdsSampleTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Conversation/pendingConnectedTeamIds`.
            public var pendingConnectedTeamIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Conversation/isPendingExtShared`.
            public var isPendingExtShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/connectedTeamIds`.
            public var connectedTeamIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Conversation/conversationHostId`.
            public var conversationHostId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Conversation/channelEmailAddresses`.
            public var channelEmailAddresses: [Components.Schemas.ChannelEmailAddress]?
            /// - Remark: Generated from `#/components/schemas/Conversation/connectedLimitedTeamIds`.
            public var connectedLimitedTeamIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Conversation/externalUserCount`.
            public var externalUserCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Conversation/internalTeamIds`.
            public var internalTeamIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Conversation/channelManagerCount`.
            public var channelManagerCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Conversation/isDisconnectInProgress`.
            public var isDisconnectInProgress: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Conversation/contextTeamId`.
            public var contextTeamId: Swift.String?
            /// Creates a new `Conversation`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - purpose:
            ///   - created:
            ///   - canvas:
            ///   - lists:
            ///   - properties:
            ///   - memberCount:
            ///   - creatorId:
            ///   - isPrivate:
            ///   - isArchived:
            ///   - isGeneral:
            ///   - lastActivityTs:
            ///   - isExtShared:
            ///   - isGlobalShared:
            ///   - isOrgDefault:
            ///   - isOrgMandatory:
            ///   - isOrgShared:
            ///   - isFrozen:
            ///   - internalTeamIdsCount:
            ///   - internalTeamIdsSampleTeam:
            ///   - pendingConnectedTeamIds:
            ///   - isPendingExtShared:
            ///   - connectedTeamIds:
            ///   - conversationHostId:
            ///   - channelEmailAddresses:
            ///   - connectedLimitedTeamIds:
            ///   - externalUserCount:
            ///   - internalTeamIds:
            ///   - channelManagerCount:
            ///   - isDisconnectInProgress:
            ///   - contextTeamId:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                purpose: Swift.String? = nil,
                created: Swift.Int? = nil,
                canvas: Components.Schemas.ListsClass? = nil,
                lists: Components.Schemas.ListsClass? = nil,
                properties: Components.Schemas.Properties? = nil,
                memberCount: Swift.Int? = nil,
                creatorId: Swift.String? = nil,
                isPrivate: Swift.Bool? = nil,
                isArchived: Swift.Bool? = nil,
                isGeneral: Swift.Bool? = nil,
                lastActivityTs: Swift.Int? = nil,
                isExtShared: Swift.Bool? = nil,
                isGlobalShared: Swift.Bool? = nil,
                isOrgDefault: Swift.Bool? = nil,
                isOrgMandatory: Swift.Bool? = nil,
                isOrgShared: Swift.Bool? = nil,
                isFrozen: Swift.Bool? = nil,
                internalTeamIdsCount: Swift.Int? = nil,
                internalTeamIdsSampleTeam: Swift.String? = nil,
                pendingConnectedTeamIds: [Swift.String]? = nil,
                isPendingExtShared: Swift.Bool? = nil,
                connectedTeamIds: [Swift.String]? = nil,
                conversationHostId: Swift.String? = nil,
                channelEmailAddresses: [Components.Schemas.ChannelEmailAddress]? = nil,
                connectedLimitedTeamIds: [Swift.String]? = nil,
                externalUserCount: Swift.Int? = nil,
                internalTeamIds: [Swift.String]? = nil,
                channelManagerCount: Swift.Int? = nil,
                isDisconnectInProgress: Swift.Bool? = nil,
                contextTeamId: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.purpose = purpose
                self.created = created
                self.canvas = canvas
                self.lists = lists
                self.properties = properties
                self.memberCount = memberCount
                self.creatorId = creatorId
                self.isPrivate = isPrivate
                self.isArchived = isArchived
                self.isGeneral = isGeneral
                self.lastActivityTs = lastActivityTs
                self.isExtShared = isExtShared
                self.isGlobalShared = isGlobalShared
                self.isOrgDefault = isOrgDefault
                self.isOrgMandatory = isOrgMandatory
                self.isOrgShared = isOrgShared
                self.isFrozen = isFrozen
                self.internalTeamIdsCount = internalTeamIdsCount
                self.internalTeamIdsSampleTeam = internalTeamIdsSampleTeam
                self.pendingConnectedTeamIds = pendingConnectedTeamIds
                self.isPendingExtShared = isPendingExtShared
                self.connectedTeamIds = connectedTeamIds
                self.conversationHostId = conversationHostId
                self.channelEmailAddresses = channelEmailAddresses
                self.connectedLimitedTeamIds = connectedLimitedTeamIds
                self.externalUserCount = externalUserCount
                self.internalTeamIds = internalTeamIds
                self.channelManagerCount = channelManagerCount
                self.isDisconnectInProgress = isDisconnectInProgress
                self.contextTeamId = contextTeamId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case purpose
                case created
                case canvas
                case lists
                case properties
                case memberCount
                case creatorId
                case isPrivate
                case isArchived
                case isGeneral
                case lastActivityTs
                case isExtShared
                case isGlobalShared
                case isOrgDefault
                case isOrgMandatory
                case isOrgShared
                case isFrozen
                case internalTeamIdsCount
                case internalTeamIdsSampleTeam
                case pendingConnectedTeamIds
                case isPendingExtShared
                case connectedTeamIds
                case conversationHostId
                case channelEmailAddresses
                case connectedLimitedTeamIds
                case externalUserCount
                case internalTeamIds
                case channelManagerCount
                case isDisconnectInProgress
                case contextTeamId
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListsClass`.
        public struct ListsClass: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListsClass/totalCount`.
            public var totalCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListsClass/ownershipDetails`.
            public var ownershipDetails: [Components.Schemas.OwnershipDetail]?
            /// Creates a new `ListsClass`.
            ///
            /// - Parameters:
            ///   - totalCount:
            ///   - ownershipDetails:
            public init(
                totalCount: Swift.Int? = nil,
                ownershipDetails: [Components.Schemas.OwnershipDetail]? = nil
            ) {
                self.totalCount = totalCount
                self.ownershipDetails = ownershipDetails
            }
            public enum CodingKeys: String, CodingKey {
                case totalCount
                case ownershipDetails
            }
        }
        /// - Remark: Generated from `#/components/schemas/OwnershipDetail`.
        public struct OwnershipDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OwnershipDetail/count`.
            public var count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/OwnershipDetail/teamId`.
            public var teamId: Swift.String?
            /// Creates a new `OwnershipDetail`.
            ///
            /// - Parameters:
            ///   - count:
            ///   - teamId:
            public init(
                count: Swift.Int? = nil,
                teamId: Swift.String? = nil
            ) {
                self.count = count
                self.teamId = teamId
            }
            public enum CodingKeys: String, CodingKey {
                case count
                case teamId
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelEmailAddress`.
        public struct ChannelEmailAddress: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelEmailAddress/address`.
            public var address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelEmailAddress/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelEmailAddress/icons`.
            public var icons: Components.Schemas.Icons?
            /// - Remark: Generated from `#/components/schemas/ChannelEmailAddress/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelEmailAddress/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelEmailAddress/conversationId`.
            public var conversationId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelEmailAddress/dateCreated`.
            public var dateCreated: Swift.Int?
            /// Creates a new `ChannelEmailAddress`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - name:
            ///   - icons:
            ///   - teamId:
            ///   - userId:
            ///   - conversationId:
            ///   - dateCreated:
            public init(
                address: Swift.String? = nil,
                name: Swift.String? = nil,
                icons: Components.Schemas.Icons? = nil,
                teamId: Swift.String? = nil,
                userId: Swift.String? = nil,
                conversationId: Swift.String? = nil,
                dateCreated: Swift.Int? = nil
            ) {
                self.address = address
                self.name = name
                self.icons = icons
                self.teamId = teamId
                self.userId = userId
                self.conversationId = conversationId
                self.dateCreated = dateCreated
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case name
                case icons
                case teamId
                case userId
                case conversationId
                case dateCreated
            }
        }
        /// - Remark: Generated from `#/components/schemas/Properties`.
        public struct Properties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Properties/canvas`.
            public var canvas: Components.Schemas.Canvas?
            /// - Remark: Generated from `#/components/schemas/Properties/tabs`.
            public var tabs: [Components.Schemas.Tab]?
            /// - Remark: Generated from `#/components/schemas/Properties/tabz`.
            public var tabz: [Components.Schemas.Tab]?
            /// - Remark: Generated from `#/components/schemas/Properties/postingRestrictedTo`.
            public var postingRestrictedTo: Components.Schemas.PostingRestrictedTo?
            /// - Remark: Generated from `#/components/schemas/Properties/huddlesRestricted`.
            public var huddlesRestricted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Properties/threadsRestrictedTo`.
            public var threadsRestrictedTo: Components.Schemas.ThreadsRestrictedTo?
            /// Creates a new `Properties`.
            ///
            /// - Parameters:
            ///   - canvas:
            ///   - tabs:
            ///   - tabz:
            ///   - postingRestrictedTo:
            ///   - huddlesRestricted:
            ///   - threadsRestrictedTo:
            public init(
                canvas: Components.Schemas.Canvas? = nil,
                tabs: [Components.Schemas.Tab]? = nil,
                tabz: [Components.Schemas.Tab]? = nil,
                postingRestrictedTo: Components.Schemas.PostingRestrictedTo? = nil,
                huddlesRestricted: Swift.Bool? = nil,
                threadsRestrictedTo: Components.Schemas.ThreadsRestrictedTo? = nil
            ) {
                self.canvas = canvas
                self.tabs = tabs
                self.tabz = tabz
                self.postingRestrictedTo = postingRestrictedTo
                self.huddlesRestricted = huddlesRestricted
                self.threadsRestrictedTo = threadsRestrictedTo
            }
            public enum CodingKeys: String, CodingKey {
                case canvas
                case tabs
                case tabz
                case postingRestrictedTo
                case huddlesRestricted
                case threadsRestrictedTo
            }
        }
        /// - Remark: Generated from `#/components/schemas/PropertiesCanvas`.
        public struct PropertiesCanvas: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PropertiesCanvas/fileId`.
            public var fileId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PropertiesCanvas/isEmpty`.
            public var isEmpty: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PropertiesCanvas/quipThreadId`.
            public var quipThreadId: Swift.String?
            /// Creates a new `PropertiesCanvas`.
            ///
            /// - Parameters:
            ///   - fileId:
            ///   - isEmpty:
            ///   - quipThreadId:
            public init(
                fileId: Swift.String? = nil,
                isEmpty: Swift.Bool? = nil,
                quipThreadId: Swift.String? = nil
            ) {
                self.fileId = fileId
                self.isEmpty = isEmpty
                self.quipThreadId = quipThreadId
            }
            public enum CodingKeys: String, CodingKey {
                case fileId
                case isEmpty
                case quipThreadId
            }
        }
        /// - Remark: Generated from `#/components/schemas/PostingRestrictedTo`.
        public struct PostingRestrictedTo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PostingRestrictedTo/type`.
            public var _type: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PostingRestrictedTo/user`.
            public var user: [Swift.String]?
            /// Creates a new `PostingRestrictedTo`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - user:
            public init(
                _type: [Swift.String]? = nil,
                user: [Swift.String]? = nil
            ) {
                self._type = _type
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/Tab`.
        public struct Tab: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Tab/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Tab/label`.
            public var label: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Tab/type`.
            public var _type: Swift.String?
            /// Creates a new `Tab`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - label:
            ///   - _type:
            public init(
                id: Swift.String? = nil,
                label: Swift.String? = nil,
                _type: Swift.String? = nil
            ) {
                self.id = id
                self.label = label
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case label
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ThreadsRestrictedTo`.
        public struct ThreadsRestrictedTo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ThreadsRestrictedTo/type`.
            public var _type: [Swift.String]?
            /// Creates a new `ThreadsRestrictedTo`.
            ///
            /// - Parameters:
            ///   - _type:
            public init(_type: [Swift.String]? = nil) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsSetConversationPrefsResponse`.
        public struct AdminConversationsSetConversationPrefsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetConversationPrefsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetConversationPrefsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetConversationPrefsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetConversationPrefsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsSetConversationPrefsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsSetCustomRetentionResponse`.
        public struct AdminConversationsSetCustomRetentionResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetCustomRetentionResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetCustomRetentionResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetCustomRetentionResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetCustomRetentionResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsSetCustomRetentionResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsSetTeamsResponse`.
        public struct AdminConversationsSetTeamsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetTeamsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetTeamsResponse/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetTeamsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetTeamsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsSetTeamsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsSetTeamsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                channel: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsUnarchiveResponse`.
        public struct AdminConversationsUnarchiveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsUnarchiveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsUnarchiveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsUnarchiveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsUnarchiveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminConversationsUnarchiveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistAddResponse`.
        public struct AdminConversationsWhitelistAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistAddResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistAddResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistAddResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsWhitelistAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - warning:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                warning: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.warning = warning
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case warning
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistListGroupsLinkedToChannelResponse`.
        public struct AdminConversationsWhitelistListGroupsLinkedToChannelResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistListGroupsLinkedToChannelResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistListGroupsLinkedToChannelResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistListGroupsLinkedToChannelResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistListGroupsLinkedToChannelResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistListGroupsLinkedToChannelResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistListGroupsLinkedToChannelResponse/groupIds`.
            public var groupIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistListGroupsLinkedToChannelResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsWhitelistListGroupsLinkedToChannelResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - warning:
            ///   - needed:
            ///   - provided:
            ///   - groupIds:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                warning: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                groupIds: [Swift.String]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.warning = warning
                self.needed = needed
                self.provided = provided
                self.groupIds = groupIds
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case warning
                case needed
                case provided
                case groupIds
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistRemoveResponse`.
        public struct AdminConversationsWhitelistRemoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistRemoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistRemoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistRemoveResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistRemoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistRemoveResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminConversationsWhitelistRemoveResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminConversationsWhitelistRemoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - warning:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                warning: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.warning = warning
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case warning
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminEmojiAddResponse`.
        public struct AdminEmojiAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminEmojiAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminEmojiAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiAddResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiAddResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminEmojiAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminEmojiAddAliasResponse`.
        public struct AdminEmojiAddAliasResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminEmojiAddAliasResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminEmojiAddAliasResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiAddAliasResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiAddAliasResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiAddAliasResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminEmojiAddAliasResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminEmojiListResponse`.
        public struct AdminEmojiListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminEmojiListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminEmojiListResponse/emoji`.
            public var emoji: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminEmojiListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - emoji:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                emoji: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.emoji = emoji
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case emoji
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Emoji`.
        public struct Emoji: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Emoji/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Emoji/dateCreated`.
            public var dateCreated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Emoji/uploadedBy`.
            public var uploadedBy: Swift.String?
            /// Creates a new `Emoji`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - dateCreated:
            ///   - uploadedBy:
            public init(
                url: Swift.String? = nil,
                dateCreated: Swift.Int? = nil,
                uploadedBy: Swift.String? = nil
            ) {
                self.url = url
                self.dateCreated = dateCreated
                self.uploadedBy = uploadedBy
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case dateCreated
                case uploadedBy
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminEmojiRemoveResponse`.
        public struct AdminEmojiRemoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminEmojiRemoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminEmojiRemoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiRemoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiRemoveResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiRemoveResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminEmojiRemoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminEmojiRenameResponse`.
        public struct AdminEmojiRenameResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminEmojiRenameResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminEmojiRenameResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiRenameResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiRenameResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminEmojiRenameResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminEmojiRenameResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminFunctionsListResponse`.
        public struct AdminFunctionsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsListResponse/functions`.
            public var functions: [Components.Schemas.Function]?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminFunctionsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - functions:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                functions: [Components.Schemas.Function]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.functions = functions
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case functions
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Function`.
        public struct Function: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Function/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Function/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Function/inputParameters`.
            public var inputParameters: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/Function/outputParameters`.
            public var outputParameters: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `Function`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - description:
            ///   - inputParameters:
            ///   - outputParameters:
            public init(
                title: Swift.String? = nil,
                description: Swift.String? = nil,
                inputParameters: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                outputParameters: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.title = title
                self.description = description
                self.inputParameters = inputParameters
                self.outputParameters = outputParameters
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case description
                case inputParameters
                case outputParameters
            }
        }
        /// - Remark: Generated from `#/components/schemas/PutParameter`.
        public struct PutParameter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PutParameter/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PutParameter/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PutParameter/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PutParameter/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PutParameter/hint`.
            public var hint: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PutParameter/minLength`.
            public var minLength: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PutParameter/maxLength`.
            public var maxLength: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PutParameter/minimum`.
            public var minimum: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PutParameter/maximum`.
            public var maximum: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PutParameter/isRequired`.
            public var isRequired: Swift.Bool?
            /// Creates a new `PutParameter`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - name:
            ///   - description:
            ///   - title:
            ///   - hint:
            ///   - minLength:
            ///   - maxLength:
            ///   - minimum:
            ///   - maximum:
            ///   - isRequired:
            public init(
                _type: Swift.String? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                title: Swift.String? = nil,
                hint: Swift.String? = nil,
                minLength: Swift.Int? = nil,
                maxLength: Swift.Int? = nil,
                minimum: Swift.Int? = nil,
                maximum: Swift.Int? = nil,
                isRequired: Swift.Bool? = nil
            ) {
                self._type = _type
                self.name = name
                self.description = description
                self.title = title
                self.hint = hint
                self.minLength = minLength
                self.maxLength = maxLength
                self.minimum = minimum
                self.maximum = maximum
                self.isRequired = isRequired
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case name
                case description
                case title
                case hint
                case minLength
                case maxLength
                case minimum
                case maximum
                case isRequired
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsLookupResponse`.
        public struct AdminFunctionsPermissionsLookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsLookupResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsLookupResponse/permissions`.
            public var permissions: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsLookupResponse/errors`.
            public var errors: Components.Schemas.Errors?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsLookupResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsLookupResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsLookupResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsLookupResponse/metadata`.
            public var metadata: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsLookupResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminFunctionsPermissionsLookupResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - permissions:
            ///   - errors:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - metadata:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                permissions: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                errors: Components.Schemas.Errors? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                metadata: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.permissions = permissions
                self.errors = errors
                self.error = error
                self.needed = needed
                self.provided = provided
                self.metadata = metadata
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case permissions
                case errors
                case error
                case needed
                case provided
                case metadata
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Errors`.
        public typealias Errors = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/Permission`.
        public struct Permission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Permission/complete`.
            public var complete: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Permission/whoCanRun`.
            public var whoCanRun: Components.Schemas.WhoCanRun?
            /// Creates a new `Permission`.
            ///
            /// - Parameters:
            ///   - complete:
            ///   - whoCanRun:
            public init(
                complete: Swift.Bool? = nil,
                whoCanRun: Components.Schemas.WhoCanRun? = nil
            ) {
                self.complete = complete
                self.whoCanRun = whoCanRun
            }
            public enum CodingKeys: String, CodingKey {
                case complete
                case whoCanRun
            }
        }
        /// - Remark: Generated from `#/components/schemas/AllowedByAdmin`.
        public struct AllowedByAdmin: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AllowedByAdmin/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AllowedByAdmin/userIds`.
            public var userIds: [Swift.String]?
            /// Creates a new `AllowedByAdmin`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - userIds:
            public init(
                _type: Swift.String? = nil,
                userIds: [Swift.String]? = nil
            ) {
                self._type = _type
                self.userIds = userIds
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case userIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/AllowedEntities`.
        public struct AllowedEntities: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AllowedEntities/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AllowedEntities/userIds`.
            public var userIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AllowedEntities/teamIds`.
            public var teamIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AllowedEntities/orgIds`.
            public var orgIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AllowedEntities/channelIds`.
            public var channelIds: [Swift.String]?
            /// Creates a new `AllowedEntities`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - userIds:
            ///   - teamIds:
            ///   - orgIds:
            ///   - channelIds:
            public init(
                _type: Swift.String? = nil,
                userIds: [Swift.String]? = nil,
                teamIds: [Swift.String]? = nil,
                orgIds: [Swift.String]? = nil,
                channelIds: [Swift.String]? = nil
            ) {
                self._type = _type
                self.userIds = userIds
                self.teamIds = teamIds
                self.orgIds = orgIds
                self.channelIds = channelIds
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case userIds
                case teamIds
                case orgIds
                case channelIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsSetResponse`.
        public struct AdminFunctionsPermissionsSetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsSetResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsSetResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsSetResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsSetResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminFunctionsPermissionsSetResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminFunctionsPermissionsSetResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApproveResponse`.
        public struct AdminInviteRequestsApproveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApproveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApproveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApproveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApproveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminInviteRequestsApproveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApprovedListResponse`.
        public struct AdminInviteRequestsApprovedListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApprovedListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApprovedListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApprovedListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApprovedListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApprovedListResponse/approvedRequests`.
            public var approvedRequests: [Components.Schemas.ApprovedRequest]?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsApprovedListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminInviteRequestsApprovedListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - approvedRequests:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                approvedRequests: [Components.Schemas.ApprovedRequest]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.approvedRequests = approvedRequests
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case approvedRequests
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ApprovedRequest`.
        public struct ApprovedRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ApprovedRequest/invite`.
            public var invite: Components.Schemas.Invite?
            /// - Remark: Generated from `#/components/schemas/ApprovedRequest/inviteRequest`.
            public var inviteRequest: Components.Schemas.InviteRequest?
            /// - Remark: Generated from `#/components/schemas/ApprovedRequest/approvedBy`.
            public var approvedBy: Components.Schemas.ApprovedBy?
            /// Creates a new `ApprovedRequest`.
            ///
            /// - Parameters:
            ///   - invite:
            ///   - inviteRequest:
            ///   - approvedBy:
            public init(
                invite: Components.Schemas.Invite? = nil,
                inviteRequest: Components.Schemas.InviteRequest? = nil,
                approvedBy: Components.Schemas.ApprovedBy? = nil
            ) {
                self.invite = invite
                self.inviteRequest = inviteRequest
                self.approvedBy = approvedBy
            }
            public enum CodingKeys: String, CodingKey {
                case invite
                case inviteRequest
                case approvedBy
            }
        }
        /// - Remark: Generated from `#/components/schemas/ApprovedBy`.
        public struct ApprovedBy: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ApprovedBy/actorType`.
            public var actorType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ApprovedBy/actorId`.
            public var actorId: Swift.String?
            /// Creates a new `ApprovedBy`.
            ///
            /// - Parameters:
            ///   - actorType:
            ///   - actorId:
            public init(
                actorType: Swift.String? = nil,
                actorId: Swift.String? = nil
            ) {
                self.actorType = actorType
                self.actorId = actorId
            }
            public enum CodingKeys: String, CodingKey {
                case actorType
                case actorId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Invite`.
        public struct Invite: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Invite/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Invite/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Invite/inviterId`.
            public var inviterId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Invite/dateCreated`.
            public var dateCreated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Invite/isBouncing`.
            public var isBouncing: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Invite/invitePreferences`.
            public var invitePreferences: Components.Schemas.InvitePreferences?
            /// Creates a new `Invite`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - email:
            ///   - inviterId:
            ///   - dateCreated:
            ///   - isBouncing:
            ///   - invitePreferences:
            public init(
                id: Swift.String? = nil,
                email: Swift.String? = nil,
                inviterId: Swift.String? = nil,
                dateCreated: Swift.Int? = nil,
                isBouncing: Swift.Bool? = nil,
                invitePreferences: Components.Schemas.InvitePreferences? = nil
            ) {
                self.id = id
                self.email = email
                self.inviterId = inviterId
                self.dateCreated = dateCreated
                self.isBouncing = isBouncing
                self.invitePreferences = invitePreferences
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case email
                case inviterId
                case dateCreated
                case isBouncing
                case invitePreferences
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvitePreferences`.
        public struct InvitePreferences: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InvitePreferences/isRestricted`.
            public var isRestricted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InvitePreferences/isUltraRestricted`.
            public var isUltraRestricted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InvitePreferences/channelIds`.
            public var channelIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InvitePreferences/isDomainMatched`.
            public var isDomainMatched: Swift.Bool?
            /// Creates a new `InvitePreferences`.
            ///
            /// - Parameters:
            ///   - isRestricted:
            ///   - isUltraRestricted:
            ///   - channelIds:
            ///   - isDomainMatched:
            public init(
                isRestricted: Swift.Bool? = nil,
                isUltraRestricted: Swift.Bool? = nil,
                channelIds: [Swift.String]? = nil,
                isDomainMatched: Swift.Bool? = nil
            ) {
                self.isRestricted = isRestricted
                self.isUltraRestricted = isUltraRestricted
                self.channelIds = channelIds
                self.isDomainMatched = isDomainMatched
            }
            public enum CodingKeys: String, CodingKey {
                case isRestricted
                case isUltraRestricted
                case channelIds
                case isDomainMatched
            }
        }
        /// - Remark: Generated from `#/components/schemas/InviteRequest`.
        public struct InviteRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InviteRequest/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteRequest/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/InviteRequest/dateCreated`.
            public var dateCreated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InviteRequest/expiresAt`.
            public var expiresAt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InviteRequest/invitingTeam`.
            public var invitingTeam: Components.Schemas.Team?
            /// - Remark: Generated from `#/components/schemas/InviteRequest/invitingUser`.
            public var invitingUser: Components.Schemas.InvitingUser?
            /// - Remark: Generated from `#/components/schemas/InviteRequest/isExternalLimited`.
            public var isExternalLimited: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InviteRequest/dateLastUpdated`.
            public var dateLastUpdated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InviteRequest/targetUser`.
            public var targetUser: Components.Schemas.TargetUser?
            /// Creates a new `InviteRequest`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - channel:
            ///   - dateCreated:
            ///   - expiresAt:
            ///   - invitingTeam:
            ///   - invitingUser:
            ///   - isExternalLimited:
            ///   - dateLastUpdated:
            ///   - targetUser:
            public init(
                id: Swift.String? = nil,
                channel: Components.Schemas.Channel? = nil,
                dateCreated: Swift.Int? = nil,
                expiresAt: Swift.Int? = nil,
                invitingTeam: Components.Schemas.Team? = nil,
                invitingUser: Components.Schemas.InvitingUser? = nil,
                isExternalLimited: Swift.Bool? = nil,
                dateLastUpdated: Swift.Int? = nil,
                targetUser: Components.Schemas.TargetUser? = nil
            ) {
                self.id = id
                self.channel = channel
                self.dateCreated = dateCreated
                self.expiresAt = expiresAt
                self.invitingTeam = invitingTeam
                self.invitingUser = invitingUser
                self.isExternalLimited = isExternalLimited
                self.dateLastUpdated = dateLastUpdated
                self.targetUser = targetUser
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case channel
                case dateCreated
                case expiresAt
                case invitingTeam
                case invitingUser
                case isExternalLimited
                case dateLastUpdated
                case targetUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDeniedListResponse`.
        public struct AdminInviteRequestsDeniedListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDeniedListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDeniedListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDeniedListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDeniedListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDeniedListResponse/deniedRequests`.
            public var deniedRequests: [Components.Schemas.DeniedRequest]?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDeniedListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminInviteRequestsDeniedListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - deniedRequests:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                deniedRequests: [Components.Schemas.DeniedRequest]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.deniedRequests = deniedRequests
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case deniedRequests
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeniedRequest`.
        public struct DeniedRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeniedRequest/inviteRequest`.
            public var inviteRequest: Components.Schemas.InviteRequest?
            /// - Remark: Generated from `#/components/schemas/DeniedRequest/deniedBy`.
            public var deniedBy: Components.Schemas.DeniedBy?
            /// Creates a new `DeniedRequest`.
            ///
            /// - Parameters:
            ///   - inviteRequest:
            ///   - deniedBy:
            public init(
                inviteRequest: Components.Schemas.InviteRequest? = nil,
                deniedBy: Components.Schemas.DeniedBy? = nil
            ) {
                self.inviteRequest = inviteRequest
                self.deniedBy = deniedBy
            }
            public enum CodingKeys: String, CodingKey {
                case inviteRequest
                case deniedBy
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeniedBy`.
        public struct DeniedBy: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeniedBy/actorType`.
            public var actorType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeniedBy/actorId`.
            public var actorId: Swift.String?
            /// Creates a new `DeniedBy`.
            ///
            /// - Parameters:
            ///   - actorType:
            ///   - actorId:
            public init(
                actorType: Swift.String? = nil,
                actorId: Swift.String? = nil
            ) {
                self.actorType = actorType
                self.actorId = actorId
            }
            public enum CodingKeys: String, CodingKey {
                case actorType
                case actorId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDenyResponse`.
        public struct AdminInviteRequestsDenyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDenyResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDenyResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDenyResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsDenyResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminInviteRequestsDenyResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsListResponse`.
        public struct AdminInviteRequestsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsListResponse/inviteRequests`.
            public var inviteRequests: [Components.Schemas.InviteRequest]?
            /// - Remark: Generated from `#/components/schemas/AdminInviteRequestsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminInviteRequestsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - inviteRequests:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                inviteRequests: [Components.Schemas.InviteRequest]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.inviteRequests = inviteRequests
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case inviteRequests
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminRolesAddAssignmentsResponse`.
        public struct AdminRolesAddAssignmentsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminRolesAddAssignmentsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminRolesAddAssignmentsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminRolesAddAssignmentsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminRolesAddAssignmentsResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminRolesAddAssignmentsResponse/rejectedUsers`.
            public var rejectedUsers: [Components.Schemas.RejectedUser]?
            /// Creates a new `AdminRolesAddAssignmentsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - rejectedUsers:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                rejectedUsers: [Components.Schemas.RejectedUser]? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.rejectedUsers = rejectedUsers
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case rejectedUsers
            }
        }
        /// - Remark: Generated from `#/components/schemas/RejectedUser`.
        public struct RejectedUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RejectedUser/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RejectedUser/error`.
            public var error: Swift.String?
            /// Creates a new `RejectedUser`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - error:
            public init(
                id: Swift.String? = nil,
                error: Swift.String? = nil
            ) {
                self.id = id
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case error
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminRolesListAssignmentsResponse`.
        public struct AdminRolesListAssignmentsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminRolesListAssignmentsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminRolesListAssignmentsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminRolesListAssignmentsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminRolesListAssignmentsResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminRolesListAssignmentsResponse/roleAssignments`.
            public var roleAssignments: [Components.Schemas.RoleAssignment]?
            /// - Remark: Generated from `#/components/schemas/AdminRolesListAssignmentsResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminRolesListAssignmentsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - roleAssignments:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                roleAssignments: [Components.Schemas.RoleAssignment]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.roleAssignments = roleAssignments
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case roleAssignments
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/RoleAssignment`.
        public struct RoleAssignment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RoleAssignment/roleId`.
            public var roleId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RoleAssignment/entityId`.
            public var entityId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RoleAssignment/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RoleAssignment/dateCreate`.
            public var dateCreate: Swift.Int?
            /// Creates a new `RoleAssignment`.
            ///
            /// - Parameters:
            ///   - roleId:
            ///   - entityId:
            ///   - userId:
            ///   - dateCreate:
            public init(
                roleId: Swift.String? = nil,
                entityId: Swift.String? = nil,
                userId: Swift.String? = nil,
                dateCreate: Swift.Int? = nil
            ) {
                self.roleId = roleId
                self.entityId = entityId
                self.userId = userId
                self.dateCreate = dateCreate
            }
            public enum CodingKeys: String, CodingKey {
                case roleId
                case entityId
                case userId
                case dateCreate
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminRolesRemoveAssignmentsResponse`.
        public struct AdminRolesRemoveAssignmentsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminRolesRemoveAssignmentsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminRolesRemoveAssignmentsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminRolesRemoveAssignmentsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminRolesRemoveAssignmentsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminRolesRemoveAssignmentsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminTeamsAdminsListResponse`.
        public struct AdminTeamsAdminsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminTeamsAdminsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminTeamsAdminsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsAdminsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsAdminsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsAdminsListResponse/adminIds`.
            public var adminIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsAdminsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminTeamsAdminsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - adminIds:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                adminIds: [Swift.String]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.adminIds = adminIds
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case adminIds
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminTeamsCreateResponse`.
        public struct AdminTeamsCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminTeamsCreateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminTeamsCreateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsCreateResponse/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsCreateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsCreateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsCreateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminTeamsCreateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - team:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                team: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.team = team
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case team
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminTeamsListResponse`.
        public struct AdminTeamsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminTeamsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminTeamsListResponse/teams`.
            public var teams: [Components.Schemas.Team]?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminTeamsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - teams:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                teams: [Components.Schemas.Team]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.teams = teams
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case teams
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/PrimaryOwner`.
        public struct PrimaryOwner: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PrimaryOwner/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PrimaryOwner/userId`.
            public var userId: Swift.String?
            /// Creates a new `PrimaryOwner`.
            ///
            /// - Parameters:
            ///   - email:
            ///   - userId:
            public init(
                email: Swift.String? = nil,
                userId: Swift.String? = nil
            ) {
                self.email = email
                self.userId = userId
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case userId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminTeamsOwnersListResponse`.
        public struct AdminTeamsOwnersListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminTeamsOwnersListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminTeamsOwnersListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsOwnersListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsOwnersListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsOwnersListResponse/ownerIds`.
            public var ownerIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsOwnersListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminTeamsOwnersListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - ownerIds:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                ownerIds: [Swift.String]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.ownerIds = ownerIds
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case ownerIds
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsInfoResponse`.
        public struct AdminTeamsSettingsInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsInfoResponse/team`.
            public var team: Components.Schemas.Team?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminTeamsSettingsInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - team:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                team: Components.Schemas.Team? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.team = team
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case team
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Icon`.
        public struct Icon: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Icon/image34`.
            public var image34: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Icon/image44`.
            public var image44: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Icon/image68`.
            public var image68: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Icon/image88`.
            public var image88: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Icon/image102`.
            public var image102: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Icon/image132`.
            public var image132: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Icon/image230`.
            public var image230: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Icon/imageOriginal`.
            public var imageOriginal: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Icon/imageDefault`.
            public var imageDefault: Swift.Bool?
            /// Creates a new `Icon`.
            ///
            /// - Parameters:
            ///   - image34:
            ///   - image44:
            ///   - image68:
            ///   - image88:
            ///   - image102:
            ///   - image132:
            ///   - image230:
            ///   - imageOriginal:
            ///   - imageDefault:
            public init(
                image34: Swift.String? = nil,
                image44: Swift.String? = nil,
                image68: Swift.String? = nil,
                image88: Swift.String? = nil,
                image102: Swift.String? = nil,
                image132: Swift.String? = nil,
                image230: Swift.String? = nil,
                imageOriginal: Swift.String? = nil,
                imageDefault: Swift.Bool? = nil
            ) {
                self.image34 = image34
                self.image44 = image44
                self.image68 = image68
                self.image88 = image88
                self.image102 = image102
                self.image132 = image132
                self.image230 = image230
                self.imageOriginal = imageOriginal
                self.imageDefault = imageDefault
            }
            public enum CodingKeys: String, CodingKey {
                case image34
                case image44
                case image68
                case image88
                case image102
                case image132
                case image230
                case imageOriginal
                case imageDefault
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDefaultChannelsResponse`.
        public struct AdminTeamsSettingsSetDefaultChannelsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDefaultChannelsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDefaultChannelsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDefaultChannelsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDefaultChannelsResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDefaultChannelsResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminTeamsSettingsSetDefaultChannelsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDescriptionResponse`.
        public struct AdminTeamsSettingsSetDescriptionResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDescriptionResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDescriptionResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDescriptionResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDescriptionResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminTeamsSettingsSetDescriptionResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDiscoverabilityResponse`.
        public struct AdminTeamsSettingsSetDiscoverabilityResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDiscoverabilityResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDiscoverabilityResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDiscoverabilityResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetDiscoverabilityResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminTeamsSettingsSetDiscoverabilityResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetIconResponse`.
        public struct AdminTeamsSettingsSetIconResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetIconResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetIconResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetIconResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetIconResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetIconResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminTeamsSettingsSetIconResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetNameResponse`.
        public struct AdminTeamsSettingsSetNameResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetNameResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetNameResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetNameResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminTeamsSettingsSetNameResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminTeamsSettingsSetNameResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsergroupsAddChannelsResponse`.
        public struct AdminUsergroupsAddChannelsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsAddChannelsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsAddChannelsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsAddChannelsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsAddChannelsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsergroupsAddChannelsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsergroupsAddTeamsResponse`.
        public struct AdminUsergroupsAddTeamsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsAddTeamsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsAddTeamsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsAddTeamsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsAddTeamsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsergroupsAddTeamsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsergroupsListChannelsResponse`.
        public struct AdminUsergroupsListChannelsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsListChannelsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsListChannelsResponse/channels`.
            public var channels: [Components.Schemas.Channel]?
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsListChannelsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsListChannelsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsListChannelsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsergroupsListChannelsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channels:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                channels: [Components.Schemas.Channel]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.channels = channels
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channels
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Channel`.
        public struct Channel: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Channel/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Channel/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Channel/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Channel/unlinked`.
            public var unlinked: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Channel/creator`.
            public var creator: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Channel/topic`.
            public var topic: Components.Schemas.Purpose?
            /// - Remark: Generated from `#/components/schemas/Channel/purpose`.
            public var purpose: Components.Schemas.Purpose?
            /// - Remark: Generated from `#/components/schemas/Channel/priority`.
            public var priority: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Channel/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Channel/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Channel/properties`.
            public var properties: Components.Schemas.Properties?
            /// - Remark: Generated from `#/components/schemas/Channel/isChannel`.
            public var isChannel: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isGroup`.
            public var isGroup: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isIm`.
            public var isIm: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isArchived`.
            public var isArchived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isGeneral`.
            public var isGeneral: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/nameNormalized`.
            public var nameNormalized: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Channel/isShared`.
            public var isShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isExtShared`.
            public var isExtShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isOrgShared`.
            public var isOrgShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/sharedTeamIds`.
            public var sharedTeamIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Channel/pendingShared`.
            public var pendingShared: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Channel/pendingConnectedTeamIds`.
            public var pendingConnectedTeamIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Channel/isPendingExtShared`.
            public var isPendingExtShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isPrivate`.
            public var isPrivate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isMpim`.
            public var isMpim: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/previousNames`.
            public var previousNames: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Channel/conversationHostId`.
            public var conversationHostId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Channel/isMoved`.
            public var isMoved: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Channel/internalTeamIds`.
            public var internalTeamIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Channel/isGlobalShared`.
            public var isGlobalShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isOrgDefault`.
            public var isOrgDefault: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isOrgMandatory`.
            public var isOrgMandatory: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/enterpriseId`.
            public var enterpriseId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Channel/lastRead`.
            public var lastRead: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Channel/isOpen`.
            public var isOpen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/isUserDeleted`.
            public var isUserDeleted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Channel/parentConversation`.
            public var parentConversation: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Channel/contextTeamId`.
            public var contextTeamId: Swift.String?
            /// Creates a new `Channel`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - created:
            ///   - unlinked:
            ///   - creator:
            ///   - topic:
            ///   - purpose:
            ///   - priority:
            ///   - user:
            ///   - updated:
            ///   - properties:
            ///   - isChannel:
            ///   - isGroup:
            ///   - isIm:
            ///   - isArchived:
            ///   - isGeneral:
            ///   - nameNormalized:
            ///   - isShared:
            ///   - isExtShared:
            ///   - isOrgShared:
            ///   - sharedTeamIds:
            ///   - pendingShared:
            ///   - pendingConnectedTeamIds:
            ///   - isPendingExtShared:
            ///   - isPrivate:
            ///   - isMpim:
            ///   - previousNames:
            ///   - conversationHostId:
            ///   - isMoved:
            ///   - internalTeamIds:
            ///   - isGlobalShared:
            ///   - isOrgDefault:
            ///   - isOrgMandatory:
            ///   - enterpriseId:
            ///   - lastRead:
            ///   - isOpen:
            ///   - isUserDeleted:
            ///   - parentConversation:
            ///   - contextTeamId:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                created: Swift.Int? = nil,
                unlinked: Swift.Int? = nil,
                creator: Swift.String? = nil,
                topic: Components.Schemas.Purpose? = nil,
                purpose: Components.Schemas.Purpose? = nil,
                priority: Swift.Int? = nil,
                user: Swift.String? = nil,
                updated: Swift.Int? = nil,
                properties: Components.Schemas.Properties? = nil,
                isChannel: Swift.Bool? = nil,
                isGroup: Swift.Bool? = nil,
                isIm: Swift.Bool? = nil,
                isArchived: Swift.Bool? = nil,
                isGeneral: Swift.Bool? = nil,
                nameNormalized: Swift.String? = nil,
                isShared: Swift.Bool? = nil,
                isExtShared: Swift.Bool? = nil,
                isOrgShared: Swift.Bool? = nil,
                sharedTeamIds: [Swift.String]? = nil,
                pendingShared: [Swift.String]? = nil,
                pendingConnectedTeamIds: [Swift.String]? = nil,
                isPendingExtShared: Swift.Bool? = nil,
                isPrivate: Swift.Bool? = nil,
                isMpim: Swift.Bool? = nil,
                previousNames: [Swift.String]? = nil,
                conversationHostId: Swift.String? = nil,
                isMoved: Swift.Int? = nil,
                internalTeamIds: [Swift.String]? = nil,
                isGlobalShared: Swift.Bool? = nil,
                isOrgDefault: Swift.Bool? = nil,
                isOrgMandatory: Swift.Bool? = nil,
                enterpriseId: Swift.String? = nil,
                lastRead: Swift.String? = nil,
                isOpen: Swift.Bool? = nil,
                isUserDeleted: Swift.Bool? = nil,
                parentConversation: Swift.String? = nil,
                contextTeamId: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.created = created
                self.unlinked = unlinked
                self.creator = creator
                self.topic = topic
                self.purpose = purpose
                self.priority = priority
                self.user = user
                self.updated = updated
                self.properties = properties
                self.isChannel = isChannel
                self.isGroup = isGroup
                self.isIm = isIm
                self.isArchived = isArchived
                self.isGeneral = isGeneral
                self.nameNormalized = nameNormalized
                self.isShared = isShared
                self.isExtShared = isExtShared
                self.isOrgShared = isOrgShared
                self.sharedTeamIds = sharedTeamIds
                self.pendingShared = pendingShared
                self.pendingConnectedTeamIds = pendingConnectedTeamIds
                self.isPendingExtShared = isPendingExtShared
                self.isPrivate = isPrivate
                self.isMpim = isMpim
                self.previousNames = previousNames
                self.conversationHostId = conversationHostId
                self.isMoved = isMoved
                self.internalTeamIds = internalTeamIds
                self.isGlobalShared = isGlobalShared
                self.isOrgDefault = isOrgDefault
                self.isOrgMandatory = isOrgMandatory
                self.enterpriseId = enterpriseId
                self.lastRead = lastRead
                self.isOpen = isOpen
                self.isUserDeleted = isUserDeleted
                self.parentConversation = parentConversation
                self.contextTeamId = contextTeamId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case created
                case unlinked
                case creator
                case topic
                case purpose
                case priority
                case user
                case updated
                case properties
                case isChannel
                case isGroup
                case isIm
                case isArchived
                case isGeneral
                case nameNormalized
                case isShared
                case isExtShared
                case isOrgShared
                case sharedTeamIds
                case pendingShared
                case pendingConnectedTeamIds
                case isPendingExtShared
                case isPrivate
                case isMpim
                case previousNames
                case conversationHostId
                case isMoved
                case internalTeamIds
                case isGlobalShared
                case isOrgDefault
                case isOrgMandatory
                case enterpriseId
                case lastRead
                case isOpen
                case isUserDeleted
                case parentConversation
                case contextTeamId
            }
        }
        /// - Remark: Generated from `#/components/schemas/RestrictedTo`.
        public struct RestrictedTo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RestrictedTo/type`.
            public var _type: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/RestrictedTo/user`.
            public var user: [Swift.String]?
            /// Creates a new `RestrictedTo`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - user:
            public init(
                _type: [Swift.String]? = nil,
                user: [Swift.String]? = nil
            ) {
                self._type = _type
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/Purpose`.
        public struct Purpose: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Purpose/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Purpose/creator`.
            public var creator: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Purpose/lastSet`.
            public var lastSet: Swift.Int?
            /// Creates a new `Purpose`.
            ///
            /// - Parameters:
            ///   - value:
            ///   - creator:
            ///   - lastSet:
            public init(
                value: Swift.String? = nil,
                creator: Swift.String? = nil,
                lastSet: Swift.Int? = nil
            ) {
                self.value = value
                self.creator = creator
                self.lastSet = lastSet
            }
            public enum CodingKeys: String, CodingKey {
                case value
                case creator
                case lastSet
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsergroupsRemoveChannelsResponse`.
        public struct AdminUsergroupsRemoveChannelsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsRemoveChannelsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsRemoveChannelsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsRemoveChannelsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsergroupsRemoveChannelsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsergroupsRemoveChannelsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersAssignResponse`.
        public struct AdminUsersAssignResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersAssignResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersAssignResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersAssignResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersAssignResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersAssignResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersInviteResponse`.
        public struct AdminUsersInviteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersInviteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersInviteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersInviteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersInviteResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersInviteResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminUsersInviteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersListResponse`.
        public struct AdminUsersListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersListResponse/users`.
            public var users: [Components.Schemas.User]?
            /// - Remark: Generated from `#/components/schemas/AdminUsersListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminUsersListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - users:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                users: [Components.Schemas.User]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.users = users
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case users
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersRemoveResponse`.
        public struct AdminUsersRemoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersRemoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersRemoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersRemoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersRemoveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersRemoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSessionClearSettingsResponse`.
        public struct AdminUsersSessionClearSettingsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionClearSettingsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionClearSettingsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionClearSettingsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionClearSettingsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersSessionClearSettingsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSessionGetSettingsResponse`.
        public struct AdminUsersSessionGetSettingsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionGetSettingsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionGetSettingsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionGetSettingsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionGetSettingsResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionGetSettingsResponse/sessionSettings`.
            public var sessionSettings: [Components.Schemas.SessionSetting]?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionGetSettingsResponse/noSettingsApplied`.
            public var noSettingsApplied: [Swift.String]?
            /// Creates a new `AdminUsersSessionGetSettingsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - sessionSettings:
            ///   - noSettingsApplied:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                sessionSettings: [Components.Schemas.SessionSetting]? = nil,
                noSettingsApplied: [Swift.String]? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.sessionSettings = sessionSettings
                self.noSettingsApplied = noSettingsApplied
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case sessionSettings
                case noSettingsApplied
            }
        }
        /// - Remark: Generated from `#/components/schemas/SessionSetting`.
        public struct SessionSetting: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SessionSetting/duration`.
            public var duration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SessionSetting/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SessionSetting/desktopAppBrowserQuit`.
            public var desktopAppBrowserQuit: Swift.Bool?
            /// Creates a new `SessionSetting`.
            ///
            /// - Parameters:
            ///   - duration:
            ///   - userId:
            ///   - desktopAppBrowserQuit:
            public init(
                duration: Swift.Int? = nil,
                userId: Swift.String? = nil,
                desktopAppBrowserQuit: Swift.Bool? = nil
            ) {
                self.duration = duration
                self.userId = userId
                self.desktopAppBrowserQuit = desktopAppBrowserQuit
            }
            public enum CodingKeys: String, CodingKey {
                case duration
                case userId
                case desktopAppBrowserQuit
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSessionInvalidateResponse`.
        public struct AdminUsersSessionInvalidateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionInvalidateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionInvalidateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionInvalidateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionInvalidateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionInvalidateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminUsersSessionInvalidateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSessionListResponse`.
        public struct AdminUsersSessionListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionListResponse/activeSessions`.
            public var activeSessions: [Components.Schemas.ActiveSession]?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminUsersSessionListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - activeSessions:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                activeSessions: [Components.Schemas.ActiveSession]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.activeSessions = activeSessions
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case activeSessions
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ActiveSession`.
        public struct ActiveSession: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActiveSession/created`.
            public var created: Components.Schemas.Created?
            /// - Remark: Generated from `#/components/schemas/ActiveSession/recent`.
            public var recent: Components.Schemas.Created?
            /// - Remark: Generated from `#/components/schemas/ActiveSession/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActiveSession/sessionId`.
            public var sessionId: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ActiveSession/teamId`.
            public var teamId: Swift.String?
            /// Creates a new `ActiveSession`.
            ///
            /// - Parameters:
            ///   - created:
            ///   - recent:
            ///   - userId:
            ///   - sessionId:
            ///   - teamId:
            public init(
                created: Components.Schemas.Created? = nil,
                recent: Components.Schemas.Created? = nil,
                userId: Swift.String? = nil,
                sessionId: Swift.Int? = nil,
                teamId: Swift.String? = nil
            ) {
                self.created = created
                self.recent = recent
                self.userId = userId
                self.sessionId = sessionId
                self.teamId = teamId
            }
            public enum CodingKeys: String, CodingKey {
                case created
                case recent
                case userId
                case sessionId
                case teamId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Created`.
        public struct Created: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Created/os`.
            public var os: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Created/ip`.
            public var ip: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Created/deviceHardware`.
            public var deviceHardware: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Created/osVersion`.
            public var osVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Created/slackClientVersion`.
            public var slackClientVersion: Swift.String?
            /// Creates a new `Created`.
            ///
            /// - Parameters:
            ///   - os:
            ///   - ip:
            ///   - deviceHardware:
            ///   - osVersion:
            ///   - slackClientVersion:
            public init(
                os: Swift.String? = nil,
                ip: Swift.String? = nil,
                deviceHardware: Swift.String? = nil,
                osVersion: Swift.String? = nil,
                slackClientVersion: Swift.String? = nil
            ) {
                self.os = os
                self.ip = ip
                self.deviceHardware = deviceHardware
                self.osVersion = osVersion
                self.slackClientVersion = slackClientVersion
            }
            public enum CodingKeys: String, CodingKey {
                case os
                case ip
                case deviceHardware
                case osVersion
                case slackClientVersion
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSessionResetResponse`.
        public struct AdminUsersSessionResetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionResetResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionResetResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionResetResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionResetResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersSessionResetResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSessionResetBulkResponse`.
        public struct AdminUsersSessionResetBulkResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionResetBulkResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionResetBulkResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionResetBulkResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionResetBulkResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersSessionResetBulkResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSessionSetSettingsResponse`.
        public struct AdminUsersSessionSetSettingsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionSetSettingsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionSetSettingsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionSetSettingsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSessionSetSettingsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersSessionSetSettingsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSetAdminResponse`.
        public struct AdminUsersSetAdminResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetAdminResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetAdminResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetAdminResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetAdminResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersSetAdminResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSetExpirationResponse`.
        public struct AdminUsersSetExpirationResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetExpirationResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetExpirationResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetExpirationResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetExpirationResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersSetExpirationResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSetOwnerResponse`.
        public struct AdminUsersSetOwnerResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetOwnerResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetOwnerResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetOwnerResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetOwnerResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersSetOwnerResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersSetRegularResponse`.
        public struct AdminUsersSetRegularResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetRegularResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetRegularResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetRegularResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersSetRegularResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersSetRegularResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminUsersUnsupportedVersionsExportResponse`.
        public struct AdminUsersUnsupportedVersionsExportResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminUsersUnsupportedVersionsExportResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminUsersUnsupportedVersionsExportResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersUnsupportedVersionsExportResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminUsersUnsupportedVersionsExportResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminUsersUnsupportedVersionsExportResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsAddResponse`.
        public struct AdminWorkflowsCollaboratorsAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsAddResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsAddResponse/errors`.
            public var errors: [Components.Schemas._Error]?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsAddResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminWorkflowsCollaboratorsAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - errors:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                errors: [Components.Schemas._Error]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.errors = errors
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case errors
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Error/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Error/user`.
            public var user: Swift.String?
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - user:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                user: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsRemoveResponse`.
        public struct AdminWorkflowsCollaboratorsRemoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsRemoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsRemoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsRemoveResponse/errors`.
            public var errors: [Components.Schemas._Error]?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsRemoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsCollaboratorsRemoveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminWorkflowsCollaboratorsRemoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - errors:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                errors: [Components.Schemas._Error]? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.errors = errors
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case errors
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminWorkflowsPermissionsLookupResponse`.
        public struct AdminWorkflowsPermissionsLookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsPermissionsLookupResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsPermissionsLookupResponse/permissions`.
            public var permissions: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsPermissionsLookupResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsPermissionsLookupResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsPermissionsLookupResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AdminWorkflowsPermissionsLookupResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - permissions:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                permissions: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.permissions = permissions
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case permissions
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/WhoCanRun`.
        public struct WhoCanRun: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WhoCanRun/permissionType`.
            public var permissionType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/WhoCanRun/userIds`.
            public var userIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/WhoCanRun/channelIds`.
            public var channelIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/WhoCanRun/teamIds`.
            public var teamIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/WhoCanRun/orgIds`.
            public var orgIds: [Swift.String]?
            /// Creates a new `WhoCanRun`.
            ///
            /// - Parameters:
            ///   - permissionType:
            ///   - userIds:
            ///   - channelIds:
            ///   - teamIds:
            ///   - orgIds:
            public init(
                permissionType: Swift.String? = nil,
                userIds: [Swift.String]? = nil,
                channelIds: [Swift.String]? = nil,
                teamIds: [Swift.String]? = nil,
                orgIds: [Swift.String]? = nil
            ) {
                self.permissionType = permissionType
                self.userIds = userIds
                self.channelIds = channelIds
                self.teamIds = teamIds
                self.orgIds = orgIds
            }
            public enum CodingKeys: String, CodingKey {
                case permissionType
                case userIds
                case channelIds
                case teamIds
                case orgIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminWorkflowsSearchResponse`.
        public struct AdminWorkflowsSearchResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsSearchResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsSearchResponse/workflows`.
            public var workflows: [Components.Schemas.Workflow]?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsSearchResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsSearchResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsSearchResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsSearchResponse/totalFound`.
            public var totalFound: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsSearchResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminWorkflowsSearchResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - workflows:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - totalFound:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                workflows: [Components.Schemas.Workflow]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                totalFound: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.workflows = workflows
                self.error = error
                self.needed = needed
                self.provided = provided
                self.totalFound = totalFound
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case workflows
                case error
                case needed
                case provided
                case totalFound
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Workflow`.
        public struct Workflow: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Workflow/trigger`.
            public var trigger: Components.Schemas.Trigger?
            /// Creates a new `Workflow`.
            ///
            /// - Parameters:
            ///   - trigger:
            public init(trigger: Components.Schemas.Trigger? = nil) {
                self.trigger = trigger
            }
            public enum CodingKeys: String, CodingKey {
                case trigger
            }
        }
        /// - Remark: Generated from `#/components/schemas/InputParameter`.
        public struct InputParameter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InputParameter/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InputParameter/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InputParameter/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InputParameter/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InputParameter/isRequired`.
            public var isRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InputParameter/isHidden`.
            public var isHidden: Swift.Bool?
            /// Creates a new `InputParameter`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - name:
            ///   - title:
            ///   - description:
            ///   - isRequired:
            ///   - isHidden:
            public init(
                _type: Swift.String? = nil,
                name: Swift.String? = nil,
                title: Swift.String? = nil,
                description: Swift.String? = nil,
                isRequired: Swift.Bool? = nil,
                isHidden: Swift.Bool? = nil
            ) {
                self._type = _type
                self.name = name
                self.title = title
                self.description = description
                self.isRequired = isRequired
                self.isHidden = isHidden
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case name
                case title
                case description
                case isRequired
                case isHidden
            }
        }
        /// - Remark: Generated from `#/components/schemas/Step`.
        public struct Step: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Step/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Step/inputs`.
            public var inputs: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/Step/functionId`.
            public var functionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Step/isPristine`.
            public var isPristine: Swift.Bool?
            /// Creates a new `Step`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - inputs:
            ///   - functionId:
            ///   - isPristine:
            public init(
                id: Swift.String? = nil,
                inputs: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                functionId: Swift.String? = nil,
                isPristine: Swift.Bool? = nil
            ) {
                self.id = id
                self.inputs = inputs
                self.functionId = functionId
                self.isPristine = isPristine
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case inputs
                case functionId
                case isPristine
            }
        }
        /// - Remark: Generated from `#/components/schemas/Input`.
        public struct Input: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Input/hidden`.
            public var hidden: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Input/locked`.
            public var locked: Swift.Bool?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - hidden:
            ///   - locked:
            public init(
                hidden: Swift.Bool? = nil,
                locked: Swift.Bool? = nil
            ) {
                self.hidden = hidden
                self.locked = locked
            }
            public enum CodingKeys: String, CodingKey {
                case hidden
                case locked
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminWorkflowsUnpublishResponse`.
        public struct AdminWorkflowsUnpublishResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsUnpublishResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsUnpublishResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsUnpublishResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsUnpublishResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminWorkflowsUnpublishResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AdminWorkflowsUnpublishResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/APITestResponse`.
        public struct APITestResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/APITestResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/APITestResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/APITestResponse/args`.
            public var args: Components.Schemas.Args?
            /// - Remark: Generated from `#/components/schemas/APITestResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/APITestResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `APITestResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - args:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                args: Components.Schemas.Args? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.args = args
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case args
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Args`.
        public struct Args: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Args/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Args/foo`.
            public var foo: Swift.String?
            /// Creates a new `Args`.
            ///
            /// - Parameters:
            ///   - error:
            ///   - foo:
            public init(
                error: Swift.String? = nil,
                foo: Swift.String? = nil
            ) {
                self.error = error
                self.foo = foo
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case foo
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsConnectionsOpenResponse`.
        public struct AppsConnectionsOpenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsConnectionsOpenResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsConnectionsOpenResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsConnectionsOpenResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsConnectionsOpenResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsConnectionsOpenResponse/url`.
            public var url: Swift.String?
            /// Creates a new `AppsConnectionsOpenResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - url:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                url: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsEventAuthorizationsListResponse`.
        public struct AppsEventAuthorizationsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsEventAuthorizationsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsEventAuthorizationsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsEventAuthorizationsListResponse/authorizations`.
            public var authorizations: [Components.Schemas.Authorization]?
            /// - Remark: Generated from `#/components/schemas/AppsEventAuthorizationsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsEventAuthorizationsListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AppsEventAuthorizationsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - authorizations:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                authorizations: [Components.Schemas.Authorization]? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.authorizations = authorizations
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case authorizations
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Authorization`.
        public struct Authorization: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Authorization/enterpriseId`.
            public var enterpriseId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Authorization/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Authorization/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Authorization/isBot`.
            public var isBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Authorization/isEnterpriseInstall`.
            public var isEnterpriseInstall: Swift.Bool?
            /// Creates a new `Authorization`.
            ///
            /// - Parameters:
            ///   - enterpriseId:
            ///   - teamId:
            ///   - userId:
            ///   - isBot:
            ///   - isEnterpriseInstall:
            public init(
                enterpriseId: Swift.String? = nil,
                teamId: Swift.String? = nil,
                userId: Swift.String? = nil,
                isBot: Swift.Bool? = nil,
                isEnterpriseInstall: Swift.Bool? = nil
            ) {
                self.enterpriseId = enterpriseId
                self.teamId = teamId
                self.userId = userId
                self.isBot = isBot
                self.isEnterpriseInstall = isEnterpriseInstall
            }
            public enum CodingKeys: String, CodingKey {
                case enterpriseId
                case teamId
                case userId
                case isBot
                case isEnterpriseInstall
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse`.
        public struct AppsManifestCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/errors`.
            public var errors: [Components.Schemas._Error]?
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/credentials`.
            public var credentials: Components.Schemas.Credentials?
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/oauthAuthorizeUrl`.
            public var oauthAuthorizeUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestCreateResponse/teamDomain`.
            public var teamDomain: Swift.String?
            /// Creates a new `AppsManifestCreateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - errors:
            ///   - credentials:
            ///   - responseMetadata:
            ///   - appId:
            ///   - oauthAuthorizeUrl:
            ///   - teamId:
            ///   - teamDomain:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                errors: [Components.Schemas._Error]? = nil,
                credentials: Components.Schemas.Credentials? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil,
                appId: Swift.String? = nil,
                oauthAuthorizeUrl: Swift.String? = nil,
                teamId: Swift.String? = nil,
                teamDomain: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.errors = errors
                self.credentials = credentials
                self.responseMetadata = responseMetadata
                self.appId = appId
                self.oauthAuthorizeUrl = oauthAuthorizeUrl
                self.teamId = teamId
                self.teamDomain = teamDomain
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case errors
                case credentials
                case responseMetadata
                case appId
                case oauthAuthorizeUrl
                case teamId
                case teamDomain
            }
        }
        /// - Remark: Generated from `#/components/schemas/Credentials`.
        public struct Credentials: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Credentials/clientId`.
            public var clientId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Credentials/clientSecret`.
            public var clientSecret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Credentials/verificationToken`.
            public var verificationToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Credentials/signingSecret`.
            public var signingSecret: Swift.String?
            /// Creates a new `Credentials`.
            ///
            /// - Parameters:
            ///   - clientId:
            ///   - clientSecret:
            ///   - verificationToken:
            ///   - signingSecret:
            public init(
                clientId: Swift.String? = nil,
                clientSecret: Swift.String? = nil,
                verificationToken: Swift.String? = nil,
                signingSecret: Swift.String? = nil
            ) {
                self.clientId = clientId
                self.clientSecret = clientSecret
                self.verificationToken = verificationToken
                self.signingSecret = signingSecret
            }
            public enum CodingKeys: String, CodingKey {
                case clientId
                case clientSecret
                case verificationToken
                case signingSecret
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsManifestDeleteResponse`.
        public struct AppsManifestDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsManifestDeleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsManifestDeleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestDeleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestDeleteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AppsManifestDeleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsManifestExportResponse`.
        public struct AppsManifestExportResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsManifestExportResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsManifestExportResponse/manifest`.
            public var manifest: Components.Schemas.Manifest?
            /// - Remark: Generated from `#/components/schemas/AppsManifestExportResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestExportResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestExportResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AppsManifestExportResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - manifest:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                manifest: Components.Schemas.Manifest? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.manifest = manifest
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case manifest
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Manifest`.
        public struct Manifest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Manifest/settings`.
            public var settings: Components.Schemas.Settings?
            /// - Remark: Generated from `#/components/schemas/Manifest/features`.
            public var features: Components.Schemas.Features?
            /// - Remark: Generated from `#/components/schemas/Manifest/functions`.
            public var functions: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/Manifest/Metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// - Remark: Generated from `#/components/schemas/Manifest/displayInformation`.
            public var displayInformation: Components.Schemas.DisplayInformation?
            /// - Remark: Generated from `#/components/schemas/Manifest/oauthConfig`.
            public var oauthConfig: Components.Schemas.OauthConfig?
            /// Creates a new `Manifest`.
            ///
            /// - Parameters:
            ///   - settings:
            ///   - features:
            ///   - functions:
            ///   - metadata:
            ///   - displayInformation:
            ///   - oauthConfig:
            public init(
                settings: Components.Schemas.Settings? = nil,
                features: Components.Schemas.Features? = nil,
                functions: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                displayInformation: Components.Schemas.DisplayInformation? = nil,
                oauthConfig: Components.Schemas.OauthConfig? = nil
            ) {
                self.settings = settings
                self.features = features
                self.functions = functions
                self.metadata = metadata
                self.displayInformation = displayInformation
                self.oauthConfig = oauthConfig
            }
            public enum CodingKeys: String, CodingKey {
                case settings
                case features
                case functions
                case metadata = "Metadata"
                case displayInformation
                case oauthConfig
            }
        }
        /// - Remark: Generated from `#/components/schemas/Metadata`.
        public struct Metadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Metadata/format`.
            public var format: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Metadata/extension`.
            public var _extension: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Metadata/rotation`.
            public var rotation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Metadata/thumb64`.
            public var thumb64: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Metadata/thumb80`.
            public var thumb80: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Metadata/thumb160`.
            public var thumb160: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Metadata/originalW`.
            public var originalW: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Metadata/originalH`.
            public var originalH: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Metadata/thumb360W`.
            public var thumb360W: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Metadata/thumb360H`.
            public var thumb360H: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Metadata/thumbTiny`.
            public var thumbTiny: Swift.String?
            /// Creates a new `Metadata`.
            ///
            /// - Parameters:
            ///   - format:
            ///   - _extension:
            ///   - rotation:
            ///   - thumb64:
            ///   - thumb80:
            ///   - thumb160:
            ///   - originalW:
            ///   - originalH:
            ///   - thumb360W:
            ///   - thumb360H:
            ///   - thumbTiny:
            public init(
                format: Swift.String? = nil,
                _extension: Swift.String? = nil,
                rotation: Swift.Int? = nil,
                thumb64: Swift.Bool? = nil,
                thumb80: Swift.Bool? = nil,
                thumb160: Swift.Bool? = nil,
                originalW: Swift.Int? = nil,
                originalH: Swift.Int? = nil,
                thumb360W: Swift.Int? = nil,
                thumb360H: Swift.Int? = nil,
                thumbTiny: Swift.String? = nil
            ) {
                self.format = format
                self._extension = _extension
                self.rotation = rotation
                self.thumb64 = thumb64
                self.thumb80 = thumb80
                self.thumb160 = thumb160
                self.originalW = originalW
                self.originalH = originalH
                self.thumb360W = thumb360W
                self.thumb360H = thumb360H
                self.thumbTiny = thumbTiny
            }
            public enum CodingKeys: String, CodingKey {
                case format
                case _extension = "extension"
                case rotation
                case thumb64
                case thumb80
                case thumb160
                case originalW
                case originalH
                case thumb360W
                case thumb360H
                case thumbTiny
            }
        }
        /// - Remark: Generated from `#/components/schemas/DisplayInformation`.
        public struct DisplayInformation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DisplayInformation/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DisplayInformation/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DisplayInformation/longDescription`.
            public var longDescription: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DisplayInformation/backgroundColor`.
            public var backgroundColor: Swift.String?
            /// Creates a new `DisplayInformation`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - description:
            ///   - longDescription:
            ///   - backgroundColor:
            public init(
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                longDescription: Swift.String? = nil,
                backgroundColor: Swift.String? = nil
            ) {
                self.name = name
                self.description = description
                self.longDescription = longDescription
                self.backgroundColor = backgroundColor
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case description
                case longDescription
                case backgroundColor
            }
        }
        /// - Remark: Generated from `#/components/schemas/Features`.
        public struct Features: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Features/shortcuts`.
            public var shortcuts: [Components.Schemas.Shortcut]?
            /// - Remark: Generated from `#/components/schemas/Features/appHome`.
            public var appHome: Components.Schemas.AppHome?
            /// - Remark: Generated from `#/components/schemas/Features/botUser`.
            public var botUser: Components.Schemas.BotUser?
            /// - Remark: Generated from `#/components/schemas/Features/slashCommands`.
            public var slashCommands: [Components.Schemas.SlashCommand]?
            /// - Remark: Generated from `#/components/schemas/Features/unfurlDomains`.
            public var unfurlDomains: [Swift.String]?
            /// Creates a new `Features`.
            ///
            /// - Parameters:
            ///   - shortcuts:
            ///   - appHome:
            ///   - botUser:
            ///   - slashCommands:
            ///   - unfurlDomains:
            public init(
                shortcuts: [Components.Schemas.Shortcut]? = nil,
                appHome: Components.Schemas.AppHome? = nil,
                botUser: Components.Schemas.BotUser? = nil,
                slashCommands: [Components.Schemas.SlashCommand]? = nil,
                unfurlDomains: [Swift.String]? = nil
            ) {
                self.shortcuts = shortcuts
                self.appHome = appHome
                self.botUser = botUser
                self.slashCommands = slashCommands
                self.unfurlDomains = unfurlDomains
            }
            public enum CodingKeys: String, CodingKey {
                case shortcuts
                case appHome
                case botUser
                case slashCommands
                case unfurlDomains
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppHome`.
        public struct AppHome: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppHome/homeTabEnabled`.
            public var homeTabEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AppHome/messagesTabEnabled`.
            public var messagesTabEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AppHome/messagesTabReadOnlyEnabled`.
            public var messagesTabReadOnlyEnabled: Swift.Bool?
            /// Creates a new `AppHome`.
            ///
            /// - Parameters:
            ///   - homeTabEnabled:
            ///   - messagesTabEnabled:
            ///   - messagesTabReadOnlyEnabled:
            public init(
                homeTabEnabled: Swift.Bool? = nil,
                messagesTabEnabled: Swift.Bool? = nil,
                messagesTabReadOnlyEnabled: Swift.Bool? = nil
            ) {
                self.homeTabEnabled = homeTabEnabled
                self.messagesTabEnabled = messagesTabEnabled
                self.messagesTabReadOnlyEnabled = messagesTabReadOnlyEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case homeTabEnabled
                case messagesTabEnabled
                case messagesTabReadOnlyEnabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/BotUser`.
        public struct BotUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BotUser/displayName`.
            public var displayName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BotUser/alwaysOnline`.
            public var alwaysOnline: Swift.Bool?
            /// Creates a new `BotUser`.
            ///
            /// - Parameters:
            ///   - displayName:
            ///   - alwaysOnline:
            public init(
                displayName: Swift.String? = nil,
                alwaysOnline: Swift.Bool? = nil
            ) {
                self.displayName = displayName
                self.alwaysOnline = alwaysOnline
            }
            public enum CodingKeys: String, CodingKey {
                case displayName
                case alwaysOnline
            }
        }
        /// - Remark: Generated from `#/components/schemas/Shortcut`.
        public struct Shortcut: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Shortcut/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Shortcut/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Shortcut/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Shortcut/callbackId`.
            public var callbackId: Swift.String?
            /// Creates a new `Shortcut`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - name:
            ///   - description:
            ///   - callbackId:
            public init(
                _type: Swift.String? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                callbackId: Swift.String? = nil
            ) {
                self._type = _type
                self.name = name
                self.description = description
                self.callbackId = callbackId
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case name
                case description
                case callbackId
            }
        }
        /// - Remark: Generated from `#/components/schemas/SlashCommand`.
        public struct SlashCommand: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SlashCommand/command`.
            public var command: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SlashCommand/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SlashCommand/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SlashCommand/usageHint`.
            public var usageHint: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SlashCommand/shouldEscape`.
            public var shouldEscape: Swift.Bool?
            /// Creates a new `SlashCommand`.
            ///
            /// - Parameters:
            ///   - command:
            ///   - description:
            ///   - url:
            ///   - usageHint:
            ///   - shouldEscape:
            public init(
                command: Swift.String? = nil,
                description: Swift.String? = nil,
                url: Swift.String? = nil,
                usageHint: Swift.String? = nil,
                shouldEscape: Swift.Bool? = nil
            ) {
                self.command = command
                self.description = description
                self.url = url
                self.usageHint = usageHint
                self.shouldEscape = shouldEscape
            }
            public enum CodingKeys: String, CodingKey {
                case command
                case description
                case url
                case usageHint
                case shouldEscape
            }
        }
        /// - Remark: Generated from `#/components/schemas/OauthConfig`.
        public struct OauthConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OauthConfig/scopes`.
            public var scopes: Components.Schemas.Scopes?
            /// - Remark: Generated from `#/components/schemas/OauthConfig/redirectUrls`.
            public var redirectUrls: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/OauthConfig/tokenManagementEnabled`.
            public var tokenManagementEnabled: Swift.Bool?
            /// Creates a new `OauthConfig`.
            ///
            /// - Parameters:
            ///   - scopes:
            ///   - redirectUrls:
            ///   - tokenManagementEnabled:
            public init(
                scopes: Components.Schemas.Scopes? = nil,
                redirectUrls: [Swift.String]? = nil,
                tokenManagementEnabled: Swift.Bool? = nil
            ) {
                self.scopes = scopes
                self.redirectUrls = redirectUrls
                self.tokenManagementEnabled = tokenManagementEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case scopes
                case redirectUrls
                case tokenManagementEnabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/Scopes`.
        public struct Scopes: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Scopes/team`.
            public var team: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Scopes/channel`.
            public var channel: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Scopes/group`.
            public var group: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Scopes/mpim`.
            public var mpim: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Scopes/im`.
            public var im: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Scopes/user`.
            public var user: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Scopes/appHome`.
            public var appHome: [Swift.String]?
            /// Creates a new `Scopes`.
            ///
            /// - Parameters:
            ///   - team:
            ///   - channel:
            ///   - group:
            ///   - mpim:
            ///   - im:
            ///   - user:
            ///   - appHome:
            public init(
                team: [Swift.String]? = nil,
                channel: [Swift.String]? = nil,
                group: [Swift.String]? = nil,
                mpim: [Swift.String]? = nil,
                im: [Swift.String]? = nil,
                user: [Swift.String]? = nil,
                appHome: [Swift.String]? = nil
            ) {
                self.team = team
                self.channel = channel
                self.group = group
                self.mpim = mpim
                self.im = im
                self.user = user
                self.appHome = appHome
            }
            public enum CodingKeys: String, CodingKey {
                case team
                case channel
                case group
                case mpim
                case im
                case user
                case appHome
            }
        }
        /// - Remark: Generated from `#/components/schemas/Settings`.
        public struct Settings: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Settings/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Settings/interactivity`.
            public var interactivity: Components.Schemas.Interactivity?
            /// - Remark: Generated from `#/components/schemas/Settings/longDescription`.
            public var longDescription: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Settings/backgroundColor`.
            public var backgroundColor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Settings/eventSubscriptions`.
            public var eventSubscriptions: Components.Schemas.EventSubscriptions?
            /// - Remark: Generated from `#/components/schemas/Settings/allowedIpAddressRanges`.
            public var allowedIpAddressRanges: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Settings/orgDeployEnabled`.
            public var orgDeployEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Settings/socketModeEnabled`.
            public var socketModeEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Settings/tokenRotationEnabled`.
            public var tokenRotationEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Settings/hermesAppType`.
            public var hermesAppType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Settings/functionRuntime`.
            public var functionRuntime: Swift.String?
            /// Creates a new `Settings`.
            ///
            /// - Parameters:
            ///   - description:
            ///   - interactivity:
            ///   - longDescription:
            ///   - backgroundColor:
            ///   - eventSubscriptions:
            ///   - allowedIpAddressRanges:
            ///   - orgDeployEnabled:
            ///   - socketModeEnabled:
            ///   - tokenRotationEnabled:
            ///   - hermesAppType:
            ///   - functionRuntime:
            public init(
                description: Swift.String? = nil,
                interactivity: Components.Schemas.Interactivity? = nil,
                longDescription: Swift.String? = nil,
                backgroundColor: Swift.String? = nil,
                eventSubscriptions: Components.Schemas.EventSubscriptions? = nil,
                allowedIpAddressRanges: [Swift.String]? = nil,
                orgDeployEnabled: Swift.Bool? = nil,
                socketModeEnabled: Swift.Bool? = nil,
                tokenRotationEnabled: Swift.Bool? = nil,
                hermesAppType: Swift.String? = nil,
                functionRuntime: Swift.String? = nil
            ) {
                self.description = description
                self.interactivity = interactivity
                self.longDescription = longDescription
                self.backgroundColor = backgroundColor
                self.eventSubscriptions = eventSubscriptions
                self.allowedIpAddressRanges = allowedIpAddressRanges
                self.orgDeployEnabled = orgDeployEnabled
                self.socketModeEnabled = socketModeEnabled
                self.tokenRotationEnabled = tokenRotationEnabled
                self.hermesAppType = hermesAppType
                self.functionRuntime = functionRuntime
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case interactivity
                case longDescription
                case backgroundColor
                case eventSubscriptions
                case allowedIpAddressRanges
                case orgDeployEnabled
                case socketModeEnabled
                case tokenRotationEnabled
                case hermesAppType
                case functionRuntime
            }
        }
        /// - Remark: Generated from `#/components/schemas/EventSubscriptions`.
        public struct EventSubscriptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EventSubscriptions/botEvents`.
            public var botEvents: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/EventSubscriptions/userEvents`.
            public var userEvents: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/EventSubscriptions/requestUrl`.
            public var requestUrl: Swift.String?
            /// Creates a new `EventSubscriptions`.
            ///
            /// - Parameters:
            ///   - botEvents:
            ///   - userEvents:
            ///   - requestUrl:
            public init(
                botEvents: [Swift.String]? = nil,
                userEvents: [Swift.String]? = nil,
                requestUrl: Swift.String? = nil
            ) {
                self.botEvents = botEvents
                self.userEvents = userEvents
                self.requestUrl = requestUrl
            }
            public enum CodingKeys: String, CodingKey {
                case botEvents
                case userEvents
                case requestUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/Interactivity`.
        public struct Interactivity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Interactivity/isEnabled`.
            public var isEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Interactivity/requestUrl`.
            public var requestUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Interactivity/messageMenuOptionsUrl`.
            public var messageMenuOptionsUrl: Swift.String?
            /// Creates a new `Interactivity`.
            ///
            /// - Parameters:
            ///   - isEnabled:
            ///   - requestUrl:
            ///   - messageMenuOptionsUrl:
            public init(
                isEnabled: Swift.Bool? = nil,
                requestUrl: Swift.String? = nil,
                messageMenuOptionsUrl: Swift.String? = nil
            ) {
                self.isEnabled = isEnabled
                self.requestUrl = requestUrl
                self.messageMenuOptionsUrl = messageMenuOptionsUrl
            }
            public enum CodingKeys: String, CodingKey {
                case isEnabled
                case requestUrl
                case messageMenuOptionsUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsManifestUpdateResponse`.
        public struct AppsManifestUpdateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsManifestUpdateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsManifestUpdateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestUpdateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestUpdateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestUpdateResponse/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestUpdateResponse/permissionsUpdated`.
            public var permissionsUpdated: Swift.Bool?
            /// Creates a new `AppsManifestUpdateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - appId:
            ///   - permissionsUpdated:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                appId: Swift.String? = nil,
                permissionsUpdated: Swift.Bool? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.appId = appId
                self.permissionsUpdated = permissionsUpdated
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case appId
                case permissionsUpdated
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsManifestValidateResponse`.
        public struct AppsManifestValidateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsManifestValidateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsManifestValidateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestValidateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestValidateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsManifestValidateResponse/errors`.
            public var errors: [Components.Schemas._Error]?
            /// - Remark: Generated from `#/components/schemas/AppsManifestValidateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AppsManifestValidateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - errors:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                errors: [Components.Schemas._Error]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.errors = errors
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case errors
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsPermissionsInfoResponse`.
        public struct AppsPermissionsInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AppsPermissionsInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsPermissionsRequestResponse`.
        public struct AppsPermissionsRequestResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsRequestResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsRequestResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsRequestResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsRequestResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AppsPermissionsRequestResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsPermissionsResourcesListResponse`.
        public struct AppsPermissionsResourcesListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsResourcesListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsResourcesListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsResourcesListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsResourcesListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AppsPermissionsResourcesListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsPermissionsScopesListResponse`.
        public struct AppsPermissionsScopesListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsScopesListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsScopesListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsScopesListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsScopesListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AppsPermissionsScopesListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsPermissionsUsersListResponse`.
        public struct AppsPermissionsUsersListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsUsersListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsUsersListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsUsersListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsUsersListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AppsPermissionsUsersListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsPermissionsUsersRequestResponse`.
        public struct AppsPermissionsUsersRequestResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsUsersRequestResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsUsersRequestResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsUsersRequestResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsPermissionsUsersRequestResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AppsPermissionsUsersRequestResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppsUninstallResponse`.
        public struct AppsUninstallResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppsUninstallResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AppsUninstallResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsUninstallResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsUninstallResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppsUninstallResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AppsUninstallResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetStatusResponse`.
        public struct AssistantThreadsSetStatusResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetStatusResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetStatusResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetStatusResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetStatusResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetStatusResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AssistantThreadsSetStatusResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetSuggestedPromptsResponse`.
        public struct AssistantThreadsSetSuggestedPromptsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetSuggestedPromptsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetSuggestedPromptsResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetSuggestedPromptsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetSuggestedPromptsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetSuggestedPromptsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AssistantThreadsSetSuggestedPromptsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetTitleResponse`.
        public struct AssistantThreadsSetTitleResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetTitleResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetTitleResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetTitleResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetTitleResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantThreadsSetTitleResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AssistantThreadsSetTitleResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AuthRevokeResponse`.
        public struct AuthRevokeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuthRevokeResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AuthRevokeResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthRevokeResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthRevokeResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `AuthRevokeResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse`.
        public struct AuthTeamsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/teams`.
            public var teams: [Components.Schemas.Team]?
            /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTeamsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `AuthTeamsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - teams:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                teams: [Components.Schemas.Team]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.teams = teams
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case teams
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/AuthTestResponse`.
        public struct AuthTestResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/isEnterpriseInstall`.
            public var isEnterpriseInstall: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/appName`.
            public var appName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/enterpriseId`.
            public var enterpriseId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthTestResponse/expiresIn`.
            public var expiresIn: Swift.Int?
            /// Creates a new `AuthTestResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - url:
            ///   - team:
            ///   - user:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - teamId:
            ///   - userId:
            ///   - botId:
            ///   - isEnterpriseInstall:
            ///   - appName:
            ///   - appId:
            ///   - enterpriseId:
            ///   - expiresIn:
            public init(
                ok: Swift.Bool,
                url: Swift.String? = nil,
                team: Swift.String? = nil,
                user: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                teamId: Swift.String? = nil,
                userId: Swift.String? = nil,
                botId: Swift.String? = nil,
                isEnterpriseInstall: Swift.Bool? = nil,
                appName: Swift.String? = nil,
                appId: Swift.String? = nil,
                enterpriseId: Swift.String? = nil,
                expiresIn: Swift.Int? = nil
            ) {
                self.ok = ok
                self.url = url
                self.team = team
                self.user = user
                self.error = error
                self.needed = needed
                self.provided = provided
                self.teamId = teamId
                self.userId = userId
                self.botId = botId
                self.isEnterpriseInstall = isEnterpriseInstall
                self.appName = appName
                self.appId = appId
                self.enterpriseId = enterpriseId
                self.expiresIn = expiresIn
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case url
                case team
                case user
                case error
                case needed
                case provided
                case teamId
                case userId
                case botId
                case isEnterpriseInstall
                case appName
                case appId
                case enterpriseId
                case expiresIn
            }
        }
        /// - Remark: Generated from `#/components/schemas/BookmarksAddResponse`.
        public struct BookmarksAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BookmarksAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BookmarksAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksAddResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksAddResponse/bookmark`.
            public var bookmark: Components.Schemas.Bookmark?
            /// - Remark: Generated from `#/components/schemas/BookmarksAddResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `BookmarksAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - bookmark:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                bookmark: Components.Schemas.Bookmark? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.bookmark = bookmark
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case bookmark
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Bookmark`.
        public struct Bookmark: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Bookmark/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/link`.
            public var link: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/emoji`.
            public var emoji: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/rank`.
            public var rank: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/channelId`.
            public var channelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/iconUrl`.
            public var iconUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/entityId`.
            public var entityId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/dateCreated`.
            public var dateCreated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Bookmark/dateUpdated`.
            public var dateUpdated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Bookmark/lastUpdatedByUserId`.
            public var lastUpdatedByUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/lastUpdatedByTeamId`.
            public var lastUpdatedByTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/shortcutId`.
            public var shortcutId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bookmark/appActionId`.
            public var appActionId: Swift.String?
            /// Creates a new `Bookmark`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - title:
            ///   - link:
            ///   - emoji:
            ///   - _type:
            ///   - rank:
            ///   - channelId:
            ///   - iconUrl:
            ///   - entityId:
            ///   - dateCreated:
            ///   - dateUpdated:
            ///   - lastUpdatedByUserId:
            ///   - lastUpdatedByTeamId:
            ///   - shortcutId:
            ///   - appId:
            ///   - appActionId:
            public init(
                id: Swift.String? = nil,
                title: Swift.String? = nil,
                link: Swift.String? = nil,
                emoji: Swift.String? = nil,
                _type: Swift.String? = nil,
                rank: Swift.String? = nil,
                channelId: Swift.String? = nil,
                iconUrl: Swift.String? = nil,
                entityId: Swift.String? = nil,
                dateCreated: Swift.Int? = nil,
                dateUpdated: Swift.Int? = nil,
                lastUpdatedByUserId: Swift.String? = nil,
                lastUpdatedByTeamId: Swift.String? = nil,
                shortcutId: Swift.String? = nil,
                appId: Swift.String? = nil,
                appActionId: Swift.String? = nil
            ) {
                self.id = id
                self.title = title
                self.link = link
                self.emoji = emoji
                self._type = _type
                self.rank = rank
                self.channelId = channelId
                self.iconUrl = iconUrl
                self.entityId = entityId
                self.dateCreated = dateCreated
                self.dateUpdated = dateUpdated
                self.lastUpdatedByUserId = lastUpdatedByUserId
                self.lastUpdatedByTeamId = lastUpdatedByTeamId
                self.shortcutId = shortcutId
                self.appId = appId
                self.appActionId = appActionId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case title
                case link
                case emoji
                case _type = "type"
                case rank
                case channelId
                case iconUrl
                case entityId
                case dateCreated
                case dateUpdated
                case lastUpdatedByUserId
                case lastUpdatedByTeamId
                case shortcutId
                case appId
                case appActionId
            }
        }
        /// - Remark: Generated from `#/components/schemas/BookmarksEditResponse`.
        public struct BookmarksEditResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BookmarksEditResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BookmarksEditResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksEditResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksEditResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksEditResponse/bookmark`.
            public var bookmark: Components.Schemas.Bookmark?
            /// - Remark: Generated from `#/components/schemas/BookmarksEditResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `BookmarksEditResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - bookmark:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                bookmark: Components.Schemas.Bookmark? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.bookmark = bookmark
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case bookmark
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/BookmarksListResponse`.
        public struct BookmarksListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BookmarksListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BookmarksListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksListResponse/bookmarks`.
            public var bookmarks: [Components.Schemas.Bookmark]?
            /// - Remark: Generated from `#/components/schemas/BookmarksListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `BookmarksListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - bookmarks:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                bookmarks: [Components.Schemas.Bookmark]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.bookmarks = bookmarks
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case bookmarks
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/BookmarksRemoveResponse`.
        public struct BookmarksRemoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BookmarksRemoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BookmarksRemoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksRemoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksRemoveResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BookmarksRemoveResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `BookmarksRemoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/BotsInfoResponse`.
        public struct BotsInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BotsInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BotsInfoResponse/bot`.
            public var bot: Components.Schemas.Bot?
            /// - Remark: Generated from `#/components/schemas/BotsInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BotsInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BotsInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `BotsInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - bot:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                bot: Components.Schemas.Bot? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.bot = bot
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case bot
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Bot`.
        public struct Bot: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Bot/id`.
            public var id: Components.Schemas.Id?
            /// - Remark: Generated from `#/components/schemas/Bot/deleted`.
            public var deleted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Bot/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Bot/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Bot/icons`.
            public var icons: Components.Schemas.BotIcons?
            /// - Remark: Generated from `#/components/schemas/Bot/appId`.
            public var appId: Components.Schemas.AppID?
            /// - Remark: Generated from `#/components/schemas/Bot/isWorkflowBot`.
            public var isWorkflowBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Bot/teamId`.
            public var teamId: Swift.String?
            /// Creates a new `Bot`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - name:
            ///   - updated:
            ///   - icons:
            ///   - appId:
            ///   - isWorkflowBot:
            ///   - teamId:
            public init(
                id: Components.Schemas.Id? = nil,
                deleted: Swift.Bool? = nil,
                name: Swift.String? = nil,
                updated: Swift.Int? = nil,
                icons: Components.Schemas.BotIcons? = nil,
                appId: Components.Schemas.AppID? = nil,
                isWorkflowBot: Swift.Bool? = nil,
                teamId: Swift.String? = nil
            ) {
                self.id = id
                self.deleted = deleted
                self.name = name
                self.updated = updated
                self.icons = icons
                self.appId = appId
                self.isWorkflowBot = isWorkflowBot
                self.teamId = teamId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case name
                case updated
                case icons
                case appId
                case isWorkflowBot
                case teamId
            }
        }
        /// - Remark: Generated from `#/components/schemas/CallsAddResponse`.
        public struct CallsAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CallsAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CallsAddResponse/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/CallsAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsAddResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsAddResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `CallsAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - call:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                call: Components.Schemas.Call? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.call = call
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case call
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Call`.
        public struct Call: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Call/v1`.
            public var v1: Components.Schemas.V1?
            /// - Remark: Generated from `#/components/schemas/Call/mediaBackendType`.
            public var mediaBackendType: Swift.String?
            /// Creates a new `Call`.
            ///
            /// - Parameters:
            ///   - v1:
            ///   - mediaBackendType:
            public init(
                v1: Components.Schemas.V1? = nil,
                mediaBackendType: Swift.String? = nil
            ) {
                self.v1 = v1
                self.mediaBackendType = mediaBackendType
            }
            public enum CodingKeys: String, CodingKey {
                case v1
                case mediaBackendType
            }
        }
        /// - Remark: Generated from `#/components/schemas/CallsEndResponse`.
        public struct CallsEndResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CallsEndResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CallsEndResponse/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/CallsEndResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsEndResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsEndResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `CallsEndResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - call:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                call: Components.Schemas.Call? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.call = call
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case call
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/CallsInfoResponse`.
        public struct CallsInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CallsInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CallsInfoResponse/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/CallsInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `CallsInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - call:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                call: Components.Schemas.Call? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.call = call
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case call
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/CallsParticipantsAddResponse`.
        public struct CallsParticipantsAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CallsParticipantsAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CallsParticipantsAddResponse/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/CallsParticipantsAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsParticipantsAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsParticipantsAddResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `CallsParticipantsAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - call:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                call: Components.Schemas.Call? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.call = call
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case call
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/CallsParticipantsRemoveResponse`.
        public struct CallsParticipantsRemoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CallsParticipantsRemoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CallsParticipantsRemoveResponse/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/CallsParticipantsRemoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsParticipantsRemoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsParticipantsRemoveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `CallsParticipantsRemoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - call:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                call: Components.Schemas.Call? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.call = call
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case call
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/CallsUpdateResponse`.
        public struct CallsUpdateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CallsUpdateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CallsUpdateResponse/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/CallsUpdateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsUpdateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CallsUpdateResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `CallsUpdateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - call:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                call: Components.Schemas.Call? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.call = call
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case call
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/CanvasesAccessDeleteResponse`.
        public struct CanvasesAccessDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessDeleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessDeleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessDeleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessDeleteResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessDeleteResponse/failedToUpdateChannelIds`.
            public var failedToUpdateChannelIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessDeleteResponse/failedToUpdateUserIds`.
            public var failedToUpdateUserIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessDeleteResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `CanvasesAccessDeleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - failedToUpdateChannelIds:
            ///   - failedToUpdateUserIds:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                failedToUpdateChannelIds: [Swift.String]? = nil,
                failedToUpdateUserIds: [Swift.String]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.failedToUpdateChannelIds = failedToUpdateChannelIds
                self.failedToUpdateUserIds = failedToUpdateUserIds
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case failedToUpdateChannelIds
                case failedToUpdateUserIds
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/CanvasesAccessSetResponse`.
        public struct CanvasesAccessSetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessSetResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessSetResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessSetResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessSetResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessSetResponse/failedToUpdateChannelIds`.
            public var failedToUpdateChannelIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessSetResponse/failedToUpdateUserIds`.
            public var failedToUpdateUserIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/CanvasesAccessSetResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `CanvasesAccessSetResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - failedToUpdateChannelIds:
            ///   - failedToUpdateUserIds:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                failedToUpdateChannelIds: [Swift.String]? = nil,
                failedToUpdateUserIds: [Swift.String]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.failedToUpdateChannelIds = failedToUpdateChannelIds
                self.failedToUpdateUserIds = failedToUpdateUserIds
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case failedToUpdateChannelIds
                case failedToUpdateUserIds
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/CanvasesCreateResponse`.
        public struct CanvasesCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CanvasesCreateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CanvasesCreateResponse/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesCreateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesCreateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesCreateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesCreateResponse/canvasId`.
            public var canvasId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesCreateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `CanvasesCreateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - detail:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - canvasId:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                detail: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                canvasId: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.detail = detail
                self.error = error
                self.needed = needed
                self.provided = provided
                self.canvasId = canvasId
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case detail
                case error
                case needed
                case provided
                case canvasId
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/CanvasesDeleteResponse`.
        public struct CanvasesDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CanvasesDeleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CanvasesDeleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesDeleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesDeleteResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesDeleteResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `CanvasesDeleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/CanvasesEditResponse`.
        public struct CanvasesEditResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CanvasesEditResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CanvasesEditResponse/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesEditResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesEditResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesEditResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesEditResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `CanvasesEditResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - detail:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                detail: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.detail = detail
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case detail
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/CanvasesSectionsLookupResponse`.
        public struct CanvasesSectionsLookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CanvasesSectionsLookupResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CanvasesSectionsLookupResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesSectionsLookupResponse/sections`.
            public var sections: [Components.Schemas.Section]?
            /// - Remark: Generated from `#/components/schemas/CanvasesSectionsLookupResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesSectionsLookupResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasesSectionsLookupResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `CanvasesSectionsLookupResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - sections:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                sections: [Components.Schemas.Section]? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.sections = sections
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case sections
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Section`.
        public struct Section: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Section/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Section/label`.
            public var label: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Section/order`.
            public var order: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Section/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Section/sectionType`.
            public var sectionType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Section/isHidden`.
            public var isHidden: Swift.Bool?
            /// Creates a new `Section`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - label:
            ///   - order:
            ///   - teamId:
            ///   - sectionType:
            ///   - isHidden:
            public init(
                id: Swift.String? = nil,
                label: Swift.String? = nil,
                order: Swift.Int? = nil,
                teamId: Swift.String? = nil,
                sectionType: Swift.String? = nil,
                isHidden: Swift.Bool? = nil
            ) {
                self.id = id
                self.label = label
                self.order = order
                self.teamId = teamId
                self.sectionType = sectionType
                self.isHidden = isHidden
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case label
                case order
                case teamId
                case sectionType
                case isHidden
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsArchiveResponse`.
        public struct ChannelsArchiveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsArchiveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsArchiveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsArchiveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsArchiveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsArchiveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsCreateResponse`.
        public struct ChannelsCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsCreateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsCreateResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ChannelsCreateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsCreateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsCreateResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsCreateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse`.
        public struct ChannelsHistoryResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/messages`.
            public var messages: [Components.Schemas.Message]?
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/latest`.
            public var latest: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/channelActionsTs`.
            public var channelActionsTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/channelActionsCount`.
            public var channelActionsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ChannelsHistoryResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ChannelsHistoryResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - messages:
            ///   - warning:
            ///   - latest:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - hasMore:
            ///   - channelActionsTs:
            ///   - channelActionsCount:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                messages: [Components.Schemas.Message]? = nil,
                warning: Swift.String? = nil,
                latest: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                channelActionsTs: Swift.Int? = nil,
                channelActionsCount: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.messages = messages
                self.warning = warning
                self.latest = latest
                self.error = error
                self.needed = needed
                self.provided = provided
                self.hasMore = hasMore
                self.channelActionsTs = channelActionsTs
                self.channelActionsCount = channelActionsCount
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case messages
                case warning
                case latest
                case error
                case needed
                case provided
                case hasMore
                case channelActionsTs
                case channelActionsCount
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Message`.
        public struct Message: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Message/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/attachments`.
            public var attachments: [Components.Schemas.Attachment]?
            /// - Remark: Generated from `#/components/schemas/Message/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/blocks`.
            public var blocks: [Components.Schemas.Block]?
            /// - Remark: Generated from `#/components/schemas/Message/subscribed`.
            public var subscribed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Message/reactions`.
            public var reactions: [Components.Schemas.Reaction]?
            /// - Remark: Generated from `#/components/schemas/Message/edited`.
            public var edited: Components.Schemas.Edited?
            /// - Remark: Generated from `#/components/schemas/Message/files`.
            public var files: [Components.Schemas.FileElement]?
            /// - Remark: Generated from `#/components/schemas/Message/upload`.
            public var upload: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Message/inviter`.
            public var inviter: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/isStarred`.
            public var isStarred: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Message/clientMsgId`.
            public var clientMsgId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/replyCount`.
            public var replyCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Message/replyUsersCount`.
            public var replyUsersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Message/latestReply`.
            public var latestReply: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/replyUsers`.
            public var replyUsers: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Message/lastRead`.
            public var lastRead: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/botProfile`.
            public var botProfile: Components.Schemas.BotProfile?
            /// - Remark: Generated from `#/components/schemas/Message/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Message/isLocked`.
            public var isLocked: Swift.Bool?
            /// Creates a new `Message`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - text:
            ///   - user:
            ///   - ts:
            ///   - team:
            ///   - attachments:
            ///   - permalink:
            ///   - subtype:
            ///   - username:
            ///   - blocks:
            ///   - subscribed:
            ///   - reactions:
            ///   - edited:
            ///   - files:
            ///   - upload:
            ///   - inviter:
            ///   - botId:
            ///   - isStarred:
            ///   - clientMsgId:
            ///   - threadTs:
            ///   - replyCount:
            ///   - replyUsersCount:
            ///   - latestReply:
            ///   - replyUsers:
            ///   - lastRead:
            ///   - botProfile:
            ///   - displayAsBot:
            ///   - isLocked:
            public init(
                _type: Swift.String? = nil,
                text: Swift.String? = nil,
                user: Swift.String? = nil,
                ts: Swift.String? = nil,
                team: Swift.String? = nil,
                attachments: [Components.Schemas.Attachment]? = nil,
                permalink: Swift.String? = nil,
                subtype: Swift.String? = nil,
                username: Swift.String? = nil,
                blocks: [Components.Schemas.Block]? = nil,
                subscribed: Swift.Bool? = nil,
                reactions: [Components.Schemas.Reaction]? = nil,
                edited: Components.Schemas.Edited? = nil,
                files: [Components.Schemas.FileElement]? = nil,
                upload: Swift.Bool? = nil,
                inviter: Swift.String? = nil,
                botId: Swift.String? = nil,
                isStarred: Swift.Bool? = nil,
                clientMsgId: Swift.String? = nil,
                threadTs: Swift.String? = nil,
                replyCount: Swift.Int? = nil,
                replyUsersCount: Swift.Int? = nil,
                latestReply: Swift.String? = nil,
                replyUsers: [Swift.String]? = nil,
                lastRead: Swift.String? = nil,
                botProfile: Components.Schemas.BotProfile? = nil,
                displayAsBot: Swift.Bool? = nil,
                isLocked: Swift.Bool? = nil
            ) {
                self._type = _type
                self.text = text
                self.user = user
                self.ts = ts
                self.team = team
                self.attachments = attachments
                self.permalink = permalink
                self.subtype = subtype
                self.username = username
                self.blocks = blocks
                self.subscribed = subscribed
                self.reactions = reactions
                self.edited = edited
                self.files = files
                self.upload = upload
                self.inviter = inviter
                self.botId = botId
                self.isStarred = isStarred
                self.clientMsgId = clientMsgId
                self.threadTs = threadTs
                self.replyCount = replyCount
                self.replyUsersCount = replyUsersCount
                self.latestReply = latestReply
                self.replyUsers = replyUsers
                self.lastRead = lastRead
                self.botProfile = botProfile
                self.displayAsBot = displayAsBot
                self.isLocked = isLocked
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case user
                case ts
                case team
                case attachments
                case permalink
                case subtype
                case username
                case blocks
                case subscribed
                case reactions
                case edited
                case files
                case upload
                case inviter
                case botId
                case isStarred
                case clientMsgId
                case threadTs
                case replyCount
                case replyUsersCount
                case latestReply
                case replyUsers
                case lastRead
                case botProfile
                case displayAsBot
                case isLocked
            }
        }
        /// - Remark: Generated from `#/components/schemas/Attachment`.
        public struct Attachment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Attachment/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/color`.
            public var color: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/pretext`.
            public var pretext: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/id`.
            public var id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Attachment/indent`.
            public var indent: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Attachment/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/fields`.
            public var fields: [Components.Schemas.Field]?
            /// - Remark: Generated from `#/components/schemas/Attachment/footer`.
            public var footer: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/actions`.
            public var actions: [Components.Schemas.Action]?
            /// - Remark: Generated from `#/components/schemas/Attachment/blocks`.
            public var blocks: [Components.Schemas.Block]?
            /// - Remark: Generated from `#/components/schemas/Attachment/preview`.
            public var preview: Components.Schemas.Preview?
            /// - Remark: Generated from `#/components/schemas/Attachment/files`.
            public var files: [Components.Schemas.FileElement]?
            /// - Remark: Generated from `#/components/schemas/Attachment/filename`.
            public var filename: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Attachment/mimetype`.
            public var mimetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// - Remark: Generated from `#/components/schemas/Attachment/msgSubtype`.
            public var msgSubtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/callbackId`.
            public var callbackId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/serviceUrl`.
            public var serviceUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/serviceName`.
            public var serviceName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/serviceIcon`.
            public var serviceIcon: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/authorId`.
            public var authorId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/authorName`.
            public var authorName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/authorLink`.
            public var authorLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/authorIcon`.
            public var authorIcon: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/fromUrl`.
            public var fromUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/originalUrl`.
            public var originalUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/authorSubname`.
            public var authorSubname: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/channelId`.
            public var channelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/channelName`.
            public var channelName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/channelTeam`.
            public var channelTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/isMsgUnfurl`.
            public var isMsgUnfurl: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Attachment/isReplyUnfurl`.
            public var isReplyUnfurl: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Attachment/isThreadRootUnfurl`.
            public var isThreadRootUnfurl: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Attachment/isAppUnfurl`.
            public var isAppUnfurl: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Attachment/appUnfurlUrl`.
            public var appUnfurlUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/titleLink`.
            public var titleLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Attachment/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Attachment/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Attachment/thumbUrl`.
            public var thumbUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/thumbWidth`.
            public var thumbWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Attachment/thumbHeight`.
            public var thumbHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Attachment/videoUrl`.
            public var videoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/videoHtml`.
            public var videoHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/videoHtmlWidth`.
            public var videoHtmlWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Attachment/videoHtmlHeight`.
            public var videoHtmlHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Attachment/footerIcon`.
            public var footerIcon: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Attachment/mrkdwnIn`.
            public var mrkdwnIn: [Swift.String]?
            /// Creates a new `Attachment`.
            ///
            /// - Parameters:
            ///   - fallback:
            ///   - color:
            ///   - pretext:
            ///   - id:
            ///   - indent:
            ///   - title:
            ///   - text:
            ///   - fields:
            ///   - footer:
            ///   - ts:
            ///   - actions:
            ///   - blocks:
            ///   - preview:
            ///   - files:
            ///   - filename:
            ///   - size:
            ///   - mimetype:
            ///   - url:
            ///   - metadata:
            ///   - msgSubtype:
            ///   - callbackId:
            ///   - serviceUrl:
            ///   - serviceName:
            ///   - serviceIcon:
            ///   - authorId:
            ///   - authorName:
            ///   - authorLink:
            ///   - authorIcon:
            ///   - fromUrl:
            ///   - originalUrl:
            ///   - authorSubname:
            ///   - channelId:
            ///   - channelName:
            ///   - channelTeam:
            ///   - appId:
            ///   - botId:
            ///   - isMsgUnfurl:
            ///   - isReplyUnfurl:
            ///   - isThreadRootUnfurl:
            ///   - isAppUnfurl:
            ///   - appUnfurlUrl:
            ///   - titleLink:
            ///   - imageUrl:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - thumbUrl:
            ///   - thumbWidth:
            ///   - thumbHeight:
            ///   - videoUrl:
            ///   - videoHtml:
            ///   - videoHtmlWidth:
            ///   - videoHtmlHeight:
            ///   - footerIcon:
            ///   - mrkdwnIn:
            public init(
                fallback: Swift.String? = nil,
                color: Swift.String? = nil,
                pretext: Swift.String? = nil,
                id: Swift.Int? = nil,
                indent: Swift.Bool? = nil,
                title: Swift.String? = nil,
                text: Swift.String? = nil,
                fields: [Components.Schemas.Field]? = nil,
                footer: Swift.String? = nil,
                ts: Swift.String? = nil,
                actions: [Components.Schemas.Action]? = nil,
                blocks: [Components.Schemas.Block]? = nil,
                preview: Components.Schemas.Preview? = nil,
                files: [Components.Schemas.FileElement]? = nil,
                filename: Swift.String? = nil,
                size: Swift.Int? = nil,
                mimetype: Swift.String? = nil,
                url: Swift.String? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                msgSubtype: Swift.String? = nil,
                callbackId: Swift.String? = nil,
                serviceUrl: Swift.String? = nil,
                serviceName: Swift.String? = nil,
                serviceIcon: Swift.String? = nil,
                authorId: Swift.String? = nil,
                authorName: Swift.String? = nil,
                authorLink: Swift.String? = nil,
                authorIcon: Swift.String? = nil,
                fromUrl: Swift.String? = nil,
                originalUrl: Swift.String? = nil,
                authorSubname: Swift.String? = nil,
                channelId: Swift.String? = nil,
                channelName: Swift.String? = nil,
                channelTeam: Swift.String? = nil,
                appId: Swift.String? = nil,
                botId: Swift.String? = nil,
                isMsgUnfurl: Swift.Bool? = nil,
                isReplyUnfurl: Swift.Bool? = nil,
                isThreadRootUnfurl: Swift.Bool? = nil,
                isAppUnfurl: Swift.Bool? = nil,
                appUnfurlUrl: Swift.String? = nil,
                titleLink: Swift.String? = nil,
                imageUrl: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                thumbUrl: Swift.String? = nil,
                thumbWidth: Swift.Int? = nil,
                thumbHeight: Swift.Int? = nil,
                videoUrl: Swift.String? = nil,
                videoHtml: Swift.String? = nil,
                videoHtmlWidth: Swift.Int? = nil,
                videoHtmlHeight: Swift.Int? = nil,
                footerIcon: Swift.String? = nil,
                mrkdwnIn: [Swift.String]? = nil
            ) {
                self.fallback = fallback
                self.color = color
                self.pretext = pretext
                self.id = id
                self.indent = indent
                self.title = title
                self.text = text
                self.fields = fields
                self.footer = footer
                self.ts = ts
                self.actions = actions
                self.blocks = blocks
                self.preview = preview
                self.files = files
                self.filename = filename
                self.size = size
                self.mimetype = mimetype
                self.url = url
                self.metadata = metadata
                self.msgSubtype = msgSubtype
                self.callbackId = callbackId
                self.serviceUrl = serviceUrl
                self.serviceName = serviceName
                self.serviceIcon = serviceIcon
                self.authorId = authorId
                self.authorName = authorName
                self.authorLink = authorLink
                self.authorIcon = authorIcon
                self.fromUrl = fromUrl
                self.originalUrl = originalUrl
                self.authorSubname = authorSubname
                self.channelId = channelId
                self.channelName = channelName
                self.channelTeam = channelTeam
                self.appId = appId
                self.botId = botId
                self.isMsgUnfurl = isMsgUnfurl
                self.isReplyUnfurl = isReplyUnfurl
                self.isThreadRootUnfurl = isThreadRootUnfurl
                self.isAppUnfurl = isAppUnfurl
                self.appUnfurlUrl = appUnfurlUrl
                self.titleLink = titleLink
                self.imageUrl = imageUrl
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.thumbUrl = thumbUrl
                self.thumbWidth = thumbWidth
                self.thumbHeight = thumbHeight
                self.videoUrl = videoUrl
                self.videoHtml = videoHtml
                self.videoHtmlWidth = videoHtmlWidth
                self.videoHtmlHeight = videoHtmlHeight
                self.footerIcon = footerIcon
                self.mrkdwnIn = mrkdwnIn
            }
            public enum CodingKeys: String, CodingKey {
                case fallback
                case color
                case pretext
                case id
                case indent
                case title
                case text
                case fields
                case footer
                case ts
                case actions
                case blocks
                case preview
                case files
                case filename
                case size
                case mimetype
                case url
                case metadata
                case msgSubtype
                case callbackId
                case serviceUrl
                case serviceName
                case serviceIcon
                case authorId
                case authorName
                case authorLink
                case authorIcon
                case fromUrl
                case originalUrl
                case authorSubname
                case channelId
                case channelName
                case channelTeam
                case appId
                case botId
                case isMsgUnfurl
                case isReplyUnfurl
                case isThreadRootUnfurl
                case isAppUnfurl
                case appUnfurlUrl
                case titleLink
                case imageUrl
                case imageWidth
                case imageHeight
                case imageBytes
                case thumbUrl
                case thumbWidth
                case thumbHeight
                case videoUrl
                case videoHtml
                case videoHtmlWidth
                case videoHtmlHeight
                case footerIcon
                case mrkdwnIn
            }
        }
        /// - Remark: Generated from `#/components/schemas/Action`.
        public struct Action: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Action/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Action/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Action/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Action/style`.
            public var style: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Action/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Action/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Action/confirm`.
            public var confirm: Components.Schemas.ActionConfirm?
            /// - Remark: Generated from `#/components/schemas/Action/options`.
            public var options: [Components.Schemas.SelectedOptionElement]?
            /// - Remark: Generated from `#/components/schemas/Action/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Action/selectedOptions`.
            public var selectedOptions: [Components.Schemas.SelectedOptionElement]?
            /// - Remark: Generated from `#/components/schemas/Action/dataSource`.
            public var dataSource: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Action/minQueryLength`.
            public var minQueryLength: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Action/optionGroups`.
            public var optionGroups: [Components.Schemas.ActionOptionGroup]?
            /// Creates a new `Action`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - text:
            ///   - style:
            ///   - _type:
            ///   - value:
            ///   - confirm:
            ///   - options:
            ///   - url:
            ///   - selectedOptions:
            ///   - dataSource:
            ///   - minQueryLength:
            ///   - optionGroups:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                text: Swift.String? = nil,
                style: Swift.String? = nil,
                _type: Swift.String? = nil,
                value: Swift.String? = nil,
                confirm: Components.Schemas.ActionConfirm? = nil,
                options: [Components.Schemas.SelectedOptionElement]? = nil,
                url: Swift.String? = nil,
                selectedOptions: [Components.Schemas.SelectedOptionElement]? = nil,
                dataSource: Swift.String? = nil,
                minQueryLength: Swift.Int? = nil,
                optionGroups: [Components.Schemas.ActionOptionGroup]? = nil
            ) {
                self.id = id
                self.name = name
                self.text = text
                self.style = style
                self._type = _type
                self.value = value
                self.confirm = confirm
                self.options = options
                self.url = url
                self.selectedOptions = selectedOptions
                self.dataSource = dataSource
                self.minQueryLength = minQueryLength
                self.optionGroups = optionGroups
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case text
                case style
                case _type = "type"
                case value
                case confirm
                case options
                case url
                case selectedOptions
                case dataSource
                case minQueryLength
                case optionGroups
            }
        }
        /// - Remark: Generated from `#/components/schemas/ActionConfirm`.
        public struct ActionConfirm: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActionConfirm/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActionConfirm/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActionConfirm/okText`.
            public var okText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActionConfirm/dismissText`.
            public var dismissText: Swift.String?
            /// Creates a new `ActionConfirm`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - text:
            ///   - okText:
            ///   - dismissText:
            public init(
                title: Swift.String? = nil,
                text: Swift.String? = nil,
                okText: Swift.String? = nil,
                dismissText: Swift.String? = nil
            ) {
                self.title = title
                self.text = text
                self.okText = okText
                self.dismissText = dismissText
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case text
                case okText
                case dismissText
            }
        }
        /// - Remark: Generated from `#/components/schemas/OptionGroup`.
        public struct OptionGroup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OptionGroup/label`.
            public var label: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/OptionGroup/options`.
            public var options: [Components.Schemas.Option]?
            /// Creates a new `OptionGroup`.
            ///
            /// - Parameters:
            ///   - label:
            ///   - options:
            public init(
                label: Components.Schemas.Close? = nil,
                options: [Components.Schemas.Option]? = nil
            ) {
                self.label = label
                self.options = options
            }
            public enum CodingKeys: String, CodingKey {
                case label
                case options
            }
        }
        /// - Remark: Generated from `#/components/schemas/Option`.
        public struct Option: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Option/text`.
            public var text: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Option/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Option/description`.
            public var description: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Option/url`.
            public var url: Swift.String?
            /// Creates a new `Option`.
            ///
            /// - Parameters:
            ///   - text:
            ///   - value:
            ///   - description:
            ///   - url:
            public init(
                text: Components.Schemas.Close? = nil,
                value: Swift.String? = nil,
                description: Components.Schemas.Close? = nil,
                url: Swift.String? = nil
            ) {
                self.text = text
                self.value = value
                self.description = description
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case value
                case description
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/Field`.
        public struct Field: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Field/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Field/alt`.
            public var alt: Swift.String?
            /// Creates a new `Field`.
            ///
            /// - Parameters:
            ///   - value:
            ///   - alt:
            public init(
                value: Swift.String? = nil,
                alt: Swift.String? = nil
            ) {
                self.value = value
                self.alt = alt
            }
            public enum CodingKeys: String, CodingKey {
                case value
                case alt
            }
        }
        /// - Remark: Generated from `#/components/schemas/Block`.
        public struct Block: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Block/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Block/label`.
            public var label: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Block/element`.
            public var element: Components.Schemas.PurpleElement?
            /// - Remark: Generated from `#/components/schemas/Block/hint`.
            public var hint: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Block/optional`.
            public var optional: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Block/elements`.
            public var elements: [Components.Schemas.StickyElement]?
            /// - Remark: Generated from `#/components/schemas/Block/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Block/title`.
            public var title: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Block/description`.
            public var description: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Block/text`.
            public var text: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Block/fields`.
            public var fields: [Components.Schemas.Close]?
            /// - Remark: Generated from `#/components/schemas/Block/accessory`.
            public var accessory: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/Block/expand`.
            public var expand: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Block/blockId`.
            public var blockId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Block/dispatchAction`.
            public var dispatchAction: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Block/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Block/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Block/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Block/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Block/isAnimated`.
            public var isAnimated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Block/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// - Remark: Generated from `#/components/schemas/Block/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Block/titleUrl`.
            public var titleUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Block/videoUrl`.
            public var videoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Block/thumbnailUrl`.
            public var thumbnailUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Block/authorName`.
            public var authorName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Block/providerName`.
            public var providerName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Block/providerIconUrl`.
            public var providerIconUrl: Swift.String?
            /// Creates a new `Block`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - label:
            ///   - element:
            ///   - hint:
            ///   - optional:
            ///   - elements:
            ///   - fallback:
            ///   - title:
            ///   - description:
            ///   - text:
            ///   - fields:
            ///   - accessory:
            ///   - expand:
            ///   - blockId:
            ///   - dispatchAction:
            ///   - imageUrl:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - isAnimated:
            ///   - slackFile:
            ///   - altText:
            ///   - titleUrl:
            ///   - videoUrl:
            ///   - thumbnailUrl:
            ///   - authorName:
            ///   - providerName:
            ///   - providerIconUrl:
            public init(
                _type: Swift.String? = nil,
                label: Components.Schemas.Close? = nil,
                element: Components.Schemas.PurpleElement? = nil,
                hint: Components.Schemas.Close? = nil,
                optional: Swift.Bool? = nil,
                elements: [Components.Schemas.StickyElement]? = nil,
                fallback: Swift.String? = nil,
                title: Components.Schemas.Close? = nil,
                description: Components.Schemas.Close? = nil,
                text: Components.Schemas.Close? = nil,
                fields: [Components.Schemas.Close]? = nil,
                accessory: Components.Schemas.Accessory? = nil,
                expand: Swift.Bool? = nil,
                blockId: Swift.String? = nil,
                dispatchAction: Swift.Bool? = nil,
                imageUrl: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                isAnimated: Swift.Bool? = nil,
                slackFile: Components.Schemas.SlackFile? = nil,
                altText: Swift.String? = nil,
                titleUrl: Swift.String? = nil,
                videoUrl: Swift.String? = nil,
                thumbnailUrl: Swift.String? = nil,
                authorName: Swift.String? = nil,
                providerName: Swift.String? = nil,
                providerIconUrl: Swift.String? = nil
            ) {
                self._type = _type
                self.label = label
                self.element = element
                self.hint = hint
                self.optional = optional
                self.elements = elements
                self.fallback = fallback
                self.title = title
                self.description = description
                self.text = text
                self.fields = fields
                self.accessory = accessory
                self.expand = expand
                self.blockId = blockId
                self.dispatchAction = dispatchAction
                self.imageUrl = imageUrl
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.isAnimated = isAnimated
                self.slackFile = slackFile
                self.altText = altText
                self.titleUrl = titleUrl
                self.videoUrl = videoUrl
                self.thumbnailUrl = thumbnailUrl
                self.authorName = authorName
                self.providerName = providerName
                self.providerIconUrl = providerIconUrl
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case label
                case element
                case hint
                case optional
                case elements
                case fallback
                case title
                case description
                case text
                case fields
                case accessory
                case expand
                case blockId
                case dispatchAction
                case imageUrl
                case imageWidth
                case imageHeight
                case imageBytes
                case isAnimated
                case slackFile
                case altText
                case titleUrl
                case videoUrl
                case thumbnailUrl
                case authorName
                case providerName
                case providerIconUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/Accessory`.
        public struct Accessory: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Accessory/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Accessory/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Accessory/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Accessory/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Accessory/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Accessory/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Accessory/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Accessory/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// Creates a new `Accessory`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - fallback:
            ///   - imageUrl:
            ///   - altText:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - slackFile:
            public init(
                _type: Swift.String? = nil,
                fallback: Swift.String? = nil,
                imageUrl: Swift.String? = nil,
                altText: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                slackFile: Components.Schemas.SlackFile? = nil
            ) {
                self._type = _type
                self.fallback = fallback
                self.imageUrl = imageUrl
                self.altText = altText
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.slackFile = slackFile
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case fallback
                case imageUrl
                case altText
                case imageWidth
                case imageHeight
                case imageBytes
                case slackFile
            }
        }
        /// - Remark: Generated from `#/components/schemas/Element`.
        public struct Element: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Element/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/text`.
            public var text: Components.Schemas.Text?
            /// - Remark: Generated from `#/components/schemas/Element/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/style`.
            public var style: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/confirm`.
            public var confirm: Components.Schemas.Confirm?
            /// - Remark: Generated from `#/components/schemas/Element/placeholder`.
            public var placeholder: Components.Schemas.Text?
            /// - Remark: Generated from `#/components/schemas/Element/filter`.
            public var filter: Components.Schemas.Filter?
            /// - Remark: Generated from `#/components/schemas/Element/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/actionId`.
            public var actionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/initialChannel`.
            public var initialChannel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/responseUrlEnabled`.
            public var responseUrlEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Element/initialConversation`.
            public var initialConversation: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/defaultToCurrentConversation`.
            public var defaultToCurrentConversation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Element/initialDate`.
            public var initialDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/initialOption`.
            public var initialOption: Components.Schemas.InitialOption?
            /// - Remark: Generated from `#/components/schemas/Element/minQueryLength`.
            public var minQueryLength: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Element/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Element/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Element/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Element/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Element/initialUser`.
            public var initialUser: Swift.String?
            /// Creates a new `Element`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - text:
            ///   - url:
            ///   - value:
            ///   - style:
            ///   - confirm:
            ///   - placeholder:
            ///   - filter:
            ///   - fallback:
            ///   - actionId:
            ///   - initialChannel:
            ///   - responseUrlEnabled:
            ///   - initialConversation:
            ///   - defaultToCurrentConversation:
            ///   - initialDate:
            ///   - initialOption:
            ///   - minQueryLength:
            ///   - imageUrl:
            ///   - altText:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - initialUser:
            public init(
                _type: Swift.String? = nil,
                text: Components.Schemas.Text? = nil,
                url: Swift.String? = nil,
                value: Swift.String? = nil,
                style: Swift.String? = nil,
                confirm: Components.Schemas.Confirm? = nil,
                placeholder: Components.Schemas.Text? = nil,
                filter: Components.Schemas.Filter? = nil,
                fallback: Swift.String? = nil,
                actionId: Swift.String? = nil,
                initialChannel: Swift.String? = nil,
                responseUrlEnabled: Swift.Bool? = nil,
                initialConversation: Swift.String? = nil,
                defaultToCurrentConversation: Swift.Bool? = nil,
                initialDate: Swift.String? = nil,
                initialOption: Components.Schemas.InitialOption? = nil,
                minQueryLength: Swift.Int? = nil,
                imageUrl: Swift.String? = nil,
                altText: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                initialUser: Swift.String? = nil
            ) {
                self._type = _type
                self.text = text
                self.url = url
                self.value = value
                self.style = style
                self.confirm = confirm
                self.placeholder = placeholder
                self.filter = filter
                self.fallback = fallback
                self.actionId = actionId
                self.initialChannel = initialChannel
                self.responseUrlEnabled = responseUrlEnabled
                self.initialConversation = initialConversation
                self.defaultToCurrentConversation = defaultToCurrentConversation
                self.initialDate = initialDate
                self.initialOption = initialOption
                self.minQueryLength = minQueryLength
                self.imageUrl = imageUrl
                self.altText = altText
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.initialUser = initialUser
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case url
                case value
                case style
                case confirm
                case placeholder
                case filter
                case fallback
                case actionId
                case initialChannel
                case responseUrlEnabled
                case initialConversation
                case defaultToCurrentConversation
                case initialDate
                case initialOption
                case minQueryLength
                case imageUrl
                case altText
                case imageWidth
                case imageHeight
                case imageBytes
                case initialUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/ElementConfirm`.
        public struct ElementConfirm: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ElementConfirm/title`.
            public var title: Components.Schemas.Text?
            /// - Remark: Generated from `#/components/schemas/ElementConfirm/text`.
            public var text: Components.Schemas.Text?
            /// - Remark: Generated from `#/components/schemas/ElementConfirm/confirm`.
            public var confirm: Components.Schemas.Text?
            /// - Remark: Generated from `#/components/schemas/ElementConfirm/deny`.
            public var deny: Components.Schemas.Text?
            /// Creates a new `ElementConfirm`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - text:
            ///   - confirm:
            ///   - deny:
            public init(
                title: Components.Schemas.Text? = nil,
                text: Components.Schemas.Text? = nil,
                confirm: Components.Schemas.Text? = nil,
                deny: Components.Schemas.Text? = nil
            ) {
                self.title = title
                self.text = text
                self.confirm = confirm
                self.deny = deny
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case text
                case confirm
                case deny
            }
        }
        /// - Remark: Generated from `#/components/schemas/Filter`.
        public struct Filter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Filter/include`.
            public var include: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Filter/excludeExternalSharedChannels`.
            public var excludeExternalSharedChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Filter/excludeBotUsers`.
            public var excludeBotUsers: Swift.Bool?
            /// Creates a new `Filter`.
            ///
            /// - Parameters:
            ///   - include:
            ///   - excludeExternalSharedChannels:
            ///   - excludeBotUsers:
            public init(
                include: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                excludeExternalSharedChannels: Swift.Bool? = nil,
                excludeBotUsers: Swift.Bool? = nil
            ) {
                self.include = include
                self.excludeExternalSharedChannels = excludeExternalSharedChannels
                self.excludeBotUsers = excludeBotUsers
            }
            public enum CodingKeys: String, CodingKey {
                case include
                case excludeExternalSharedChannels
                case excludeBotUsers
            }
        }
        /// - Remark: Generated from `#/components/schemas/InitialOption`.
        public struct InitialOption: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InitialOption/text`.
            public var text: Components.Schemas.Text?
            /// - Remark: Generated from `#/components/schemas/InitialOption/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InitialOption/description`.
            public var description: Components.Schemas.Text?
            /// - Remark: Generated from `#/components/schemas/InitialOption/url`.
            public var url: Swift.String?
            /// Creates a new `InitialOption`.
            ///
            /// - Parameters:
            ///   - text:
            ///   - value:
            ///   - description:
            ///   - url:
            public init(
                text: Components.Schemas.Text? = nil,
                value: Swift.String? = nil,
                description: Components.Schemas.Text? = nil,
                url: Swift.String? = nil
            ) {
                self.text = text
                self.value = value
                self.description = description
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case value
                case description
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/Text`.
        public struct Text: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Text/type`.
            public var _type: Components.Schemas.TextType?
            /// - Remark: Generated from `#/components/schemas/Text/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Text/emoji`.
            public var emoji: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Text/verbatim`.
            public var verbatim: Swift.Bool?
            /// Creates a new `Text`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - text:
            ///   - emoji:
            ///   - verbatim:
            public init(
                _type: Components.Schemas.TextType? = nil,
                text: Swift.String? = nil,
                emoji: Swift.Bool? = nil,
                verbatim: Swift.Bool? = nil
            ) {
                self._type = _type
                self.text = text
                self.emoji = emoji
                self.verbatim = verbatim
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case emoji
                case verbatim
            }
        }
        /// - Remark: Generated from `#/components/schemas/BotProfile`.
        public struct BotProfile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BotProfile/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BotProfile/deleted`.
            public var deleted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/BotProfile/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BotProfile/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/BotProfile/icons`.
            public var icons: Components.Schemas.Icons?
            /// - Remark: Generated from `#/components/schemas/BotProfile/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BotProfile/teamId`.
            public var teamId: Swift.String?
            /// Creates a new `BotProfile`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - name:
            ///   - updated:
            ///   - icons:
            ///   - appId:
            ///   - teamId:
            public init(
                id: Swift.String? = nil,
                deleted: Swift.Bool? = nil,
                name: Swift.String? = nil,
                updated: Swift.Int? = nil,
                icons: Components.Schemas.Icons? = nil,
                appId: Swift.String? = nil,
                teamId: Swift.String? = nil
            ) {
                self.id = id
                self.deleted = deleted
                self.name = name
                self.updated = updated
                self.icons = icons
                self.appId = appId
                self.teamId = teamId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case name
                case updated
                case icons
                case appId
                case teamId
            }
        }
        /// - Remark: Generated from `#/components/schemas/BotProfileIcons`.
        public struct BotProfileIcons: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BotProfileIcons/image36`.
            public var image36: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BotProfileIcons/image48`.
            public var image48: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BotProfileIcons/image72`.
            public var image72: Swift.String?
            /// Creates a new `BotProfileIcons`.
            ///
            /// - Parameters:
            ///   - image36:
            ///   - image48:
            ///   - image72:
            public init(
                image36: Swift.String? = nil,
                image48: Swift.String? = nil,
                image72: Swift.String? = nil
            ) {
                self.image36 = image36
                self.image48 = image48
                self.image72 = image72
            }
            public enum CodingKeys: String, CodingKey {
                case image36
                case image48
                case image72
            }
        }
        /// - Remark: Generated from `#/components/schemas/Edited`.
        public struct Edited: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Edited/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Edited/ts`.
            public var ts: Swift.String?
            /// Creates a new `Edited`.
            ///
            /// - Parameters:
            ///   - user:
            ///   - ts:
            public init(
                user: Swift.String? = nil,
                ts: Swift.String? = nil
            ) {
                self.user = user
                self.ts = ts
            }
            public enum CodingKeys: String, CodingKey {
                case user
                case ts
            }
        }
        /// - Remark: Generated from `#/components/schemas/File`.
        public struct File: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/File/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/timestamp`.
            public var timestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/subject`.
            public var subject: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/mimetype`.
            public var mimetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/filetype`.
            public var filetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/mode`.
            public var mode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/editable`.
            public var editable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/editor`.
            public var editor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/editors`.
            public var editors: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/File/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/transcription`.
            public var transcription: Components.Schemas.Transcription?
            /// - Remark: Generated from `#/components/schemas/File/mp4`.
            public var mp4: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/vtt`.
            public var vtt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/hls`.
            public var hls: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/deanimate`.
            public var deanimate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/pjpeg`.
            public var pjpeg: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/preview`.
            public var preview: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/lines`.
            public var lines: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/channels`.
            public var channels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/File/groups`.
            public var groups: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/File/ims`.
            public var ims: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/File/shares`.
            public var shares: Components.Schemas.Shares?
            /// - Remark: Generated from `#/components/schemas/File/to`.
            public var to: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/File/from`.
            public var from: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/File/cc`.
            public var cc: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/File/headers`.
            public var headers: Components.Schemas.Headers?
            /// - Remark: Generated from `#/components/schemas/File/saved`.
            public var saved: Components.Schemas.Saved?
            /// - Remark: Generated from `#/components/schemas/File/access`.
            public var access: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/favorites`.
            public var favorites: [Components.Schemas.Favorite]?
            /// - Remark: Generated from `#/components/schemas/File/reactions`.
            public var reactions: [Components.Schemas.Reaction]?
            /// - Remark: Generated from `#/components/schemas/File/attachments`.
            public var attachments: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/File/blocks`.
            public var blocks: [Components.Schemas.DescriptionBlockElement]?
            /// - Remark: Generated from `#/components/schemas/File/prettyType`.
            public var prettyType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/userTeam`.
            public var userTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/sourceTeam`.
            public var sourceTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/nonOwnerEditable`.
            public var nonOwnerEditable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/lastEditor`.
            public var lastEditor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/fileAccess`.
            public var fileAccess: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/editTimestamp`.
            public var editTimestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/altTxt`.
            public var altTxt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/mp4Low`.
            public var mp4Low: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/hlsEmbed`.
            public var hlsEmbed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/durationMs`.
            public var durationMs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/thumbVideoW`.
            public var thumbVideoW: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/thumbVideoH`.
            public var thumbVideoH: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/originalAttachmentCount`.
            public var originalAttachmentCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/isExternal`.
            public var isExternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/externalType`.
            public var externalType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/externalUrl`.
            public var externalUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/urlPrivate`.
            public var urlPrivate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/urlPrivateDownload`.
            public var urlPrivateDownload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/urlStaticPreview`.
            public var urlStaticPreview: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/appName`.
            public var appName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb64`.
            public var thumb64: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb64Gif`.
            public var thumb64Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb64W`.
            public var thumb64W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb64H`.
            public var thumb64H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb80`.
            public var thumb80: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb80Gif`.
            public var thumb80Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb80W`.
            public var thumb80W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb80H`.
            public var thumb80H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb160`.
            public var thumb160: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb160Gif`.
            public var thumb160Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb160W`.
            public var thumb160W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb160H`.
            public var thumb160H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb360`.
            public var thumb360: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb360Gif`.
            public var thumb360Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb360W`.
            public var thumb360W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb360H`.
            public var thumb360H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb480`.
            public var thumb480: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb480Gif`.
            public var thumb480Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb480W`.
            public var thumb480W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb480H`.
            public var thumb480H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb720`.
            public var thumb720: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb720Gif`.
            public var thumb720Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb720W`.
            public var thumb720W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb720H`.
            public var thumb720H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb800`.
            public var thumb800: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb800Gif`.
            public var thumb800Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb800W`.
            public var thumb800W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb800H`.
            public var thumb800H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb960`.
            public var thumb960: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb960Gif`.
            public var thumb960Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb960W`.
            public var thumb960W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb960H`.
            public var thumb960H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb1024`.
            public var thumb1024: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb1024Gif`.
            public var thumb1024Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb1024W`.
            public var thumb1024W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumb1024H`.
            public var thumb1024H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumbVideo`.
            public var thumbVideo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumbGif`.
            public var thumbGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumbPdf`.
            public var thumbPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumbPdfW`.
            public var thumbPdfW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumbPdfH`.
            public var thumbPdfH: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/thumbTiny`.
            public var thumbTiny: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/convertedPdf`.
            public var convertedPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/imageExifRotation`.
            public var imageExifRotation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/originalW`.
            public var originalW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/originalH`.
            public var originalH: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/deanimateGif`.
            public var deanimateGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/permalinkPublic`.
            public var permalinkPublic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/editLink`.
            public var editLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/hasRichPreview`.
            public var hasRichPreview: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/mediaDisplayType`.
            public var mediaDisplayType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/previewIsTruncated`.
            public var previewIsTruncated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/previewHighlight`.
            public var previewHighlight: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/plainText`.
            public var plainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/previewPlainText`.
            public var previewPlainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/sentToSelf`.
            public var sentToSelf: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/linesMore`.
            public var linesMore: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/isPublic`.
            public var isPublic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/publicUrlShared`.
            public var publicUrlShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/hasMoreShares`.
            public var hasMoreShares: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/channelActionsTs`.
            public var channelActionsTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/channelActionsCount`.
            public var channelActionsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/simplifiedHtml`.
            public var simplifiedHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/mediaProgress`.
            public var mediaProgress: Components.Schemas.MediaProgress?
            /// - Remark: Generated from `#/components/schemas/File/quipThreadId`.
            public var quipThreadId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/isChannelSpace`.
            public var isChannelSpace: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/linkedChannelId`.
            public var linkedChannelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/teamsSharedWith`.
            public var teamsSharedWith: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/File/lastRead`.
            public var lastRead: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/titleBlocks`.
            public var titleBlocks: [Components.Schemas.DescriptionBlockElement]?
            /// - Remark: Generated from `#/components/schemas/File/privateChannelsWithFileAccessCount`.
            public var privateChannelsWithFileAccessCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/privateFileWithAccessCount`.
            public var privateFileWithAccessCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/dmMpdmUsersWithFileAccess`.
            public var dmMpdmUsersWithFileAccess: [Components.Schemas.DmMpdmUsersWithFileAccess]?
            /// - Remark: Generated from `#/components/schemas/File/orgOrWorkspaceAccess`.
            public var orgOrWorkspaceAccess: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/updateNotification`.
            public var updateNotification: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/canvasTemplateMode`.
            public var canvasTemplateMode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/templateConversionTs`.
            public var templateConversionTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/templateName`.
            public var templateName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/templateTitle`.
            public var templateTitle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/templateDescription`.
            public var templateDescription: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/templateIcon`.
            public var templateIcon: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/teamPrefVersionHistoryEnabled`.
            public var teamPrefVersionHistoryEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/showBadge`.
            public var showBadge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/listMetadata`.
            public var listMetadata: Components.Schemas.ListMetadata?
            /// - Remark: Generated from `#/components/schemas/File/listLimits`.
            public var listLimits: Components.Schemas.ListLimits?
            /// - Remark: Generated from `#/components/schemas/File/listCsvDownloadUrl`.
            public var listCsvDownloadUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/canToggleCanvasLock`.
            public var canToggleCanvasLock: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/isRestrictedSharingEnabled`.
            public var isRestrictedSharingEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/canvasPrintingEnabled`.
            public var canvasPrintingEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/File/initialComment`.
            public var initialComment: Components.Schemas.InitialComment?
            /// - Remark: Generated from `#/components/schemas/File/numStars`.
            public var numStars: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/File/isStarred`.
            public var isStarred: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/File/pinnedTo`.
            public var pinnedTo: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/File/commentsCount`.
            public var commentsCount: Swift.Int?
            /// Creates a new `File`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created:
            ///   - timestamp:
            ///   - name:
            ///   - title:
            ///   - subject:
            ///   - mimetype:
            ///   - filetype:
            ///   - user:
            ///   - mode:
            ///   - editable:
            ///   - editor:
            ///   - updated:
            ///   - editors:
            ///   - subtype:
            ///   - transcription:
            ///   - mp4:
            ///   - vtt:
            ///   - hls:
            ///   - username:
            ///   - size:
            ///   - deanimate:
            ///   - pjpeg:
            ///   - permalink:
            ///   - preview:
            ///   - lines:
            ///   - channels:
            ///   - groups:
            ///   - ims:
            ///   - shares:
            ///   - to:
            ///   - from:
            ///   - cc:
            ///   - headers:
            ///   - saved:
            ///   - access:
            ///   - favorites:
            ///   - reactions:
            ///   - attachments:
            ///   - blocks:
            ///   - prettyType:
            ///   - userTeam:
            ///   - sourceTeam:
            ///   - nonOwnerEditable:
            ///   - lastEditor:
            ///   - fileAccess:
            ///   - editTimestamp:
            ///   - altTxt:
            ///   - mp4Low:
            ///   - hlsEmbed:
            ///   - durationMs:
            ///   - thumbVideoW:
            ///   - thumbVideoH:
            ///   - originalAttachmentCount:
            ///   - isExternal:
            ///   - externalType:
            ///   - externalId:
            ///   - externalUrl:
            ///   - urlPrivate:
            ///   - urlPrivateDownload:
            ///   - urlStaticPreview:
            ///   - appId:
            ///   - appName:
            ///   - thumb64:
            ///   - thumb64Gif:
            ///   - thumb64W:
            ///   - thumb64H:
            ///   - thumb80:
            ///   - thumb80Gif:
            ///   - thumb80W:
            ///   - thumb80H:
            ///   - thumb160:
            ///   - thumb160Gif:
            ///   - thumb160W:
            ///   - thumb160H:
            ///   - thumb360:
            ///   - thumb360Gif:
            ///   - thumb360W:
            ///   - thumb360H:
            ///   - thumb480:
            ///   - thumb480Gif:
            ///   - thumb480W:
            ///   - thumb480H:
            ///   - thumb720:
            ///   - thumb720Gif:
            ///   - thumb720W:
            ///   - thumb720H:
            ///   - thumb800:
            ///   - thumb800Gif:
            ///   - thumb800W:
            ///   - thumb800H:
            ///   - thumb960:
            ///   - thumb960Gif:
            ///   - thumb960W:
            ///   - thumb960H:
            ///   - thumb1024:
            ///   - thumb1024Gif:
            ///   - thumb1024W:
            ///   - thumb1024H:
            ///   - thumbVideo:
            ///   - thumbGif:
            ///   - thumbPdf:
            ///   - thumbPdfW:
            ///   - thumbPdfH:
            ///   - thumbTiny:
            ///   - convertedPdf:
            ///   - imageExifRotation:
            ///   - originalW:
            ///   - originalH:
            ///   - deanimateGif:
            ///   - permalinkPublic:
            ///   - editLink:
            ///   - hasRichPreview:
            ///   - mediaDisplayType:
            ///   - previewIsTruncated:
            ///   - previewHighlight:
            ///   - plainText:
            ///   - previewPlainText:
            ///   - hasMore:
            ///   - sentToSelf:
            ///   - linesMore:
            ///   - isPublic:
            ///   - publicUrlShared:
            ///   - displayAsBot:
            ///   - hasMoreShares:
            ///   - channelActionsTs:
            ///   - channelActionsCount:
            ///   - simplifiedHtml:
            ///   - mediaProgress:
            ///   - quipThreadId:
            ///   - isChannelSpace:
            ///   - linkedChannelId:
            ///   - teamsSharedWith:
            ///   - lastRead:
            ///   - titleBlocks:
            ///   - privateChannelsWithFileAccessCount:
            ///   - privateFileWithAccessCount:
            ///   - dmMpdmUsersWithFileAccess:
            ///   - orgOrWorkspaceAccess:
            ///   - updateNotification:
            ///   - canvasTemplateMode:
            ///   - templateConversionTs:
            ///   - templateName:
            ///   - templateTitle:
            ///   - templateDescription:
            ///   - templateIcon:
            ///   - teamPrefVersionHistoryEnabled:
            ///   - showBadge:
            ///   - listMetadata:
            ///   - listLimits:
            ///   - listCsvDownloadUrl:
            ///   - canToggleCanvasLock:
            ///   - isRestrictedSharingEnabled:
            ///   - canvasPrintingEnabled:
            ///   - botId:
            ///   - initialComment:
            ///   - numStars:
            ///   - isStarred:
            ///   - pinnedTo:
            ///   - commentsCount:
            public init(
                id: Swift.String? = nil,
                created: Swift.Int? = nil,
                timestamp: Swift.Int? = nil,
                name: Swift.String? = nil,
                title: Swift.String? = nil,
                subject: Swift.String? = nil,
                mimetype: Swift.String? = nil,
                filetype: Swift.String? = nil,
                user: Swift.String? = nil,
                mode: Swift.String? = nil,
                editable: Swift.Bool? = nil,
                editor: Swift.String? = nil,
                updated: Swift.Int? = nil,
                editors: [Swift.String]? = nil,
                subtype: Swift.String? = nil,
                transcription: Components.Schemas.Transcription? = nil,
                mp4: Swift.String? = nil,
                vtt: Swift.String? = nil,
                hls: Swift.String? = nil,
                username: Swift.String? = nil,
                size: Swift.Int? = nil,
                deanimate: Swift.String? = nil,
                pjpeg: Swift.String? = nil,
                permalink: Swift.String? = nil,
                preview: Swift.String? = nil,
                lines: Swift.Int? = nil,
                channels: [Swift.String]? = nil,
                groups: [Swift.String]? = nil,
                ims: [Swift.String]? = nil,
                shares: Components.Schemas.Shares? = nil,
                to: [Components.Schemas.Cc]? = nil,
                from: [Components.Schemas.Cc]? = nil,
                cc: [Components.Schemas.Cc]? = nil,
                headers: Components.Schemas.Headers? = nil,
                saved: Components.Schemas.Saved? = nil,
                access: Swift.String? = nil,
                favorites: [Components.Schemas.Favorite]? = nil,
                reactions: [Components.Schemas.Reaction]? = nil,
                attachments: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                blocks: [Components.Schemas.DescriptionBlockElement]? = nil,
                prettyType: Swift.String? = nil,
                userTeam: Swift.String? = nil,
                sourceTeam: Swift.String? = nil,
                nonOwnerEditable: Swift.Bool? = nil,
                lastEditor: Swift.String? = nil,
                fileAccess: Swift.String? = nil,
                editTimestamp: Swift.Int? = nil,
                altTxt: Swift.String? = nil,
                mp4Low: Swift.String? = nil,
                hlsEmbed: Swift.String? = nil,
                durationMs: Swift.Int? = nil,
                thumbVideoW: Swift.Int? = nil,
                thumbVideoH: Swift.Int? = nil,
                originalAttachmentCount: Swift.Int? = nil,
                isExternal: Swift.Bool? = nil,
                externalType: Swift.String? = nil,
                externalId: Swift.String? = nil,
                externalUrl: Swift.String? = nil,
                urlPrivate: Swift.String? = nil,
                urlPrivateDownload: Swift.String? = nil,
                urlStaticPreview: Swift.String? = nil,
                appId: Swift.String? = nil,
                appName: Swift.String? = nil,
                thumb64: Swift.String? = nil,
                thumb64Gif: Swift.String? = nil,
                thumb64W: Swift.String? = nil,
                thumb64H: Swift.String? = nil,
                thumb80: Swift.String? = nil,
                thumb80Gif: Swift.String? = nil,
                thumb80W: Swift.String? = nil,
                thumb80H: Swift.String? = nil,
                thumb160: Swift.String? = nil,
                thumb160Gif: Swift.String? = nil,
                thumb160W: Swift.String? = nil,
                thumb160H: Swift.String? = nil,
                thumb360: Swift.String? = nil,
                thumb360Gif: Swift.String? = nil,
                thumb360W: Swift.String? = nil,
                thumb360H: Swift.String? = nil,
                thumb480: Swift.String? = nil,
                thumb480Gif: Swift.String? = nil,
                thumb480W: Swift.String? = nil,
                thumb480H: Swift.String? = nil,
                thumb720: Swift.String? = nil,
                thumb720Gif: Swift.String? = nil,
                thumb720W: Swift.String? = nil,
                thumb720H: Swift.String? = nil,
                thumb800: Swift.String? = nil,
                thumb800Gif: Swift.String? = nil,
                thumb800W: Swift.String? = nil,
                thumb800H: Swift.String? = nil,
                thumb960: Swift.String? = nil,
                thumb960Gif: Swift.String? = nil,
                thumb960W: Swift.String? = nil,
                thumb960H: Swift.String? = nil,
                thumb1024: Swift.String? = nil,
                thumb1024Gif: Swift.String? = nil,
                thumb1024W: Swift.String? = nil,
                thumb1024H: Swift.String? = nil,
                thumbVideo: Swift.String? = nil,
                thumbGif: Swift.String? = nil,
                thumbPdf: Swift.String? = nil,
                thumbPdfW: Swift.String? = nil,
                thumbPdfH: Swift.String? = nil,
                thumbTiny: Swift.String? = nil,
                convertedPdf: Swift.String? = nil,
                imageExifRotation: Swift.Int? = nil,
                originalW: Swift.String? = nil,
                originalH: Swift.String? = nil,
                deanimateGif: Swift.String? = nil,
                permalinkPublic: Swift.String? = nil,
                editLink: Swift.String? = nil,
                hasRichPreview: Swift.Bool? = nil,
                mediaDisplayType: Swift.String? = nil,
                previewIsTruncated: Swift.Bool? = nil,
                previewHighlight: Swift.String? = nil,
                plainText: Swift.String? = nil,
                previewPlainText: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                sentToSelf: Swift.Bool? = nil,
                linesMore: Swift.Int? = nil,
                isPublic: Swift.Bool? = nil,
                publicUrlShared: Swift.Bool? = nil,
                displayAsBot: Swift.Bool? = nil,
                hasMoreShares: Swift.Bool? = nil,
                channelActionsTs: Swift.String? = nil,
                channelActionsCount: Swift.Int? = nil,
                simplifiedHtml: Swift.String? = nil,
                mediaProgress: Components.Schemas.MediaProgress? = nil,
                quipThreadId: Swift.String? = nil,
                isChannelSpace: Swift.Bool? = nil,
                linkedChannelId: Swift.String? = nil,
                teamsSharedWith: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                lastRead: Swift.Int? = nil,
                titleBlocks: [Components.Schemas.DescriptionBlockElement]? = nil,
                privateChannelsWithFileAccessCount: Swift.Int? = nil,
                privateFileWithAccessCount: Swift.Int? = nil,
                dmMpdmUsersWithFileAccess: [Components.Schemas.DmMpdmUsersWithFileAccess]? = nil,
                orgOrWorkspaceAccess: Swift.String? = nil,
                updateNotification: Swift.Int? = nil,
                canvasTemplateMode: Swift.String? = nil,
                templateConversionTs: Swift.Int? = nil,
                templateName: Swift.String? = nil,
                templateTitle: Swift.String? = nil,
                templateDescription: Swift.String? = nil,
                templateIcon: Swift.String? = nil,
                teamPrefVersionHistoryEnabled: Swift.Bool? = nil,
                showBadge: Swift.Bool? = nil,
                listMetadata: Components.Schemas.ListMetadata? = nil,
                listLimits: Components.Schemas.ListLimits? = nil,
                listCsvDownloadUrl: Swift.String? = nil,
                canToggleCanvasLock: Swift.Bool? = nil,
                isRestrictedSharingEnabled: Swift.Bool? = nil,
                canvasPrintingEnabled: Swift.Bool? = nil,
                botId: Swift.String? = nil,
                initialComment: Components.Schemas.InitialComment? = nil,
                numStars: Swift.Int? = nil,
                isStarred: Swift.Bool? = nil,
                pinnedTo: [Swift.String]? = nil,
                commentsCount: Swift.Int? = nil
            ) {
                self.id = id
                self.created = created
                self.timestamp = timestamp
                self.name = name
                self.title = title
                self.subject = subject
                self.mimetype = mimetype
                self.filetype = filetype
                self.user = user
                self.mode = mode
                self.editable = editable
                self.editor = editor
                self.updated = updated
                self.editors = editors
                self.subtype = subtype
                self.transcription = transcription
                self.mp4 = mp4
                self.vtt = vtt
                self.hls = hls
                self.username = username
                self.size = size
                self.deanimate = deanimate
                self.pjpeg = pjpeg
                self.permalink = permalink
                self.preview = preview
                self.lines = lines
                self.channels = channels
                self.groups = groups
                self.ims = ims
                self.shares = shares
                self.to = to
                self.from = from
                self.cc = cc
                self.headers = headers
                self.saved = saved
                self.access = access
                self.favorites = favorites
                self.reactions = reactions
                self.attachments = attachments
                self.blocks = blocks
                self.prettyType = prettyType
                self.userTeam = userTeam
                self.sourceTeam = sourceTeam
                self.nonOwnerEditable = nonOwnerEditable
                self.lastEditor = lastEditor
                self.fileAccess = fileAccess
                self.editTimestamp = editTimestamp
                self.altTxt = altTxt
                self.mp4Low = mp4Low
                self.hlsEmbed = hlsEmbed
                self.durationMs = durationMs
                self.thumbVideoW = thumbVideoW
                self.thumbVideoH = thumbVideoH
                self.originalAttachmentCount = originalAttachmentCount
                self.isExternal = isExternal
                self.externalType = externalType
                self.externalId = externalId
                self.externalUrl = externalUrl
                self.urlPrivate = urlPrivate
                self.urlPrivateDownload = urlPrivateDownload
                self.urlStaticPreview = urlStaticPreview
                self.appId = appId
                self.appName = appName
                self.thumb64 = thumb64
                self.thumb64Gif = thumb64Gif
                self.thumb64W = thumb64W
                self.thumb64H = thumb64H
                self.thumb80 = thumb80
                self.thumb80Gif = thumb80Gif
                self.thumb80W = thumb80W
                self.thumb80H = thumb80H
                self.thumb160 = thumb160
                self.thumb160Gif = thumb160Gif
                self.thumb160W = thumb160W
                self.thumb160H = thumb160H
                self.thumb360 = thumb360
                self.thumb360Gif = thumb360Gif
                self.thumb360W = thumb360W
                self.thumb360H = thumb360H
                self.thumb480 = thumb480
                self.thumb480Gif = thumb480Gif
                self.thumb480W = thumb480W
                self.thumb480H = thumb480H
                self.thumb720 = thumb720
                self.thumb720Gif = thumb720Gif
                self.thumb720W = thumb720W
                self.thumb720H = thumb720H
                self.thumb800 = thumb800
                self.thumb800Gif = thumb800Gif
                self.thumb800W = thumb800W
                self.thumb800H = thumb800H
                self.thumb960 = thumb960
                self.thumb960Gif = thumb960Gif
                self.thumb960W = thumb960W
                self.thumb960H = thumb960H
                self.thumb1024 = thumb1024
                self.thumb1024Gif = thumb1024Gif
                self.thumb1024W = thumb1024W
                self.thumb1024H = thumb1024H
                self.thumbVideo = thumbVideo
                self.thumbGif = thumbGif
                self.thumbPdf = thumbPdf
                self.thumbPdfW = thumbPdfW
                self.thumbPdfH = thumbPdfH
                self.thumbTiny = thumbTiny
                self.convertedPdf = convertedPdf
                self.imageExifRotation = imageExifRotation
                self.originalW = originalW
                self.originalH = originalH
                self.deanimateGif = deanimateGif
                self.permalinkPublic = permalinkPublic
                self.editLink = editLink
                self.hasRichPreview = hasRichPreview
                self.mediaDisplayType = mediaDisplayType
                self.previewIsTruncated = previewIsTruncated
                self.previewHighlight = previewHighlight
                self.plainText = plainText
                self.previewPlainText = previewPlainText
                self.hasMore = hasMore
                self.sentToSelf = sentToSelf
                self.linesMore = linesMore
                self.isPublic = isPublic
                self.publicUrlShared = publicUrlShared
                self.displayAsBot = displayAsBot
                self.hasMoreShares = hasMoreShares
                self.channelActionsTs = channelActionsTs
                self.channelActionsCount = channelActionsCount
                self.simplifiedHtml = simplifiedHtml
                self.mediaProgress = mediaProgress
                self.quipThreadId = quipThreadId
                self.isChannelSpace = isChannelSpace
                self.linkedChannelId = linkedChannelId
                self.teamsSharedWith = teamsSharedWith
                self.lastRead = lastRead
                self.titleBlocks = titleBlocks
                self.privateChannelsWithFileAccessCount = privateChannelsWithFileAccessCount
                self.privateFileWithAccessCount = privateFileWithAccessCount
                self.dmMpdmUsersWithFileAccess = dmMpdmUsersWithFileAccess
                self.orgOrWorkspaceAccess = orgOrWorkspaceAccess
                self.updateNotification = updateNotification
                self.canvasTemplateMode = canvasTemplateMode
                self.templateConversionTs = templateConversionTs
                self.templateName = templateName
                self.templateTitle = templateTitle
                self.templateDescription = templateDescription
                self.templateIcon = templateIcon
                self.teamPrefVersionHistoryEnabled = teamPrefVersionHistoryEnabled
                self.showBadge = showBadge
                self.listMetadata = listMetadata
                self.listLimits = listLimits
                self.listCsvDownloadUrl = listCsvDownloadUrl
                self.canToggleCanvasLock = canToggleCanvasLock
                self.isRestrictedSharingEnabled = isRestrictedSharingEnabled
                self.canvasPrintingEnabled = canvasPrintingEnabled
                self.botId = botId
                self.initialComment = initialComment
                self.numStars = numStars
                self.isStarred = isStarred
                self.pinnedTo = pinnedTo
                self.commentsCount = commentsCount
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case timestamp
                case name
                case title
                case subject
                case mimetype
                case filetype
                case user
                case mode
                case editable
                case editor
                case updated
                case editors
                case subtype
                case transcription
                case mp4
                case vtt
                case hls
                case username
                case size
                case deanimate
                case pjpeg
                case permalink
                case preview
                case lines
                case channels
                case groups
                case ims
                case shares
                case to
                case from
                case cc
                case headers
                case saved
                case access
                case favorites
                case reactions
                case attachments
                case blocks
                case prettyType
                case userTeam
                case sourceTeam
                case nonOwnerEditable
                case lastEditor
                case fileAccess
                case editTimestamp
                case altTxt
                case mp4Low
                case hlsEmbed
                case durationMs
                case thumbVideoW
                case thumbVideoH
                case originalAttachmentCount
                case isExternal
                case externalType
                case externalId
                case externalUrl
                case urlPrivate
                case urlPrivateDownload
                case urlStaticPreview
                case appId
                case appName
                case thumb64
                case thumb64Gif
                case thumb64W
                case thumb64H
                case thumb80
                case thumb80Gif
                case thumb80W
                case thumb80H
                case thumb160
                case thumb160Gif
                case thumb160W
                case thumb160H
                case thumb360
                case thumb360Gif
                case thumb360W
                case thumb360H
                case thumb480
                case thumb480Gif
                case thumb480W
                case thumb480H
                case thumb720
                case thumb720Gif
                case thumb720W
                case thumb720H
                case thumb800
                case thumb800Gif
                case thumb800W
                case thumb800H
                case thumb960
                case thumb960Gif
                case thumb960W
                case thumb960H
                case thumb1024
                case thumb1024Gif
                case thumb1024W
                case thumb1024H
                case thumbVideo
                case thumbGif
                case thumbPdf
                case thumbPdfW
                case thumbPdfH
                case thumbTiny
                case convertedPdf
                case imageExifRotation
                case originalW
                case originalH
                case deanimateGif
                case permalinkPublic
                case editLink
                case hasRichPreview
                case mediaDisplayType
                case previewIsTruncated
                case previewHighlight
                case plainText
                case previewPlainText
                case hasMore
                case sentToSelf
                case linesMore
                case isPublic
                case publicUrlShared
                case displayAsBot
                case hasMoreShares
                case channelActionsTs
                case channelActionsCount
                case simplifiedHtml
                case mediaProgress
                case quipThreadId
                case isChannelSpace
                case linkedChannelId
                case teamsSharedWith
                case lastRead
                case titleBlocks
                case privateChannelsWithFileAccessCount
                case privateFileWithAccessCount
                case dmMpdmUsersWithFileAccess
                case orgOrWorkspaceAccess
                case updateNotification
                case canvasTemplateMode
                case templateConversionTs
                case templateName
                case templateTitle
                case templateDescription
                case templateIcon
                case teamPrefVersionHistoryEnabled
                case showBadge
                case listMetadata
                case listLimits
                case listCsvDownloadUrl
                case canToggleCanvasLock
                case isRestrictedSharingEnabled
                case canvasPrintingEnabled
                case botId
                case initialComment
                case numStars
                case isStarred
                case pinnedTo
                case commentsCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessageIcons`.
        public struct MessageIcons: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MessageIcons/emoji`.
            public var emoji: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageIcons/image36`.
            public var image36: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageIcons/image48`.
            public var image48: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageIcons/image64`.
            public var image64: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageIcons/image72`.
            public var image72: Swift.String?
            /// Creates a new `MessageIcons`.
            ///
            /// - Parameters:
            ///   - emoji:
            ///   - image36:
            ///   - image48:
            ///   - image64:
            ///   - image72:
            public init(
                emoji: Swift.String? = nil,
                image36: Swift.String? = nil,
                image48: Swift.String? = nil,
                image64: Swift.String? = nil,
                image72: Swift.String? = nil
            ) {
                self.emoji = emoji
                self.image36 = image36
                self.image48 = image48
                self.image64 = image64
                self.image72 = image72
            }
            public enum CodingKeys: String, CodingKey {
                case emoji
                case image36
                case image48
                case image64
                case image72
            }
        }
        /// - Remark: Generated from `#/components/schemas/Reaction`.
        public struct Reaction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Reaction/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Reaction/count`.
            public var count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Reaction/users`.
            public var users: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Reaction/url`.
            public var url: Swift.String?
            /// Creates a new `Reaction`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - count:
            ///   - users:
            ///   - url:
            public init(
                name: Swift.String? = nil,
                count: Swift.Int? = nil,
                users: [Swift.String]? = nil,
                url: Swift.String? = nil
            ) {
                self.name = name
                self.count = count
                self.users = users
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case count
                case users
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/Root`.
        public struct Root: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Root/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/mrkdwn`.
            public var mrkdwn: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Root/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/icons`.
            public var icons: Components.Schemas.MessageIcons?
            /// - Remark: Generated from `#/components/schemas/Root/edited`.
            public var edited: Components.Schemas.Edited?
            /// - Remark: Generated from `#/components/schemas/Root/replies`.
            public var replies: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Root/subscribed`.
            public var subscribed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Root/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/room`.
            public var room: Components.Schemas.Room?
            /// - Remark: Generated from `#/components/schemas/Root/parentUserId`.
            public var parentUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/botProfile`.
            public var botProfile: Components.Schemas.BotProfile?
            /// - Remark: Generated from `#/components/schemas/Root/replyCount`.
            public var replyCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Root/replyUsers`.
            public var replyUsers: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Root/replyUsersCount`.
            public var replyUsersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Root/latestReply`.
            public var latestReply: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/lastRead`.
            public var lastRead: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Root/unreadCount`.
            public var unreadCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Root/noNotifications`.
            public var noNotifications: Swift.Bool?
            /// Creates a new `Root`.
            ///
            /// - Parameters:
            ///   - text:
            ///   - user:
            ///   - username:
            ///   - team:
            ///   - mrkdwn:
            ///   - _type:
            ///   - subtype:
            ///   - icons:
            ///   - edited:
            ///   - replies:
            ///   - subscribed:
            ///   - ts:
            ///   - room:
            ///   - parentUserId:
            ///   - botId:
            ///   - threadTs:
            ///   - botProfile:
            ///   - replyCount:
            ///   - replyUsers:
            ///   - replyUsersCount:
            ///   - latestReply:
            ///   - lastRead:
            ///   - unreadCount:
            ///   - noNotifications:
            public init(
                text: Swift.String? = nil,
                user: Swift.String? = nil,
                username: Swift.String? = nil,
                team: Swift.String? = nil,
                mrkdwn: Swift.Bool? = nil,
                _type: Swift.String? = nil,
                subtype: Swift.String? = nil,
                icons: Components.Schemas.MessageIcons? = nil,
                edited: Components.Schemas.Edited? = nil,
                replies: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                subscribed: Swift.Bool? = nil,
                ts: Swift.String? = nil,
                room: Components.Schemas.Room? = nil,
                parentUserId: Swift.String? = nil,
                botId: Swift.String? = nil,
                threadTs: Swift.String? = nil,
                botProfile: Components.Schemas.BotProfile? = nil,
                replyCount: Swift.Int? = nil,
                replyUsers: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                replyUsersCount: Swift.Int? = nil,
                latestReply: Swift.String? = nil,
                lastRead: Swift.String? = nil,
                unreadCount: Swift.Int? = nil,
                noNotifications: Swift.Bool? = nil
            ) {
                self.text = text
                self.user = user
                self.username = username
                self.team = team
                self.mrkdwn = mrkdwn
                self._type = _type
                self.subtype = subtype
                self.icons = icons
                self.edited = edited
                self.replies = replies
                self.subscribed = subscribed
                self.ts = ts
                self.room = room
                self.parentUserId = parentUserId
                self.botId = botId
                self.threadTs = threadTs
                self.botProfile = botProfile
                self.replyCount = replyCount
                self.replyUsers = replyUsers
                self.replyUsersCount = replyUsersCount
                self.latestReply = latestReply
                self.lastRead = lastRead
                self.unreadCount = unreadCount
                self.noNotifications = noNotifications
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case user
                case username
                case team
                case mrkdwn
                case _type = "type"
                case subtype
                case icons
                case edited
                case replies
                case subscribed
                case ts
                case room
                case parentUserId
                case botId
                case threadTs
                case botProfile
                case replyCount
                case replyUsers
                case replyUsersCount
                case latestReply
                case lastRead
                case unreadCount
                case noNotifications
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsInfoResponse`.
        public struct ChannelsInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsInfoResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ChannelsInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Latest`.
        public struct Latest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Latest/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/topic`.
            public var topic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/reactions`.
            public var reactions: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Latest/root`.
            public var root: Components.Schemas.Root?
            /// - Remark: Generated from `#/components/schemas/Latest/upload`.
            public var upload: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Latest/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/icons`.
            public var icons: Components.Schemas.MessageIcons?
            /// - Remark: Generated from `#/components/schemas/Latest/edited`.
            public var edited: Components.Schemas.Edited?
            /// - Remark: Generated from `#/components/schemas/Latest/attachments`.
            public var attachments: [Components.Schemas.Attachment]?
            /// - Remark: Generated from `#/components/schemas/Latest/blocks`.
            public var blocks: [Components.Schemas.LatestBlock]?
            /// - Remark: Generated from `#/components/schemas/Latest/files`.
            public var files: [Components.Schemas.FileElement]?
            /// - Remark: Generated from `#/components/schemas/Latest/clientMsgId`.
            public var clientMsgId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/parentUserId`.
            public var parentUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Latest/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/botLink`.
            public var botLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/botProfile`.
            public var botProfile: Components.Schemas.Bot?
            /// - Remark: Generated from `#/components/schemas/Latest/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Latest/xFiles`.
            public var xFiles: [Swift.String]?
            /// Creates a new `Latest`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - subtype:
            ///   - team:
            ///   - user:
            ///   - username:
            ///   - text:
            ///   - topic:
            ///   - reactions:
            ///   - root:
            ///   - upload:
            ///   - ts:
            ///   - icons:
            ///   - edited:
            ///   - attachments:
            ///   - blocks:
            ///   - files:
            ///   - clientMsgId:
            ///   - parentUserId:
            ///   - displayAsBot:
            ///   - botId:
            ///   - botLink:
            ///   - botProfile:
            ///   - threadTs:
            ///   - xFiles:
            public init(
                _type: Swift.String? = nil,
                subtype: Swift.String? = nil,
                team: Swift.String? = nil,
                user: Swift.String? = nil,
                username: Swift.String? = nil,
                text: Swift.String? = nil,
                topic: Swift.String? = nil,
                reactions: [Swift.String]? = nil,
                root: Components.Schemas.Root? = nil,
                upload: Swift.Bool? = nil,
                ts: Swift.String? = nil,
                icons: Components.Schemas.MessageIcons? = nil,
                edited: Components.Schemas.Edited? = nil,
                attachments: [Components.Schemas.Attachment]? = nil,
                blocks: [Components.Schemas.LatestBlock]? = nil,
                files: [Components.Schemas.FileElement]? = nil,
                clientMsgId: Swift.String? = nil,
                parentUserId: Swift.String? = nil,
                displayAsBot: Swift.Bool? = nil,
                botId: Swift.String? = nil,
                botLink: Swift.String? = nil,
                botProfile: Components.Schemas.Bot? = nil,
                threadTs: Swift.String? = nil,
                xFiles: [Swift.String]? = nil
            ) {
                self._type = _type
                self.subtype = subtype
                self.team = team
                self.user = user
                self.username = username
                self.text = text
                self.topic = topic
                self.reactions = reactions
                self.root = root
                self.upload = upload
                self.ts = ts
                self.icons = icons
                self.edited = edited
                self.attachments = attachments
                self.blocks = blocks
                self.files = files
                self.clientMsgId = clientMsgId
                self.parentUserId = parentUserId
                self.displayAsBot = displayAsBot
                self.botId = botId
                self.botLink = botLink
                self.botProfile = botProfile
                self.threadTs = threadTs
                self.xFiles = xFiles
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case subtype
                case team
                case user
                case username
                case text
                case topic
                case reactions
                case root
                case upload
                case ts
                case icons
                case edited
                case attachments
                case blocks
                case files
                case clientMsgId
                case parentUserId
                case displayAsBot
                case botId
                case botLink
                case botProfile
                case threadTs
                case xFiles
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsInviteResponse`.
        public struct ChannelsInviteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsInviteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsInviteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsInviteResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ChannelsInviteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsInviteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsInviteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - channel:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                channel: Components.Schemas.Channel? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.channel = channel
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case channel
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsJoinResponse`.
        public struct ChannelsJoinResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsJoinResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsJoinResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ChannelsJoinResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsJoinResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsJoinResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsJoinResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsKickResponse`.
        public struct ChannelsKickResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsKickResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsKickResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsKickResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsKickResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsKickResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsLeaveResponse`.
        public struct ChannelsLeaveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsLeaveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsLeaveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsLeaveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsLeaveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsLeaveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsListResponse`.
        public struct ChannelsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsListResponse/channels`.
            public var channels: [Components.Schemas.Channel]?
            /// - Remark: Generated from `#/components/schemas/ChannelsListResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ChannelsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channels:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                channels: [Components.Schemas.Channel]? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.channels = channels
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channels
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsMarkResponse`.
        public struct ChannelsMarkResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsMarkResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsMarkResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsMarkResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsMarkResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsMarkResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsRenameResponse`.
        public struct ChannelsRenameResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsRenameResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ChannelsRenameResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsRenameResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsRenameResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsRenameResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsRenameResponse`.
            ///
            /// - Parameters:
            ///   - channel:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                channel: Components.Schemas.Channel? = nil,
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.channel = channel
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case channel
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsRepliesResponse`.
        public struct ChannelsRepliesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsRepliesResponse/messages`.
            public var messages: [Components.Schemas.Message]?
            /// - Remark: Generated from `#/components/schemas/ChannelsRepliesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsRepliesResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsRepliesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsRepliesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsRepliesResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsRepliesResponse/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ChannelsRepliesResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ChannelsRepliesResponse`.
            ///
            /// - Parameters:
            ///   - messages:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - hasMore:
            ///   - responseMetadata:
            public init(
                messages: [Components.Schemas.Message]? = nil,
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.messages = messages
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.hasMore = hasMore
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case messages
                case ok
                case warning
                case error
                case needed
                case provided
                case hasMore
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsSetPurposeResponse`.
        public struct ChannelsSetPurposeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsSetPurposeResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsSetPurposeResponse/purpose`.
            public var purpose: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsSetPurposeResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsSetPurposeResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsSetPurposeResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsSetPurposeResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - purpose:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                purpose: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.purpose = purpose
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case purpose
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsSetTopicResponse`.
        public struct ChannelsSetTopicResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsSetTopicResponse/topic`.
            public var topic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsSetTopicResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsSetTopicResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsSetTopicResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsSetTopicResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsSetTopicResponse`.
            ///
            /// - Parameters:
            ///   - topic:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                topic: Swift.String? = nil,
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.topic = topic
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case topic
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelsUnarchiveResponse`.
        public struct ChannelsUnarchiveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelsUnarchiveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChannelsUnarchiveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsUnarchiveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelsUnarchiveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChannelsUnarchiveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatDeleteResponse`.
        public struct ChatDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatDeleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChatDeleteResponse/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatDeleteResponse/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatDeleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatDeleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatDeleteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChatDeleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - ts:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                channel: Swift.String? = nil,
                ts: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.ts = ts
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case ts
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatDeleteScheduledMessageResponse`.
        public struct ChatDeleteScheduledMessageResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatDeleteScheduledMessageResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChatDeleteScheduledMessageResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatDeleteScheduledMessageResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatDeleteScheduledMessageResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChatDeleteScheduledMessageResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatGetPermalinkResponse`.
        public struct ChatGetPermalinkResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatGetPermalinkResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChatGetPermalinkResponse/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatGetPermalinkResponse/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatGetPermalinkResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatGetPermalinkResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatGetPermalinkResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChatGetPermalinkResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - permalink:
            ///   - channel:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                permalink: Swift.String? = nil,
                channel: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.permalink = permalink
                self.channel = channel
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case permalink
                case channel
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatMeMessageResponse`.
        public struct ChatMeMessageResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatMeMessageResponse/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatMeMessageResponse/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatMeMessageResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChatMeMessageResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatMeMessageResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatMeMessageResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChatMeMessageResponse`.
            ///
            /// - Parameters:
            ///   - channel:
            ///   - ts:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                channel: Swift.String? = nil,
                ts: Swift.String? = nil,
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.channel = channel
                self.ts = ts
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case channel
                case ts
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatPostEphemeralResponse`.
        public struct ChatPostEphemeralResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatPostEphemeralResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChatPostEphemeralResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostEphemeralResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostEphemeralResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostEphemeralResponse/messageTs`.
            public var messageTs: Swift.String?
            /// Creates a new `ChatPostEphemeralResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - messageTs:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                messageTs: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.messageTs = messageTs
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case messageTs
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse`.
        public struct ChatPostMessageResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse/message`.
            public var message: Components.Schemas.ChatPostMessageResponseMessage?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse/errors`.
            public var errors: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse/deprecatedArgument`.
            public var deprecatedArgument: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ChatPostMessageResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - ts:
            ///   - message:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - errors:
            ///   - deprecatedArgument:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                channel: Swift.String? = nil,
                ts: Swift.String? = nil,
                message: Components.Schemas.ChatPostMessageResponseMessage? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                errors: [Swift.String]? = nil,
                deprecatedArgument: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.ts = ts
                self.message = message
                self.error = error
                self.needed = needed
                self.provided = provided
                self.errors = errors
                self.deprecatedArgument = deprecatedArgument
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case ts
                case message
                case error
                case needed
                case provided
                case errors
                case deprecatedArgument
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage`.
        public struct ChatPostMessageResponseMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/icons`.
            public var icons: Components.Schemas.FluffyIcons?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/root`.
            public var root: Components.Schemas.FluffyRoot?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/metadata`.
            public var metadata: Components.Schemas.FluffyMetadata?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/room`.
            public var room: Components.Schemas.Room?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/attachments`.
            public var attachments: [Components.Schemas.Attachment]?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/blocks`.
            public var blocks: [Components.Schemas.AssistantAppThreadBlock]?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/botProfile`.
            public var botProfile: Components.Schemas.BotProfile?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/parentUserId`.
            public var parentUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatPostMessageResponseMessage/assistantAppThread`.
            public var assistantAppThread: Components.Schemas.AssistantAppThread?
            /// Creates a new `ChatPostMessageResponseMessage`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - text:
            ///   - user:
            ///   - ts:
            ///   - team:
            ///   - subtype:
            ///   - username:
            ///   - icons:
            ///   - root:
            ///   - metadata:
            ///   - room:
            ///   - attachments:
            ///   - blocks:
            ///   - botId:
            ///   - botProfile:
            ///   - threadTs:
            ///   - parentUserId:
            ///   - appId:
            ///   - assistantAppThread:
            public init(
                _type: Swift.String? = nil,
                text: Swift.String? = nil,
                user: Swift.String? = nil,
                ts: Swift.String? = nil,
                team: Swift.String? = nil,
                subtype: Swift.String? = nil,
                username: Swift.String? = nil,
                icons: Components.Schemas.FluffyIcons? = nil,
                root: Components.Schemas.FluffyRoot? = nil,
                metadata: Components.Schemas.FluffyMetadata? = nil,
                room: Components.Schemas.Room? = nil,
                attachments: [Components.Schemas.Attachment]? = nil,
                blocks: [Components.Schemas.AssistantAppThreadBlock]? = nil,
                botId: Swift.String? = nil,
                botProfile: Components.Schemas.BotProfile? = nil,
                threadTs: Swift.String? = nil,
                parentUserId: Swift.String? = nil,
                appId: Swift.String? = nil,
                assistantAppThread: Components.Schemas.AssistantAppThread? = nil
            ) {
                self._type = _type
                self.text = text
                self.user = user
                self.ts = ts
                self.team = team
                self.subtype = subtype
                self.username = username
                self.icons = icons
                self.root = root
                self.metadata = metadata
                self.room = room
                self.attachments = attachments
                self.blocks = blocks
                self.botId = botId
                self.botProfile = botProfile
                self.threadTs = threadTs
                self.parentUserId = parentUserId
                self.appId = appId
                self.assistantAppThread = assistantAppThread
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case user
                case ts
                case team
                case subtype
                case username
                case icons
                case root
                case metadata
                case room
                case attachments
                case blocks
                case botId
                case botProfile
                case threadTs
                case parentUserId
                case appId
                case assistantAppThread
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantAppThread`.
        public struct AssistantAppThread: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AssistantAppThread/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThread/titleBlocks`.
            public var titleBlocks: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThread/firstUserThreadReply`.
            public var firstUserThreadReply: Swift.String?
            /// Creates a new `AssistantAppThread`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - titleBlocks:
            ///   - firstUserThreadReply:
            public init(
                title: Swift.String? = nil,
                titleBlocks: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                firstUserThreadReply: Swift.String? = nil
            ) {
                self.title = title
                self.titleBlocks = titleBlocks
                self.firstUserThreadReply = firstUserThreadReply
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case titleBlocks
                case firstUserThreadReply
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock`.
        public struct AssistantAppThreadBlock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/type`.
            public var _type: Components.Schemas.BlockType?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/elements`.
            public var elements: [Components.Schemas.Accessory]?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/file`.
            public var file: Components.Schemas.FileElement?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/text`.
            public var text: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/title`.
            public var title: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/description`.
            public var description: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/fields`.
            public var fields: [Components.Schemas.DescriptionElement]?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/accessory`.
            public var accessory: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/expand`.
            public var expand: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/label`.
            public var label: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/element`.
            public var element: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/hint`.
            public var hint: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/optional`.
            public var optional: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/blockId`.
            public var blockId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/callId`.
            public var callId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/apiDecorationAvailable`.
            public var apiDecorationAvailable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/fileId`.
            public var fileId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/isAnimated`.
            public var isAnimated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/titleUrl`.
            public var titleUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/videoUrl`.
            public var videoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/thumbnailUrl`.
            public var thumbnailUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/authorName`.
            public var authorName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/providerName`.
            public var providerName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/providerIconUrl`.
            public var providerIconUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/functionTriggerId`.
            public var functionTriggerId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/isWorkflowApp`.
            public var isWorkflowApp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/salesHomeWorkflowAppType`.
            public var salesHomeWorkflowAppType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/appCollaborators`.
            public var appCollaborators: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/buttonLabel`.
            public var buttonLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/botUserId`.
            public var botUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/owningTeamId`.
            public var owningTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/workflowId`.
            public var workflowId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/developerTraceId`.
            public var developerTraceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/triggerType`.
            public var triggerType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/triggerSubtype`.
            public var triggerSubtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/shareUrl`.
            public var shareUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantAppThreadBlock/dispatchAction`.
            public var dispatchAction: Swift.Bool?
            /// Creates a new `AssistantAppThreadBlock`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - call:
            ///   - source:
            ///   - file:
            ///   - text:
            ///   - fallback:
            ///   - title:
            ///   - description:
            ///   - url:
            ///   - fields:
            ///   - accessory:
            ///   - expand:
            ///   - label:
            ///   - element:
            ///   - hint:
            ///   - optional:
            ///   - blockId:
            ///   - callId:
            ///   - apiDecorationAvailable:
            ///   - externalId:
            ///   - fileId:
            ///   - imageUrl:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - isAnimated:
            ///   - slackFile:
            ///   - altText:
            ///   - titleUrl:
            ///   - videoUrl:
            ///   - thumbnailUrl:
            ///   - authorName:
            ///   - providerName:
            ///   - providerIconUrl:
            ///   - functionTriggerId:
            ///   - appId:
            ///   - isWorkflowApp:
            ///   - salesHomeWorkflowAppType:
            ///   - appCollaborators:
            ///   - buttonLabel:
            ///   - botUserId:
            ///   - owningTeamId:
            ///   - workflowId:
            ///   - developerTraceId:
            ///   - triggerType:
            ///   - triggerSubtype:
            ///   - shareUrl:
            ///   - dispatchAction:
            public init(
                _type: Components.Schemas.BlockType? = nil,
                elements: [Components.Schemas.Accessory]? = nil,
                call: Components.Schemas.Call? = nil,
                source: Swift.String? = nil,
                file: Components.Schemas.FileElement? = nil,
                text: Components.Schemas.DescriptionElement? = nil,
                fallback: Swift.String? = nil,
                title: Components.Schemas.DescriptionElement? = nil,
                description: Components.Schemas.DescriptionElement? = nil,
                url: Swift.String? = nil,
                fields: [Components.Schemas.DescriptionElement]? = nil,
                accessory: Components.Schemas.Accessory? = nil,
                expand: Swift.Bool? = nil,
                label: Components.Schemas.DescriptionElement? = nil,
                element: Components.Schemas.Accessory? = nil,
                hint: Components.Schemas.DescriptionElement? = nil,
                optional: Swift.Bool? = nil,
                blockId: Swift.String? = nil,
                callId: Swift.String? = nil,
                apiDecorationAvailable: Swift.Bool? = nil,
                externalId: Swift.String? = nil,
                fileId: Swift.String? = nil,
                imageUrl: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                isAnimated: Swift.Bool? = nil,
                slackFile: Components.Schemas.SlackFile? = nil,
                altText: Swift.String? = nil,
                titleUrl: Swift.String? = nil,
                videoUrl: Swift.String? = nil,
                thumbnailUrl: Swift.String? = nil,
                authorName: Swift.String? = nil,
                providerName: Swift.String? = nil,
                providerIconUrl: Swift.String? = nil,
                functionTriggerId: Swift.String? = nil,
                appId: Swift.String? = nil,
                isWorkflowApp: Swift.Bool? = nil,
                salesHomeWorkflowAppType: Swift.Int? = nil,
                appCollaborators: [Swift.String]? = nil,
                buttonLabel: Swift.String? = nil,
                botUserId: Swift.String? = nil,
                owningTeamId: Swift.String? = nil,
                workflowId: Swift.String? = nil,
                developerTraceId: Swift.String? = nil,
                triggerType: Swift.String? = nil,
                triggerSubtype: Swift.String? = nil,
                shareUrl: Swift.String? = nil,
                dispatchAction: Swift.Bool? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.call = call
                self.source = source
                self.file = file
                self.text = text
                self.fallback = fallback
                self.title = title
                self.description = description
                self.url = url
                self.fields = fields
                self.accessory = accessory
                self.expand = expand
                self.label = label
                self.element = element
                self.hint = hint
                self.optional = optional
                self.blockId = blockId
                self.callId = callId
                self.apiDecorationAvailable = apiDecorationAvailable
                self.externalId = externalId
                self.fileId = fileId
                self.imageUrl = imageUrl
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.isAnimated = isAnimated
                self.slackFile = slackFile
                self.altText = altText
                self.titleUrl = titleUrl
                self.videoUrl = videoUrl
                self.thumbnailUrl = thumbnailUrl
                self.authorName = authorName
                self.providerName = providerName
                self.providerIconUrl = providerIconUrl
                self.functionTriggerId = functionTriggerId
                self.appId = appId
                self.isWorkflowApp = isWorkflowApp
                self.salesHomeWorkflowAppType = salesHomeWorkflowAppType
                self.appCollaborators = appCollaborators
                self.buttonLabel = buttonLabel
                self.botUserId = botUserId
                self.owningTeamId = owningTeamId
                self.workflowId = workflowId
                self.developerTraceId = developerTraceId
                self.triggerType = triggerType
                self.triggerSubtype = triggerSubtype
                self.shareUrl = shareUrl
                self.dispatchAction = dispatchAction
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case call
                case source
                case file
                case text
                case fallback
                case title
                case description
                case url
                case fields
                case accessory
                case expand
                case label
                case element
                case hint
                case optional
                case blockId
                case callId
                case apiDecorationAvailable
                case externalId
                case fileId
                case imageUrl
                case imageWidth
                case imageHeight
                case imageBytes
                case isAnimated
                case slackFile
                case altText
                case titleUrl
                case videoUrl
                case thumbnailUrl
                case authorName
                case providerName
                case providerIconUrl
                case functionTriggerId
                case appId
                case isWorkflowApp
                case salesHomeWorkflowAppType
                case appCollaborators
                case buttonLabel
                case botUserId
                case owningTeamId
                case workflowId
                case developerTraceId
                case triggerType
                case triggerSubtype
                case shareUrl
                case dispatchAction
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccessoryConfirm`.
        public struct AccessoryConfirm: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessoryConfirm/title`.
            public var title: Components.Schemas.Description?
            /// - Remark: Generated from `#/components/schemas/AccessoryConfirm/text`.
            public var text: Components.Schemas.Description?
            /// - Remark: Generated from `#/components/schemas/AccessoryConfirm/confirm`.
            public var confirm: Components.Schemas.Description?
            /// - Remark: Generated from `#/components/schemas/AccessoryConfirm/deny`.
            public var deny: Components.Schemas.Description?
            /// - Remark: Generated from `#/components/schemas/AccessoryConfirm/style`.
            public var style: Swift.String?
            /// Creates a new `AccessoryConfirm`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - text:
            ///   - confirm:
            ///   - deny:
            ///   - style:
            public init(
                title: Components.Schemas.Description? = nil,
                text: Components.Schemas.Description? = nil,
                confirm: Components.Schemas.Description? = nil,
                deny: Components.Schemas.Description? = nil,
                style: Swift.String? = nil
            ) {
                self.title = title
                self.text = text
                self.confirm = confirm
                self.deny = deny
                self.style = style
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case text
                case confirm
                case deny
                case style
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccessoryElement`.
        public struct AccessoryElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessoryElement/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccessoryElement/elements`.
            public var elements: [Components.Schemas.PurpleElement]?
            /// - Remark: Generated from `#/components/schemas/AccessoryElement/style`.
            public var style: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccessoryElement/indent`.
            public var indent: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AccessoryElement/offset`.
            public var offset: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AccessoryElement/border`.
            public var border: Swift.Int?
            /// Creates a new `AccessoryElement`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - style:
            ///   - indent:
            ///   - offset:
            ///   - border:
            public init(
                _type: Swift.String? = nil,
                elements: [Components.Schemas.PurpleElement]? = nil,
                style: Swift.String? = nil,
                indent: Swift.Int? = nil,
                offset: Swift.Int? = nil,
                border: Swift.Int? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.style = style
                self.indent = indent
                self.offset = offset
                self.border = border
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case style
                case indent
                case offset
                case border
            }
        }
        /// - Remark: Generated from `#/components/schemas/PurpleElement`.
        public struct PurpleElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PurpleElement/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/placeholder`.
            public var placeholder: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/multiline`.
            public var multiline: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/options`.
            public var options: [Components.Schemas.Option]?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/confirm`.
            public var confirm: Components.Schemas.Confirm?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/text`.
            public var text: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/style`.
            public var style: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/filter`.
            public var filter: Components.Schemas.Filter?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/timezone`.
            public var timezone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/actionId`.
            public var actionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/initialValue`.
            public var initialValue: Components.Schemas.InitialValueUnion?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/dispatchActionConfig`.
            public var dispatchActionConfig: Components.Schemas.DispatchActionConfig?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/focusOnLoad`.
            public var focusOnLoad: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/minLength`.
            public var minLength: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/maxLength`.
            public var maxLength: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/initialOption`.
            public var initialOption: Components.Schemas.Option?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/accessibilityLabel`.
            public var accessibilityLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/initialChannel`.
            public var initialChannel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/responseUrlEnabled`.
            public var responseUrlEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/initialConversation`.
            public var initialConversation: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/defaultToCurrentConversation`.
            public var defaultToCurrentConversation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/initialDate`.
            public var initialDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/initialTime`.
            public var initialTime: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/initialDateTime`.
            public var initialDateTime: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/minQueryLength`.
            public var minQueryLength: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/optionGroups`.
            public var optionGroups: [Components.Schemas.OptionGroup]?
            /// - Remark: Generated from `#/components/schemas/PurpleElement/initialUser`.
            public var initialUser: Swift.String?
            /// Creates a new `PurpleElement`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - placeholder:
            ///   - multiline:
            ///   - options:
            ///   - confirm:
            ///   - text:
            ///   - url:
            ///   - value:
            ///   - style:
            ///   - filter:
            ///   - timezone:
            ///   - fallback:
            ///   - actionId:
            ///   - initialValue:
            ///   - dispatchActionConfig:
            ///   - focusOnLoad:
            ///   - minLength:
            ///   - maxLength:
            ///   - initialOption:
            ///   - accessibilityLabel:
            ///   - initialChannel:
            ///   - responseUrlEnabled:
            ///   - initialConversation:
            ///   - defaultToCurrentConversation:
            ///   - initialDate:
            ///   - initialTime:
            ///   - initialDateTime:
            ///   - minQueryLength:
            ///   - imageUrl:
            ///   - altText:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - slackFile:
            ///   - optionGroups:
            ///   - initialUser:
            public init(
                _type: Swift.String? = nil,
                placeholder: Components.Schemas.Close? = nil,
                multiline: Swift.Bool? = nil,
                options: [Components.Schemas.Option]? = nil,
                confirm: Components.Schemas.Confirm? = nil,
                text: Components.Schemas.Close? = nil,
                url: Swift.String? = nil,
                value: Swift.String? = nil,
                style: Swift.String? = nil,
                filter: Components.Schemas.Filter? = nil,
                timezone: Swift.String? = nil,
                fallback: Swift.String? = nil,
                actionId: Swift.String? = nil,
                initialValue: Components.Schemas.InitialValueUnion? = nil,
                dispatchActionConfig: Components.Schemas.DispatchActionConfig? = nil,
                focusOnLoad: Swift.Bool? = nil,
                minLength: Swift.Int? = nil,
                maxLength: Swift.Int? = nil,
                initialOption: Components.Schemas.Option? = nil,
                accessibilityLabel: Swift.String? = nil,
                initialChannel: Swift.String? = nil,
                responseUrlEnabled: Swift.Bool? = nil,
                initialConversation: Swift.String? = nil,
                defaultToCurrentConversation: Swift.Bool? = nil,
                initialDate: Swift.String? = nil,
                initialTime: Swift.String? = nil,
                initialDateTime: Swift.Int? = nil,
                minQueryLength: Swift.Int? = nil,
                imageUrl: Swift.String? = nil,
                altText: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                slackFile: Components.Schemas.SlackFile? = nil,
                optionGroups: [Components.Schemas.OptionGroup]? = nil,
                initialUser: Swift.String? = nil
            ) {
                self._type = _type
                self.placeholder = placeholder
                self.multiline = multiline
                self.options = options
                self.confirm = confirm
                self.text = text
                self.url = url
                self.value = value
                self.style = style
                self.filter = filter
                self.timezone = timezone
                self.fallback = fallback
                self.actionId = actionId
                self.initialValue = initialValue
                self.dispatchActionConfig = dispatchActionConfig
                self.focusOnLoad = focusOnLoad
                self.minLength = minLength
                self.maxLength = maxLength
                self.initialOption = initialOption
                self.accessibilityLabel = accessibilityLabel
                self.initialChannel = initialChannel
                self.responseUrlEnabled = responseUrlEnabled
                self.initialConversation = initialConversation
                self.defaultToCurrentConversation = defaultToCurrentConversation
                self.initialDate = initialDate
                self.initialTime = initialTime
                self.initialDateTime = initialDateTime
                self.minQueryLength = minQueryLength
                self.imageUrl = imageUrl
                self.altText = altText
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.slackFile = slackFile
                self.optionGroups = optionGroups
                self.initialUser = initialUser
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case placeholder
                case multiline
                case options
                case confirm
                case text
                case url
                case value
                case style
                case filter
                case timezone
                case fallback
                case actionId
                case initialValue
                case dispatchActionConfig
                case focusOnLoad
                case minLength
                case maxLength
                case initialOption
                case accessibilityLabel
                case initialChannel
                case responseUrlEnabled
                case initialConversation
                case defaultToCurrentConversation
                case initialDate
                case initialTime
                case initialDateTime
                case minQueryLength
                case imageUrl
                case altText
                case imageWidth
                case imageHeight
                case imageBytes
                case slackFile
                case optionGroups
                case initialUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/Style`.
        public struct Style: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Style/bold`.
            public var bold: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Style/italic`.
            public var italic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Style/strike`.
            public var strike: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Style/highlight`.
            public var highlight: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Style/unlink`.
            public var unlink: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Style/code`.
            public var code: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Style/clientHighlight`.
            public var clientHighlight: Swift.Bool?
            /// Creates a new `Style`.
            ///
            /// - Parameters:
            ///   - bold:
            ///   - italic:
            ///   - strike:
            ///   - highlight:
            ///   - unlink:
            ///   - code:
            ///   - clientHighlight:
            public init(
                bold: Swift.Bool? = nil,
                italic: Swift.Bool? = nil,
                strike: Swift.Bool? = nil,
                highlight: Swift.Bool? = nil,
                unlink: Swift.Bool? = nil,
                code: Swift.Bool? = nil,
                clientHighlight: Swift.Bool? = nil
            ) {
                self.bold = bold
                self.italic = italic
                self.strike = strike
                self.highlight = highlight
                self.unlink = unlink
                self.code = code
                self.clientHighlight = clientHighlight
            }
            public enum CodingKeys: String, CodingKey {
                case bold
                case italic
                case strike
                case highlight
                case unlink
                case code
                case clientHighlight
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccessoryFilter`.
        public struct AccessoryFilter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessoryFilter/include`.
            public var include: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/AccessoryFilter/excludeExternalSharedChannels`.
            public var excludeExternalSharedChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AccessoryFilter/excludeBotUsers`.
            public var excludeBotUsers: Swift.Bool?
            /// Creates a new `AccessoryFilter`.
            ///
            /// - Parameters:
            ///   - include:
            ///   - excludeExternalSharedChannels:
            ///   - excludeBotUsers:
            public init(
                include: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                excludeExternalSharedChannels: Swift.Bool? = nil,
                excludeBotUsers: Swift.Bool? = nil
            ) {
                self.include = include
                self.excludeExternalSharedChannels = excludeExternalSharedChannels
                self.excludeBotUsers = excludeBotUsers
            }
            public enum CodingKeys: String, CodingKey {
                case include
                case excludeExternalSharedChannels
                case excludeBotUsers
            }
        }
        /// - Remark: Generated from `#/components/schemas/InitialOptionElement`.
        public struct InitialOptionElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InitialOptionElement/text`.
            public var text: Components.Schemas.Description?
            /// - Remark: Generated from `#/components/schemas/InitialOptionElement/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InitialOptionElement/description`.
            public var description: Components.Schemas.Description?
            /// - Remark: Generated from `#/components/schemas/InitialOptionElement/url`.
            public var url: Swift.String?
            /// Creates a new `InitialOptionElement`.
            ///
            /// - Parameters:
            ///   - text:
            ///   - value:
            ///   - description:
            ///   - url:
            public init(
                text: Components.Schemas.Description? = nil,
                value: Swift.String? = nil,
                description: Components.Schemas.Description? = nil,
                url: Swift.String? = nil
            ) {
                self.text = text
                self.value = value
                self.description = description
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case value
                case description
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccessoryOptionGroup`.
        public struct AccessoryOptionGroup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessoryOptionGroup/label`.
            public var label: Components.Schemas.Description?
            /// - Remark: Generated from `#/components/schemas/AccessoryOptionGroup/options`.
            public var options: [Components.Schemas.InitialOptionElement]?
            /// Creates a new `AccessoryOptionGroup`.
            ///
            /// - Parameters:
            ///   - label:
            ///   - options:
            public init(
                label: Components.Schemas.Description? = nil,
                options: [Components.Schemas.InitialOptionElement]? = nil
            ) {
                self.label = label
                self.options = options
            }
            public enum CodingKeys: String, CodingKey {
                case label
                case options
            }
        }
        /// - Remark: Generated from `#/components/schemas/SlackFile`.
        public struct SlackFile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SlackFile/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SlackFile/url`.
            public var url: Swift.String?
            /// Creates a new `SlackFile`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - url:
            public init(
                id: Swift.String? = nil,
                url: Swift.String? = nil
            ) {
                self.id = id
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/CustomizableInputParameter`.
        public struct CustomizableInputParameter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CustomizableInputParameter/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CustomizableInputParameter/value`.
            public var value: Swift.String?
            /// Creates a new `CustomizableInputParameter`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - value:
            public init(
                name: Swift.String? = nil,
                value: Swift.String? = nil
            ) {
                self.name = name
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/V1`.
        public struct V1: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/V1/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/V1/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/V1/channels`.
            public var channels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/V1/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/V1/appIconUrls`.
            public var appIconUrls: Components.Schemas.AppIconUrls?
            /// - Remark: Generated from `#/components/schemas/V1/dateStart`.
            public var dateStart: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/V1/activeParticipants`.
            public var activeParticipants: [Components.Schemas.Participant]?
            /// - Remark: Generated from `#/components/schemas/V1/allParticipants`.
            public var allParticipants: [Components.Schemas.Participant]?
            /// - Remark: Generated from `#/components/schemas/V1/displayId`.
            public var displayId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/V1/joinUrl`.
            public var joinUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/V1/desktopAppJoinUrl`.
            public var desktopAppJoinUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/V1/createdBy`.
            public var createdBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/V1/dateEnd`.
            public var dateEnd: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/V1/isDmCall`.
            public var isDmCall: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/V1/wasRejected`.
            public var wasRejected: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/V1/wasMissed`.
            public var wasMissed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/V1/wasAccepted`.
            public var wasAccepted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/V1/hasEnded`.
            public var hasEnded: Swift.Bool?
            /// Creates a new `V1`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - channels:
            ///   - appId:
            ///   - appIconUrls:
            ///   - dateStart:
            ///   - activeParticipants:
            ///   - allParticipants:
            ///   - displayId:
            ///   - joinUrl:
            ///   - desktopAppJoinUrl:
            ///   - createdBy:
            ///   - dateEnd:
            ///   - isDmCall:
            ///   - wasRejected:
            ///   - wasMissed:
            ///   - wasAccepted:
            ///   - hasEnded:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                channels: [Swift.String]? = nil,
                appId: Swift.String? = nil,
                appIconUrls: Components.Schemas.AppIconUrls? = nil,
                dateStart: Swift.Int? = nil,
                activeParticipants: [Components.Schemas.Participant]? = nil,
                allParticipants: [Components.Schemas.Participant]? = nil,
                displayId: Swift.String? = nil,
                joinUrl: Swift.String? = nil,
                desktopAppJoinUrl: Swift.String? = nil,
                createdBy: Swift.String? = nil,
                dateEnd: Swift.Int? = nil,
                isDmCall: Swift.Bool? = nil,
                wasRejected: Swift.Bool? = nil,
                wasMissed: Swift.Bool? = nil,
                wasAccepted: Swift.Bool? = nil,
                hasEnded: Swift.Bool? = nil
            ) {
                self.id = id
                self.name = name
                self.channels = channels
                self.appId = appId
                self.appIconUrls = appIconUrls
                self.dateStart = dateStart
                self.activeParticipants = activeParticipants
                self.allParticipants = allParticipants
                self.displayId = displayId
                self.joinUrl = joinUrl
                self.desktopAppJoinUrl = desktopAppJoinUrl
                self.createdBy = createdBy
                self.dateEnd = dateEnd
                self.isDmCall = isDmCall
                self.wasRejected = wasRejected
                self.wasMissed = wasMissed
                self.wasAccepted = wasAccepted
                self.hasEnded = hasEnded
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case channels
                case appId
                case appIconUrls
                case dateStart
                case activeParticipants
                case allParticipants
                case displayId
                case joinUrl
                case desktopAppJoinUrl
                case createdBy
                case dateEnd
                case isDmCall
                case wasRejected
                case wasMissed
                case wasAccepted
                case hasEnded
            }
        }
        /// - Remark: Generated from `#/components/schemas/Participant`.
        public struct Participant: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Participant/slackId`.
            public var slackId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Participant/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Participant/displayName`.
            public var displayName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Participant/avatarUrl`.
            public var avatarUrl: Swift.String?
            /// Creates a new `Participant`.
            ///
            /// - Parameters:
            ///   - slackId:
            ///   - externalId:
            ///   - displayName:
            ///   - avatarUrl:
            public init(
                slackId: Swift.String? = nil,
                externalId: Swift.String? = nil,
                displayName: Swift.String? = nil,
                avatarUrl: Swift.String? = nil
            ) {
                self.slackId = slackId
                self.externalId = externalId
                self.displayName = displayName
                self.avatarUrl = avatarUrl
            }
            public enum CodingKeys: String, CodingKey {
                case slackId
                case externalId
                case displayName
                case avatarUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppIconUrls`.
        public struct AppIconUrls: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/image32`.
            public var image32: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/image36`.
            public var image36: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/image48`.
            public var image48: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/image64`.
            public var image64: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/image72`.
            public var image72: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/image96`.
            public var image96: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/image128`.
            public var image128: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/image192`.
            public var image192: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/image512`.
            public var image512: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/image1024`.
            public var image1024: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppIconUrls/imageOriginal`.
            public var imageOriginal: Swift.String?
            /// Creates a new `AppIconUrls`.
            ///
            /// - Parameters:
            ///   - image32:
            ///   - image36:
            ///   - image48:
            ///   - image64:
            ///   - image72:
            ///   - image96:
            ///   - image128:
            ///   - image192:
            ///   - image512:
            ///   - image1024:
            ///   - imageOriginal:
            public init(
                image32: Swift.String? = nil,
                image36: Swift.String? = nil,
                image48: Swift.String? = nil,
                image64: Swift.String? = nil,
                image72: Swift.String? = nil,
                image96: Swift.String? = nil,
                image128: Swift.String? = nil,
                image192: Swift.String? = nil,
                image512: Swift.String? = nil,
                image1024: Swift.String? = nil,
                imageOriginal: Swift.String? = nil
            ) {
                self.image32 = image32
                self.image36 = image36
                self.image48 = image48
                self.image64 = image64
                self.image72 = image72
                self.image96 = image96
                self.image128 = image128
                self.image192 = image192
                self.image512 = image512
                self.image1024 = image1024
                self.imageOriginal = imageOriginal
            }
            public enum CodingKeys: String, CodingKey {
                case image32
                case image36
                case image48
                case image64
                case image72
                case image96
                case image128
                case image192
                case image512
                case image1024
                case imageOriginal
            }
        }
        /// - Remark: Generated from `#/components/schemas/DescriptionElement`.
        public struct DescriptionElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DescriptionElement/type`.
            public var _type: Components.Schemas.DescriptionType?
            /// - Remark: Generated from `#/components/schemas/DescriptionElement/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionElement/emoji`.
            public var emoji: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/DescriptionElement/verbatim`.
            public var verbatim: Swift.Bool?
            /// Creates a new `DescriptionElement`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - text:
            ///   - emoji:
            ///   - verbatim:
            public init(
                _type: Components.Schemas.DescriptionType? = nil,
                text: Swift.String? = nil,
                emoji: Swift.Bool? = nil,
                verbatim: Swift.Bool? = nil
            ) {
                self._type = _type
                self.text = text
                self.emoji = emoji
                self.verbatim = verbatim
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case emoji
                case verbatim
            }
        }
        /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement`.
        public struct DescriptionBlockElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/type`.
            public var _type: Components.Schemas.BlockType?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/elements`.
            public var elements: [Components.Schemas.Accessory]?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/title`.
            public var title: Components.Schemas.DescriptionUnion?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/text`.
            public var text: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/fields`.
            public var fields: [Components.Schemas.DescriptionElement]?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/accessory`.
            public var accessory: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/expand`.
            public var expand: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/description`.
            public var description: Components.Schemas.DescriptionUnion?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/blockId`.
            public var blockId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/isAnimated`.
            public var isAnimated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/titleUrl`.
            public var titleUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/videoUrl`.
            public var videoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/thumbnailUrl`.
            public var thumbnailUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/authorName`.
            public var authorName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/providerName`.
            public var providerName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/providerIconUrl`.
            public var providerIconUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/functionTriggerId`.
            public var functionTriggerId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/isWorkflowApp`.
            public var isWorkflowApp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/salesHomeWorkflowAppType`.
            public var salesHomeWorkflowAppType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/appCollaborators`.
            public var appCollaborators: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/buttonLabel`.
            public var buttonLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/botUserId`.
            public var botUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/owningTeamId`.
            public var owningTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/workflowId`.
            public var workflowId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/developerTraceId`.
            public var developerTraceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/triggerType`.
            public var triggerType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/triggerSubtype`.
            public var triggerSubtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DescriptionBlockElement/shareUrl`.
            public var shareUrl: Swift.String?
            /// Creates a new `DescriptionBlockElement`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - fallback:
            ///   - title:
            ///   - text:
            ///   - fields:
            ///   - accessory:
            ///   - expand:
            ///   - description:
            ///   - url:
            ///   - blockId:
            ///   - imageUrl:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - isAnimated:
            ///   - slackFile:
            ///   - altText:
            ///   - titleUrl:
            ///   - videoUrl:
            ///   - thumbnailUrl:
            ///   - authorName:
            ///   - providerName:
            ///   - providerIconUrl:
            ///   - functionTriggerId:
            ///   - appId:
            ///   - isWorkflowApp:
            ///   - salesHomeWorkflowAppType:
            ///   - appCollaborators:
            ///   - buttonLabel:
            ///   - botUserId:
            ///   - owningTeamId:
            ///   - workflowId:
            ///   - developerTraceId:
            ///   - triggerType:
            ///   - triggerSubtype:
            ///   - shareUrl:
            public init(
                _type: Components.Schemas.BlockType? = nil,
                elements: [Components.Schemas.Accessory]? = nil,
                fallback: Swift.String? = nil,
                title: Components.Schemas.DescriptionUnion? = nil,
                text: Components.Schemas.DescriptionElement? = nil,
                fields: [Components.Schemas.DescriptionElement]? = nil,
                accessory: Components.Schemas.Accessory? = nil,
                expand: Swift.Bool? = nil,
                description: Components.Schemas.DescriptionUnion? = nil,
                url: Swift.String? = nil,
                blockId: Swift.String? = nil,
                imageUrl: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                isAnimated: Swift.Bool? = nil,
                slackFile: Components.Schemas.SlackFile? = nil,
                altText: Swift.String? = nil,
                titleUrl: Swift.String? = nil,
                videoUrl: Swift.String? = nil,
                thumbnailUrl: Swift.String? = nil,
                authorName: Swift.String? = nil,
                providerName: Swift.String? = nil,
                providerIconUrl: Swift.String? = nil,
                functionTriggerId: Swift.String? = nil,
                appId: Swift.String? = nil,
                isWorkflowApp: Swift.Bool? = nil,
                salesHomeWorkflowAppType: Swift.Int? = nil,
                appCollaborators: [Swift.String]? = nil,
                buttonLabel: Swift.String? = nil,
                botUserId: Swift.String? = nil,
                owningTeamId: Swift.String? = nil,
                workflowId: Swift.String? = nil,
                developerTraceId: Swift.String? = nil,
                triggerType: Swift.String? = nil,
                triggerSubtype: Swift.String? = nil,
                shareUrl: Swift.String? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.fallback = fallback
                self.title = title
                self.text = text
                self.fields = fields
                self.accessory = accessory
                self.expand = expand
                self.description = description
                self.url = url
                self.blockId = blockId
                self.imageUrl = imageUrl
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.isAnimated = isAnimated
                self.slackFile = slackFile
                self.altText = altText
                self.titleUrl = titleUrl
                self.videoUrl = videoUrl
                self.thumbnailUrl = thumbnailUrl
                self.authorName = authorName
                self.providerName = providerName
                self.providerIconUrl = providerIconUrl
                self.functionTriggerId = functionTriggerId
                self.appId = appId
                self.isWorkflowApp = isWorkflowApp
                self.salesHomeWorkflowAppType = salesHomeWorkflowAppType
                self.appCollaborators = appCollaborators
                self.buttonLabel = buttonLabel
                self.botUserId = botUserId
                self.owningTeamId = owningTeamId
                self.workflowId = workflowId
                self.developerTraceId = developerTraceId
                self.triggerType = triggerType
                self.triggerSubtype = triggerSubtype
                self.shareUrl = shareUrl
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case fallback
                case title
                case text
                case fields
                case accessory
                case expand
                case description
                case url
                case blockId
                case imageUrl
                case imageWidth
                case imageHeight
                case imageBytes
                case isAnimated
                case slackFile
                case altText
                case titleUrl
                case videoUrl
                case thumbnailUrl
                case authorName
                case providerName
                case providerIconUrl
                case functionTriggerId
                case appId
                case isWorkflowApp
                case salesHomeWorkflowAppType
                case appCollaborators
                case buttonLabel
                case botUserId
                case owningTeamId
                case workflowId
                case developerTraceId
                case triggerType
                case triggerSubtype
                case shareUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/Cc`.
        public struct Cc: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Cc/address`.
            public var address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Cc/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Cc/original`.
            public var original: Swift.String?
            /// Creates a new `Cc`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - name:
            ///   - original:
            public init(
                address: Swift.String? = nil,
                name: Swift.String? = nil,
                original: Swift.String? = nil
            ) {
                self.address = address
                self.name = name
                self.original = original
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case name
                case original
            }
        }
        /// - Remark: Generated from `#/components/schemas/DmMpdmUsersWithFileAccess`.
        public struct DmMpdmUsersWithFileAccess: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DmMpdmUsersWithFileAccess/access`.
            public var access: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DmMpdmUsersWithFileAccess/userId`.
            public var userId: Swift.String?
            /// Creates a new `DmMpdmUsersWithFileAccess`.
            ///
            /// - Parameters:
            ///   - access:
            ///   - userId:
            public init(
                access: Swift.String? = nil,
                userId: Swift.String? = nil
            ) {
                self.access = access
                self.userId = userId
            }
            public enum CodingKeys: String, CodingKey {
                case access
                case userId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Favorite`.
        public struct Favorite: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Favorite/position`.
            public var position: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Favorite/collectionId`.
            public var collectionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Favorite/collectionName`.
            public var collectionName: Swift.String?
            /// Creates a new `Favorite`.
            ///
            /// - Parameters:
            ///   - position:
            ///   - collectionId:
            ///   - collectionName:
            public init(
                position: Swift.String? = nil,
                collectionId: Swift.String? = nil,
                collectionName: Swift.String? = nil
            ) {
                self.position = position
                self.collectionId = collectionId
                self.collectionName = collectionName
            }
            public enum CodingKeys: String, CodingKey {
                case position
                case collectionId
                case collectionName
            }
        }
        /// - Remark: Generated from `#/components/schemas/Headers`.
        public struct Headers: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Headers/date`.
            public var date: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Headers/inReplyTo`.
            public var inReplyTo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Headers/replyTo`.
            public var replyTo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Headers/messageId`.
            public var messageId: Swift.String?
            /// Creates a new `Headers`.
            ///
            /// - Parameters:
            ///   - date:
            ///   - inReplyTo:
            ///   - replyTo:
            ///   - messageId:
            public init(
                date: Swift.String? = nil,
                inReplyTo: Swift.String? = nil,
                replyTo: Swift.String? = nil,
                messageId: Swift.String? = nil
            ) {
                self.date = date
                self.inReplyTo = inReplyTo
                self.replyTo = replyTo
                self.messageId = messageId
            }
            public enum CodingKeys: String, CodingKey {
                case date
                case inReplyTo
                case replyTo
                case messageId
            }
        }
        /// - Remark: Generated from `#/components/schemas/InitialComment`.
        public struct InitialComment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InitialComment/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InitialComment/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InitialComment/timestamp`.
            public var timestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InitialComment/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InitialComment/comment`.
            public var comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InitialComment/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InitialComment/isIntro`.
            public var isIntro: Swift.Bool?
            /// Creates a new `InitialComment`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created:
            ///   - timestamp:
            ///   - user:
            ///   - comment:
            ///   - channel:
            ///   - isIntro:
            public init(
                id: Swift.String? = nil,
                created: Swift.Int? = nil,
                timestamp: Swift.Int? = nil,
                user: Swift.String? = nil,
                comment: Swift.String? = nil,
                channel: Swift.String? = nil,
                isIntro: Swift.Bool? = nil
            ) {
                self.id = id
                self.created = created
                self.timestamp = timestamp
                self.user = user
                self.comment = comment
                self.channel = channel
                self.isIntro = isIntro
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case timestamp
                case user
                case comment
                case channel
                case isIntro
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListLimits`.
        public struct ListLimits: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListLimits/overRowMaximum`.
            public var overRowMaximum: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ListLimits/rowCountLimit`.
            public var rowCountLimit: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListLimits/rowCount`.
            public var rowCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListLimits/overColumnMaximum`.
            public var overColumnMaximum: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ListLimits/columnCount`.
            public var columnCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListLimits/columnCountLimit`.
            public var columnCountLimit: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListLimits/overViewMaximum`.
            public var overViewMaximum: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ListLimits/viewCount`.
            public var viewCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListLimits/viewCountLimit`.
            public var viewCountLimit: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListLimits/maxAttachmentsPerCell`.
            public var maxAttachmentsPerCell: Swift.Int?
            /// Creates a new `ListLimits`.
            ///
            /// - Parameters:
            ///   - overRowMaximum:
            ///   - rowCountLimit:
            ///   - rowCount:
            ///   - overColumnMaximum:
            ///   - columnCount:
            ///   - columnCountLimit:
            ///   - overViewMaximum:
            ///   - viewCount:
            ///   - viewCountLimit:
            ///   - maxAttachmentsPerCell:
            public init(
                overRowMaximum: Swift.Bool? = nil,
                rowCountLimit: Swift.Int? = nil,
                rowCount: Swift.Int? = nil,
                overColumnMaximum: Swift.Bool? = nil,
                columnCount: Swift.Int? = nil,
                columnCountLimit: Swift.Int? = nil,
                overViewMaximum: Swift.Bool? = nil,
                viewCount: Swift.Int? = nil,
                viewCountLimit: Swift.Int? = nil,
                maxAttachmentsPerCell: Swift.Int? = nil
            ) {
                self.overRowMaximum = overRowMaximum
                self.rowCountLimit = rowCountLimit
                self.rowCount = rowCount
                self.overColumnMaximum = overColumnMaximum
                self.columnCount = columnCount
                self.columnCountLimit = columnCountLimit
                self.overViewMaximum = overViewMaximum
                self.viewCount = viewCount
                self.viewCountLimit = viewCountLimit
                self.maxAttachmentsPerCell = maxAttachmentsPerCell
            }
            public enum CodingKeys: String, CodingKey {
                case overRowMaximum
                case rowCountLimit
                case rowCount
                case overColumnMaximum
                case columnCount
                case columnCountLimit
                case overViewMaximum
                case viewCount
                case viewCountLimit
                case maxAttachmentsPerCell
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListMetadata`.
        public struct ListMetadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListMetadata/icon`.
            public var icon: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListMetadata/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListMetadata/schema`.
            public var schema: [Components.Schemas.Schema]?
            /// - Remark: Generated from `#/components/schemas/ListMetadata/views`.
            public var views: [Components.Schemas.View]?
            /// - Remark: Generated from `#/components/schemas/ListMetadata/integrations`.
            public var integrations: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ListMetadata/iconUrl`.
            public var iconUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListMetadata/iconTeamId`.
            public var iconTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListMetadata/isTrial`.
            public var isTrial: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ListMetadata/creationSource`.
            public var creationSource: Components.Schemas.CreationSource?
            /// - Remark: Generated from `#/components/schemas/ListMetadata/descriptionBlocks`.
            public var descriptionBlocks: [Components.Schemas.TitleBlockElement]?
            /// Creates a new `ListMetadata`.
            ///
            /// - Parameters:
            ///   - icon:
            ///   - description:
            ///   - schema:
            ///   - views:
            ///   - integrations:
            ///   - iconUrl:
            ///   - iconTeamId:
            ///   - isTrial:
            ///   - creationSource:
            ///   - descriptionBlocks:
            public init(
                icon: Swift.String? = nil,
                description: Swift.String? = nil,
                schema: [Components.Schemas.Schema]? = nil,
                views: [Components.Schemas.View]? = nil,
                integrations: [Swift.String]? = nil,
                iconUrl: Swift.String? = nil,
                iconTeamId: Swift.String? = nil,
                isTrial: Swift.Bool? = nil,
                creationSource: Components.Schemas.CreationSource? = nil,
                descriptionBlocks: [Components.Schemas.TitleBlockElement]? = nil
            ) {
                self.icon = icon
                self.description = description
                self.schema = schema
                self.views = views
                self.integrations = integrations
                self.iconUrl = iconUrl
                self.iconTeamId = iconTeamId
                self.isTrial = isTrial
                self.creationSource = creationSource
                self.descriptionBlocks = descriptionBlocks
            }
            public enum CodingKeys: String, CodingKey {
                case icon
                case description
                case schema
                case views
                case integrations
                case iconUrl
                case iconTeamId
                case isTrial
                case creationSource
                case descriptionBlocks
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreationSource`.
        public struct CreationSource: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreationSource/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreationSource/referenceId`.
            public var referenceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreationSource/workflowFunctionId`.
            public var workflowFunctionId: Swift.String?
            /// Creates a new `CreationSource`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - referenceId:
            ///   - workflowFunctionId:
            public init(
                _type: Swift.String? = nil,
                referenceId: Swift.String? = nil,
                workflowFunctionId: Swift.String? = nil
            ) {
                self._type = _type
                self.referenceId = referenceId
                self.workflowFunctionId = workflowFunctionId
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case referenceId
                case workflowFunctionId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Schema`.
        public struct Schema: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Schema/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schema/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schema/key`.
            public var key: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schema/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schema/options`.
            public var options: Components.Schemas.Options?
            /// - Remark: Generated from `#/components/schemas/Schema/isPrimaryColumn`.
            public var isPrimaryColumn: Swift.Bool?
            /// Creates a new `Schema`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - key:
            ///   - _type:
            ///   - options:
            ///   - isPrimaryColumn:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                key: Swift.String? = nil,
                _type: Swift.String? = nil,
                options: Components.Schemas.Options? = nil,
                isPrimaryColumn: Swift.Bool? = nil
            ) {
                self.id = id
                self.name = name
                self.key = key
                self._type = _type
                self.options = options
                self.isPrimaryColumn = isPrimaryColumn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case key
                case _type = "type"
                case options
                case isPrimaryColumn
            }
        }
        /// - Remark: Generated from `#/components/schemas/Options`.
        public struct Options: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Options/isScim`.
            public var isScim: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Options/isProtected`.
            public var isProtected: Swift.Bool?
            /// Creates a new `Options`.
            ///
            /// - Parameters:
            ///   - isScim:
            ///   - isProtected:
            public init(
                isScim: Swift.Bool? = nil,
                isProtected: Swift.Bool? = nil
            ) {
                self.isScim = isScim
                self.isProtected = isProtected
            }
            public enum CodingKeys: String, CodingKey {
                case isScim
                case isProtected
            }
        }
        /// - Remark: Generated from `#/components/schemas/CanvasPlaceholderMapping`.
        public struct CanvasPlaceholderMapping: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CanvasPlaceholderMapping/variable`.
            public var variable: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CanvasPlaceholderMapping/column`.
            public var column: Swift.String?
            /// Creates a new `CanvasPlaceholderMapping`.
            ///
            /// - Parameters:
            ///   - variable:
            ///   - column:
            public init(
                variable: Swift.String? = nil,
                column: Swift.String? = nil
            ) {
                self.variable = variable
                self.column = column
            }
            public enum CodingKeys: String, CodingKey {
                case variable
                case column
            }
        }
        /// - Remark: Generated from `#/components/schemas/Choice`.
        public struct Choice: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Choice/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Choice/label`.
            public var label: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Choice/color`.
            public var color: Swift.String?
            /// Creates a new `Choice`.
            ///
            /// - Parameters:
            ///   - value:
            ///   - label:
            ///   - color:
            public init(
                value: Swift.String? = nil,
                label: Swift.String? = nil,
                color: Swift.String? = nil
            ) {
                self.value = value
                self.label = label
                self.color = color
            }
            public enum CodingKeys: String, CodingKey {
                case value
                case label
                case color
            }
        }
        /// - Remark: Generated from `#/components/schemas/DefaultValueTyped`.
        public struct DefaultValueTyped: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DefaultValueTyped/select`.
            public var select: [Swift.String]?
            /// Creates a new `DefaultValueTyped`.
            ///
            /// - Parameters:
            ///   - select:
            public init(select: [Swift.String]? = nil) {
                self.select = select
            }
            public enum CodingKeys: String, CodingKey {
                case select
            }
        }
        /// - Remark: Generated from `#/components/schemas/View`.
        public struct View: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/View/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/title`.
            public var title: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/View/submit`.
            public var submit: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/View/close`.
            public var close: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/View/blocks`.
            public var blocks: [Components.Schemas.Block]?
            /// - Remark: Generated from `#/components/schemas/View/state`.
            public var state: Components.Schemas.State?
            /// - Remark: Generated from `#/components/schemas/View/hash`.
            public var hash: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/privateMetadata`.
            public var privateMetadata: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/callbackId`.
            public var callbackId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/clearOnClose`.
            public var clearOnClose: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/View/notifyOnClose`.
            public var notifyOnClose: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/View/submitDisabled`.
            public var submitDisabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/View/rootViewId`.
            public var rootViewId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/previousViewId`.
            public var previousViewId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/appInstalledTeamId`.
            public var appInstalledTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/View/botId`.
            public var botId: Swift.String?
            /// Creates a new `View`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - _type:
            ///   - title:
            ///   - submit:
            ///   - close:
            ///   - blocks:
            ///   - state:
            ///   - hash:
            ///   - teamId:
            ///   - privateMetadata:
            ///   - callbackId:
            ///   - externalId:
            ///   - clearOnClose:
            ///   - notifyOnClose:
            ///   - submitDisabled:
            ///   - rootViewId:
            ///   - previousViewId:
            ///   - appId:
            ///   - appInstalledTeamId:
            ///   - botId:
            public init(
                id: Swift.String? = nil,
                _type: Swift.String? = nil,
                title: Components.Schemas.Close? = nil,
                submit: Components.Schemas.Close? = nil,
                close: Components.Schemas.Close? = nil,
                blocks: [Components.Schemas.Block]? = nil,
                state: Components.Schemas.State? = nil,
                hash: Swift.String? = nil,
                teamId: Swift.String? = nil,
                privateMetadata: Swift.String? = nil,
                callbackId: Swift.String? = nil,
                externalId: Swift.String? = nil,
                clearOnClose: Swift.Bool? = nil,
                notifyOnClose: Swift.Bool? = nil,
                submitDisabled: Swift.Bool? = nil,
                rootViewId: Swift.String? = nil,
                previousViewId: Swift.String? = nil,
                appId: Swift.String? = nil,
                appInstalledTeamId: Swift.String? = nil,
                botId: Swift.String? = nil
            ) {
                self.id = id
                self._type = _type
                self.title = title
                self.submit = submit
                self.close = close
                self.blocks = blocks
                self.state = state
                self.hash = hash
                self.teamId = teamId
                self.privateMetadata = privateMetadata
                self.callbackId = callbackId
                self.externalId = externalId
                self.clearOnClose = clearOnClose
                self.notifyOnClose = notifyOnClose
                self.submitDisabled = submitDisabled
                self.rootViewId = rootViewId
                self.previousViewId = previousViewId
                self.appId = appId
                self.appInstalledTeamId = appInstalledTeamId
                self.botId = botId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case title
                case submit
                case close
                case blocks
                case state
                case hash
                case teamId
                case privateMetadata
                case callbackId
                case externalId
                case clearOnClose
                case notifyOnClose
                case submitDisabled
                case rootViewId
                case previousViewId
                case appId
                case appInstalledTeamId
                case botId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Column`.
        public struct Column: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Column/visible`.
            public var visible: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Column/key`.
            public var key: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Column/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Column/position`.
            public var position: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Column/width`.
            public var width: Swift.Int?
            /// Creates a new `Column`.
            ///
            /// - Parameters:
            ///   - visible:
            ///   - key:
            ///   - id:
            ///   - position:
            ///   - width:
            public init(
                visible: Swift.Bool? = nil,
                key: Swift.String? = nil,
                id: Swift.String? = nil,
                position: Swift.String? = nil,
                width: Swift.Int? = nil
            ) {
                self.visible = visible
                self.key = key
                self.id = id
                self.position = position
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case visible
                case key
                case id
                case position
                case width
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilterElement`.
        public struct FilterElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilterElement/key`.
            public var key: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilterElement/operator`.
            public var _operator: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilterElement/values`.
            public var values: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FilterElement/typedValues`.
            public var typedValues: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/FilterElement/columnId`.
            public var columnId: Swift.String?
            /// Creates a new `FilterElement`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - _operator:
            ///   - values:
            ///   - typedValues:
            ///   - columnId:
            public init(
                key: Swift.String? = nil,
                _operator: Swift.String? = nil,
                values: [Swift.String]? = nil,
                typedValues: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                columnId: Swift.String? = nil
            ) {
                self.key = key
                self._operator = _operator
                self.values = values
                self.typedValues = typedValues
                self.columnId = columnId
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case _operator = "operator"
                case values
                case typedValues
                case columnId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Grouping`.
        public struct Grouping: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Grouping/groupBy`.
            public var groupBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Grouping/groupByColumnId`.
            public var groupByColumnId: Swift.String?
            /// Creates a new `Grouping`.
            ///
            /// - Parameters:
            ///   - groupBy:
            ///   - groupByColumnId:
            public init(
                groupBy: Swift.String? = nil,
                groupByColumnId: Swift.String? = nil
            ) {
                self.groupBy = groupBy
                self.groupByColumnId = groupByColumnId
            }
            public enum CodingKeys: String, CodingKey {
                case groupBy
                case groupByColumnId
            }
        }
        /// - Remark: Generated from `#/components/schemas/MediaProgress`.
        public struct MediaProgress: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MediaProgress/offsetMs`.
            public var offsetMs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MediaProgress/maxOffsetMs`.
            public var maxOffsetMs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MediaProgress/durationMs`.
            public var durationMs: Swift.Int?
            /// Creates a new `MediaProgress`.
            ///
            /// - Parameters:
            ///   - offsetMs:
            ///   - maxOffsetMs:
            ///   - durationMs:
            public init(
                offsetMs: Swift.Int? = nil,
                maxOffsetMs: Swift.Int? = nil,
                durationMs: Swift.Int? = nil
            ) {
                self.offsetMs = offsetMs
                self.maxOffsetMs = maxOffsetMs
                self.durationMs = durationMs
            }
            public enum CodingKeys: String, CodingKey {
                case offsetMs
                case maxOffsetMs
                case durationMs
            }
        }
        /// - Remark: Generated from `#/components/schemas/Saved`.
        public struct Saved: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Saved/state`.
            public var state: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Saved/isArchived`.
            public var isArchived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Saved/dateCompleted`.
            public var dateCompleted: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Saved/dateDue`.
            public var dateDue: Swift.Int?
            /// Creates a new `Saved`.
            ///
            /// - Parameters:
            ///   - state:
            ///   - isArchived:
            ///   - dateCompleted:
            ///   - dateDue:
            public init(
                state: Swift.String? = nil,
                isArchived: Swift.Bool? = nil,
                dateCompleted: Swift.Int? = nil,
                dateDue: Swift.Int? = nil
            ) {
                self.state = state
                self.isArchived = isArchived
                self.dateCompleted = dateCompleted
                self.dateDue = dateDue
            }
            public enum CodingKeys: String, CodingKey {
                case state
                case isArchived
                case dateCompleted
                case dateDue
            }
        }
        /// - Remark: Generated from `#/components/schemas/Shares`.
        public struct Shares: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Shares/public`.
            public var _public: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/Shares/private`.
            public var _private: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `Shares`.
            ///
            /// - Parameters:
            ///   - _public:
            ///   - _private:
            public init(
                _public: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                _private: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self._public = _public
                self._private = _private
            }
            public enum CodingKeys: String, CodingKey {
                case _public = "public"
                case _private = "private"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Private`.
        public struct Private: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Private/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Private/shareUserId`.
            public var shareUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Private/replyUsers`.
            public var replyUsers: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Private/replyUsersCount`.
            public var replyUsersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Private/replyCount`.
            public var replyCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Private/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Private/latestReply`.
            public var latestReply: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Private/channelName`.
            public var channelName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Private/teamId`.
            public var teamId: Swift.String?
            /// Creates a new `Private`.
            ///
            /// - Parameters:
            ///   - ts:
            ///   - shareUserId:
            ///   - replyUsers:
            ///   - replyUsersCount:
            ///   - replyCount:
            ///   - threadTs:
            ///   - latestReply:
            ///   - channelName:
            ///   - teamId:
            public init(
                ts: Swift.String? = nil,
                shareUserId: Swift.String? = nil,
                replyUsers: [Swift.String]? = nil,
                replyUsersCount: Swift.Int? = nil,
                replyCount: Swift.Int? = nil,
                threadTs: Swift.String? = nil,
                latestReply: Swift.String? = nil,
                channelName: Swift.String? = nil,
                teamId: Swift.String? = nil
            ) {
                self.ts = ts
                self.shareUserId = shareUserId
                self.replyUsers = replyUsers
                self.replyUsersCount = replyUsersCount
                self.replyCount = replyCount
                self.threadTs = threadTs
                self.latestReply = latestReply
                self.channelName = channelName
                self.teamId = teamId
            }
            public enum CodingKeys: String, CodingKey {
                case ts
                case shareUserId
                case replyUsers
                case replyUsersCount
                case replyCount
                case threadTs
                case latestReply
                case channelName
                case teamId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Transcription`.
        public struct Transcription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Transcription/status`.
            public var status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transcription/locale`.
            public var locale: Swift.String?
            /// Creates a new `Transcription`.
            ///
            /// - Parameters:
            ///   - status:
            ///   - locale:
            public init(
                status: Swift.String? = nil,
                locale: Swift.String? = nil
            ) {
                self.status = status
                self.locale = locale
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case locale
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionPreview`.
        public struct TranscriptionPreview: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TranscriptionPreview/content`.
            public var content: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscriptionPreview/hasMore`.
            public var hasMore: Swift.Bool?
            /// Creates a new `TranscriptionPreview`.
            ///
            /// - Parameters:
            ///   - content:
            ///   - hasMore:
            public init(
                content: Swift.String? = nil,
                hasMore: Swift.Bool? = nil
            ) {
                self.content = content
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case hasMore
            }
        }
        /// - Remark: Generated from `#/components/schemas/ActionOptionGroup`.
        public struct ActionOptionGroup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActionOptionGroup/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActionOptionGroup/options`.
            public var options: [Components.Schemas.SelectedOptionElement]?
            /// Creates a new `ActionOptionGroup`.
            ///
            /// - Parameters:
            ///   - text:
            ///   - options:
            public init(
                text: Swift.String? = nil,
                options: [Components.Schemas.SelectedOptionElement]? = nil
            ) {
                self.text = text
                self.options = options
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case options
            }
        }
        /// - Remark: Generated from `#/components/schemas/SelectedOptionElement`.
        public struct SelectedOptionElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SelectedOptionElement/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelectedOptionElement/value`.
            public var value: Swift.String?
            /// Creates a new `SelectedOptionElement`.
            ///
            /// - Parameters:
            ///   - text:
            ///   - value:
            public init(
                text: Swift.String? = nil,
                value: Swift.String? = nil
            ) {
                self.text = text
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/AttachmentField`.
        public struct AttachmentField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AttachmentField/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AttachmentField/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AttachmentField/short`.
            public var short: Swift.Bool?
            /// Creates a new `AttachmentField`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - value:
            ///   - short:
            public init(
                title: Swift.String? = nil,
                value: Swift.String? = nil,
                short: Swift.Bool? = nil
            ) {
                self.title = title
                self.value = value
                self.short = short
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case value
                case short
            }
        }
        /// - Remark: Generated from `#/components/schemas/FileElement`.
        public struct FileElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FileElement/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/timestamp`.
            public var timestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/subject`.
            public var subject: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/mimetype`.
            public var mimetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/filetype`.
            public var filetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/mode`.
            public var mode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/editable`.
            public var editable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/editor`.
            public var editor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/transcription`.
            public var transcription: Components.Schemas.Transcription?
            /// - Remark: Generated from `#/components/schemas/FileElement/mp4`.
            public var mp4: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/vtt`.
            public var vtt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/hls`.
            public var hls: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/deanimate`.
            public var deanimate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/pjpeg`.
            public var pjpeg: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/preview`.
            public var preview: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/lines`.
            public var lines: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/channels`.
            public var channels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FileElement/groups`.
            public var groups: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FileElement/ims`.
            public var ims: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FileElement/shares`.
            public var shares: Components.Schemas.Shares?
            /// - Remark: Generated from `#/components/schemas/FileElement/to`.
            public var to: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/FileElement/from`.
            public var from: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/FileElement/cc`.
            public var cc: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/FileElement/headers`.
            public var headers: Components.Schemas.Headers?
            /// - Remark: Generated from `#/components/schemas/FileElement/saved`.
            public var saved: Components.Schemas.Saved?
            /// - Remark: Generated from `#/components/schemas/FileElement/reactions`.
            public var reactions: [Components.Schemas.Reaction]?
            /// - Remark: Generated from `#/components/schemas/FileElement/prettyType`.
            public var prettyType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/userTeam`.
            public var userTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/sourceTeam`.
            public var sourceTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/nonOwnerEditable`.
            public var nonOwnerEditable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/lastEditor`.
            public var lastEditor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/fileAccess`.
            public var fileAccess: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/altTxt`.
            public var altTxt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/mp4Low`.
            public var mp4Low: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/hlsEmbed`.
            public var hlsEmbed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/durationMs`.
            public var durationMs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumbVideoW`.
            public var thumbVideoW: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumbVideoH`.
            public var thumbVideoH: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/originalAttachmentCount`.
            public var originalAttachmentCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/isExternal`.
            public var isExternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/externalType`.
            public var externalType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/externalUrl`.
            public var externalUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/urlPrivate`.
            public var urlPrivate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/urlPrivateDownload`.
            public var urlPrivateDownload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/appName`.
            public var appName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb64`.
            public var thumb64: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb64Gif`.
            public var thumb64Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb64W`.
            public var thumb64W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb64H`.
            public var thumb64H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb80`.
            public var thumb80: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb80Gif`.
            public var thumb80Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb80W`.
            public var thumb80W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb80H`.
            public var thumb80H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb160`.
            public var thumb160: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb160Gif`.
            public var thumb160Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb160W`.
            public var thumb160W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb160H`.
            public var thumb160H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb360`.
            public var thumb360: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb360Gif`.
            public var thumb360Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb360W`.
            public var thumb360W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb360H`.
            public var thumb360H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb480`.
            public var thumb480: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb480Gif`.
            public var thumb480Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb480W`.
            public var thumb480W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb480H`.
            public var thumb480H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb720`.
            public var thumb720: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb720Gif`.
            public var thumb720Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb720W`.
            public var thumb720W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb720H`.
            public var thumb720H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb800`.
            public var thumb800: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb800Gif`.
            public var thumb800Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb800W`.
            public var thumb800W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb800H`.
            public var thumb800H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb960`.
            public var thumb960: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb960Gif`.
            public var thumb960Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb960W`.
            public var thumb960W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb960H`.
            public var thumb960H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb1024`.
            public var thumb1024: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb1024Gif`.
            public var thumb1024Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb1024W`.
            public var thumb1024W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumb1024H`.
            public var thumb1024H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumbVideo`.
            public var thumbVideo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumbGif`.
            public var thumbGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumbPdf`.
            public var thumbPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumbPdfW`.
            public var thumbPdfW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumbPdfH`.
            public var thumbPdfH: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/thumbTiny`.
            public var thumbTiny: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/convertedPdf`.
            public var convertedPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/imageExifRotation`.
            public var imageExifRotation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/originalW`.
            public var originalW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/originalH`.
            public var originalH: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/deanimateGif`.
            public var deanimateGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/permalinkPublic`.
            public var permalinkPublic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/editLink`.
            public var editLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/hasRichPreview`.
            public var hasRichPreview: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/mediaDisplayType`.
            public var mediaDisplayType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/previewIsTruncated`.
            public var previewIsTruncated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/previewHighlight`.
            public var previewHighlight: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/plainText`.
            public var plainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/previewPlainText`.
            public var previewPlainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/sentToSelf`.
            public var sentToSelf: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/linesMore`.
            public var linesMore: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/isPublic`.
            public var isPublic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/publicUrlShared`.
            public var publicUrlShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/hasMoreShares`.
            public var hasMoreShares: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/channelActionsTs`.
            public var channelActionsTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/channelActionsCount`.
            public var channelActionsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/simplifiedHtml`.
            public var simplifiedHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/mediaProgress`.
            public var mediaProgress: Components.Schemas.MediaProgress?
            /// - Remark: Generated from `#/components/schemas/FileElement/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileElement/initialComment`.
            public var initialComment: Components.Schemas.Comment?
            /// - Remark: Generated from `#/components/schemas/FileElement/numStars`.
            public var numStars: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FileElement/isStarred`.
            public var isStarred: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FileElement/pinnedTo`.
            public var pinnedTo: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FileElement/commentsCount`.
            public var commentsCount: Swift.Int?
            /// Creates a new `FileElement`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created:
            ///   - timestamp:
            ///   - name:
            ///   - title:
            ///   - subject:
            ///   - mimetype:
            ///   - filetype:
            ///   - user:
            ///   - mode:
            ///   - editable:
            ///   - editor:
            ///   - updated:
            ///   - subtype:
            ///   - transcription:
            ///   - mp4:
            ///   - vtt:
            ///   - hls:
            ///   - username:
            ///   - size:
            ///   - deanimate:
            ///   - pjpeg:
            ///   - permalink:
            ///   - preview:
            ///   - lines:
            ///   - channels:
            ///   - groups:
            ///   - ims:
            ///   - shares:
            ///   - to:
            ///   - from:
            ///   - cc:
            ///   - headers:
            ///   - saved:
            ///   - reactions:
            ///   - prettyType:
            ///   - userTeam:
            ///   - sourceTeam:
            ///   - nonOwnerEditable:
            ///   - lastEditor:
            ///   - fileAccess:
            ///   - altTxt:
            ///   - mp4Low:
            ///   - hlsEmbed:
            ///   - durationMs:
            ///   - thumbVideoW:
            ///   - thumbVideoH:
            ///   - originalAttachmentCount:
            ///   - isExternal:
            ///   - externalType:
            ///   - externalId:
            ///   - externalUrl:
            ///   - urlPrivate:
            ///   - urlPrivateDownload:
            ///   - appId:
            ///   - appName:
            ///   - thumb64:
            ///   - thumb64Gif:
            ///   - thumb64W:
            ///   - thumb64H:
            ///   - thumb80:
            ///   - thumb80Gif:
            ///   - thumb80W:
            ///   - thumb80H:
            ///   - thumb160:
            ///   - thumb160Gif:
            ///   - thumb160W:
            ///   - thumb160H:
            ///   - thumb360:
            ///   - thumb360Gif:
            ///   - thumb360W:
            ///   - thumb360H:
            ///   - thumb480:
            ///   - thumb480Gif:
            ///   - thumb480W:
            ///   - thumb480H:
            ///   - thumb720:
            ///   - thumb720Gif:
            ///   - thumb720W:
            ///   - thumb720H:
            ///   - thumb800:
            ///   - thumb800Gif:
            ///   - thumb800W:
            ///   - thumb800H:
            ///   - thumb960:
            ///   - thumb960Gif:
            ///   - thumb960W:
            ///   - thumb960H:
            ///   - thumb1024:
            ///   - thumb1024Gif:
            ///   - thumb1024W:
            ///   - thumb1024H:
            ///   - thumbVideo:
            ///   - thumbGif:
            ///   - thumbPdf:
            ///   - thumbPdfW:
            ///   - thumbPdfH:
            ///   - thumbTiny:
            ///   - convertedPdf:
            ///   - imageExifRotation:
            ///   - originalW:
            ///   - originalH:
            ///   - deanimateGif:
            ///   - permalinkPublic:
            ///   - editLink:
            ///   - hasRichPreview:
            ///   - mediaDisplayType:
            ///   - previewIsTruncated:
            ///   - previewHighlight:
            ///   - plainText:
            ///   - previewPlainText:
            ///   - hasMore:
            ///   - sentToSelf:
            ///   - linesMore:
            ///   - isPublic:
            ///   - publicUrlShared:
            ///   - displayAsBot:
            ///   - hasMoreShares:
            ///   - channelActionsTs:
            ///   - channelActionsCount:
            ///   - simplifiedHtml:
            ///   - mediaProgress:
            ///   - botId:
            ///   - initialComment:
            ///   - numStars:
            ///   - isStarred:
            ///   - pinnedTo:
            ///   - commentsCount:
            public init(
                id: Swift.String? = nil,
                created: Swift.Int? = nil,
                timestamp: Swift.Int? = nil,
                name: Swift.String? = nil,
                title: Swift.String? = nil,
                subject: Swift.String? = nil,
                mimetype: Swift.String? = nil,
                filetype: Swift.String? = nil,
                user: Swift.String? = nil,
                mode: Swift.String? = nil,
                editable: Swift.Bool? = nil,
                editor: Swift.String? = nil,
                updated: Swift.Int? = nil,
                subtype: Swift.String? = nil,
                transcription: Components.Schemas.Transcription? = nil,
                mp4: Swift.String? = nil,
                vtt: Swift.String? = nil,
                hls: Swift.String? = nil,
                username: Swift.String? = nil,
                size: Swift.Int? = nil,
                deanimate: Swift.String? = nil,
                pjpeg: Swift.String? = nil,
                permalink: Swift.String? = nil,
                preview: Swift.String? = nil,
                lines: Swift.Int? = nil,
                channels: [Swift.String]? = nil,
                groups: [Swift.String]? = nil,
                ims: [Swift.String]? = nil,
                shares: Components.Schemas.Shares? = nil,
                to: [Components.Schemas.Cc]? = nil,
                from: [Components.Schemas.Cc]? = nil,
                cc: [Components.Schemas.Cc]? = nil,
                headers: Components.Schemas.Headers? = nil,
                saved: Components.Schemas.Saved? = nil,
                reactions: [Components.Schemas.Reaction]? = nil,
                prettyType: Swift.String? = nil,
                userTeam: Swift.String? = nil,
                sourceTeam: Swift.String? = nil,
                nonOwnerEditable: Swift.Bool? = nil,
                lastEditor: Swift.String? = nil,
                fileAccess: Swift.String? = nil,
                altTxt: Swift.String? = nil,
                mp4Low: Swift.String? = nil,
                hlsEmbed: Swift.String? = nil,
                durationMs: Swift.Int? = nil,
                thumbVideoW: Swift.Int? = nil,
                thumbVideoH: Swift.Int? = nil,
                originalAttachmentCount: Swift.Int? = nil,
                isExternal: Swift.Bool? = nil,
                externalType: Swift.String? = nil,
                externalId: Swift.String? = nil,
                externalUrl: Swift.String? = nil,
                urlPrivate: Swift.String? = nil,
                urlPrivateDownload: Swift.String? = nil,
                appId: Swift.String? = nil,
                appName: Swift.String? = nil,
                thumb64: Swift.String? = nil,
                thumb64Gif: Swift.String? = nil,
                thumb64W: Swift.String? = nil,
                thumb64H: Swift.String? = nil,
                thumb80: Swift.String? = nil,
                thumb80Gif: Swift.String? = nil,
                thumb80W: Swift.String? = nil,
                thumb80H: Swift.String? = nil,
                thumb160: Swift.String? = nil,
                thumb160Gif: Swift.String? = nil,
                thumb160W: Swift.String? = nil,
                thumb160H: Swift.String? = nil,
                thumb360: Swift.String? = nil,
                thumb360Gif: Swift.String? = nil,
                thumb360W: Swift.String? = nil,
                thumb360H: Swift.String? = nil,
                thumb480: Swift.String? = nil,
                thumb480Gif: Swift.String? = nil,
                thumb480W: Swift.String? = nil,
                thumb480H: Swift.String? = nil,
                thumb720: Swift.String? = nil,
                thumb720Gif: Swift.String? = nil,
                thumb720W: Swift.String? = nil,
                thumb720H: Swift.String? = nil,
                thumb800: Swift.String? = nil,
                thumb800Gif: Swift.String? = nil,
                thumb800W: Swift.String? = nil,
                thumb800H: Swift.String? = nil,
                thumb960: Swift.String? = nil,
                thumb960Gif: Swift.String? = nil,
                thumb960W: Swift.String? = nil,
                thumb960H: Swift.String? = nil,
                thumb1024: Swift.String? = nil,
                thumb1024Gif: Swift.String? = nil,
                thumb1024W: Swift.String? = nil,
                thumb1024H: Swift.String? = nil,
                thumbVideo: Swift.String? = nil,
                thumbGif: Swift.String? = nil,
                thumbPdf: Swift.String? = nil,
                thumbPdfW: Swift.String? = nil,
                thumbPdfH: Swift.String? = nil,
                thumbTiny: Swift.String? = nil,
                convertedPdf: Swift.String? = nil,
                imageExifRotation: Swift.Int? = nil,
                originalW: Swift.String? = nil,
                originalH: Swift.String? = nil,
                deanimateGif: Swift.String? = nil,
                permalinkPublic: Swift.String? = nil,
                editLink: Swift.String? = nil,
                hasRichPreview: Swift.Bool? = nil,
                mediaDisplayType: Swift.String? = nil,
                previewIsTruncated: Swift.Bool? = nil,
                previewHighlight: Swift.String? = nil,
                plainText: Swift.String? = nil,
                previewPlainText: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                sentToSelf: Swift.Bool? = nil,
                linesMore: Swift.Int? = nil,
                isPublic: Swift.Bool? = nil,
                publicUrlShared: Swift.Bool? = nil,
                displayAsBot: Swift.Bool? = nil,
                hasMoreShares: Swift.Bool? = nil,
                channelActionsTs: Swift.String? = nil,
                channelActionsCount: Swift.Int? = nil,
                simplifiedHtml: Swift.String? = nil,
                mediaProgress: Components.Schemas.MediaProgress? = nil,
                botId: Swift.String? = nil,
                initialComment: Components.Schemas.Comment? = nil,
                numStars: Swift.Int? = nil,
                isStarred: Swift.Bool? = nil,
                pinnedTo: [Swift.String]? = nil,
                commentsCount: Swift.Int? = nil
            ) {
                self.id = id
                self.created = created
                self.timestamp = timestamp
                self.name = name
                self.title = title
                self.subject = subject
                self.mimetype = mimetype
                self.filetype = filetype
                self.user = user
                self.mode = mode
                self.editable = editable
                self.editor = editor
                self.updated = updated
                self.subtype = subtype
                self.transcription = transcription
                self.mp4 = mp4
                self.vtt = vtt
                self.hls = hls
                self.username = username
                self.size = size
                self.deanimate = deanimate
                self.pjpeg = pjpeg
                self.permalink = permalink
                self.preview = preview
                self.lines = lines
                self.channels = channels
                self.groups = groups
                self.ims = ims
                self.shares = shares
                self.to = to
                self.from = from
                self.cc = cc
                self.headers = headers
                self.saved = saved
                self.reactions = reactions
                self.prettyType = prettyType
                self.userTeam = userTeam
                self.sourceTeam = sourceTeam
                self.nonOwnerEditable = nonOwnerEditable
                self.lastEditor = lastEditor
                self.fileAccess = fileAccess
                self.altTxt = altTxt
                self.mp4Low = mp4Low
                self.hlsEmbed = hlsEmbed
                self.durationMs = durationMs
                self.thumbVideoW = thumbVideoW
                self.thumbVideoH = thumbVideoH
                self.originalAttachmentCount = originalAttachmentCount
                self.isExternal = isExternal
                self.externalType = externalType
                self.externalId = externalId
                self.externalUrl = externalUrl
                self.urlPrivate = urlPrivate
                self.urlPrivateDownload = urlPrivateDownload
                self.appId = appId
                self.appName = appName
                self.thumb64 = thumb64
                self.thumb64Gif = thumb64Gif
                self.thumb64W = thumb64W
                self.thumb64H = thumb64H
                self.thumb80 = thumb80
                self.thumb80Gif = thumb80Gif
                self.thumb80W = thumb80W
                self.thumb80H = thumb80H
                self.thumb160 = thumb160
                self.thumb160Gif = thumb160Gif
                self.thumb160W = thumb160W
                self.thumb160H = thumb160H
                self.thumb360 = thumb360
                self.thumb360Gif = thumb360Gif
                self.thumb360W = thumb360W
                self.thumb360H = thumb360H
                self.thumb480 = thumb480
                self.thumb480Gif = thumb480Gif
                self.thumb480W = thumb480W
                self.thumb480H = thumb480H
                self.thumb720 = thumb720
                self.thumb720Gif = thumb720Gif
                self.thumb720W = thumb720W
                self.thumb720H = thumb720H
                self.thumb800 = thumb800
                self.thumb800Gif = thumb800Gif
                self.thumb800W = thumb800W
                self.thumb800H = thumb800H
                self.thumb960 = thumb960
                self.thumb960Gif = thumb960Gif
                self.thumb960W = thumb960W
                self.thumb960H = thumb960H
                self.thumb1024 = thumb1024
                self.thumb1024Gif = thumb1024Gif
                self.thumb1024W = thumb1024W
                self.thumb1024H = thumb1024H
                self.thumbVideo = thumbVideo
                self.thumbGif = thumbGif
                self.thumbPdf = thumbPdf
                self.thumbPdfW = thumbPdfW
                self.thumbPdfH = thumbPdfH
                self.thumbTiny = thumbTiny
                self.convertedPdf = convertedPdf
                self.imageExifRotation = imageExifRotation
                self.originalW = originalW
                self.originalH = originalH
                self.deanimateGif = deanimateGif
                self.permalinkPublic = permalinkPublic
                self.editLink = editLink
                self.hasRichPreview = hasRichPreview
                self.mediaDisplayType = mediaDisplayType
                self.previewIsTruncated = previewIsTruncated
                self.previewHighlight = previewHighlight
                self.plainText = plainText
                self.previewPlainText = previewPlainText
                self.hasMore = hasMore
                self.sentToSelf = sentToSelf
                self.linesMore = linesMore
                self.isPublic = isPublic
                self.publicUrlShared = publicUrlShared
                self.displayAsBot = displayAsBot
                self.hasMoreShares = hasMoreShares
                self.channelActionsTs = channelActionsTs
                self.channelActionsCount = channelActionsCount
                self.simplifiedHtml = simplifiedHtml
                self.mediaProgress = mediaProgress
                self.botId = botId
                self.initialComment = initialComment
                self.numStars = numStars
                self.isStarred = isStarred
                self.pinnedTo = pinnedTo
                self.commentsCount = commentsCount
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case timestamp
                case name
                case title
                case subject
                case mimetype
                case filetype
                case user
                case mode
                case editable
                case editor
                case updated
                case subtype
                case transcription
                case mp4
                case vtt
                case hls
                case username
                case size
                case deanimate
                case pjpeg
                case permalink
                case preview
                case lines
                case channels
                case groups
                case ims
                case shares
                case to
                case from
                case cc
                case headers
                case saved
                case reactions
                case prettyType
                case userTeam
                case sourceTeam
                case nonOwnerEditable
                case lastEditor
                case fileAccess
                case altTxt
                case mp4Low
                case hlsEmbed
                case durationMs
                case thumbVideoW
                case thumbVideoH
                case originalAttachmentCount
                case isExternal
                case externalType
                case externalId
                case externalUrl
                case urlPrivate
                case urlPrivateDownload
                case appId
                case appName
                case thumb64
                case thumb64Gif
                case thumb64W
                case thumb64H
                case thumb80
                case thumb80Gif
                case thumb80W
                case thumb80H
                case thumb160
                case thumb160Gif
                case thumb160W
                case thumb160H
                case thumb360
                case thumb360Gif
                case thumb360W
                case thumb360H
                case thumb480
                case thumb480Gif
                case thumb480W
                case thumb480H
                case thumb720
                case thumb720Gif
                case thumb720W
                case thumb720H
                case thumb800
                case thumb800Gif
                case thumb800W
                case thumb800H
                case thumb960
                case thumb960Gif
                case thumb960W
                case thumb960H
                case thumb1024
                case thumb1024Gif
                case thumb1024W
                case thumb1024H
                case thumbVideo
                case thumbGif
                case thumbPdf
                case thumbPdfW
                case thumbPdfH
                case thumbTiny
                case convertedPdf
                case imageExifRotation
                case originalW
                case originalH
                case deanimateGif
                case permalinkPublic
                case editLink
                case hasRichPreview
                case mediaDisplayType
                case previewIsTruncated
                case previewHighlight
                case plainText
                case previewPlainText
                case hasMore
                case sentToSelf
                case linesMore
                case isPublic
                case publicUrlShared
                case displayAsBot
                case hasMoreShares
                case channelActionsTs
                case channelActionsCount
                case simplifiedHtml
                case mediaProgress
                case botId
                case initialComment
                case numStars
                case isStarred
                case pinnedTo
                case commentsCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/List`.
        public struct List: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/List/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/List/timestamp`.
            public var timestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/List/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/mimetype`.
            public var mimetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/filetype`.
            public var filetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/editable`.
            public var editable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/List/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/List/mode`.
            public var mode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/List/shares`.
            public var shares: Components.Schemas.ListShares?
            /// - Remark: Generated from `#/components/schemas/List/channels`.
            public var channels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/List/groups`.
            public var groups: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/List/ims`.
            public var ims: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/List/externalType`.
            public var externalType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/prettyType`.
            public var prettyType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/userTeam`.
            public var userTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/isExternal`.
            public var isExternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/List/isPublic`.
            public var isPublic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/List/publicUrlShared`.
            public var publicUrlShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/List/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/List/listMetadata`.
            public var listMetadata: Components.Schemas.ListMetadata?
            /// - Remark: Generated from `#/components/schemas/List/listLimits`.
            public var listLimits: Components.Schemas.ListLimits?
            /// - Remark: Generated from `#/components/schemas/List/urlPrivate`.
            public var urlPrivate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/urlPrivateDownload`.
            public var urlPrivateDownload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/permalinkPublic`.
            public var permalinkPublic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/lastEditor`.
            public var lastEditor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/List/commentsCount`.
            public var commentsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/List/hasMoreShares`.
            public var hasMoreShares: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/List/privateChannelsWithFileAccessCount`.
            public var privateChannelsWithFileAccessCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/List/privateFileWithAccessCount`.
            public var privateFileWithAccessCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/List/dmMpdmUsersWithFileAccess`.
            public var dmMpdmUsersWithFileAccess: [Components.Schemas.DmMpdmUsersWithFileAccess]?
            /// - Remark: Generated from `#/components/schemas/List/hasRichPreview`.
            public var hasRichPreview: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/List/fileAccess`.
            public var fileAccess: Swift.String?
            /// Creates a new `List`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created:
            ///   - timestamp:
            ///   - name:
            ///   - title:
            ///   - mimetype:
            ///   - filetype:
            ///   - user:
            ///   - editable:
            ///   - size:
            ///   - mode:
            ///   - username:
            ///   - permalink:
            ///   - updated:
            ///   - shares:
            ///   - channels:
            ///   - groups:
            ///   - ims:
            ///   - externalType:
            ///   - prettyType:
            ///   - userTeam:
            ///   - isExternal:
            ///   - isPublic:
            ///   - publicUrlShared:
            ///   - displayAsBot:
            ///   - listMetadata:
            ///   - listLimits:
            ///   - urlPrivate:
            ///   - urlPrivateDownload:
            ///   - permalinkPublic:
            ///   - lastEditor:
            ///   - commentsCount:
            ///   - hasMoreShares:
            ///   - privateChannelsWithFileAccessCount:
            ///   - privateFileWithAccessCount:
            ///   - dmMpdmUsersWithFileAccess:
            ///   - hasRichPreview:
            ///   - fileAccess:
            public init(
                id: Swift.String? = nil,
                created: Swift.Int? = nil,
                timestamp: Swift.Int? = nil,
                name: Swift.String? = nil,
                title: Swift.String? = nil,
                mimetype: Swift.String? = nil,
                filetype: Swift.String? = nil,
                user: Swift.String? = nil,
                editable: Swift.Bool? = nil,
                size: Swift.Int? = nil,
                mode: Swift.String? = nil,
                username: Swift.String? = nil,
                permalink: Swift.String? = nil,
                updated: Swift.Int? = nil,
                shares: Components.Schemas.ListShares? = nil,
                channels: [Swift.String]? = nil,
                groups: [Swift.String]? = nil,
                ims: [Swift.String]? = nil,
                externalType: Swift.String? = nil,
                prettyType: Swift.String? = nil,
                userTeam: Swift.String? = nil,
                isExternal: Swift.Bool? = nil,
                isPublic: Swift.Bool? = nil,
                publicUrlShared: Swift.Bool? = nil,
                displayAsBot: Swift.Bool? = nil,
                listMetadata: Components.Schemas.ListMetadata? = nil,
                listLimits: Components.Schemas.ListLimits? = nil,
                urlPrivate: Swift.String? = nil,
                urlPrivateDownload: Swift.String? = nil,
                permalinkPublic: Swift.String? = nil,
                lastEditor: Swift.String? = nil,
                commentsCount: Swift.Int? = nil,
                hasMoreShares: Swift.Bool? = nil,
                privateChannelsWithFileAccessCount: Swift.Int? = nil,
                privateFileWithAccessCount: Swift.Int? = nil,
                dmMpdmUsersWithFileAccess: [Components.Schemas.DmMpdmUsersWithFileAccess]? = nil,
                hasRichPreview: Swift.Bool? = nil,
                fileAccess: Swift.String? = nil
            ) {
                self.id = id
                self.created = created
                self.timestamp = timestamp
                self.name = name
                self.title = title
                self.mimetype = mimetype
                self.filetype = filetype
                self.user = user
                self.editable = editable
                self.size = size
                self.mode = mode
                self.username = username
                self.permalink = permalink
                self.updated = updated
                self.shares = shares
                self.channels = channels
                self.groups = groups
                self.ims = ims
                self.externalType = externalType
                self.prettyType = prettyType
                self.userTeam = userTeam
                self.isExternal = isExternal
                self.isPublic = isPublic
                self.publicUrlShared = publicUrlShared
                self.displayAsBot = displayAsBot
                self.listMetadata = listMetadata
                self.listLimits = listLimits
                self.urlPrivate = urlPrivate
                self.urlPrivateDownload = urlPrivateDownload
                self.permalinkPublic = permalinkPublic
                self.lastEditor = lastEditor
                self.commentsCount = commentsCount
                self.hasMoreShares = hasMoreShares
                self.privateChannelsWithFileAccessCount = privateChannelsWithFileAccessCount
                self.privateFileWithAccessCount = privateFileWithAccessCount
                self.dmMpdmUsersWithFileAccess = dmMpdmUsersWithFileAccess
                self.hasRichPreview = hasRichPreview
                self.fileAccess = fileAccess
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case timestamp
                case name
                case title
                case mimetype
                case filetype
                case user
                case editable
                case size
                case mode
                case username
                case permalink
                case updated
                case shares
                case channels
                case groups
                case ims
                case externalType
                case prettyType
                case userTeam
                case isExternal
                case isPublic
                case publicUrlShared
                case displayAsBot
                case listMetadata
                case listLimits
                case urlPrivate
                case urlPrivateDownload
                case permalinkPublic
                case lastEditor
                case commentsCount
                case hasMoreShares
                case privateChannelsWithFileAccessCount
                case privateFileWithAccessCount
                case dmMpdmUsersWithFileAccess
                case hasRichPreview
                case fileAccess
            }
        }
        /// - Remark: Generated from `#/components/schemas/EventPayload`.
        public typealias EventPayload = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/PurpleListRecord`.
        public struct PurpleListRecord: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PurpleListRecord/record`.
            public var record: Components.Schemas.Record?
            /// - Remark: Generated from `#/components/schemas/PurpleListRecord/schema`.
            public var schema: [Components.Schemas.Schema]?
            /// Creates a new `PurpleListRecord`.
            ///
            /// - Parameters:
            ///   - record:
            ///   - schema:
            public init(
                record: Components.Schemas.Record? = nil,
                schema: [Components.Schemas.Schema]? = nil
            ) {
                self.record = record
                self.schema = schema
            }
            public enum CodingKeys: String, CodingKey {
                case record
                case schema
            }
        }
        /// - Remark: Generated from `#/components/schemas/Record`.
        public struct Record: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Record/fields`.
            public var fields: [Components.Schemas.RecordField]?
            /// - Remark: Generated from `#/components/schemas/Record/recordId`.
            public var recordId: Swift.String?
            /// Creates a new `Record`.
            ///
            /// - Parameters:
            ///   - fields:
            ///   - recordId:
            public init(
                fields: [Components.Schemas.RecordField]? = nil,
                recordId: Swift.String? = nil
            ) {
                self.fields = fields
                self.recordId = recordId
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case recordId
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecordField`.
        public struct RecordField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecordField/key`.
            public var key: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RecordField/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RecordField/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RecordField/message`.
            public var message: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/RecordField/number`.
            public var number: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/RecordField/select`.
            public var select: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/RecordField/date`.
            public var date: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/RecordField/user`.
            public var user: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/RecordField/attachment`.
            public var attachment: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/RecordField/checkbox`.
            public var checkbox: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/RecordField/email`.
            public var email: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/RecordField/phone`.
            public var phone: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/RecordField/channel`.
            public var channel: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/RecordField/rating`.
            public var rating: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/RecordField/timestamp`.
            public var timestamp: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/RecordField/columnId`.
            public var columnId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RecordField/richText`.
            public var richText: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// Creates a new `RecordField`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - text:
            ///   - message:
            ///   - number:
            ///   - select:
            ///   - date:
            ///   - user:
            ///   - attachment:
            ///   - checkbox:
            ///   - email:
            ///   - phone:
            ///   - channel:
            ///   - rating:
            ///   - timestamp:
            ///   - columnId:
            ///   - richText:
            public init(
                key: Swift.String? = nil,
                value: Swift.String? = nil,
                text: Swift.String? = nil,
                message: Components.Schemas.Message? = nil,
                number: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                select: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                date: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                user: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                attachment: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                checkbox: Swift.Bool? = nil,
                email: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                phone: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                channel: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                rating: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                timestamp: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                columnId: Swift.String? = nil,
                richText: [OpenAPIRuntime.OpenAPIValueContainer]? = nil
            ) {
                self.key = key
                self.value = value
                self.text = text
                self.message = message
                self.number = number
                self.select = select
                self.date = date
                self.user = user
                self.attachment = attachment
                self.checkbox = checkbox
                self.email = email
                self.phone = phone
                self.channel = channel
                self.rating = rating
                self.timestamp = timestamp
                self.columnId = columnId
                self.richText = richText
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case text
                case message
                case number
                case select
                case date
                case user
                case attachment
                case checkbox
                case email
                case phone
                case channel
                case rating
                case timestamp
                case columnId
                case richText
            }
        }
        /// - Remark: Generated from `#/components/schemas/FieldMessage`.
        public struct FieldMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FieldMessage/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/blocks`.
            public var blocks: [Components.Schemas.DescriptionBlockElement]?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/attachments`.
            public var attachments: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/wibblr`.
            public var wibblr: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/reactions`.
            public var reactions: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/icons`.
            public var icons: Components.Schemas.RootIcons?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/file`.
            public var file: Components.Schemas.PurpleFile?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/files`.
            public var files: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/upload`.
            public var upload: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/inviter`.
            public var inviter: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/comment`.
            public var comment: Components.Schemas.Comment?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/topic`.
            public var topic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/purpose`.
            public var purpose: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/edited`.
            public var edited: Components.Schemas.Edited?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/replies`.
            public var replies: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/subscribed`.
            public var subscribed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/hidden`.
            public var hidden: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/root`.
            public var root: Components.Schemas.Root?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/item`.
            public var item: Components.Schemas.Comment?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/metadata`.
            public var metadata: Components.Schemas.MessageMetadata?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/room`.
            public var room: Components.Schemas.Room?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/isIntro`.
            public var isIntro: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/isStarred`.
            public var isStarred: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/pinnedTo`.
            public var pinnedTo: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/botLink`.
            public var botLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/botProfile`.
            public var botProfile: Components.Schemas.BotProfile?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/parentUserId`.
            public var parentUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/clientMsgId`.
            public var clientMsgId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/unfurlLinks`.
            public var unfurlLinks: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/unfurlMedia`.
            public var unfurlMedia: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/isThreadBroadcast`.
            public var isThreadBroadcast: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/isLocked`.
            public var isLocked: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/replyCount`.
            public var replyCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/replyUsers`.
            public var replyUsers: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/replyUsersCount`.
            public var replyUsersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/latestReply`.
            public var latestReply: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/xFiles`.
            public var xFiles: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/lastRead`.
            public var lastRead: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/itemType`.
            public var itemType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/noNotifications`.
            public var noNotifications: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FieldMessage/assistantAppThread`.
            public var assistantAppThread: Components.Schemas.AssistantAppThread?
            /// Creates a new `FieldMessage`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - subtype:
            ///   - team:
            ///   - channel:
            ///   - user:
            ///   - username:
            ///   - text:
            ///   - blocks:
            ///   - attachments:
            ///   - ts:
            ///   - wibblr:
            ///   - reactions:
            ///   - icons:
            ///   - file:
            ///   - files:
            ///   - upload:
            ///   - inviter:
            ///   - comment:
            ///   - topic:
            ///   - purpose:
            ///   - edited:
            ///   - replies:
            ///   - subscribed:
            ///   - hidden:
            ///   - root:
            ///   - item:
            ///   - metadata:
            ///   - room:
            ///   - threadTs:
            ///   - isIntro:
            ///   - isStarred:
            ///   - pinnedTo:
            ///   - appId:
            ///   - botId:
            ///   - botLink:
            ///   - displayAsBot:
            ///   - botProfile:
            ///   - parentUserId:
            ///   - clientMsgId:
            ///   - unfurlLinks:
            ///   - unfurlMedia:
            ///   - isThreadBroadcast:
            ///   - isLocked:
            ///   - replyCount:
            ///   - replyUsers:
            ///   - replyUsersCount:
            ///   - latestReply:
            ///   - xFiles:
            ///   - lastRead:
            ///   - itemType:
            ///   - noNotifications:
            ///   - assistantAppThread:
            public init(
                _type: Swift.String? = nil,
                subtype: Swift.String? = nil,
                team: Swift.String? = nil,
                channel: Swift.String? = nil,
                user: Swift.String? = nil,
                username: Swift.String? = nil,
                text: Swift.String? = nil,
                blocks: [Components.Schemas.DescriptionBlockElement]? = nil,
                attachments: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                ts: Swift.String? = nil,
                wibblr: Swift.Bool? = nil,
                reactions: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                icons: Components.Schemas.RootIcons? = nil,
                file: Components.Schemas.PurpleFile? = nil,
                files: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                upload: Swift.Bool? = nil,
                inviter: Swift.String? = nil,
                comment: Components.Schemas.Comment? = nil,
                topic: Swift.String? = nil,
                purpose: Swift.String? = nil,
                edited: Components.Schemas.Edited? = nil,
                replies: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                subscribed: Swift.Bool? = nil,
                hidden: Swift.Bool? = nil,
                root: Components.Schemas.Root? = nil,
                item: Components.Schemas.Comment? = nil,
                metadata: Components.Schemas.MessageMetadata? = nil,
                room: Components.Schemas.Room? = nil,
                threadTs: Swift.String? = nil,
                isIntro: Swift.Bool? = nil,
                isStarred: Swift.Bool? = nil,
                pinnedTo: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                appId: Swift.String? = nil,
                botId: Swift.String? = nil,
                botLink: Swift.String? = nil,
                displayAsBot: Swift.Bool? = nil,
                botProfile: Components.Schemas.BotProfile? = nil,
                parentUserId: Swift.String? = nil,
                clientMsgId: Swift.String? = nil,
                unfurlLinks: Swift.Bool? = nil,
                unfurlMedia: Swift.Bool? = nil,
                isThreadBroadcast: Swift.Bool? = nil,
                isLocked: Swift.Bool? = nil,
                replyCount: Swift.Int? = nil,
                replyUsers: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                replyUsersCount: Swift.Int? = nil,
                latestReply: Swift.String? = nil,
                xFiles: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                lastRead: Swift.String? = nil,
                itemType: Swift.String? = nil,
                noNotifications: Swift.Bool? = nil,
                assistantAppThread: Components.Schemas.AssistantAppThread? = nil
            ) {
                self._type = _type
                self.subtype = subtype
                self.team = team
                self.channel = channel
                self.user = user
                self.username = username
                self.text = text
                self.blocks = blocks
                self.attachments = attachments
                self.ts = ts
                self.wibblr = wibblr
                self.reactions = reactions
                self.icons = icons
                self.file = file
                self.files = files
                self.upload = upload
                self.inviter = inviter
                self.comment = comment
                self.topic = topic
                self.purpose = purpose
                self.edited = edited
                self.replies = replies
                self.subscribed = subscribed
                self.hidden = hidden
                self.root = root
                self.item = item
                self.metadata = metadata
                self.room = room
                self.threadTs = threadTs
                self.isIntro = isIntro
                self.isStarred = isStarred
                self.pinnedTo = pinnedTo
                self.appId = appId
                self.botId = botId
                self.botLink = botLink
                self.displayAsBot = displayAsBot
                self.botProfile = botProfile
                self.parentUserId = parentUserId
                self.clientMsgId = clientMsgId
                self.unfurlLinks = unfurlLinks
                self.unfurlMedia = unfurlMedia
                self.isThreadBroadcast = isThreadBroadcast
                self.isLocked = isLocked
                self.replyCount = replyCount
                self.replyUsers = replyUsers
                self.replyUsersCount = replyUsersCount
                self.latestReply = latestReply
                self.xFiles = xFiles
                self.lastRead = lastRead
                self.itemType = itemType
                self.noNotifications = noNotifications
                self.assistantAppThread = assistantAppThread
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case subtype
                case team
                case channel
                case user
                case username
                case text
                case blocks
                case attachments
                case ts
                case wibblr
                case reactions
                case icons
                case file
                case files
                case upload
                case inviter
                case comment
                case topic
                case purpose
                case edited
                case replies
                case subscribed
                case hidden
                case root
                case item
                case metadata
                case room
                case threadTs
                case isIntro
                case isStarred
                case pinnedTo
                case appId
                case botId
                case botLink
                case displayAsBot
                case botProfile
                case parentUserId
                case clientMsgId
                case unfurlLinks
                case unfurlMedia
                case isThreadBroadcast
                case isLocked
                case replyCount
                case replyUsers
                case replyUsersCount
                case latestReply
                case xFiles
                case lastRead
                case itemType
                case noNotifications
                case assistantAppThread
            }
        }
        /// - Remark: Generated from `#/components/schemas/Comment`.
        public struct Comment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Comment/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Comment/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Comment/timestamp`.
            public var timestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Comment/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Comment/comment`.
            public var comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Comment/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Comment/isIntro`.
            public var isIntro: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Comment/numStars`.
            public var numStars: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Comment/isStarred`.
            public var isStarred: Swift.Bool?
            /// Creates a new `Comment`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created:
            ///   - timestamp:
            ///   - user:
            ///   - comment:
            ///   - channel:
            ///   - isIntro:
            ///   - numStars:
            ///   - isStarred:
            public init(
                id: Swift.String? = nil,
                created: Swift.Int? = nil,
                timestamp: Swift.Int? = nil,
                user: Swift.String? = nil,
                comment: Swift.String? = nil,
                channel: Swift.String? = nil,
                isIntro: Swift.Bool? = nil,
                numStars: Swift.Int? = nil,
                isStarred: Swift.Bool? = nil
            ) {
                self.id = id
                self.created = created
                self.timestamp = timestamp
                self.user = user
                self.comment = comment
                self.channel = channel
                self.isIntro = isIntro
                self.numStars = numStars
                self.isStarred = isStarred
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case timestamp
                case user
                case comment
                case channel
                case isIntro
                case numStars
                case isStarred
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessageFile`.
        public struct MessageFile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MessageFile/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/timestamp`.
            public var timestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/subject`.
            public var subject: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/mimetype`.
            public var mimetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/filetype`.
            public var filetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/mode`.
            public var mode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/editable`.
            public var editable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/editor`.
            public var editor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/editors`.
            public var editors: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/transcription`.
            public var transcription: Components.Schemas.Transcription?
            /// - Remark: Generated from `#/components/schemas/MessageFile/mp4`.
            public var mp4: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/vtt`.
            public var vtt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/hls`.
            public var hls: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/deanimate`.
            public var deanimate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/pjpeg`.
            public var pjpeg: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/preview`.
            public var preview: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/lines`.
            public var lines: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/channels`.
            public var channels: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/groups`.
            public var groups: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/ims`.
            public var ims: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/shares`.
            public var shares: Components.Schemas.ListShares?
            /// - Remark: Generated from `#/components/schemas/MessageFile/to`.
            public var to: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/from`.
            public var from: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/cc`.
            public var cc: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/headers`.
            public var headers: Components.Schemas.Headers?
            /// - Remark: Generated from `#/components/schemas/MessageFile/saved`.
            public var saved: Components.Schemas.Saved?
            /// - Remark: Generated from `#/components/schemas/MessageFile/access`.
            public var access: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/favorites`.
            public var favorites: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/reactions`.
            public var reactions: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/attachments`.
            public var attachments: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/blocks`.
            public var blocks: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/prettyType`.
            public var prettyType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/userTeam`.
            public var userTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/sourceTeam`.
            public var sourceTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/nonOwnerEditable`.
            public var nonOwnerEditable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/lastEditor`.
            public var lastEditor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/fileAccess`.
            public var fileAccess: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/editTimestamp`.
            public var editTimestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/altTxt`.
            public var altTxt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/mp4Low`.
            public var mp4Low: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/hlsEmbed`.
            public var hlsEmbed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/durationMs`.
            public var durationMs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumbVideoW`.
            public var thumbVideoW: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumbVideoH`.
            public var thumbVideoH: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/originalAttachmentCount`.
            public var originalAttachmentCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/isExternal`.
            public var isExternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/externalType`.
            public var externalType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/externalUrl`.
            public var externalUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/urlPrivate`.
            public var urlPrivate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/urlPrivateDownload`.
            public var urlPrivateDownload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/urlStaticPreview`.
            public var urlStaticPreview: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/appName`.
            public var appName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb64`.
            public var thumb64: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb64Gif`.
            public var thumb64Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb64W`.
            public var thumb64W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb64H`.
            public var thumb64H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb80`.
            public var thumb80: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb80Gif`.
            public var thumb80Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb80W`.
            public var thumb80W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb80H`.
            public var thumb80H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb160`.
            public var thumb160: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb160Gif`.
            public var thumb160Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb160W`.
            public var thumb160W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb160H`.
            public var thumb160H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb360`.
            public var thumb360: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb360Gif`.
            public var thumb360Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb360W`.
            public var thumb360W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb360H`.
            public var thumb360H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb480`.
            public var thumb480: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb480Gif`.
            public var thumb480Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb480W`.
            public var thumb480W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb480H`.
            public var thumb480H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb720`.
            public var thumb720: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb720Gif`.
            public var thumb720Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb720W`.
            public var thumb720W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb720H`.
            public var thumb720H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb800`.
            public var thumb800: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb800Gif`.
            public var thumb800Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb800W`.
            public var thumb800W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb800H`.
            public var thumb800H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb960`.
            public var thumb960: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb960Gif`.
            public var thumb960Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb960W`.
            public var thumb960W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb960H`.
            public var thumb960H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb1024`.
            public var thumb1024: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb1024Gif`.
            public var thumb1024Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb1024W`.
            public var thumb1024W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumb1024H`.
            public var thumb1024H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumbVideo`.
            public var thumbVideo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumbGif`.
            public var thumbGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumbPdf`.
            public var thumbPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumbPdfW`.
            public var thumbPdfW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumbPdfH`.
            public var thumbPdfH: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/thumbTiny`.
            public var thumbTiny: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/convertedPdf`.
            public var convertedPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/imageExifRotation`.
            public var imageExifRotation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/originalW`.
            public var originalW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/originalH`.
            public var originalH: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/deanimateGif`.
            public var deanimateGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/permalinkPublic`.
            public var permalinkPublic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/editLink`.
            public var editLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/hasRichPreview`.
            public var hasRichPreview: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/mediaDisplayType`.
            public var mediaDisplayType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/previewIsTruncated`.
            public var previewIsTruncated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/previewHighlight`.
            public var previewHighlight: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/plainText`.
            public var plainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/previewPlainText`.
            public var previewPlainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/sentToSelf`.
            public var sentToSelf: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/linesMore`.
            public var linesMore: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/isPublic`.
            public var isPublic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/publicUrlShared`.
            public var publicUrlShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/hasMoreShares`.
            public var hasMoreShares: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/channelActionsTs`.
            public var channelActionsTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/channelActionsCount`.
            public var channelActionsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/simplifiedHtml`.
            public var simplifiedHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/mediaProgress`.
            public var mediaProgress: Components.Schemas.MediaProgress?
            /// - Remark: Generated from `#/components/schemas/MessageFile/quipThreadId`.
            public var quipThreadId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/isChannelSpace`.
            public var isChannelSpace: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/linkedChannelId`.
            public var linkedChannelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/teamsSharedWith`.
            public var teamsSharedWith: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/lastRead`.
            public var lastRead: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/titleBlocks`.
            public var titleBlocks: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/privateChannelsWithFileAccessCount`.
            public var privateChannelsWithFileAccessCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/privateFileWithAccessCount`.
            public var privateFileWithAccessCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/dmMpdmUsersWithFileAccess`.
            public var dmMpdmUsersWithFileAccess: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/orgOrWorkspaceAccess`.
            public var orgOrWorkspaceAccess: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/updateNotification`.
            public var updateNotification: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/canvasTemplateMode`.
            public var canvasTemplateMode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/templateConversionTs`.
            public var templateConversionTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/templateName`.
            public var templateName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/templateTitle`.
            public var templateTitle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/templateDescription`.
            public var templateDescription: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/templateIcon`.
            public var templateIcon: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/teamPrefVersionHistoryEnabled`.
            public var teamPrefVersionHistoryEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/showBadge`.
            public var showBadge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/listMetadata`.
            public var listMetadata: Components.Schemas.ListMetadata?
            /// - Remark: Generated from `#/components/schemas/MessageFile/listLimits`.
            public var listLimits: Components.Schemas.ListLimits?
            /// - Remark: Generated from `#/components/schemas/MessageFile/listCsvDownloadUrl`.
            public var listCsvDownloadUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/canToggleCanvasLock`.
            public var canToggleCanvasLock: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/isRestrictedSharingEnabled`.
            public var isRestrictedSharingEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/canvasPrintingEnabled`.
            public var canvasPrintingEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageFile/initialComment`.
            public var initialComment: Components.Schemas.InitialComment?
            /// - Remark: Generated from `#/components/schemas/MessageFile/numStars`.
            public var numStars: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageFile/isStarred`.
            public var isStarred: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageFile/pinnedTo`.
            public var pinnedTo: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/MessageFile/commentsCount`.
            public var commentsCount: Swift.Int?
            /// Creates a new `MessageFile`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created:
            ///   - timestamp:
            ///   - name:
            ///   - title:
            ///   - subject:
            ///   - mimetype:
            ///   - filetype:
            ///   - user:
            ///   - mode:
            ///   - editable:
            ///   - editor:
            ///   - updated:
            ///   - editors:
            ///   - subtype:
            ///   - transcription:
            ///   - mp4:
            ///   - vtt:
            ///   - hls:
            ///   - username:
            ///   - size:
            ///   - deanimate:
            ///   - pjpeg:
            ///   - permalink:
            ///   - preview:
            ///   - lines:
            ///   - channels:
            ///   - groups:
            ///   - ims:
            ///   - shares:
            ///   - to:
            ///   - from:
            ///   - cc:
            ///   - headers:
            ///   - saved:
            ///   - access:
            ///   - favorites:
            ///   - reactions:
            ///   - attachments:
            ///   - blocks:
            ///   - prettyType:
            ///   - userTeam:
            ///   - sourceTeam:
            ///   - nonOwnerEditable:
            ///   - lastEditor:
            ///   - fileAccess:
            ///   - editTimestamp:
            ///   - altTxt:
            ///   - mp4Low:
            ///   - hlsEmbed:
            ///   - durationMs:
            ///   - thumbVideoW:
            ///   - thumbVideoH:
            ///   - originalAttachmentCount:
            ///   - isExternal:
            ///   - externalType:
            ///   - externalId:
            ///   - externalUrl:
            ///   - urlPrivate:
            ///   - urlPrivateDownload:
            ///   - urlStaticPreview:
            ///   - appId:
            ///   - appName:
            ///   - thumb64:
            ///   - thumb64Gif:
            ///   - thumb64W:
            ///   - thumb64H:
            ///   - thumb80:
            ///   - thumb80Gif:
            ///   - thumb80W:
            ///   - thumb80H:
            ///   - thumb160:
            ///   - thumb160Gif:
            ///   - thumb160W:
            ///   - thumb160H:
            ///   - thumb360:
            ///   - thumb360Gif:
            ///   - thumb360W:
            ///   - thumb360H:
            ///   - thumb480:
            ///   - thumb480Gif:
            ///   - thumb480W:
            ///   - thumb480H:
            ///   - thumb720:
            ///   - thumb720Gif:
            ///   - thumb720W:
            ///   - thumb720H:
            ///   - thumb800:
            ///   - thumb800Gif:
            ///   - thumb800W:
            ///   - thumb800H:
            ///   - thumb960:
            ///   - thumb960Gif:
            ///   - thumb960W:
            ///   - thumb960H:
            ///   - thumb1024:
            ///   - thumb1024Gif:
            ///   - thumb1024W:
            ///   - thumb1024H:
            ///   - thumbVideo:
            ///   - thumbGif:
            ///   - thumbPdf:
            ///   - thumbPdfW:
            ///   - thumbPdfH:
            ///   - thumbTiny:
            ///   - convertedPdf:
            ///   - imageExifRotation:
            ///   - originalW:
            ///   - originalH:
            ///   - deanimateGif:
            ///   - permalinkPublic:
            ///   - editLink:
            ///   - hasRichPreview:
            ///   - mediaDisplayType:
            ///   - previewIsTruncated:
            ///   - previewHighlight:
            ///   - plainText:
            ///   - previewPlainText:
            ///   - hasMore:
            ///   - sentToSelf:
            ///   - linesMore:
            ///   - isPublic:
            ///   - publicUrlShared:
            ///   - displayAsBot:
            ///   - hasMoreShares:
            ///   - channelActionsTs:
            ///   - channelActionsCount:
            ///   - simplifiedHtml:
            ///   - mediaProgress:
            ///   - quipThreadId:
            ///   - isChannelSpace:
            ///   - linkedChannelId:
            ///   - teamsSharedWith:
            ///   - lastRead:
            ///   - titleBlocks:
            ///   - privateChannelsWithFileAccessCount:
            ///   - privateFileWithAccessCount:
            ///   - dmMpdmUsersWithFileAccess:
            ///   - orgOrWorkspaceAccess:
            ///   - updateNotification:
            ///   - canvasTemplateMode:
            ///   - templateConversionTs:
            ///   - templateName:
            ///   - templateTitle:
            ///   - templateDescription:
            ///   - templateIcon:
            ///   - teamPrefVersionHistoryEnabled:
            ///   - showBadge:
            ///   - listMetadata:
            ///   - listLimits:
            ///   - listCsvDownloadUrl:
            ///   - canToggleCanvasLock:
            ///   - isRestrictedSharingEnabled:
            ///   - canvasPrintingEnabled:
            ///   - botId:
            ///   - initialComment:
            ///   - numStars:
            ///   - isStarred:
            ///   - pinnedTo:
            ///   - commentsCount:
            public init(
                id: Swift.String? = nil,
                created: Swift.Int? = nil,
                timestamp: Swift.Int? = nil,
                name: Swift.String? = nil,
                title: Swift.String? = nil,
                subject: Swift.String? = nil,
                mimetype: Swift.String? = nil,
                filetype: Swift.String? = nil,
                user: Swift.String? = nil,
                mode: Swift.String? = nil,
                editable: Swift.Bool? = nil,
                editor: Swift.String? = nil,
                updated: Swift.Int? = nil,
                editors: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                subtype: Swift.String? = nil,
                transcription: Components.Schemas.Transcription? = nil,
                mp4: Swift.String? = nil,
                vtt: Swift.String? = nil,
                hls: Swift.String? = nil,
                username: Swift.String? = nil,
                size: Swift.Int? = nil,
                deanimate: Swift.String? = nil,
                pjpeg: Swift.String? = nil,
                permalink: Swift.String? = nil,
                preview: Swift.String? = nil,
                lines: Swift.Int? = nil,
                channels: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                groups: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                ims: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                shares: Components.Schemas.ListShares? = nil,
                to: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                from: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                cc: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                headers: Components.Schemas.Headers? = nil,
                saved: Components.Schemas.Saved? = nil,
                access: Swift.String? = nil,
                favorites: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                reactions: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                attachments: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                blocks: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                prettyType: Swift.String? = nil,
                userTeam: Swift.String? = nil,
                sourceTeam: Swift.String? = nil,
                nonOwnerEditable: Swift.Bool? = nil,
                lastEditor: Swift.String? = nil,
                fileAccess: Swift.String? = nil,
                editTimestamp: Swift.Int? = nil,
                altTxt: Swift.String? = nil,
                mp4Low: Swift.String? = nil,
                hlsEmbed: Swift.String? = nil,
                durationMs: Swift.Int? = nil,
                thumbVideoW: Swift.Int? = nil,
                thumbVideoH: Swift.Int? = nil,
                originalAttachmentCount: Swift.Int? = nil,
                isExternal: Swift.Bool? = nil,
                externalType: Swift.String? = nil,
                externalId: Swift.String? = nil,
                externalUrl: Swift.String? = nil,
                urlPrivate: Swift.String? = nil,
                urlPrivateDownload: Swift.String? = nil,
                urlStaticPreview: Swift.String? = nil,
                appId: Swift.String? = nil,
                appName: Swift.String? = nil,
                thumb64: Swift.String? = nil,
                thumb64Gif: Swift.String? = nil,
                thumb64W: Swift.String? = nil,
                thumb64H: Swift.String? = nil,
                thumb80: Swift.String? = nil,
                thumb80Gif: Swift.String? = nil,
                thumb80W: Swift.String? = nil,
                thumb80H: Swift.String? = nil,
                thumb160: Swift.String? = nil,
                thumb160Gif: Swift.String? = nil,
                thumb160W: Swift.String? = nil,
                thumb160H: Swift.String? = nil,
                thumb360: Swift.String? = nil,
                thumb360Gif: Swift.String? = nil,
                thumb360W: Swift.String? = nil,
                thumb360H: Swift.String? = nil,
                thumb480: Swift.String? = nil,
                thumb480Gif: Swift.String? = nil,
                thumb480W: Swift.String? = nil,
                thumb480H: Swift.String? = nil,
                thumb720: Swift.String? = nil,
                thumb720Gif: Swift.String? = nil,
                thumb720W: Swift.String? = nil,
                thumb720H: Swift.String? = nil,
                thumb800: Swift.String? = nil,
                thumb800Gif: Swift.String? = nil,
                thumb800W: Swift.String? = nil,
                thumb800H: Swift.String? = nil,
                thumb960: Swift.String? = nil,
                thumb960Gif: Swift.String? = nil,
                thumb960W: Swift.String? = nil,
                thumb960H: Swift.String? = nil,
                thumb1024: Swift.String? = nil,
                thumb1024Gif: Swift.String? = nil,
                thumb1024W: Swift.String? = nil,
                thumb1024H: Swift.String? = nil,
                thumbVideo: Swift.String? = nil,
                thumbGif: Swift.String? = nil,
                thumbPdf: Swift.String? = nil,
                thumbPdfW: Swift.String? = nil,
                thumbPdfH: Swift.String? = nil,
                thumbTiny: Swift.String? = nil,
                convertedPdf: Swift.String? = nil,
                imageExifRotation: Swift.Int? = nil,
                originalW: Swift.String? = nil,
                originalH: Swift.String? = nil,
                deanimateGif: Swift.String? = nil,
                permalinkPublic: Swift.String? = nil,
                editLink: Swift.String? = nil,
                hasRichPreview: Swift.Bool? = nil,
                mediaDisplayType: Swift.String? = nil,
                previewIsTruncated: Swift.Bool? = nil,
                previewHighlight: Swift.String? = nil,
                plainText: Swift.String? = nil,
                previewPlainText: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                sentToSelf: Swift.Bool? = nil,
                linesMore: Swift.Int? = nil,
                isPublic: Swift.Bool? = nil,
                publicUrlShared: Swift.Bool? = nil,
                displayAsBot: Swift.Bool? = nil,
                hasMoreShares: Swift.Bool? = nil,
                channelActionsTs: Swift.String? = nil,
                channelActionsCount: Swift.Int? = nil,
                simplifiedHtml: Swift.String? = nil,
                mediaProgress: Components.Schemas.MediaProgress? = nil,
                quipThreadId: Swift.String? = nil,
                isChannelSpace: Swift.Bool? = nil,
                linkedChannelId: Swift.String? = nil,
                teamsSharedWith: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                lastRead: Swift.Int? = nil,
                titleBlocks: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                privateChannelsWithFileAccessCount: Swift.Int? = nil,
                privateFileWithAccessCount: Swift.Int? = nil,
                dmMpdmUsersWithFileAccess: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                orgOrWorkspaceAccess: Swift.String? = nil,
                updateNotification: Swift.Int? = nil,
                canvasTemplateMode: Swift.String? = nil,
                templateConversionTs: Swift.Int? = nil,
                templateName: Swift.String? = nil,
                templateTitle: Swift.String? = nil,
                templateDescription: Swift.String? = nil,
                templateIcon: Swift.String? = nil,
                teamPrefVersionHistoryEnabled: Swift.Bool? = nil,
                showBadge: Swift.Bool? = nil,
                listMetadata: Components.Schemas.ListMetadata? = nil,
                listLimits: Components.Schemas.ListLimits? = nil,
                listCsvDownloadUrl: Swift.String? = nil,
                canToggleCanvasLock: Swift.Bool? = nil,
                isRestrictedSharingEnabled: Swift.Bool? = nil,
                canvasPrintingEnabled: Swift.Bool? = nil,
                botId: Swift.String? = nil,
                initialComment: Components.Schemas.InitialComment? = nil,
                numStars: Swift.Int? = nil,
                isStarred: Swift.Bool? = nil,
                pinnedTo: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                commentsCount: Swift.Int? = nil
            ) {
                self.id = id
                self.created = created
                self.timestamp = timestamp
                self.name = name
                self.title = title
                self.subject = subject
                self.mimetype = mimetype
                self.filetype = filetype
                self.user = user
                self.mode = mode
                self.editable = editable
                self.editor = editor
                self.updated = updated
                self.editors = editors
                self.subtype = subtype
                self.transcription = transcription
                self.mp4 = mp4
                self.vtt = vtt
                self.hls = hls
                self.username = username
                self.size = size
                self.deanimate = deanimate
                self.pjpeg = pjpeg
                self.permalink = permalink
                self.preview = preview
                self.lines = lines
                self.channels = channels
                self.groups = groups
                self.ims = ims
                self.shares = shares
                self.to = to
                self.from = from
                self.cc = cc
                self.headers = headers
                self.saved = saved
                self.access = access
                self.favorites = favorites
                self.reactions = reactions
                self.attachments = attachments
                self.blocks = blocks
                self.prettyType = prettyType
                self.userTeam = userTeam
                self.sourceTeam = sourceTeam
                self.nonOwnerEditable = nonOwnerEditable
                self.lastEditor = lastEditor
                self.fileAccess = fileAccess
                self.editTimestamp = editTimestamp
                self.altTxt = altTxt
                self.mp4Low = mp4Low
                self.hlsEmbed = hlsEmbed
                self.durationMs = durationMs
                self.thumbVideoW = thumbVideoW
                self.thumbVideoH = thumbVideoH
                self.originalAttachmentCount = originalAttachmentCount
                self.isExternal = isExternal
                self.externalType = externalType
                self.externalId = externalId
                self.externalUrl = externalUrl
                self.urlPrivate = urlPrivate
                self.urlPrivateDownload = urlPrivateDownload
                self.urlStaticPreview = urlStaticPreview
                self.appId = appId
                self.appName = appName
                self.thumb64 = thumb64
                self.thumb64Gif = thumb64Gif
                self.thumb64W = thumb64W
                self.thumb64H = thumb64H
                self.thumb80 = thumb80
                self.thumb80Gif = thumb80Gif
                self.thumb80W = thumb80W
                self.thumb80H = thumb80H
                self.thumb160 = thumb160
                self.thumb160Gif = thumb160Gif
                self.thumb160W = thumb160W
                self.thumb160H = thumb160H
                self.thumb360 = thumb360
                self.thumb360Gif = thumb360Gif
                self.thumb360W = thumb360W
                self.thumb360H = thumb360H
                self.thumb480 = thumb480
                self.thumb480Gif = thumb480Gif
                self.thumb480W = thumb480W
                self.thumb480H = thumb480H
                self.thumb720 = thumb720
                self.thumb720Gif = thumb720Gif
                self.thumb720W = thumb720W
                self.thumb720H = thumb720H
                self.thumb800 = thumb800
                self.thumb800Gif = thumb800Gif
                self.thumb800W = thumb800W
                self.thumb800H = thumb800H
                self.thumb960 = thumb960
                self.thumb960Gif = thumb960Gif
                self.thumb960W = thumb960W
                self.thumb960H = thumb960H
                self.thumb1024 = thumb1024
                self.thumb1024Gif = thumb1024Gif
                self.thumb1024W = thumb1024W
                self.thumb1024H = thumb1024H
                self.thumbVideo = thumbVideo
                self.thumbGif = thumbGif
                self.thumbPdf = thumbPdf
                self.thumbPdfW = thumbPdfW
                self.thumbPdfH = thumbPdfH
                self.thumbTiny = thumbTiny
                self.convertedPdf = convertedPdf
                self.imageExifRotation = imageExifRotation
                self.originalW = originalW
                self.originalH = originalH
                self.deanimateGif = deanimateGif
                self.permalinkPublic = permalinkPublic
                self.editLink = editLink
                self.hasRichPreview = hasRichPreview
                self.mediaDisplayType = mediaDisplayType
                self.previewIsTruncated = previewIsTruncated
                self.previewHighlight = previewHighlight
                self.plainText = plainText
                self.previewPlainText = previewPlainText
                self.hasMore = hasMore
                self.sentToSelf = sentToSelf
                self.linesMore = linesMore
                self.isPublic = isPublic
                self.publicUrlShared = publicUrlShared
                self.displayAsBot = displayAsBot
                self.hasMoreShares = hasMoreShares
                self.channelActionsTs = channelActionsTs
                self.channelActionsCount = channelActionsCount
                self.simplifiedHtml = simplifiedHtml
                self.mediaProgress = mediaProgress
                self.quipThreadId = quipThreadId
                self.isChannelSpace = isChannelSpace
                self.linkedChannelId = linkedChannelId
                self.teamsSharedWith = teamsSharedWith
                self.lastRead = lastRead
                self.titleBlocks = titleBlocks
                self.privateChannelsWithFileAccessCount = privateChannelsWithFileAccessCount
                self.privateFileWithAccessCount = privateFileWithAccessCount
                self.dmMpdmUsersWithFileAccess = dmMpdmUsersWithFileAccess
                self.orgOrWorkspaceAccess = orgOrWorkspaceAccess
                self.updateNotification = updateNotification
                self.canvasTemplateMode = canvasTemplateMode
                self.templateConversionTs = templateConversionTs
                self.templateName = templateName
                self.templateTitle = templateTitle
                self.templateDescription = templateDescription
                self.templateIcon = templateIcon
                self.teamPrefVersionHistoryEnabled = teamPrefVersionHistoryEnabled
                self.showBadge = showBadge
                self.listMetadata = listMetadata
                self.listLimits = listLimits
                self.listCsvDownloadUrl = listCsvDownloadUrl
                self.canToggleCanvasLock = canToggleCanvasLock
                self.isRestrictedSharingEnabled = isRestrictedSharingEnabled
                self.canvasPrintingEnabled = canvasPrintingEnabled
                self.botId = botId
                self.initialComment = initialComment
                self.numStars = numStars
                self.isStarred = isStarred
                self.pinnedTo = pinnedTo
                self.commentsCount = commentsCount
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case timestamp
                case name
                case title
                case subject
                case mimetype
                case filetype
                case user
                case mode
                case editable
                case editor
                case updated
                case editors
                case subtype
                case transcription
                case mp4
                case vtt
                case hls
                case username
                case size
                case deanimate
                case pjpeg
                case permalink
                case preview
                case lines
                case channels
                case groups
                case ims
                case shares
                case to
                case from
                case cc
                case headers
                case saved
                case access
                case favorites
                case reactions
                case attachments
                case blocks
                case prettyType
                case userTeam
                case sourceTeam
                case nonOwnerEditable
                case lastEditor
                case fileAccess
                case editTimestamp
                case altTxt
                case mp4Low
                case hlsEmbed
                case durationMs
                case thumbVideoW
                case thumbVideoH
                case originalAttachmentCount
                case isExternal
                case externalType
                case externalId
                case externalUrl
                case urlPrivate
                case urlPrivateDownload
                case urlStaticPreview
                case appId
                case appName
                case thumb64
                case thumb64Gif
                case thumb64W
                case thumb64H
                case thumb80
                case thumb80Gif
                case thumb80W
                case thumb80H
                case thumb160
                case thumb160Gif
                case thumb160W
                case thumb160H
                case thumb360
                case thumb360Gif
                case thumb360W
                case thumb360H
                case thumb480
                case thumb480Gif
                case thumb480W
                case thumb480H
                case thumb720
                case thumb720Gif
                case thumb720W
                case thumb720H
                case thumb800
                case thumb800Gif
                case thumb800W
                case thumb800H
                case thumb960
                case thumb960Gif
                case thumb960W
                case thumb960H
                case thumb1024
                case thumb1024Gif
                case thumb1024W
                case thumb1024H
                case thumbVideo
                case thumbGif
                case thumbPdf
                case thumbPdfW
                case thumbPdfH
                case thumbTiny
                case convertedPdf
                case imageExifRotation
                case originalW
                case originalH
                case deanimateGif
                case permalinkPublic
                case editLink
                case hasRichPreview
                case mediaDisplayType
                case previewIsTruncated
                case previewHighlight
                case plainText
                case previewPlainText
                case hasMore
                case sentToSelf
                case linesMore
                case isPublic
                case publicUrlShared
                case displayAsBot
                case hasMoreShares
                case channelActionsTs
                case channelActionsCount
                case simplifiedHtml
                case mediaProgress
                case quipThreadId
                case isChannelSpace
                case linkedChannelId
                case teamsSharedWith
                case lastRead
                case titleBlocks
                case privateChannelsWithFileAccessCount
                case privateFileWithAccessCount
                case dmMpdmUsersWithFileAccess
                case orgOrWorkspaceAccess
                case updateNotification
                case canvasTemplateMode
                case templateConversionTs
                case templateName
                case templateTitle
                case templateDescription
                case templateIcon
                case teamPrefVersionHistoryEnabled
                case showBadge
                case listMetadata
                case listLimits
                case listCsvDownloadUrl
                case canToggleCanvasLock
                case isRestrictedSharingEnabled
                case canvasPrintingEnabled
                case botId
                case initialComment
                case numStars
                case isStarred
                case pinnedTo
                case commentsCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/PurpleIcons`.
        public struct PurpleIcons: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PurpleIcons/emoji`.
            public var emoji: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleIcons/image64`.
            public var image64: Swift.String?
            /// Creates a new `PurpleIcons`.
            ///
            /// - Parameters:
            ///   - emoji:
            ///   - image64:
            public init(
                emoji: Swift.String? = nil,
                image64: Swift.String? = nil
            ) {
                self.emoji = emoji
                self.image64 = image64
            }
            public enum CodingKeys: String, CodingKey {
                case emoji
                case image64
            }
        }
        /// - Remark: Generated from `#/components/schemas/PurpleMetadata`.
        public struct PurpleMetadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PurpleMetadata/eventType`.
            public var eventType: Swift.String?
            /// Creates a new `PurpleMetadata`.
            ///
            /// - Parameters:
            ///   - eventType:
            public init(eventType: Swift.String? = nil) {
                self.eventType = eventType
            }
            public enum CodingKeys: String, CodingKey {
                case eventType
            }
        }
        /// - Remark: Generated from `#/components/schemas/Room`.
        public struct Room: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Room/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/participants`.
            public var participants: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Room/channels`.
            public var channels: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Room/recording`.
            public var recording: Components.Schemas.Recording?
            /// - Remark: Generated from `#/components/schemas/Room/mediaServer`.
            public var mediaServer: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/createdBy`.
            public var createdBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/dateStart`.
            public var dateStart: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Room/dateEnd`.
            public var dateEnd: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Room/participantHistory`.
            public var participantHistory: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Room/participantsCameraOn`.
            public var participantsCameraOn: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Room/participantsCameraOff`.
            public var participantsCameraOff: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Room/participantsScreenshareOn`.
            public var participantsScreenshareOn: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Room/participantsScreenshareOff`.
            public var participantsScreenshareOff: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Room/canvasThreadTs`.
            public var canvasThreadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/threadRootTs`.
            public var threadRootTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/isDmCall`.
            public var isDmCall: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Room/wasRejected`.
            public var wasRejected: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Room/wasMissed`.
            public var wasMissed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Room/wasAccepted`.
            public var wasAccepted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Room/hasEnded`.
            public var hasEnded: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Room/backgroundId`.
            public var backgroundId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/canvasBackground`.
            public var canvasBackground: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/isPrewarmed`.
            public var isPrewarmed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Room/isScheduled`.
            public var isScheduled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Room/attachedFileIds`.
            public var attachedFileIds: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/Room/mediaBackendType`.
            public var mediaBackendType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/displayId`.
            public var displayId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/externalUniqueId`.
            public var externalUniqueId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/callFamily`.
            public var callFamily: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Room/huddleLink`.
            public var huddleLink: Swift.String?
            /// Creates a new `Room`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - participants:
            ///   - channels:
            ///   - recording:
            ///   - mediaServer:
            ///   - createdBy:
            ///   - dateStart:
            ///   - dateEnd:
            ///   - participantHistory:
            ///   - participantsCameraOn:
            ///   - participantsCameraOff:
            ///   - participantsScreenshareOn:
            ///   - participantsScreenshareOff:
            ///   - canvasThreadTs:
            ///   - threadRootTs:
            ///   - isDmCall:
            ///   - wasRejected:
            ///   - wasMissed:
            ///   - wasAccepted:
            ///   - hasEnded:
            ///   - backgroundId:
            ///   - canvasBackground:
            ///   - isPrewarmed:
            ///   - isScheduled:
            ///   - attachedFileIds:
            ///   - mediaBackendType:
            ///   - displayId:
            ///   - externalUniqueId:
            ///   - appId:
            ///   - callFamily:
            ///   - huddleLink:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                participants: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                channels: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                recording: Components.Schemas.Recording? = nil,
                mediaServer: Swift.String? = nil,
                createdBy: Swift.String? = nil,
                dateStart: Swift.Int? = nil,
                dateEnd: Swift.Int? = nil,
                participantHistory: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                participantsCameraOn: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                participantsCameraOff: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                participantsScreenshareOn: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                participantsScreenshareOff: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                canvasThreadTs: Swift.String? = nil,
                threadRootTs: Swift.String? = nil,
                isDmCall: Swift.Bool? = nil,
                wasRejected: Swift.Bool? = nil,
                wasMissed: Swift.Bool? = nil,
                wasAccepted: Swift.Bool? = nil,
                hasEnded: Swift.Bool? = nil,
                backgroundId: Swift.String? = nil,
                canvasBackground: Swift.String? = nil,
                isPrewarmed: Swift.Bool? = nil,
                isScheduled: Swift.Bool? = nil,
                attachedFileIds: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                mediaBackendType: Swift.String? = nil,
                displayId: Swift.String? = nil,
                externalUniqueId: Swift.String? = nil,
                appId: Swift.String? = nil,
                callFamily: Swift.String? = nil,
                huddleLink: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.participants = participants
                self.channels = channels
                self.recording = recording
                self.mediaServer = mediaServer
                self.createdBy = createdBy
                self.dateStart = dateStart
                self.dateEnd = dateEnd
                self.participantHistory = participantHistory
                self.participantsCameraOn = participantsCameraOn
                self.participantsCameraOff = participantsCameraOff
                self.participantsScreenshareOn = participantsScreenshareOn
                self.participantsScreenshareOff = participantsScreenshareOff
                self.canvasThreadTs = canvasThreadTs
                self.threadRootTs = threadRootTs
                self.isDmCall = isDmCall
                self.wasRejected = wasRejected
                self.wasMissed = wasMissed
                self.wasAccepted = wasAccepted
                self.hasEnded = hasEnded
                self.backgroundId = backgroundId
                self.canvasBackground = canvasBackground
                self.isPrewarmed = isPrewarmed
                self.isScheduled = isScheduled
                self.attachedFileIds = attachedFileIds
                self.mediaBackendType = mediaBackendType
                self.displayId = displayId
                self.externalUniqueId = externalUniqueId
                self.appId = appId
                self.callFamily = callFamily
                self.huddleLink = huddleLink
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case participants
                case channels
                case recording
                case mediaServer
                case createdBy
                case dateStart
                case dateEnd
                case participantHistory
                case participantsCameraOn
                case participantsCameraOff
                case participantsScreenshareOn
                case participantsScreenshareOff
                case canvasThreadTs
                case threadRootTs
                case isDmCall
                case wasRejected
                case wasMissed
                case wasAccepted
                case hasEnded
                case backgroundId
                case canvasBackground
                case isPrewarmed
                case isScheduled
                case attachedFileIds
                case mediaBackendType
                case displayId
                case externalUniqueId
                case appId
                case callFamily
                case huddleLink
            }
        }
        /// - Remark: Generated from `#/components/schemas/Recording`.
        public struct Recording: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Recording/transcript`.
            public var transcript: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Recording/summary`.
            public var summary: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Recording/notetaking`.
            public var notetaking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Recording/summaryStatus`.
            public var summaryStatus: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Recording/canRecordSummary`.
            public var canRecordSummary: Swift.String?
            /// Creates a new `Recording`.
            ///
            /// - Parameters:
            ///   - transcript:
            ///   - summary:
            ///   - notetaking:
            ///   - summaryStatus:
            ///   - canRecordSummary:
            public init(
                transcript: Swift.Bool? = nil,
                summary: Swift.Bool? = nil,
                notetaking: Swift.Bool? = nil,
                summaryStatus: Swift.String? = nil,
                canRecordSummary: Swift.String? = nil
            ) {
                self.transcript = transcript
                self.summary = summary
                self.notetaking = notetaking
                self.summaryStatus = summaryStatus
                self.canRecordSummary = canRecordSummary
            }
            public enum CodingKeys: String, CodingKey {
                case transcript
                case summary
                case notetaking
                case summaryStatus
                case canRecordSummary
            }
        }
        /// - Remark: Generated from `#/components/schemas/PurpleRoot`.
        public struct PurpleRoot: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/mrkdwn`.
            public var mrkdwn: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/icons`.
            public var icons: Components.Schemas.MessageIcons?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/edited`.
            public var edited: Components.Schemas.Edited?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/replies`.
            public var replies: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/subscribed`.
            public var subscribed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/room`.
            public var room: Components.Schemas.Room?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/parentUserId`.
            public var parentUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/botProfile`.
            public var botProfile: Components.Schemas.BotProfile?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/replyCount`.
            public var replyCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/replyUsers`.
            public var replyUsers: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/replyUsersCount`.
            public var replyUsersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/latestReply`.
            public var latestReply: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/lastRead`.
            public var lastRead: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/unreadCount`.
            public var unreadCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleRoot/noNotifications`.
            public var noNotifications: Swift.Bool?
            /// Creates a new `PurpleRoot`.
            ///
            /// - Parameters:
            ///   - text:
            ///   - user:
            ///   - username:
            ///   - team:
            ///   - mrkdwn:
            ///   - _type:
            ///   - subtype:
            ///   - icons:
            ///   - edited:
            ///   - replies:
            ///   - subscribed:
            ///   - ts:
            ///   - room:
            ///   - parentUserId:
            ///   - botId:
            ///   - threadTs:
            ///   - botProfile:
            ///   - replyCount:
            ///   - replyUsers:
            ///   - replyUsersCount:
            ///   - latestReply:
            ///   - lastRead:
            ///   - unreadCount:
            ///   - noNotifications:
            public init(
                text: Swift.String? = nil,
                user: Swift.String? = nil,
                username: Swift.String? = nil,
                team: Swift.String? = nil,
                mrkdwn: Swift.Bool? = nil,
                _type: Swift.String? = nil,
                subtype: Swift.String? = nil,
                icons: Components.Schemas.MessageIcons? = nil,
                edited: Components.Schemas.Edited? = nil,
                replies: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                subscribed: Swift.Bool? = nil,
                ts: Swift.String? = nil,
                room: Components.Schemas.Room? = nil,
                parentUserId: Swift.String? = nil,
                botId: Swift.String? = nil,
                threadTs: Swift.String? = nil,
                botProfile: Components.Schemas.BotProfile? = nil,
                replyCount: Swift.Int? = nil,
                replyUsers: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                replyUsersCount: Swift.Int? = nil,
                latestReply: Swift.String? = nil,
                lastRead: Swift.String? = nil,
                unreadCount: Swift.Int? = nil,
                noNotifications: Swift.Bool? = nil
            ) {
                self.text = text
                self.user = user
                self.username = username
                self.team = team
                self.mrkdwn = mrkdwn
                self._type = _type
                self.subtype = subtype
                self.icons = icons
                self.edited = edited
                self.replies = replies
                self.subscribed = subscribed
                self.ts = ts
                self.room = room
                self.parentUserId = parentUserId
                self.botId = botId
                self.threadTs = threadTs
                self.botProfile = botProfile
                self.replyCount = replyCount
                self.replyUsers = replyUsers
                self.replyUsersCount = replyUsersCount
                self.latestReply = latestReply
                self.lastRead = lastRead
                self.unreadCount = unreadCount
                self.noNotifications = noNotifications
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case user
                case username
                case team
                case mrkdwn
                case _type = "type"
                case subtype
                case icons
                case edited
                case replies
                case subscribed
                case ts
                case room
                case parentUserId
                case botId
                case threadTs
                case botProfile
                case replyCount
                case replyUsers
                case replyUsersCount
                case latestReply
                case lastRead
                case unreadCount
                case noNotifications
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListRecordElement`.
        public struct ListRecordElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/fields`.
            public var fields: [Components.Schemas.RecordField]?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/position`.
            public var position: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/saved`.
            public var saved: Components.Schemas.Saved?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/listId`.
            public var listId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/dateCreated`.
            public var dateCreated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/createdBy`.
            public var createdBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/updatedTimestamp`.
            public var updatedTimestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/updatedBy`.
            public var updatedBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/platformRefs`.
            public var platformRefs: Components.Schemas.PlatformRefs?
            /// - Remark: Generated from `#/components/schemas/ListRecordElement/isSubscribed`.
            public var isSubscribed: Swift.Bool?
            /// Creates a new `ListRecordElement`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - fields:
            ///   - position:
            ///   - saved:
            ///   - listId:
            ///   - dateCreated:
            ///   - createdBy:
            ///   - threadTs:
            ///   - updatedTimestamp:
            ///   - updatedBy:
            ///   - platformRefs:
            ///   - isSubscribed:
            public init(
                id: Swift.String? = nil,
                fields: [Components.Schemas.RecordField]? = nil,
                position: Swift.String? = nil,
                saved: Components.Schemas.Saved? = nil,
                listId: Swift.String? = nil,
                dateCreated: Swift.Int? = nil,
                createdBy: Swift.String? = nil,
                threadTs: Swift.String? = nil,
                updatedTimestamp: Swift.String? = nil,
                updatedBy: Swift.String? = nil,
                platformRefs: Components.Schemas.PlatformRefs? = nil,
                isSubscribed: Swift.Bool? = nil
            ) {
                self.id = id
                self.fields = fields
                self.position = position
                self.saved = saved
                self.listId = listId
                self.dateCreated = dateCreated
                self.createdBy = createdBy
                self.threadTs = threadTs
                self.updatedTimestamp = updatedTimestamp
                self.updatedBy = updatedBy
                self.platformRefs = platformRefs
                self.isSubscribed = isSubscribed
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case fields
                case position
                case saved
                case listId
                case dateCreated
                case createdBy
                case threadTs
                case updatedTimestamp
                case updatedBy
                case platformRefs
                case isSubscribed
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlatformRefs`.
        public struct PlatformRefs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlatformRefs/botCreatedBy`.
            public var botCreatedBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlatformRefs/botUpdatedBy`.
            public var botUpdatedBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlatformRefs/botDeletedBy`.
            public var botDeletedBy: Swift.String?
            /// Creates a new `PlatformRefs`.
            ///
            /// - Parameters:
            ///   - botCreatedBy:
            ///   - botUpdatedBy:
            ///   - botDeletedBy:
            public init(
                botCreatedBy: Swift.String? = nil,
                botUpdatedBy: Swift.String? = nil,
                botDeletedBy: Swift.String? = nil
            ) {
                self.botCreatedBy = botCreatedBy
                self.botUpdatedBy = botUpdatedBy
                self.botDeletedBy = botDeletedBy
            }
            public enum CodingKeys: String, CodingKey {
                case botCreatedBy
                case botUpdatedBy
                case botDeletedBy
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessageBlock`.
        public struct MessageBlock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MessageBlock/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageBlock/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageBlock/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageBlock/message`.
            public var message: Components.Schemas.Message?
            /// Creates a new `MessageBlock`.
            ///
            /// - Parameters:
            ///   - team:
            ///   - channel:
            ///   - ts:
            ///   - message:
            public init(
                team: Swift.String? = nil,
                channel: Swift.String? = nil,
                ts: Swift.String? = nil,
                message: Components.Schemas.Message? = nil
            ) {
                self.team = team
                self.channel = channel
                self.ts = ts
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case team
                case channel
                case ts
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/AttachmentMetadata`.
        public struct AttachmentMetadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/format`.
            public var format: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/extension`.
            public var _extension: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/rotation`.
            public var rotation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/thumb64`.
            public var thumb64: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/thumb80`.
            public var thumb80: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/thumb160`.
            public var thumb160: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/originalW`.
            public var originalW: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/originalH`.
            public var originalH: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/thumb360W`.
            public var thumb360W: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/thumb360H`.
            public var thumb360H: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AttachmentMetadata/thumbTiny`.
            public var thumbTiny: Swift.String?
            /// Creates a new `AttachmentMetadata`.
            ///
            /// - Parameters:
            ///   - format:
            ///   - _extension:
            ///   - rotation:
            ///   - thumb64:
            ///   - thumb80:
            ///   - thumb160:
            ///   - originalW:
            ///   - originalH:
            ///   - thumb360W:
            ///   - thumb360H:
            ///   - thumbTiny:
            public init(
                format: Swift.String? = nil,
                _extension: Swift.String? = nil,
                rotation: Swift.Int? = nil,
                thumb64: Swift.Bool? = nil,
                thumb80: Swift.Bool? = nil,
                thumb160: Swift.Bool? = nil,
                originalW: Swift.Int? = nil,
                originalH: Swift.Int? = nil,
                thumb360W: Swift.Int? = nil,
                thumb360H: Swift.Int? = nil,
                thumbTiny: Swift.String? = nil
            ) {
                self.format = format
                self._extension = _extension
                self.rotation = rotation
                self.thumb64 = thumb64
                self.thumb80 = thumb80
                self.thumb160 = thumb160
                self.originalW = originalW
                self.originalH = originalH
                self.thumb360W = thumb360W
                self.thumb360H = thumb360H
                self.thumbTiny = thumbTiny
            }
            public enum CodingKeys: String, CodingKey {
                case format
                case _extension = "extension"
                case rotation
                case thumb64
                case thumb80
                case thumb160
                case originalW
                case originalH
                case thumb360W
                case thumb360H
                case thumbTiny
            }
        }
        /// - Remark: Generated from `#/components/schemas/AttachmentPreview`.
        public struct AttachmentPreview: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AttachmentPreview/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AttachmentPreview/title`.
            public var title: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/AttachmentPreview/subtitle`.
            public var subtitle: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/AttachmentPreview/canRemove`.
            public var canRemove: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AttachmentPreview/iconUrl`.
            public var iconUrl: Swift.String?
            /// Creates a new `AttachmentPreview`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - title:
            ///   - subtitle:
            ///   - canRemove:
            ///   - iconUrl:
            public init(
                _type: Swift.String? = nil,
                title: Components.Schemas.DescriptionElement? = nil,
                subtitle: Components.Schemas.DescriptionElement? = nil,
                canRemove: Swift.Bool? = nil,
                iconUrl: Swift.String? = nil
            ) {
                self._type = _type
                self.title = title
                self.subtitle = subtitle
                self.canRemove = canRemove
                self.iconUrl = iconUrl
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case title
                case subtitle
                case canRemove
                case iconUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/FluffyIcons`.
        public struct FluffyIcons: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FluffyIcons/emoji`.
            public var emoji: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyIcons/image64`.
            public var image64: Swift.String?
            /// Creates a new `FluffyIcons`.
            ///
            /// - Parameters:
            ///   - emoji:
            ///   - image64:
            public init(
                emoji: Swift.String? = nil,
                image64: Swift.String? = nil
            ) {
                self.emoji = emoji
                self.image64 = image64
            }
            public enum CodingKeys: String, CodingKey {
                case emoji
                case image64
            }
        }
        /// - Remark: Generated from `#/components/schemas/FluffyMetadata`.
        public struct FluffyMetadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FluffyMetadata/eventPayload`.
            public var eventPayload: Components.Schemas.EventPayload?
            /// - Remark: Generated from `#/components/schemas/FluffyMetadata/eventType`.
            public var eventType: Swift.String?
            /// Creates a new `FluffyMetadata`.
            ///
            /// - Parameters:
            ///   - eventPayload:
            ///   - eventType:
            public init(
                eventPayload: Components.Schemas.EventPayload? = nil,
                eventType: Swift.String? = nil
            ) {
                self.eventPayload = eventPayload
                self.eventType = eventType
            }
            public enum CodingKeys: String, CodingKey {
                case eventPayload
                case eventType
            }
        }
        /// - Remark: Generated from `#/components/schemas/FluffyRoot`.
        public struct FluffyRoot: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/icons`.
            public var icons: Components.Schemas.PurpleIcons?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/subscribed`.
            public var subscribed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/parentUserId`.
            public var parentUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/replyCount`.
            public var replyCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/replyUsersCount`.
            public var replyUsersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/latestReply`.
            public var latestReply: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyRoot/replyUsers`.
            public var replyUsers: [Swift.String]?
            /// Creates a new `FluffyRoot`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - subtype:
            ///   - text:
            ///   - ts:
            ///   - username:
            ///   - icons:
            ///   - subscribed:
            ///   - botId:
            ///   - threadTs:
            ///   - parentUserId:
            ///   - replyCount:
            ///   - replyUsersCount:
            ///   - latestReply:
            ///   - replyUsers:
            public init(
                _type: Swift.String? = nil,
                subtype: Swift.String? = nil,
                text: Swift.String? = nil,
                ts: Swift.String? = nil,
                username: Swift.String? = nil,
                icons: Components.Schemas.PurpleIcons? = nil,
                subscribed: Swift.Bool? = nil,
                botId: Swift.String? = nil,
                threadTs: Swift.String? = nil,
                parentUserId: Swift.String? = nil,
                replyCount: Swift.Int? = nil,
                replyUsersCount: Swift.Int? = nil,
                latestReply: Swift.String? = nil,
                replyUsers: [Swift.String]? = nil
            ) {
                self._type = _type
                self.subtype = subtype
                self.text = text
                self.ts = ts
                self.username = username
                self.icons = icons
                self.subscribed = subscribed
                self.botId = botId
                self.threadTs = threadTs
                self.parentUserId = parentUserId
                self.replyCount = replyCount
                self.replyUsersCount = replyUsersCount
                self.latestReply = latestReply
                self.replyUsers = replyUsers
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case subtype
                case text
                case ts
                case username
                case icons
                case subscribed
                case botId
                case threadTs
                case parentUserId
                case replyCount
                case replyUsersCount
                case latestReply
                case replyUsers
            }
        }
        /// - Remark: Generated from `#/components/schemas/DescriptionUnion`.
        public struct DescriptionUnion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DescriptionUnion/value1`.
            public var value1: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/DescriptionUnion/value2`.
            public var value2: Swift.String?
            /// Creates a new `DescriptionUnion`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.DescriptionElement? = nil,
                value2: Swift.String? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    self.value2
                ])
                try self.value1?.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/DescriptionType`.
        @frozen public enum DescriptionType: String, Codable, Hashable, Sendable, CaseIterable {
            case plainText = "plain_text"
            case mrkdwn = "mrkdwn"
        }
        /// - Remark: Generated from `#/components/schemas/PurpleType`.
        @frozen public enum PurpleType: String, Codable, Hashable, Sendable, CaseIterable {
            case broadcast = "broadcast"
            case text = "text"
            case channel = "channel"
            case color = "color"
            case date = "date"
            case link = "link"
            case team = "team"
            case user = "user"
            case usergroup = "usergroup"
            case emoji = "emoji"
        }
        /// - Remark: Generated from `#/components/schemas/AccessoryType`.
        @frozen public enum AccessoryType: String, Codable, Hashable, Sendable, CaseIterable {
            case richTextList = "rich_text_list"
            case richTextPreformatted = "rich_text_preformatted"
            case richTextQuote = "rich_text_quote"
            case richTextSection = "rich_text_section"
            case button = "button"
            case workflowButton = "workflow_button"
            case checkboxes = "checkboxes"
            case radioButtons = "radio_buttons"
            case channelsSelect = "channels_select"
            case multiChannelsSelect = "multi_channels_select"
            case conversationsSelect = "conversations_select"
            case multiConversationsSelect = "multi_conversations_select"
            case datepicker = "datepicker"
            case timepicker = "timepicker"
            case datetimepicker = "datetimepicker"
            case externalSelect = "external_select"
            case multiExternalSelect = "multi_external_select"
            case image = "image"
            case overflow = "overflow"
            case staticSelect = "static_select"
            case multiStaticSelect = "multi_static_select"
            case usersSelect = "users_select"
            case multiUsersSelect = "multi_users_select"
        }
        /// - Remark: Generated from `#/components/schemas/BlockType`.
        @frozen public enum BlockType: String, Codable, Hashable, Sendable, CaseIterable {
            case actions = "actions"
            case context = "context"
            case divider = "divider"
            case image = "image"
            case section = "section"
            case video = "video"
            case richText = "rich_text"
            case shareShortcut = "share_shortcut"
        }
        /// - Remark: Generated from `#/components/schemas/ChatScheduleMessageResponse`.
        public struct ChatScheduleMessageResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatScheduleMessageResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChatScheduleMessageResponse/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatScheduleMessageResponse/message`.
            public var message: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/ChatScheduleMessageResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatScheduleMessageResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatScheduleMessageResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatScheduleMessageResponse/scheduledMessageId`.
            public var scheduledMessageId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatScheduleMessageResponse/postAt`.
            public var postAt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ChatScheduleMessageResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ChatScheduleMessageResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - message:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - scheduledMessageId:
            ///   - postAt:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                channel: Swift.String? = nil,
                message: Components.Schemas.Message? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                scheduledMessageId: Swift.String? = nil,
                postAt: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.message = message
                self.error = error
                self.needed = needed
                self.provided = provided
                self.scheduledMessageId = scheduledMessageId
                self.postAt = postAt
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case message
                case error
                case needed
                case provided
                case scheduledMessageId
                case postAt
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Confirm`.
        public struct Confirm: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Confirm/title`.
            public var title: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Confirm/text`.
            public var text: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Confirm/confirm`.
            public var confirm: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Confirm/deny`.
            public var deny: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/Confirm/style`.
            public var style: Swift.String?
            /// Creates a new `Confirm`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - text:
            ///   - confirm:
            ///   - deny:
            ///   - style:
            public init(
                title: Components.Schemas.Close? = nil,
                text: Components.Schemas.Close? = nil,
                confirm: Components.Schemas.Close? = nil,
                deny: Components.Schemas.Close? = nil,
                style: Swift.String? = nil
            ) {
                self.title = title
                self.text = text
                self.confirm = confirm
                self.deny = deny
                self.style = style
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case text
                case confirm
                case deny
                case style
            }
        }
        /// - Remark: Generated from `#/components/schemas/Preview`.
        public struct Preview: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Preview/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Preview/title`.
            public var title: Components.Schemas.Description?
            /// - Remark: Generated from `#/components/schemas/Preview/subtitle`.
            public var subtitle: Components.Schemas.Description?
            /// - Remark: Generated from `#/components/schemas/Preview/canRemove`.
            public var canRemove: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Preview/iconUrl`.
            public var iconUrl: Swift.String?
            /// Creates a new `Preview`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - title:
            ///   - subtitle:
            ///   - canRemove:
            ///   - iconUrl:
            public init(
                _type: Swift.String? = nil,
                title: Components.Schemas.Description? = nil,
                subtitle: Components.Schemas.Description? = nil,
                canRemove: Swift.Bool? = nil,
                iconUrl: Swift.String? = nil
            ) {
                self._type = _type
                self.title = title
                self.subtitle = subtitle
                self.canRemove = canRemove
                self.iconUrl = iconUrl
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case title
                case subtitle
                case canRemove
                case iconUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/FluffyType`.
        @frozen public enum FluffyType: String, Codable, Hashable, Sendable, CaseIterable {
            case richTextList = "rich_text_list"
            case richTextPreformatted = "rich_text_preformatted"
            case richTextQuote = "rich_text_quote"
            case richTextSection = "rich_text_section"
        }
        /// - Remark: Generated from `#/components/schemas/ChatScheduledMessagesListResponse`.
        public struct ChatScheduledMessagesListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatScheduledMessagesListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChatScheduledMessagesListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatScheduledMessagesListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatScheduledMessagesListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatScheduledMessagesListResponse/scheduledMessages`.
            public var scheduledMessages: [Components.Schemas.ScheduledMessage]?
            /// - Remark: Generated from `#/components/schemas/ChatScheduledMessagesListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ChatScheduledMessagesListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - scheduledMessages:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                scheduledMessages: [Components.Schemas.ScheduledMessage]? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.scheduledMessages = scheduledMessages
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case scheduledMessages
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ScheduledMessage`.
        public struct ScheduledMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ScheduledMessage/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ScheduledMessage/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ScheduledMessage/channelId`.
            public var channelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ScheduledMessage/postAt`.
            public var postAt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ScheduledMessage/dateCreated`.
            public var dateCreated: Swift.Int?
            /// Creates a new `ScheduledMessage`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - text:
            ///   - channelId:
            ///   - postAt:
            ///   - dateCreated:
            public init(
                id: Swift.String? = nil,
                text: Swift.String? = nil,
                channelId: Swift.String? = nil,
                postAt: Swift.Int? = nil,
                dateCreated: Swift.Int? = nil
            ) {
                self.id = id
                self.text = text
                self.channelId = channelId
                self.postAt = postAt
                self.dateCreated = dateCreated
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case text
                case channelId
                case postAt
                case dateCreated
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatUnfurlResponse`.
        public struct ChatUnfurlResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatUnfurlResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChatUnfurlResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatUnfurlResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatUnfurlResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ChatUnfurlResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatUpdateResponse`.
        public struct ChatUpdateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatUpdateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChatUpdateResponse/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatUpdateResponse/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatUpdateResponse/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatUpdateResponse/message`.
            public var message: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/ChatUpdateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatUpdateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatUpdateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatUpdateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ChatUpdateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - ts:
            ///   - text:
            ///   - message:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                channel: Swift.String? = nil,
                ts: Swift.String? = nil,
                text: Swift.String? = nil,
                message: Components.Schemas.Message? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.ts = ts
                self.text = text
                self.message = message
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case ts
                case text
                case message
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsAcceptSharedInviteResponse`.
        public struct ConversationsAcceptSharedInviteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsAcceptSharedInviteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsAcceptSharedInviteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsAcceptSharedInviteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsAcceptSharedInviteResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsAcceptSharedInviteResponse/implicitApproval`.
            public var implicitApproval: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ConversationsAcceptSharedInviteResponse/channelId`.
            public var channelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsAcceptSharedInviteResponse/inviteId`.
            public var inviteId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsAcceptSharedInviteResponse/canOpenScdm`.
            public var canOpenScdm: Swift.Bool?
            /// Creates a new `ConversationsAcceptSharedInviteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - implicitApproval:
            ///   - channelId:
            ///   - inviteId:
            ///   - canOpenScdm:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                implicitApproval: Swift.Bool? = nil,
                channelId: Swift.String? = nil,
                inviteId: Swift.String? = nil,
                canOpenScdm: Swift.Bool? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.implicitApproval = implicitApproval
                self.channelId = channelId
                self.inviteId = inviteId
                self.canOpenScdm = canOpenScdm
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case implicitApproval
                case channelId
                case inviteId
                case canOpenScdm
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsApproveSharedInviteResponse`.
        public struct ConversationsApproveSharedInviteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsApproveSharedInviteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsApproveSharedInviteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsApproveSharedInviteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsApproveSharedInviteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsApproveSharedInviteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsArchiveResponse`.
        public struct ConversationsArchiveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsArchiveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsArchiveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsArchiveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsArchiveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsArchiveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsCanvasesCreateResponse`.
        public struct ConversationsCanvasesCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsCanvasesCreateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsCanvasesCreateResponse/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCanvasesCreateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCanvasesCreateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCanvasesCreateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCanvasesCreateResponse/canvasId`.
            public var canvasId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCanvasesCreateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ConversationsCanvasesCreateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - detail:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - canvasId:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                detail: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                canvasId: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.detail = detail
                self.error = error
                self.needed = needed
                self.provided = provided
                self.canvasId = canvasId
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case detail
                case error
                case needed
                case provided
                case canvasId
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsCloseResponse`.
        public struct ConversationsCloseResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsCloseResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsCloseResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCloseResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCloseResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCloseResponse/alreadyClosed`.
            public var alreadyClosed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ConversationsCloseResponse/noOp`.
            public var noOp: Swift.Bool?
            /// Creates a new `ConversationsCloseResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - alreadyClosed:
            ///   - noOp:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                alreadyClosed: Swift.Bool? = nil,
                noOp: Swift.Bool? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.alreadyClosed = alreadyClosed
                self.noOp = noOp
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case alreadyClosed
                case noOp
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsCreateResponse`.
        public struct ConversationsCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsCreateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsCreateResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ConversationsCreateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCreateResponse/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCreateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsCreateResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsCreateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - error:
            ///   - detail:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                error: Swift.String? = nil,
                detail: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.error = error
                self.detail = detail
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case error
                case detail
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsDeclineSharedInviteResponse`.
        public struct ConversationsDeclineSharedInviteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsDeclineSharedInviteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsDeclineSharedInviteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsDeclineSharedInviteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsDeclineSharedInviteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsDeclineSharedInviteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsExternalInvitePermissionsSetResponse`.
        public struct ConversationsExternalInvitePermissionsSetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsExternalInvitePermissionsSetResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsExternalInvitePermissionsSetResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsExternalInvitePermissionsSetResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsExternalInvitePermissionsSetResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsExternalInvitePermissionsSetResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse`.
        public struct ConversationsHistoryResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/messages`.
            public var messages: [Components.Schemas.MessageElement]?
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/oldest`.
            public var oldest: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/latest`.
            public var latest: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/pinCount`.
            public var pinCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/channelActionsTs`.
            public var channelActionsTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/channelActionsCount`.
            public var channelActionsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ConversationsHistoryResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ConversationsHistoryResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - messages:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - oldest:
            ///   - latest:
            ///   - hasMore:
            ///   - pinCount:
            ///   - channelActionsTs:
            ///   - channelActionsCount:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                messages: [Components.Schemas.MessageElement]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                oldest: Swift.String? = nil,
                latest: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                pinCount: Swift.Int? = nil,
                channelActionsTs: Swift.Int? = nil,
                channelActionsCount: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.messages = messages
                self.error = error
                self.needed = needed
                self.provided = provided
                self.oldest = oldest
                self.latest = latest
                self.hasMore = hasMore
                self.pinCount = pinCount
                self.channelActionsTs = channelActionsTs
                self.channelActionsCount = channelActionsCount
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case messages
                case error
                case needed
                case provided
                case oldest
                case latest
                case hasMore
                case pinCount
                case channelActionsTs
                case channelActionsCount
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessageElement`.
        public struct MessageElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MessageElement/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/subscribed`.
            public var subscribed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageElement/upload`.
            public var upload: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageElement/edited`.
            public var edited: Components.Schemas.Edited?
            /// - Remark: Generated from `#/components/schemas/MessageElement/reactions`.
            public var reactions: [Components.Schemas.Reaction]?
            /// - Remark: Generated from `#/components/schemas/MessageElement/metadata`.
            public var metadata: Components.Schemas.FluffyMetadata?
            /// - Remark: Generated from `#/components/schemas/MessageElement/blocks`.
            public var blocks: [Components.Schemas.AssistantAppThreadBlock]?
            /// - Remark: Generated from `#/components/schemas/MessageElement/attachments`.
            public var attachments: [Components.Schemas.Attachment]?
            /// - Remark: Generated from `#/components/schemas/MessageElement/files`.
            public var files: [Components.Schemas.FileElement]?
            /// - Remark: Generated from `#/components/schemas/MessageElement/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/botProfile`.
            public var botProfile: Components.Schemas.BotProfile?
            /// - Remark: Generated from `#/components/schemas/MessageElement/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/replyCount`.
            public var replyCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageElement/replyUsersCount`.
            public var replyUsersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageElement/latestReply`.
            public var latestReply: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/replyUsers`.
            public var replyUsers: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/MessageElement/parentUserId`.
            public var parentUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/isLocked`.
            public var isLocked: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageElement/lastRead`.
            public var lastRead: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessageElement/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageElement/xFiles`.
            public var xFiles: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/MessageElement/assistantAppThread`.
            public var assistantAppThread: Components.Schemas.AssistantAppThread?
            /// Creates a new `MessageElement`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - text:
            ///   - user:
            ///   - ts:
            ///   - team:
            ///   - subscribed:
            ///   - upload:
            ///   - edited:
            ///   - reactions:
            ///   - metadata:
            ///   - blocks:
            ///   - attachments:
            ///   - files:
            ///   - botId:
            ///   - botProfile:
            ///   - threadTs:
            ///   - replyCount:
            ///   - replyUsersCount:
            ///   - latestReply:
            ///   - replyUsers:
            ///   - parentUserId:
            ///   - isLocked:
            ///   - lastRead:
            ///   - displayAsBot:
            ///   - appId:
            ///   - xFiles:
            ///   - assistantAppThread:
            public init(
                _type: Swift.String? = nil,
                text: Swift.String? = nil,
                user: Swift.String? = nil,
                ts: Swift.String? = nil,
                team: Swift.String? = nil,
                subscribed: Swift.Bool? = nil,
                upload: Swift.Bool? = nil,
                edited: Components.Schemas.Edited? = nil,
                reactions: [Components.Schemas.Reaction]? = nil,
                metadata: Components.Schemas.FluffyMetadata? = nil,
                blocks: [Components.Schemas.AssistantAppThreadBlock]? = nil,
                attachments: [Components.Schemas.Attachment]? = nil,
                files: [Components.Schemas.FileElement]? = nil,
                botId: Swift.String? = nil,
                botProfile: Components.Schemas.BotProfile? = nil,
                threadTs: Swift.String? = nil,
                replyCount: Swift.Int? = nil,
                replyUsersCount: Swift.Int? = nil,
                latestReply: Swift.String? = nil,
                replyUsers: [Swift.String]? = nil,
                parentUserId: Swift.String? = nil,
                isLocked: Swift.Bool? = nil,
                lastRead: Swift.String? = nil,
                displayAsBot: Swift.Bool? = nil,
                appId: Swift.String? = nil,
                xFiles: [Swift.String]? = nil,
                assistantAppThread: Components.Schemas.AssistantAppThread? = nil
            ) {
                self._type = _type
                self.text = text
                self.user = user
                self.ts = ts
                self.team = team
                self.subscribed = subscribed
                self.upload = upload
                self.edited = edited
                self.reactions = reactions
                self.metadata = metadata
                self.blocks = blocks
                self.attachments = attachments
                self.files = files
                self.botId = botId
                self.botProfile = botProfile
                self.threadTs = threadTs
                self.replyCount = replyCount
                self.replyUsersCount = replyUsersCount
                self.latestReply = latestReply
                self.replyUsers = replyUsers
                self.parentUserId = parentUserId
                self.isLocked = isLocked
                self.lastRead = lastRead
                self.displayAsBot = displayAsBot
                self.appId = appId
                self.xFiles = xFiles
                self.assistantAppThread = assistantAppThread
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case user
                case ts
                case team
                case subscribed
                case upload
                case edited
                case reactions
                case metadata
                case blocks
                case attachments
                case files
                case botId
                case botProfile
                case threadTs
                case replyCount
                case replyUsersCount
                case latestReply
                case replyUsers
                case parentUserId
                case isLocked
                case lastRead
                case displayAsBot
                case appId
                case xFiles
                case assistantAppThread
            }
        }
        /// - Remark: Generated from `#/components/schemas/PurpleFile`.
        public struct PurpleFile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PurpleFile/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/timestamp`.
            public var timestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/subject`.
            public var subject: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/mimetype`.
            public var mimetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/filetype`.
            public var filetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/mode`.
            public var mode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/editable`.
            public var editable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/editor`.
            public var editor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/editors`.
            public var editors: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/transcription`.
            public var transcription: Components.Schemas.Transcription?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/mp4`.
            public var mp4: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/vtt`.
            public var vtt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/hls`.
            public var hls: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/deanimate`.
            public var deanimate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/pjpeg`.
            public var pjpeg: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/preview`.
            public var preview: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/lines`.
            public var lines: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/channels`.
            public var channels: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/groups`.
            public var groups: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/ims`.
            public var ims: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/shares`.
            public var shares: Components.Schemas.Knocks?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/to`.
            public var to: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/from`.
            public var from: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/cc`.
            public var cc: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/headers`.
            public var headers: Components.Schemas.Headers?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/saved`.
            public var saved: Components.Schemas.Saved?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/access`.
            public var access: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/favorites`.
            public var favorites: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/reactions`.
            public var reactions: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/attachments`.
            public var attachments: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/blocks`.
            public var blocks: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/prettyType`.
            public var prettyType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/userTeam`.
            public var userTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/sourceTeam`.
            public var sourceTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/nonOwnerEditable`.
            public var nonOwnerEditable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/lastEditor`.
            public var lastEditor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/fileAccess`.
            public var fileAccess: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/editTimestamp`.
            public var editTimestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/altTxt`.
            public var altTxt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/mp4Low`.
            public var mp4Low: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/hlsEmbed`.
            public var hlsEmbed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/durationMs`.
            public var durationMs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumbVideoW`.
            public var thumbVideoW: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumbVideoH`.
            public var thumbVideoH: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/originalAttachmentCount`.
            public var originalAttachmentCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/isExternal`.
            public var isExternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/externalType`.
            public var externalType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/externalUrl`.
            public var externalUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/urlPrivate`.
            public var urlPrivate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/urlPrivateDownload`.
            public var urlPrivateDownload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/urlStaticPreview`.
            public var urlStaticPreview: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/appName`.
            public var appName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb64`.
            public var thumb64: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb64Gif`.
            public var thumb64Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb64W`.
            public var thumb64W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb64H`.
            public var thumb64H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb80`.
            public var thumb80: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb80Gif`.
            public var thumb80Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb80W`.
            public var thumb80W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb80H`.
            public var thumb80H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb160`.
            public var thumb160: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb160Gif`.
            public var thumb160Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb160W`.
            public var thumb160W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb160H`.
            public var thumb160H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb360`.
            public var thumb360: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb360Gif`.
            public var thumb360Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb360W`.
            public var thumb360W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb360H`.
            public var thumb360H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb480`.
            public var thumb480: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb480Gif`.
            public var thumb480Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb480W`.
            public var thumb480W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb480H`.
            public var thumb480H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb720`.
            public var thumb720: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb720Gif`.
            public var thumb720Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb720W`.
            public var thumb720W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb720H`.
            public var thumb720H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb800`.
            public var thumb800: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb800Gif`.
            public var thumb800Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb800W`.
            public var thumb800W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb800H`.
            public var thumb800H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb960`.
            public var thumb960: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb960Gif`.
            public var thumb960Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb960W`.
            public var thumb960W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb960H`.
            public var thumb960H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb1024`.
            public var thumb1024: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb1024Gif`.
            public var thumb1024Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb1024W`.
            public var thumb1024W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumb1024H`.
            public var thumb1024H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumbVideo`.
            public var thumbVideo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumbGif`.
            public var thumbGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumbPdf`.
            public var thumbPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumbPdfW`.
            public var thumbPdfW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumbPdfH`.
            public var thumbPdfH: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/thumbTiny`.
            public var thumbTiny: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/convertedPdf`.
            public var convertedPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/imageExifRotation`.
            public var imageExifRotation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/originalW`.
            public var originalW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/originalH`.
            public var originalH: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/deanimateGif`.
            public var deanimateGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/permalinkPublic`.
            public var permalinkPublic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/editLink`.
            public var editLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/hasRichPreview`.
            public var hasRichPreview: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/mediaDisplayType`.
            public var mediaDisplayType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/previewIsTruncated`.
            public var previewIsTruncated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/previewHighlight`.
            public var previewHighlight: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/plainText`.
            public var plainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/previewPlainText`.
            public var previewPlainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/sentToSelf`.
            public var sentToSelf: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/linesMore`.
            public var linesMore: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/isPublic`.
            public var isPublic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/publicUrlShared`.
            public var publicUrlShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/hasMoreShares`.
            public var hasMoreShares: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/channelActionsTs`.
            public var channelActionsTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/channelActionsCount`.
            public var channelActionsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/simplifiedHtml`.
            public var simplifiedHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/mediaProgress`.
            public var mediaProgress: Components.Schemas.MediaProgress?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/quipThreadId`.
            public var quipThreadId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/isChannelSpace`.
            public var isChannelSpace: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/linkedChannelId`.
            public var linkedChannelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/teamsSharedWith`.
            public var teamsSharedWith: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/lastRead`.
            public var lastRead: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/titleBlocks`.
            public var titleBlocks: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/privateChannelsWithFileAccessCount`.
            public var privateChannelsWithFileAccessCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/privateFileWithAccessCount`.
            public var privateFileWithAccessCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/dmMpdmUsersWithFileAccess`.
            public var dmMpdmUsersWithFileAccess: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/orgOrWorkspaceAccess`.
            public var orgOrWorkspaceAccess: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/updateNotification`.
            public var updateNotification: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/canvasTemplateMode`.
            public var canvasTemplateMode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/templateConversionTs`.
            public var templateConversionTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/templateName`.
            public var templateName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/templateTitle`.
            public var templateTitle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/templateDescription`.
            public var templateDescription: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/templateIcon`.
            public var templateIcon: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/teamPrefVersionHistoryEnabled`.
            public var teamPrefVersionHistoryEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/showBadge`.
            public var showBadge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/listMetadata`.
            public var listMetadata: Components.Schemas.ListMetadata?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/listLimits`.
            public var listLimits: Components.Schemas.ListLimits?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/listCsvDownloadUrl`.
            public var listCsvDownloadUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/canToggleCanvasLock`.
            public var canToggleCanvasLock: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/isRestrictedSharingEnabled`.
            public var isRestrictedSharingEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/canvasPrintingEnabled`.
            public var canvasPrintingEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/initialComment`.
            public var initialComment: Components.Schemas.InitialComment?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/numStars`.
            public var numStars: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/isStarred`.
            public var isStarred: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/pinnedTo`.
            public var pinnedTo: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/PurpleFile/commentsCount`.
            public var commentsCount: Swift.Int?
            /// Creates a new `PurpleFile`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created:
            ///   - timestamp:
            ///   - name:
            ///   - title:
            ///   - subject:
            ///   - mimetype:
            ///   - filetype:
            ///   - user:
            ///   - mode:
            ///   - editable:
            ///   - editor:
            ///   - updated:
            ///   - editors:
            ///   - subtype:
            ///   - transcription:
            ///   - mp4:
            ///   - vtt:
            ///   - hls:
            ///   - username:
            ///   - size:
            ///   - deanimate:
            ///   - pjpeg:
            ///   - permalink:
            ///   - preview:
            ///   - lines:
            ///   - channels:
            ///   - groups:
            ///   - ims:
            ///   - shares:
            ///   - to:
            ///   - from:
            ///   - cc:
            ///   - headers:
            ///   - saved:
            ///   - access:
            ///   - favorites:
            ///   - reactions:
            ///   - attachments:
            ///   - blocks:
            ///   - prettyType:
            ///   - userTeam:
            ///   - sourceTeam:
            ///   - nonOwnerEditable:
            ///   - lastEditor:
            ///   - fileAccess:
            ///   - editTimestamp:
            ///   - altTxt:
            ///   - mp4Low:
            ///   - hlsEmbed:
            ///   - durationMs:
            ///   - thumbVideoW:
            ///   - thumbVideoH:
            ///   - originalAttachmentCount:
            ///   - isExternal:
            ///   - externalType:
            ///   - externalId:
            ///   - externalUrl:
            ///   - urlPrivate:
            ///   - urlPrivateDownload:
            ///   - urlStaticPreview:
            ///   - appId:
            ///   - appName:
            ///   - thumb64:
            ///   - thumb64Gif:
            ///   - thumb64W:
            ///   - thumb64H:
            ///   - thumb80:
            ///   - thumb80Gif:
            ///   - thumb80W:
            ///   - thumb80H:
            ///   - thumb160:
            ///   - thumb160Gif:
            ///   - thumb160W:
            ///   - thumb160H:
            ///   - thumb360:
            ///   - thumb360Gif:
            ///   - thumb360W:
            ///   - thumb360H:
            ///   - thumb480:
            ///   - thumb480Gif:
            ///   - thumb480W:
            ///   - thumb480H:
            ///   - thumb720:
            ///   - thumb720Gif:
            ///   - thumb720W:
            ///   - thumb720H:
            ///   - thumb800:
            ///   - thumb800Gif:
            ///   - thumb800W:
            ///   - thumb800H:
            ///   - thumb960:
            ///   - thumb960Gif:
            ///   - thumb960W:
            ///   - thumb960H:
            ///   - thumb1024:
            ///   - thumb1024Gif:
            ///   - thumb1024W:
            ///   - thumb1024H:
            ///   - thumbVideo:
            ///   - thumbGif:
            ///   - thumbPdf:
            ///   - thumbPdfW:
            ///   - thumbPdfH:
            ///   - thumbTiny:
            ///   - convertedPdf:
            ///   - imageExifRotation:
            ///   - originalW:
            ///   - originalH:
            ///   - deanimateGif:
            ///   - permalinkPublic:
            ///   - editLink:
            ///   - hasRichPreview:
            ///   - mediaDisplayType:
            ///   - previewIsTruncated:
            ///   - previewHighlight:
            ///   - plainText:
            ///   - previewPlainText:
            ///   - hasMore:
            ///   - sentToSelf:
            ///   - linesMore:
            ///   - isPublic:
            ///   - publicUrlShared:
            ///   - displayAsBot:
            ///   - hasMoreShares:
            ///   - channelActionsTs:
            ///   - channelActionsCount:
            ///   - simplifiedHtml:
            ///   - mediaProgress:
            ///   - quipThreadId:
            ///   - isChannelSpace:
            ///   - linkedChannelId:
            ///   - teamsSharedWith:
            ///   - lastRead:
            ///   - titleBlocks:
            ///   - privateChannelsWithFileAccessCount:
            ///   - privateFileWithAccessCount:
            ///   - dmMpdmUsersWithFileAccess:
            ///   - orgOrWorkspaceAccess:
            ///   - updateNotification:
            ///   - canvasTemplateMode:
            ///   - templateConversionTs:
            ///   - templateName:
            ///   - templateTitle:
            ///   - templateDescription:
            ///   - templateIcon:
            ///   - teamPrefVersionHistoryEnabled:
            ///   - showBadge:
            ///   - listMetadata:
            ///   - listLimits:
            ///   - listCsvDownloadUrl:
            ///   - canToggleCanvasLock:
            ///   - isRestrictedSharingEnabled:
            ///   - canvasPrintingEnabled:
            ///   - botId:
            ///   - initialComment:
            ///   - numStars:
            ///   - isStarred:
            ///   - pinnedTo:
            ///   - commentsCount:
            public init(
                id: Swift.String? = nil,
                created: Swift.Int? = nil,
                timestamp: Swift.Int? = nil,
                name: Swift.String? = nil,
                title: Swift.String? = nil,
                subject: Swift.String? = nil,
                mimetype: Swift.String? = nil,
                filetype: Swift.String? = nil,
                user: Swift.String? = nil,
                mode: Swift.String? = nil,
                editable: Swift.Bool? = nil,
                editor: Swift.String? = nil,
                updated: Swift.Int? = nil,
                editors: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                subtype: Swift.String? = nil,
                transcription: Components.Schemas.Transcription? = nil,
                mp4: Swift.String? = nil,
                vtt: Swift.String? = nil,
                hls: Swift.String? = nil,
                username: Swift.String? = nil,
                size: Swift.Int? = nil,
                deanimate: Swift.String? = nil,
                pjpeg: Swift.String? = nil,
                permalink: Swift.String? = nil,
                preview: Swift.String? = nil,
                lines: Swift.Int? = nil,
                channels: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                groups: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                ims: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                shares: Components.Schemas.Knocks? = nil,
                to: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                from: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                cc: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                headers: Components.Schemas.Headers? = nil,
                saved: Components.Schemas.Saved? = nil,
                access: Swift.String? = nil,
                favorites: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                reactions: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                attachments: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                blocks: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                prettyType: Swift.String? = nil,
                userTeam: Swift.String? = nil,
                sourceTeam: Swift.String? = nil,
                nonOwnerEditable: Swift.Bool? = nil,
                lastEditor: Swift.String? = nil,
                fileAccess: Swift.String? = nil,
                editTimestamp: Swift.Int? = nil,
                altTxt: Swift.String? = nil,
                mp4Low: Swift.String? = nil,
                hlsEmbed: Swift.String? = nil,
                durationMs: Swift.Int? = nil,
                thumbVideoW: Swift.Int? = nil,
                thumbVideoH: Swift.Int? = nil,
                originalAttachmentCount: Swift.Int? = nil,
                isExternal: Swift.Bool? = nil,
                externalType: Swift.String? = nil,
                externalId: Swift.String? = nil,
                externalUrl: Swift.String? = nil,
                urlPrivate: Swift.String? = nil,
                urlPrivateDownload: Swift.String? = nil,
                urlStaticPreview: Swift.String? = nil,
                appId: Swift.String? = nil,
                appName: Swift.String? = nil,
                thumb64: Swift.String? = nil,
                thumb64Gif: Swift.String? = nil,
                thumb64W: Swift.String? = nil,
                thumb64H: Swift.String? = nil,
                thumb80: Swift.String? = nil,
                thumb80Gif: Swift.String? = nil,
                thumb80W: Swift.String? = nil,
                thumb80H: Swift.String? = nil,
                thumb160: Swift.String? = nil,
                thumb160Gif: Swift.String? = nil,
                thumb160W: Swift.String? = nil,
                thumb160H: Swift.String? = nil,
                thumb360: Swift.String? = nil,
                thumb360Gif: Swift.String? = nil,
                thumb360W: Swift.String? = nil,
                thumb360H: Swift.String? = nil,
                thumb480: Swift.String? = nil,
                thumb480Gif: Swift.String? = nil,
                thumb480W: Swift.String? = nil,
                thumb480H: Swift.String? = nil,
                thumb720: Swift.String? = nil,
                thumb720Gif: Swift.String? = nil,
                thumb720W: Swift.String? = nil,
                thumb720H: Swift.String? = nil,
                thumb800: Swift.String? = nil,
                thumb800Gif: Swift.String? = nil,
                thumb800W: Swift.String? = nil,
                thumb800H: Swift.String? = nil,
                thumb960: Swift.String? = nil,
                thumb960Gif: Swift.String? = nil,
                thumb960W: Swift.String? = nil,
                thumb960H: Swift.String? = nil,
                thumb1024: Swift.String? = nil,
                thumb1024Gif: Swift.String? = nil,
                thumb1024W: Swift.String? = nil,
                thumb1024H: Swift.String? = nil,
                thumbVideo: Swift.String? = nil,
                thumbGif: Swift.String? = nil,
                thumbPdf: Swift.String? = nil,
                thumbPdfW: Swift.String? = nil,
                thumbPdfH: Swift.String? = nil,
                thumbTiny: Swift.String? = nil,
                convertedPdf: Swift.String? = nil,
                imageExifRotation: Swift.Int? = nil,
                originalW: Swift.String? = nil,
                originalH: Swift.String? = nil,
                deanimateGif: Swift.String? = nil,
                permalinkPublic: Swift.String? = nil,
                editLink: Swift.String? = nil,
                hasRichPreview: Swift.Bool? = nil,
                mediaDisplayType: Swift.String? = nil,
                previewIsTruncated: Swift.Bool? = nil,
                previewHighlight: Swift.String? = nil,
                plainText: Swift.String? = nil,
                previewPlainText: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                sentToSelf: Swift.Bool? = nil,
                linesMore: Swift.Int? = nil,
                isPublic: Swift.Bool? = nil,
                publicUrlShared: Swift.Bool? = nil,
                displayAsBot: Swift.Bool? = nil,
                hasMoreShares: Swift.Bool? = nil,
                channelActionsTs: Swift.String? = nil,
                channelActionsCount: Swift.Int? = nil,
                simplifiedHtml: Swift.String? = nil,
                mediaProgress: Components.Schemas.MediaProgress? = nil,
                quipThreadId: Swift.String? = nil,
                isChannelSpace: Swift.Bool? = nil,
                linkedChannelId: Swift.String? = nil,
                teamsSharedWith: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                lastRead: Swift.Int? = nil,
                titleBlocks: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                privateChannelsWithFileAccessCount: Swift.Int? = nil,
                privateFileWithAccessCount: Swift.Int? = nil,
                dmMpdmUsersWithFileAccess: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                orgOrWorkspaceAccess: Swift.String? = nil,
                updateNotification: Swift.Int? = nil,
                canvasTemplateMode: Swift.String? = nil,
                templateConversionTs: Swift.Int? = nil,
                templateName: Swift.String? = nil,
                templateTitle: Swift.String? = nil,
                templateDescription: Swift.String? = nil,
                templateIcon: Swift.String? = nil,
                teamPrefVersionHistoryEnabled: Swift.Bool? = nil,
                showBadge: Swift.Bool? = nil,
                listMetadata: Components.Schemas.ListMetadata? = nil,
                listLimits: Components.Schemas.ListLimits? = nil,
                listCsvDownloadUrl: Swift.String? = nil,
                canToggleCanvasLock: Swift.Bool? = nil,
                isRestrictedSharingEnabled: Swift.Bool? = nil,
                canvasPrintingEnabled: Swift.Bool? = nil,
                botId: Swift.String? = nil,
                initialComment: Components.Schemas.InitialComment? = nil,
                numStars: Swift.Int? = nil,
                isStarred: Swift.Bool? = nil,
                pinnedTo: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                commentsCount: Swift.Int? = nil
            ) {
                self.id = id
                self.created = created
                self.timestamp = timestamp
                self.name = name
                self.title = title
                self.subject = subject
                self.mimetype = mimetype
                self.filetype = filetype
                self.user = user
                self.mode = mode
                self.editable = editable
                self.editor = editor
                self.updated = updated
                self.editors = editors
                self.subtype = subtype
                self.transcription = transcription
                self.mp4 = mp4
                self.vtt = vtt
                self.hls = hls
                self.username = username
                self.size = size
                self.deanimate = deanimate
                self.pjpeg = pjpeg
                self.permalink = permalink
                self.preview = preview
                self.lines = lines
                self.channels = channels
                self.groups = groups
                self.ims = ims
                self.shares = shares
                self.to = to
                self.from = from
                self.cc = cc
                self.headers = headers
                self.saved = saved
                self.access = access
                self.favorites = favorites
                self.reactions = reactions
                self.attachments = attachments
                self.blocks = blocks
                self.prettyType = prettyType
                self.userTeam = userTeam
                self.sourceTeam = sourceTeam
                self.nonOwnerEditable = nonOwnerEditable
                self.lastEditor = lastEditor
                self.fileAccess = fileAccess
                self.editTimestamp = editTimestamp
                self.altTxt = altTxt
                self.mp4Low = mp4Low
                self.hlsEmbed = hlsEmbed
                self.durationMs = durationMs
                self.thumbVideoW = thumbVideoW
                self.thumbVideoH = thumbVideoH
                self.originalAttachmentCount = originalAttachmentCount
                self.isExternal = isExternal
                self.externalType = externalType
                self.externalId = externalId
                self.externalUrl = externalUrl
                self.urlPrivate = urlPrivate
                self.urlPrivateDownload = urlPrivateDownload
                self.urlStaticPreview = urlStaticPreview
                self.appId = appId
                self.appName = appName
                self.thumb64 = thumb64
                self.thumb64Gif = thumb64Gif
                self.thumb64W = thumb64W
                self.thumb64H = thumb64H
                self.thumb80 = thumb80
                self.thumb80Gif = thumb80Gif
                self.thumb80W = thumb80W
                self.thumb80H = thumb80H
                self.thumb160 = thumb160
                self.thumb160Gif = thumb160Gif
                self.thumb160W = thumb160W
                self.thumb160H = thumb160H
                self.thumb360 = thumb360
                self.thumb360Gif = thumb360Gif
                self.thumb360W = thumb360W
                self.thumb360H = thumb360H
                self.thumb480 = thumb480
                self.thumb480Gif = thumb480Gif
                self.thumb480W = thumb480W
                self.thumb480H = thumb480H
                self.thumb720 = thumb720
                self.thumb720Gif = thumb720Gif
                self.thumb720W = thumb720W
                self.thumb720H = thumb720H
                self.thumb800 = thumb800
                self.thumb800Gif = thumb800Gif
                self.thumb800W = thumb800W
                self.thumb800H = thumb800H
                self.thumb960 = thumb960
                self.thumb960Gif = thumb960Gif
                self.thumb960W = thumb960W
                self.thumb960H = thumb960H
                self.thumb1024 = thumb1024
                self.thumb1024Gif = thumb1024Gif
                self.thumb1024W = thumb1024W
                self.thumb1024H = thumb1024H
                self.thumbVideo = thumbVideo
                self.thumbGif = thumbGif
                self.thumbPdf = thumbPdf
                self.thumbPdfW = thumbPdfW
                self.thumbPdfH = thumbPdfH
                self.thumbTiny = thumbTiny
                self.convertedPdf = convertedPdf
                self.imageExifRotation = imageExifRotation
                self.originalW = originalW
                self.originalH = originalH
                self.deanimateGif = deanimateGif
                self.permalinkPublic = permalinkPublic
                self.editLink = editLink
                self.hasRichPreview = hasRichPreview
                self.mediaDisplayType = mediaDisplayType
                self.previewIsTruncated = previewIsTruncated
                self.previewHighlight = previewHighlight
                self.plainText = plainText
                self.previewPlainText = previewPlainText
                self.hasMore = hasMore
                self.sentToSelf = sentToSelf
                self.linesMore = linesMore
                self.isPublic = isPublic
                self.publicUrlShared = publicUrlShared
                self.displayAsBot = displayAsBot
                self.hasMoreShares = hasMoreShares
                self.channelActionsTs = channelActionsTs
                self.channelActionsCount = channelActionsCount
                self.simplifiedHtml = simplifiedHtml
                self.mediaProgress = mediaProgress
                self.quipThreadId = quipThreadId
                self.isChannelSpace = isChannelSpace
                self.linkedChannelId = linkedChannelId
                self.teamsSharedWith = teamsSharedWith
                self.lastRead = lastRead
                self.titleBlocks = titleBlocks
                self.privateChannelsWithFileAccessCount = privateChannelsWithFileAccessCount
                self.privateFileWithAccessCount = privateFileWithAccessCount
                self.dmMpdmUsersWithFileAccess = dmMpdmUsersWithFileAccess
                self.orgOrWorkspaceAccess = orgOrWorkspaceAccess
                self.updateNotification = updateNotification
                self.canvasTemplateMode = canvasTemplateMode
                self.templateConversionTs = templateConversionTs
                self.templateName = templateName
                self.templateTitle = templateTitle
                self.templateDescription = templateDescription
                self.templateIcon = templateIcon
                self.teamPrefVersionHistoryEnabled = teamPrefVersionHistoryEnabled
                self.showBadge = showBadge
                self.listMetadata = listMetadata
                self.listLimits = listLimits
                self.listCsvDownloadUrl = listCsvDownloadUrl
                self.canToggleCanvasLock = canToggleCanvasLock
                self.isRestrictedSharingEnabled = isRestrictedSharingEnabled
                self.canvasPrintingEnabled = canvasPrintingEnabled
                self.botId = botId
                self.initialComment = initialComment
                self.numStars = numStars
                self.isStarred = isStarred
                self.pinnedTo = pinnedTo
                self.commentsCount = commentsCount
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case timestamp
                case name
                case title
                case subject
                case mimetype
                case filetype
                case user
                case mode
                case editable
                case editor
                case updated
                case editors
                case subtype
                case transcription
                case mp4
                case vtt
                case hls
                case username
                case size
                case deanimate
                case pjpeg
                case permalink
                case preview
                case lines
                case channels
                case groups
                case ims
                case shares
                case to
                case from
                case cc
                case headers
                case saved
                case access
                case favorites
                case reactions
                case attachments
                case blocks
                case prettyType
                case userTeam
                case sourceTeam
                case nonOwnerEditable
                case lastEditor
                case fileAccess
                case editTimestamp
                case altTxt
                case mp4Low
                case hlsEmbed
                case durationMs
                case thumbVideoW
                case thumbVideoH
                case originalAttachmentCount
                case isExternal
                case externalType
                case externalId
                case externalUrl
                case urlPrivate
                case urlPrivateDownload
                case urlStaticPreview
                case appId
                case appName
                case thumb64
                case thumb64Gif
                case thumb64W
                case thumb64H
                case thumb80
                case thumb80Gif
                case thumb80W
                case thumb80H
                case thumb160
                case thumb160Gif
                case thumb160W
                case thumb160H
                case thumb360
                case thumb360Gif
                case thumb360W
                case thumb360H
                case thumb480
                case thumb480Gif
                case thumb480W
                case thumb480H
                case thumb720
                case thumb720Gif
                case thumb720W
                case thumb720H
                case thumb800
                case thumb800Gif
                case thumb800W
                case thumb800H
                case thumb960
                case thumb960Gif
                case thumb960W
                case thumb960H
                case thumb1024
                case thumb1024Gif
                case thumb1024W
                case thumb1024H
                case thumbVideo
                case thumbGif
                case thumbPdf
                case thumbPdfW
                case thumbPdfH
                case thumbTiny
                case convertedPdf
                case imageExifRotation
                case originalW
                case originalH
                case deanimateGif
                case permalinkPublic
                case editLink
                case hasRichPreview
                case mediaDisplayType
                case previewIsTruncated
                case previewHighlight
                case plainText
                case previewPlainText
                case hasMore
                case sentToSelf
                case linesMore
                case isPublic
                case publicUrlShared
                case displayAsBot
                case hasMoreShares
                case channelActionsTs
                case channelActionsCount
                case simplifiedHtml
                case mediaProgress
                case quipThreadId
                case isChannelSpace
                case linkedChannelId
                case teamsSharedWith
                case lastRead
                case titleBlocks
                case privateChannelsWithFileAccessCount
                case privateFileWithAccessCount
                case dmMpdmUsersWithFileAccess
                case orgOrWorkspaceAccess
                case updateNotification
                case canvasTemplateMode
                case templateConversionTs
                case templateName
                case templateTitle
                case templateDescription
                case templateIcon
                case teamPrefVersionHistoryEnabled
                case showBadge
                case listMetadata
                case listLimits
                case listCsvDownloadUrl
                case canToggleCanvasLock
                case isRestrictedSharingEnabled
                case canvasPrintingEnabled
                case botId
                case initialComment
                case numStars
                case isStarred
                case pinnedTo
                case commentsCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsInfoResponse`.
        public struct ConversationsInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsInfoResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ConversationsInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsInviteResponse`.
        public struct ConversationsInviteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteResponse/errors`.
            public var errors: [Components.Schemas._Error]?
            /// Creates a new `ConversationsInviteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - errors:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                errors: [Components.Schemas._Error]? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.error = error
                self.needed = needed
                self.provided = provided
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case error
                case needed
                case provided
                case errors
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsInviteSharedResponse`.
        public struct ConversationsInviteSharedResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteSharedResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteSharedResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteSharedResponse/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteSharedResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteSharedResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteSharedResponse/inviteId`.
            public var inviteId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteSharedResponse/confCode`.
            public var confCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsInviteSharedResponse/isLegacySharedChannel`.
            public var isLegacySharedChannel: Swift.Bool?
            /// Creates a new `ConversationsInviteSharedResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - url:
            ///   - needed:
            ///   - provided:
            ///   - inviteId:
            ///   - confCode:
            ///   - isLegacySharedChannel:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                url: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                inviteId: Swift.String? = nil,
                confCode: Swift.String? = nil,
                isLegacySharedChannel: Swift.Bool? = nil
            ) {
                self.ok = ok
                self.error = error
                self.url = url
                self.needed = needed
                self.provided = provided
                self.inviteId = inviteId
                self.confCode = confCode
                self.isLegacySharedChannel = isLegacySharedChannel
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case url
                case needed
                case provided
                case inviteId
                case confCode
                case isLegacySharedChannel
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsJoinResponse`.
        public struct ConversationsJoinResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsJoinResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsJoinResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ConversationsJoinResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsJoinResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsJoinResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsJoinResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsJoinResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ConversationsJoinResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Canvas`.
        public struct Canvas: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Canvas/fileId`.
            public var fileId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Canvas/isEmpty`.
            public var isEmpty: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Canvas/quipThreadId`.
            public var quipThreadId: Swift.String?
            /// Creates a new `Canvas`.
            ///
            /// - Parameters:
            ///   - fileId:
            ///   - isEmpty:
            ///   - quipThreadId:
            public init(
                fileId: Swift.String? = nil,
                isEmpty: Swift.Bool? = nil,
                quipThreadId: Swift.String? = nil
            ) {
                self.fileId = fileId
                self.isEmpty = isEmpty
                self.quipThreadId = quipThreadId
            }
            public enum CodingKeys: String, CodingKey {
                case fileId
                case isEmpty
                case quipThreadId
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsKickResponse`.
        public struct ConversationsKickResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsKickResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsKickResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsKickResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsKickResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsKickResponse/errors`.
            public var errors: Components.Schemas.Errors?
            /// Creates a new `ConversationsKickResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - errors:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                errors: Components.Schemas.Errors? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case errors
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsLeaveResponse`.
        public struct ConversationsLeaveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsLeaveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsLeaveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsLeaveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsLeaveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsLeaveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsListResponse`.
        public struct ConversationsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsListResponse/channels`.
            public var channels: [Components.Schemas.Channel]?
            /// - Remark: Generated from `#/components/schemas/ConversationsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ConversationsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channels:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                channels: [Components.Schemas.Channel]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.channels = channels
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channels
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsListConnectInvitesResponse`.
        public struct ConversationsListConnectInvitesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsListConnectInvitesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsListConnectInvitesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsListConnectInvitesResponse/arg`.
            public var arg: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsListConnectInvitesResponse/invites`.
            public var invites: [Components.Schemas.InviteElement]?
            /// - Remark: Generated from `#/components/schemas/ConversationsListConnectInvitesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsListConnectInvitesResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsListConnectInvitesResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ConversationsListConnectInvitesResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - arg:
            ///   - invites:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                arg: Swift.String? = nil,
                invites: [Components.Schemas.InviteElement]? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.arg = arg
                self.invites = invites
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case arg
                case invites
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/InviteElement`.
        public struct InviteElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InviteElement/direction`.
            public var direction: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteElement/status`.
            public var status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteElement/invite`.
            public var invite: Components.Schemas.InviteInvite?
            /// - Remark: Generated from `#/components/schemas/InviteElement/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/InviteElement/acceptances`.
            public var acceptances: [Components.Schemas.Acceptance]?
            /// - Remark: Generated from `#/components/schemas/InviteElement/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteElement/sig`.
            public var sig: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteElement/link`.
            public var link: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteElement/dateLastUpdated`.
            public var dateLastUpdated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InviteElement/inviteType`.
            public var inviteType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteElement/dateCreated`.
            public var dateCreated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InviteElement/dateInvalid`.
            public var dateInvalid: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InviteElement/invitingTeam`.
            public var invitingTeam: Components.Schemas.IngTeam?
            /// - Remark: Generated from `#/components/schemas/InviteElement/invitingUser`.
            public var invitingUser: Components.Schemas.TingUser?
            /// - Remark: Generated from `#/components/schemas/InviteElement/invitePayload`.
            public var invitePayload: Components.Schemas.InvitePayload?
            /// - Remark: Generated from `#/components/schemas/InviteElement/recipientUserId`.
            public var recipientUserId: Swift.String?
            /// Creates a new `InviteElement`.
            ///
            /// - Parameters:
            ///   - direction:
            ///   - status:
            ///   - invite:
            ///   - channel:
            ///   - acceptances:
            ///   - id:
            ///   - sig:
            ///   - link:
            ///   - dateLastUpdated:
            ///   - inviteType:
            ///   - dateCreated:
            ///   - dateInvalid:
            ///   - invitingTeam:
            ///   - invitingUser:
            ///   - invitePayload:
            ///   - recipientUserId:
            public init(
                direction: Swift.String? = nil,
                status: Swift.String? = nil,
                invite: Components.Schemas.InviteInvite? = nil,
                channel: Components.Schemas.Channel? = nil,
                acceptances: [Components.Schemas.Acceptance]? = nil,
                id: Swift.String? = nil,
                sig: Swift.String? = nil,
                link: Swift.String? = nil,
                dateLastUpdated: Swift.Int? = nil,
                inviteType: Swift.String? = nil,
                dateCreated: Swift.Int? = nil,
                dateInvalid: Swift.Int? = nil,
                invitingTeam: Components.Schemas.IngTeam? = nil,
                invitingUser: Components.Schemas.TingUser? = nil,
                invitePayload: Components.Schemas.InvitePayload? = nil,
                recipientUserId: Swift.String? = nil
            ) {
                self.direction = direction
                self.status = status
                self.invite = invite
                self.channel = channel
                self.acceptances = acceptances
                self.id = id
                self.sig = sig
                self.link = link
                self.dateLastUpdated = dateLastUpdated
                self.inviteType = inviteType
                self.dateCreated = dateCreated
                self.dateInvalid = dateInvalid
                self.invitingTeam = invitingTeam
                self.invitingUser = invitingUser
                self.invitePayload = invitePayload
                self.recipientUserId = recipientUserId
            }
            public enum CodingKeys: String, CodingKey {
                case direction
                case status
                case invite
                case channel
                case acceptances
                case id
                case sig
                case link
                case dateLastUpdated
                case inviteType
                case dateCreated
                case dateInvalid
                case invitingTeam
                case invitingUser
                case invitePayload
                case recipientUserId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Acceptance`.
        public struct Acceptance: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Acceptance/reviews`.
            public var reviews: [Components.Schemas.Review]?
            /// - Remark: Generated from `#/components/schemas/Acceptance/approvalStatus`.
            public var approvalStatus: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Acceptance/dateAccepted`.
            public var dateAccepted: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Acceptance/dateInvalid`.
            public var dateInvalid: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Acceptance/dateLastUpdated`.
            public var dateLastUpdated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Acceptance/acceptingTeam`.
            public var acceptingTeam: Components.Schemas.IngTeam?
            /// - Remark: Generated from `#/components/schemas/Acceptance/acceptingUser`.
            public var acceptingUser: Components.Schemas.TingUser?
            /// Creates a new `Acceptance`.
            ///
            /// - Parameters:
            ///   - reviews:
            ///   - approvalStatus:
            ///   - dateAccepted:
            ///   - dateInvalid:
            ///   - dateLastUpdated:
            ///   - acceptingTeam:
            ///   - acceptingUser:
            public init(
                reviews: [Components.Schemas.Review]? = nil,
                approvalStatus: Swift.String? = nil,
                dateAccepted: Swift.Int? = nil,
                dateInvalid: Swift.Int? = nil,
                dateLastUpdated: Swift.Int? = nil,
                acceptingTeam: Components.Schemas.IngTeam? = nil,
                acceptingUser: Components.Schemas.TingUser? = nil
            ) {
                self.reviews = reviews
                self.approvalStatus = approvalStatus
                self.dateAccepted = dateAccepted
                self.dateInvalid = dateInvalid
                self.dateLastUpdated = dateLastUpdated
                self.acceptingTeam = acceptingTeam
                self.acceptingUser = acceptingUser
            }
            public enum CodingKeys: String, CodingKey {
                case reviews
                case approvalStatus
                case dateAccepted
                case dateInvalid
                case dateLastUpdated
                case acceptingTeam
                case acceptingUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/IngTeam`.
        public struct IngTeam: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IngTeam/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IngTeam/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IngTeam/icon`.
            public var icon: Components.Schemas.Icon?
            /// - Remark: Generated from `#/components/schemas/IngTeam/domain`.
            public var domain: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IngTeam/isVerified`.
            public var isVerified: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IngTeam/dateCreated`.
            public var dateCreated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/IngTeam/avatarBaseUrl`.
            public var avatarBaseUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IngTeam/requiresSponsorship`.
            public var requiresSponsorship: Swift.Bool?
            /// Creates a new `IngTeam`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - icon:
            ///   - domain:
            ///   - isVerified:
            ///   - dateCreated:
            ///   - avatarBaseUrl:
            ///   - requiresSponsorship:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                icon: Components.Schemas.Icon? = nil,
                domain: Swift.String? = nil,
                isVerified: Swift.Bool? = nil,
                dateCreated: Swift.Int? = nil,
                avatarBaseUrl: Swift.String? = nil,
                requiresSponsorship: Swift.Bool? = nil
            ) {
                self.id = id
                self.name = name
                self.icon = icon
                self.domain = domain
                self.isVerified = isVerified
                self.dateCreated = dateCreated
                self.avatarBaseUrl = avatarBaseUrl
                self.requiresSponsorship = requiresSponsorship
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case icon
                case domain
                case isVerified
                case dateCreated
                case avatarBaseUrl
                case requiresSponsorship
            }
        }
        /// - Remark: Generated from `#/components/schemas/TingUser`.
        public struct TingUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TingUser/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TingUser/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TingUser/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TingUser/profile`.
            public var profile: Components.Schemas.Profile?
            /// - Remark: Generated from `#/components/schemas/TingUser/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TingUser/whoCanShareContactCard`.
            public var whoCanShareContactCard: Swift.String?
            /// Creates a new `TingUser`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - updated:
            ///   - profile:
            ///   - teamId:
            ///   - whoCanShareContactCard:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                updated: Swift.Int? = nil,
                profile: Components.Schemas.Profile? = nil,
                teamId: Swift.String? = nil,
                whoCanShareContactCard: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.updated = updated
                self.profile = profile
                self.teamId = teamId
                self.whoCanShareContactCard = whoCanShareContactCard
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case updated
                case profile
                case teamId
                case whoCanShareContactCard
            }
        }
        /// - Remark: Generated from `#/components/schemas/Profile`.
        public struct Profile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Profile/image24`.
            public var image24: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/image32`.
            public var image32: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/image48`.
            public var image48: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/image72`.
            public var image72: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/image192`.
            public var image192: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/image512`.
            public var image512: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/image1024`.
            public var image1024: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/imageOriginal`.
            public var imageOriginal: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/avatarHash`.
            public var avatarHash: Swift.String?
            /// Creates a new `Profile`.
            ///
            /// - Parameters:
            ///   - image24:
            ///   - image32:
            ///   - image48:
            ///   - image72:
            ///   - image192:
            ///   - image512:
            ///   - image1024:
            ///   - imageOriginal:
            ///   - avatarHash:
            public init(
                image24: Swift.String? = nil,
                image32: Swift.String? = nil,
                image48: Swift.String? = nil,
                image72: Swift.String? = nil,
                image192: Swift.String? = nil,
                image512: Swift.String? = nil,
                image1024: Swift.String? = nil,
                imageOriginal: Swift.String? = nil,
                avatarHash: Swift.String? = nil
            ) {
                self.image24 = image24
                self.image32 = image32
                self.image48 = image48
                self.image72 = image72
                self.image192 = image192
                self.image512 = image512
                self.image1024 = image1024
                self.imageOriginal = imageOriginal
                self.avatarHash = avatarHash
            }
            public enum CodingKeys: String, CodingKey {
                case image24
                case image32
                case image48
                case image72
                case image192
                case image512
                case image1024
                case imageOriginal
                case avatarHash
            }
        }
        /// - Remark: Generated from `#/components/schemas/Review`.
        public struct Review: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Review/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Review/dateReview`.
            public var dateReview: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Review/reviewingTeam`.
            public var reviewingTeam: Components.Schemas.IngTeam?
            /// Creates a new `Review`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - dateReview:
            ///   - reviewingTeam:
            public init(
                _type: Swift.String? = nil,
                dateReview: Swift.Int? = nil,
                reviewingTeam: Components.Schemas.IngTeam? = nil
            ) {
                self._type = _type
                self.dateReview = dateReview
                self.reviewingTeam = reviewingTeam
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case dateReview
                case reviewingTeam
            }
        }
        /// - Remark: Generated from `#/components/schemas/InviteInvite`.
        public struct InviteInvite: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InviteInvite/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteInvite/link`.
            public var link: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteInvite/sig`.
            public var sig: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteInvite/dateCreated`.
            public var dateCreated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InviteInvite/dateInvalid`.
            public var dateInvalid: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InviteInvite/invitingTeam`.
            public var invitingTeam: Components.Schemas.IngTeam?
            /// - Remark: Generated from `#/components/schemas/InviteInvite/invitingUser`.
            public var invitingUser: Components.Schemas.TingUser?
            /// - Remark: Generated from `#/components/schemas/InviteInvite/recipientUserId`.
            public var recipientUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InviteInvite/recipientEmail`.
            public var recipientEmail: Swift.String?
            /// Creates a new `InviteInvite`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - link:
            ///   - sig:
            ///   - dateCreated:
            ///   - dateInvalid:
            ///   - invitingTeam:
            ///   - invitingUser:
            ///   - recipientUserId:
            ///   - recipientEmail:
            public init(
                id: Swift.String? = nil,
                link: Swift.String? = nil,
                sig: Swift.String? = nil,
                dateCreated: Swift.Int? = nil,
                dateInvalid: Swift.Int? = nil,
                invitingTeam: Components.Schemas.IngTeam? = nil,
                invitingUser: Components.Schemas.TingUser? = nil,
                recipientUserId: Swift.String? = nil,
                recipientEmail: Swift.String? = nil
            ) {
                self.id = id
                self.link = link
                self.sig = sig
                self.dateCreated = dateCreated
                self.dateInvalid = dateInvalid
                self.invitingTeam = invitingTeam
                self.invitingUser = invitingUser
                self.recipientUserId = recipientUserId
                self.recipientEmail = recipientEmail
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case link
                case sig
                case dateCreated
                case dateInvalid
                case invitingTeam
                case invitingUser
                case recipientUserId
                case recipientEmail
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvitePayload`.
        public struct InvitePayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InvitePayload/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/InvitePayload/inviteType`.
            public var inviteType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InvitePayload/isSponsored`.
            public var isSponsored: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InvitePayload/isExternalLimited`.
            public var isExternalLimited: Swift.Bool?
            /// Creates a new `InvitePayload`.
            ///
            /// - Parameters:
            ///   - channel:
            ///   - inviteType:
            ///   - isSponsored:
            ///   - isExternalLimited:
            public init(
                channel: Components.Schemas.Channel? = nil,
                inviteType: Swift.String? = nil,
                isSponsored: Swift.Bool? = nil,
                isExternalLimited: Swift.Bool? = nil
            ) {
                self.channel = channel
                self.inviteType = inviteType
                self.isSponsored = isSponsored
                self.isExternalLimited = isExternalLimited
            }
            public enum CodingKeys: String, CodingKey {
                case channel
                case inviteType
                case isSponsored
                case isExternalLimited
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsMarkResponse`.
        public struct ConversationsMarkResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsMarkResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsMarkResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsMarkResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsMarkResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsMarkResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsMembersResponse`.
        public struct ConversationsMembersResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsMembersResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsMembersResponse/members`.
            public var members: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ConversationsMembersResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsMembersResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsMembersResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsMembersResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ConversationsMembersResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - members:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                members: [Swift.String]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.members = members
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case members
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsOpenResponse`.
        public struct ConversationsOpenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsOpenResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsOpenResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ConversationsOpenResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsOpenResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsOpenResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsOpenResponse/noOp`.
            public var noOp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ConversationsOpenResponse/alreadyOpen`.
            public var alreadyOpen: Swift.Bool?
            /// Creates a new `ConversationsOpenResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - noOp:
            ///   - alreadyOpen:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                noOp: Swift.Bool? = nil,
                alreadyOpen: Swift.Bool? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.error = error
                self.needed = needed
                self.provided = provided
                self.noOp = noOp
                self.alreadyOpen = alreadyOpen
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case error
                case needed
                case provided
                case noOp
                case alreadyOpen
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsRenameResponse`.
        public struct ConversationsRenameResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsRenameResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ConversationsRenameResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsRenameResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRenameResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRenameResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsRenameResponse`.
            ///
            /// - Parameters:
            ///   - channel:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                channel: Components.Schemas.Channel? = nil,
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.channel = channel
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case channel
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsRepliesResponse`.
        public struct ConversationsRepliesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsRepliesResponse/messages`.
            public var messages: [Components.Schemas.MessageElement]?
            /// - Remark: Generated from `#/components/schemas/ConversationsRepliesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsRepliesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRepliesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRepliesResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRepliesResponse/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ConversationsRepliesResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ConversationsRepliesResponse`.
            ///
            /// - Parameters:
            ///   - messages:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - hasMore:
            ///   - responseMetadata:
            public init(
                messages: [Components.Schemas.MessageElement]? = nil,
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.messages = messages
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.hasMore = hasMore
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case messages
                case ok
                case error
                case needed
                case provided
                case hasMore
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteApproveResponse`.
        public struct ConversationsRequestSharedInviteApproveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteApproveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteApproveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteApproveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteApproveResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteApproveResponse/inviteId`.
            public var inviteId: Swift.String?
            /// Creates a new `ConversationsRequestSharedInviteApproveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - inviteId:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                inviteId: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.inviteId = inviteId
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case inviteId
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteDenyResponse`.
        public struct ConversationsRequestSharedInviteDenyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteDenyResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteDenyResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteDenyResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteDenyResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteDenyResponse/inviteId`.
            public var inviteId: Swift.String?
            /// Creates a new `ConversationsRequestSharedInviteDenyResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - inviteId:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                inviteId: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.inviteId = inviteId
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case inviteId
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteListResponse`.
        public struct ConversationsRequestSharedInviteListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsRequestSharedInviteListResponse/inviteRequests`.
            public var inviteRequests: [Components.Schemas.InviteRequest]?
            /// Creates a new `ConversationsRequestSharedInviteListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - inviteRequests:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                inviteRequests: [Components.Schemas.InviteRequest]? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.inviteRequests = inviteRequests
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case inviteRequests
            }
        }
        /// - Remark: Generated from `#/components/schemas/Connection`.
        public struct Connection: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Connection/team`.
            public var team: Components.Schemas.Team?
            /// - Remark: Generated from `#/components/schemas/Connection/isPrivate`.
            public var isPrivate: Swift.Bool?
            /// Creates a new `Connection`.
            ///
            /// - Parameters:
            ///   - team:
            ///   - isPrivate:
            public init(
                team: Components.Schemas.Team? = nil,
                isPrivate: Swift.Bool? = nil
            ) {
                self.team = team
                self.isPrivate = isPrivate
            }
            public enum CodingKeys: String, CodingKey {
                case team
                case isPrivate
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvitingUser`.
        public struct InvitingUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InvitingUser/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InvitingUser/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InvitingUser/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InvitingUser/profile`.
            public var profile: Components.Schemas.Profile?
            /// - Remark: Generated from `#/components/schemas/InvitingUser/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InvitingUser/whoCanShareContactCard`.
            public var whoCanShareContactCard: Swift.String?
            /// Creates a new `InvitingUser`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - updated:
            ///   - profile:
            ///   - teamId:
            ///   - whoCanShareContactCard:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                updated: Swift.Int? = nil,
                profile: Components.Schemas.Profile? = nil,
                teamId: Swift.String? = nil,
                whoCanShareContactCard: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.updated = updated
                self.profile = profile
                self.teamId = teamId
                self.whoCanShareContactCard = whoCanShareContactCard
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case updated
                case profile
                case teamId
                case whoCanShareContactCard
            }
        }
        /// - Remark: Generated from `#/components/schemas/TargetUser`.
        public struct TargetUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TargetUser/recipientEmail`.
            public var recipientEmail: Swift.String?
            /// Creates a new `TargetUser`.
            ///
            /// - Parameters:
            ///   - recipientEmail:
            public init(recipientEmail: Swift.String? = nil) {
                self.recipientEmail = recipientEmail
            }
            public enum CodingKeys: String, CodingKey {
                case recipientEmail
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsSetPurposeResponse`.
        public struct ConversationsSetPurposeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsSetPurposeResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsSetPurposeResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ConversationsSetPurposeResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsSetPurposeResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsSetPurposeResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsSetPurposeResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsSetTopicResponse`.
        public struct ConversationsSetTopicResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsSetTopicResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsSetTopicResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/ConversationsSetTopicResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsSetTopicResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsSetTopicResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsSetTopicResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConversationsUnarchiveResponse`.
        public struct ConversationsUnarchiveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConversationsUnarchiveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ConversationsUnarchiveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsUnarchiveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConversationsUnarchiveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ConversationsUnarchiveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/DialogOpenResponse`.
        public struct DialogOpenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DialogOpenResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DialogOpenResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DialogOpenResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DialogOpenResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DialogOpenResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DialogOpenResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `DialogOpenResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/DndEndDndResponse`.
        public struct DndEndDndResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DndEndDndResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DndEndDndResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndEndDndResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndEndDndResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `DndEndDndResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/DndEndSnoozeResponse`.
        public struct DndEndSnoozeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DndEndSnoozeResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DndEndSnoozeResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndEndSnoozeResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndEndSnoozeResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndEndSnoozeResponse/dndEnabled`.
            public var dndEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/DndEndSnoozeResponse/nextDndStartTs`.
            public var nextDndStartTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/DndEndSnoozeResponse/nextDndEndTs`.
            public var nextDndEndTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/DndEndSnoozeResponse/snoozeEnabled`.
            public var snoozeEnabled: Swift.Bool?
            /// Creates a new `DndEndSnoozeResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - dndEnabled:
            ///   - nextDndStartTs:
            ///   - nextDndEndTs:
            ///   - snoozeEnabled:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                dndEnabled: Swift.Bool? = nil,
                nextDndStartTs: Swift.Int? = nil,
                nextDndEndTs: Swift.Int? = nil,
                snoozeEnabled: Swift.Bool? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.dndEnabled = dndEnabled
                self.nextDndStartTs = nextDndStartTs
                self.nextDndEndTs = nextDndEndTs
                self.snoozeEnabled = snoozeEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case dndEnabled
                case nextDndStartTs
                case nextDndEndTs
                case snoozeEnabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/DndInfoResponse`.
        public struct DndInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DndInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DndInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndInfoResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndInfoResponse/dndEnabled`.
            public var dndEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/DndInfoResponse/nextDndStartTs`.
            public var nextDndStartTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/DndInfoResponse/nextDndEndTs`.
            public var nextDndEndTs: Swift.Int?
            /// Creates a new `DndInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - dndEnabled:
            ///   - nextDndStartTs:
            ///   - nextDndEndTs:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                dndEnabled: Swift.Bool? = nil,
                nextDndStartTs: Swift.Int? = nil,
                nextDndEndTs: Swift.Int? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.dndEnabled = dndEnabled
                self.nextDndStartTs = nextDndStartTs
                self.nextDndEndTs = nextDndEndTs
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case dndEnabled
                case nextDndStartTs
                case nextDndEndTs
            }
        }
        /// - Remark: Generated from `#/components/schemas/DndSetSnoozeResponse`.
        public struct DndSetSnoozeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DndSetSnoozeResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DndSetSnoozeResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndSetSnoozeResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndSetSnoozeResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndSetSnoozeResponse/snoozeEnabled`.
            public var snoozeEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/DndSetSnoozeResponse/snoozeEndtime`.
            public var snoozeEndtime: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/DndSetSnoozeResponse/snoozeRemaining`.
            public var snoozeRemaining: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/DndSetSnoozeResponse/snoozeIsIndefinite`.
            public var snoozeIsIndefinite: Swift.Bool?
            /// Creates a new `DndSetSnoozeResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - snoozeEnabled:
            ///   - snoozeEndtime:
            ///   - snoozeRemaining:
            ///   - snoozeIsIndefinite:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                snoozeEnabled: Swift.Bool? = nil,
                snoozeEndtime: Swift.Int? = nil,
                snoozeRemaining: Swift.Int? = nil,
                snoozeIsIndefinite: Swift.Bool? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.snoozeEnabled = snoozeEnabled
                self.snoozeEndtime = snoozeEndtime
                self.snoozeRemaining = snoozeRemaining
                self.snoozeIsIndefinite = snoozeIsIndefinite
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case snoozeEnabled
                case snoozeEndtime
                case snoozeRemaining
                case snoozeIsIndefinite
            }
        }
        /// - Remark: Generated from `#/components/schemas/DndTeamInfoResponse`.
        public struct DndTeamInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DndTeamInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DndTeamInfoResponse/users`.
            public var users: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/DndTeamInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndTeamInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DndTeamInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `DndTeamInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - users:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                users: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.users = users
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case users
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/EmojiListResponse`.
        public struct EmojiListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EmojiListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/EmojiListResponse/emoji`.
            public var emoji: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/EmojiListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EmojiListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EmojiListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EmojiListResponse/categories`.
            public var categories: [Components.Schemas.Category]?
            /// - Remark: Generated from `#/components/schemas/EmojiListResponse/cacheTs`.
            public var cacheTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EmojiListResponse/categoriesVersion`.
            public var categoriesVersion: Swift.String?
            /// Creates a new `EmojiListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - emoji:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - categories:
            ///   - cacheTs:
            ///   - categoriesVersion:
            public init(
                ok: Swift.Bool,
                emoji: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                categories: [Components.Schemas.Category]? = nil,
                cacheTs: Swift.String? = nil,
                categoriesVersion: Swift.String? = nil
            ) {
                self.ok = ok
                self.emoji = emoji
                self.error = error
                self.needed = needed
                self.provided = provided
                self.categories = categories
                self.cacheTs = cacheTs
                self.categoriesVersion = categoriesVersion
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case emoji
                case error
                case needed
                case provided
                case categories
                case cacheTs
                case categoriesVersion
            }
        }
        /// - Remark: Generated from `#/components/schemas/Category`.
        public struct Category: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Category/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Category/emojiNames`.
            public var emojiNames: [Swift.String]?
            /// Creates a new `Category`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - emojiNames:
            public init(
                name: Swift.String? = nil,
                emojiNames: [Swift.String]? = nil
            ) {
                self.name = name
                self.emojiNames = emojiNames
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case emojiNames
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesCommentsAddResponse`.
        public struct FilesCommentsAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesCommentsAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesCommentsAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesCommentsAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesCommentsAddResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesCommentsAddResponse/reqMethod`.
            public var reqMethod: Swift.String?
            /// Creates a new `FilesCommentsAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - reqMethod:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                reqMethod: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.reqMethod = reqMethod
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case reqMethod
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesCommentsDeleteResponse`.
        public struct FilesCommentsDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesCommentsDeleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesCommentsDeleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesCommentsDeleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesCommentsDeleteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesCommentsDeleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesCommentsEditResponse`.
        public struct FilesCommentsEditResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesCommentsEditResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesCommentsEditResponse/comment`.
            public var comment: Components.Schemas.Comment?
            /// - Remark: Generated from `#/components/schemas/FilesCommentsEditResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesCommentsEditResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesCommentsEditResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesCommentsEditResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - comment:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                comment: Components.Schemas.Comment? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.comment = comment
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case comment
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesCompleteUploadExternalResponse`.
        public struct FilesCompleteUploadExternalResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesCompleteUploadExternalResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesCompleteUploadExternalResponse/files`.
            public var files: [Components.Schemas.File]?
            /// - Remark: Generated from `#/components/schemas/FilesCompleteUploadExternalResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesCompleteUploadExternalResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesCompleteUploadExternalResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesCompleteUploadExternalResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `FilesCompleteUploadExternalResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - files:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                files: [Components.Schemas.File]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.files = files
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case files
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Public`.
        public struct Public: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Public/ts`.
            public var ts: Components.Schemas.Ts?
            /// - Remark: Generated from `#/components/schemas/Public/access`.
            public var access: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Public/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Public/shareUserId`.
            public var shareUserId: Components.Schemas.LastEditor?
            /// - Remark: Generated from `#/components/schemas/Public/replyUsers`.
            public var replyUsers: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Public/replyUsersCount`.
            public var replyUsersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Public/replyCount`.
            public var replyCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Public/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Public/latestReply`.
            public var latestReply: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Public/channelName`.
            public var channelName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Public/teamId`.
            public var teamId: Components.Schemas.UserTeam?
            /// - Remark: Generated from `#/components/schemas/Public/dateLastShared`.
            public var dateLastShared: Swift.Int?
            /// Creates a new `Public`.
            ///
            /// - Parameters:
            ///   - ts:
            ///   - access:
            ///   - source:
            ///   - shareUserId:
            ///   - replyUsers:
            ///   - replyUsersCount:
            ///   - replyCount:
            ///   - threadTs:
            ///   - latestReply:
            ///   - channelName:
            ///   - teamId:
            ///   - dateLastShared:
            public init(
                ts: Components.Schemas.Ts? = nil,
                access: Swift.String? = nil,
                source: Swift.String? = nil,
                shareUserId: Components.Schemas.LastEditor? = nil,
                replyUsers: [Swift.String]? = nil,
                replyUsersCount: Swift.Int? = nil,
                replyCount: Swift.Int? = nil,
                threadTs: Swift.String? = nil,
                latestReply: Swift.String? = nil,
                channelName: Swift.String? = nil,
                teamId: Components.Schemas.UserTeam? = nil,
                dateLastShared: Swift.Int? = nil
            ) {
                self.ts = ts
                self.access = access
                self.source = source
                self.shareUserId = shareUserId
                self.replyUsers = replyUsers
                self.replyUsersCount = replyUsersCount
                self.replyCount = replyCount
                self.threadTs = threadTs
                self.latestReply = latestReply
                self.channelName = channelName
                self.teamId = teamId
                self.dateLastShared = dateLastShared
            }
            public enum CodingKeys: String, CodingKey {
                case ts
                case access
                case source
                case shareUserId
                case replyUsers
                case replyUsersCount
                case replyCount
                case threadTs
                case latestReply
                case channelName
                case teamId
                case dateLastShared
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesDeleteResponse`.
        public struct FilesDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesDeleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesDeleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesDeleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesDeleteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesDeleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesGetUploadURLExternalResponse`.
        public struct FilesGetUploadURLExternalResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesGetUploadURLExternalResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesGetUploadURLExternalResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesGetUploadURLExternalResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesGetUploadURLExternalResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesGetUploadURLExternalResponse/uploadUrl`.
            public var uploadUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesGetUploadURLExternalResponse/fileId`.
            public var fileId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesGetUploadURLExternalResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `FilesGetUploadURLExternalResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - uploadUrl:
            ///   - fileId:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                uploadUrl: Swift.String? = nil,
                fileId: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.uploadUrl = uploadUrl
                self.fileId = fileId
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case uploadUrl
                case fileId
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesInfoResponse`.
        public struct FilesInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/file`.
            public var file: Components.Schemas.File?
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/content`.
            public var content: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/comments`.
            public var comments: [Components.Schemas.Comment]?
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/paging`.
            public var paging: Components.Schemas.Paging?
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/isTruncated`.
            public var isTruncated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/contentHighlightHtml`.
            public var contentHighlightHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/contentHighlightCss`.
            public var contentHighlightCss: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesInfoResponse/contentHighlightHtmlTruncated`.
            public var contentHighlightHtmlTruncated: Swift.Bool?
            /// Creates a new `FilesInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - file:
            ///   - content:
            ///   - comments:
            ///   - paging:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - isTruncated:
            ///   - contentHighlightHtml:
            ///   - contentHighlightCss:
            ///   - contentHighlightHtmlTruncated:
            public init(
                ok: Swift.Bool,
                file: Components.Schemas.File? = nil,
                content: Swift.String? = nil,
                comments: [Components.Schemas.Comment]? = nil,
                paging: Components.Schemas.Paging? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                isTruncated: Swift.Bool? = nil,
                contentHighlightHtml: Swift.String? = nil,
                contentHighlightCss: Swift.String? = nil,
                contentHighlightHtmlTruncated: Swift.Bool? = nil
            ) {
                self.ok = ok
                self.file = file
                self.content = content
                self.comments = comments
                self.paging = paging
                self.error = error
                self.needed = needed
                self.provided = provided
                self.isTruncated = isTruncated
                self.contentHighlightHtml = contentHighlightHtml
                self.contentHighlightCss = contentHighlightCss
                self.contentHighlightHtmlTruncated = contentHighlightHtmlTruncated
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case file
                case content
                case comments
                case paging
                case error
                case needed
                case provided
                case isTruncated
                case contentHighlightHtml
                case contentHighlightCss
                case contentHighlightHtmlTruncated
            }
        }
        /// - Remark: Generated from `#/components/schemas/Paging`.
        public struct Paging: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Paging/count`.
            public var count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Paging/total`.
            public var total: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Paging/page`.
            public var page: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Paging/pages`.
            public var pages: Swift.Int?
            /// Creates a new `Paging`.
            ///
            /// - Parameters:
            ///   - count:
            ///   - total:
            ///   - page:
            ///   - pages:
            public init(
                count: Swift.Int? = nil,
                total: Swift.Int? = nil,
                page: Swift.Int? = nil,
                pages: Swift.Int? = nil
            ) {
                self.count = count
                self.total = total
                self.page = page
                self.pages = pages
            }
            public enum CodingKeys: String, CodingKey {
                case count
                case total
                case page
                case pages
            }
        }
        /// - Remark: Generated from `#/components/schemas/Description`.
        public struct Description: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Description/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Description/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Description/emoji`.
            public var emoji: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Description/verbatim`.
            public var verbatim: Swift.Bool?
            /// Creates a new `Description`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - text:
            ///   - emoji:
            ///   - verbatim:
            public init(
                _type: Swift.String? = nil,
                text: Swift.String? = nil,
                emoji: Swift.Bool? = nil,
                verbatim: Swift.Bool? = nil
            ) {
                self._type = _type
                self.text = text
                self.emoji = emoji
                self.verbatim = verbatim
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case emoji
                case verbatim
            }
        }
        /// - Remark: Generated from `#/components/schemas/TextType`.
        @frozen public enum TextType: String, Codable, Hashable, Sendable, CaseIterable {
            case plainText = "plain_text"
            case mrkdwn = "mrkdwn"
        }
        /// - Remark: Generated from `#/components/schemas/FilesListResponse`.
        public struct FilesListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesListResponse/files`.
            public var files: [Components.Schemas.File]?
            /// - Remark: Generated from `#/components/schemas/FilesListResponse/paging`.
            public var paging: Components.Schemas.Paging?
            /// - Remark: Generated from `#/components/schemas/FilesListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - files:
            ///   - paging:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                files: [Components.Schemas.File]? = nil,
                paging: Components.Schemas.Paging? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.files = files
                self.paging = paging
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case files
                case paging
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesRemoteAddResponse`.
        public struct FilesRemoteAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesRemoteAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesRemoteAddResponse/file`.
            public var file: Components.Schemas.File?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteAddResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesRemoteAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - file:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                file: Components.Schemas.File? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.file = file
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case file
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesRemoteInfoResponse`.
        public struct FilesRemoteInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesRemoteInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesRemoteInfoResponse/file`.
            public var file: Components.Schemas.File?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesRemoteInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - file:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                file: Components.Schemas.File? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.file = file
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case file
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesRemoteListResponse`.
        public struct FilesRemoteListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesRemoteListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesRemoteListResponse/files`.
            public var files: [Components.Schemas.File]?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `FilesRemoteListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - files:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                files: [Components.Schemas.File]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.files = files
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case files
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesRemoteRemoveResponse`.
        public struct FilesRemoteRemoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesRemoteRemoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesRemoteRemoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteRemoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteRemoveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesRemoteRemoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesRemoteShareResponse`.
        public struct FilesRemoteShareResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesRemoteShareResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesRemoteShareResponse/file`.
            public var file: Components.Schemas.File?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteShareResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteShareResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteShareResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesRemoteShareResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - file:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                file: Components.Schemas.File? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.file = file
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case file
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesRemoteUpdateResponse`.
        public struct FilesRemoteUpdateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesRemoteUpdateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesRemoteUpdateResponse/file`.
            public var file: Components.Schemas.File?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteUpdateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteUpdateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRemoteUpdateResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesRemoteUpdateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - file:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                file: Components.Schemas.File? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.file = file
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case file
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesRevokePublicURLResponse`.
        public struct FilesRevokePublicURLResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesRevokePublicURLResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesRevokePublicURLResponse/file`.
            public var file: Components.Schemas.File?
            /// - Remark: Generated from `#/components/schemas/FilesRevokePublicURLResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRevokePublicURLResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesRevokePublicURLResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesRevokePublicURLResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - file:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                file: Components.Schemas.File? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.file = file
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case file
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesSharedPublicURLResponse`.
        public struct FilesSharedPublicURLResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesSharedPublicURLResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesSharedPublicURLResponse/file`.
            public var file: Components.Schemas.File?
            /// - Remark: Generated from `#/components/schemas/FilesSharedPublicURLResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesSharedPublicURLResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesSharedPublicURLResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesSharedPublicURLResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - file:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                file: Components.Schemas.File? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.file = file
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case file
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesUploadResponse`.
        public struct FilesUploadResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesUploadResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FilesUploadResponse/file`.
            public var file: Components.Schemas.File?
            /// - Remark: Generated from `#/components/schemas/FilesUploadResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesUploadResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesUploadResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FilesUploadResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - file:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                file: Components.Schemas.File? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.file = file
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case file
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FunctionsCompleteErrorResponse`.
        public struct FunctionsCompleteErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FunctionsCompleteErrorResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FunctionsCompleteErrorResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FunctionsCompleteErrorResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FunctionsCompleteErrorResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FunctionsCompleteErrorResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/FunctionsCompleteSuccessResponse`.
        public struct FunctionsCompleteSuccessResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FunctionsCompleteSuccessResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/FunctionsCompleteSuccessResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FunctionsCompleteSuccessResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FunctionsCompleteSuccessResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `FunctionsCompleteSuccessResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsArchiveResponse`.
        public struct GroupsArchiveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsArchiveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsArchiveResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsArchiveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsArchiveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsArchiveResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsArchiveResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsArchiveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsCloseResponse`.
        public struct GroupsCloseResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsCloseResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsCloseResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsCloseResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsCloseResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `GroupsCloseResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsCreateResponse`.
        public struct GroupsCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsCreateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsCreateResponse/group`.
            public var group: Components.Schemas.Group?
            /// - Remark: Generated from `#/components/schemas/GroupsCreateResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsCreateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsCreateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsCreateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsCreateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsCreateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - group:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                group: Components.Schemas.Group? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.group = group
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case group
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Group`.
        public struct Group: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Group/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Group/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Group/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Group/creator`.
            public var creator: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Group/members`.
            public var members: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Group/topic`.
            public var topic: Components.Schemas.Purpose?
            /// - Remark: Generated from `#/components/schemas/Group/purpose`.
            public var purpose: Components.Schemas.Purpose?
            /// - Remark: Generated from `#/components/schemas/Group/latest`.
            public var latest: Components.Schemas.Latest?
            /// - Remark: Generated from `#/components/schemas/Group/priority`.
            public var priority: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Group/nameNormalized`.
            public var nameNormalized: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Group/isGroup`.
            public var isGroup: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Group/isArchived`.
            public var isArchived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Group/isMpim`.
            public var isMpim: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Group/isOpen`.
            public var isOpen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Group/isReadOnly`.
            public var isReadOnly: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Group/isThreadOnly`.
            public var isThreadOnly: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Group/parentGroup`.
            public var parentGroup: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Group/lastRead`.
            public var lastRead: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Group/unreadCount`.
            public var unreadCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Group/unreadCountDisplay`.
            public var unreadCountDisplay: Swift.Int?
            /// Creates a new `Group`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - created:
            ///   - creator:
            ///   - members:
            ///   - topic:
            ///   - purpose:
            ///   - latest:
            ///   - priority:
            ///   - nameNormalized:
            ///   - isGroup:
            ///   - isArchived:
            ///   - isMpim:
            ///   - isOpen:
            ///   - isReadOnly:
            ///   - isThreadOnly:
            ///   - parentGroup:
            ///   - lastRead:
            ///   - unreadCount:
            ///   - unreadCountDisplay:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                created: Swift.Int? = nil,
                creator: Swift.String? = nil,
                members: [Swift.String]? = nil,
                topic: Components.Schemas.Purpose? = nil,
                purpose: Components.Schemas.Purpose? = nil,
                latest: Components.Schemas.Latest? = nil,
                priority: Swift.Int? = nil,
                nameNormalized: Swift.String? = nil,
                isGroup: Swift.Bool? = nil,
                isArchived: Swift.Bool? = nil,
                isMpim: Swift.Bool? = nil,
                isOpen: Swift.Bool? = nil,
                isReadOnly: Swift.Bool? = nil,
                isThreadOnly: Swift.Bool? = nil,
                parentGroup: Swift.String? = nil,
                lastRead: Swift.String? = nil,
                unreadCount: Swift.Int? = nil,
                unreadCountDisplay: Swift.Int? = nil
            ) {
                self.id = id
                self.name = name
                self.created = created
                self.creator = creator
                self.members = members
                self.topic = topic
                self.purpose = purpose
                self.latest = latest
                self.priority = priority
                self.nameNormalized = nameNormalized
                self.isGroup = isGroup
                self.isArchived = isArchived
                self.isMpim = isMpim
                self.isOpen = isOpen
                self.isReadOnly = isReadOnly
                self.isThreadOnly = isThreadOnly
                self.parentGroup = parentGroup
                self.lastRead = lastRead
                self.unreadCount = unreadCount
                self.unreadCountDisplay = unreadCountDisplay
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case created
                case creator
                case members
                case topic
                case purpose
                case latest
                case priority
                case nameNormalized
                case isGroup
                case isArchived
                case isMpim
                case isOpen
                case isReadOnly
                case isThreadOnly
                case parentGroup
                case lastRead
                case unreadCount
                case unreadCountDisplay
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsCreateChildResponse`.
        public struct GroupsCreateChildResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsCreateChildResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsCreateChildResponse/group`.
            public var group: Components.Schemas.Group?
            /// - Remark: Generated from `#/components/schemas/GroupsCreateChildResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsCreateChildResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsCreateChildResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsCreateChildResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsCreateChildResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsCreateChildResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - group:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                group: Components.Schemas.Group? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.group = group
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case group
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsHistoryResponse`.
        public struct GroupsHistoryResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsHistoryResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsHistoryResponse/messages`.
            public var messages: [Components.Schemas.Message]?
            /// - Remark: Generated from `#/components/schemas/GroupsHistoryResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsHistoryResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsHistoryResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsHistoryResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsHistoryResponse/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/GroupsHistoryResponse/channelActionsCount`.
            public var channelActionsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GroupsHistoryResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsHistoryResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - messages:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - hasMore:
            ///   - channelActionsCount:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                messages: [Components.Schemas.Message]? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                channelActionsCount: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.messages = messages
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.hasMore = hasMore
                self.channelActionsCount = channelActionsCount
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case messages
                case warning
                case error
                case needed
                case provided
                case hasMore
                case channelActionsCount
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsInfoResponse`.
        public struct GroupsInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsInfoResponse/group`.
            public var group: Components.Schemas.Group?
            /// - Remark: Generated from `#/components/schemas/GroupsInfoResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsInfoResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsInfoResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - group:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                group: Components.Schemas.Group? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.group = group
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case group
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsInviteResponse`.
        public struct GroupsInviteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsInviteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsInviteResponse/group`.
            public var group: Components.Schemas.Group?
            /// - Remark: Generated from `#/components/schemas/GroupsInviteResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsInviteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsInviteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsInviteResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsInviteResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsInviteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - group:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                group: Components.Schemas.Group? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.group = group
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case group
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsKickResponse`.
        public struct GroupsKickResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsKickResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsKickResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsKickResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsKickResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsKickResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsKickResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsKickResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsLeaveResponse`.
        public struct GroupsLeaveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsLeaveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsLeaveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsLeaveResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsLeaveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsLeaveResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsLeaveResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsLeaveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - warning:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                warning: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.warning = warning
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case warning
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsListResponse`.
        public struct GroupsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsListResponse/groups`.
            public var groups: [Components.Schemas.Group]?
            /// - Remark: Generated from `#/components/schemas/GroupsListResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - groups:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                groups: [Components.Schemas.Group]? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.groups = groups
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case groups
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsMarkResponse`.
        public struct GroupsMarkResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsMarkResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsMarkResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsMarkResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsMarkResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsMarkResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsMarkResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsMarkResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsOpenResponse`.
        public struct GroupsOpenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsOpenResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsOpenResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsOpenResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsOpenResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsOpenResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsOpenResponse/noOp`.
            public var noOp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/GroupsOpenResponse/alreadyOpen`.
            public var alreadyOpen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/GroupsOpenResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsOpenResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - noOp:
            ///   - alreadyOpen:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                noOp: Swift.Bool? = nil,
                alreadyOpen: Swift.Bool? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.noOp = noOp
                self.alreadyOpen = alreadyOpen
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case noOp
                case alreadyOpen
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsRenameResponse`.
        public struct GroupsRenameResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsRenameResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/GroupsRenameResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsRenameResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsRenameResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsRenameResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsRenameResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsRenameResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsRenameResponse`.
            ///
            /// - Parameters:
            ///   - channel:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                channel: Components.Schemas.Channel? = nil,
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.channel = channel
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case channel
                case ok
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsRepliesResponse`.
        public struct GroupsRepliesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsRepliesResponse/messages`.
            public var messages: [Components.Schemas.Message]?
            /// - Remark: Generated from `#/components/schemas/GroupsRepliesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsRepliesResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsRepliesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsRepliesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsRepliesResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsRepliesResponse/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/GroupsRepliesResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsRepliesResponse`.
            ///
            /// - Parameters:
            ///   - messages:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - hasMore:
            ///   - responseMetadata:
            public init(
                messages: [Components.Schemas.Message]? = nil,
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.messages = messages
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.hasMore = hasMore
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case messages
                case ok
                case warning
                case error
                case needed
                case provided
                case hasMore
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsSetPurposeResponse`.
        public struct GroupsSetPurposeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsSetPurposeResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsSetPurposeResponse/purpose`.
            public var purpose: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsSetPurposeResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsSetPurposeResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsSetPurposeResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsSetPurposeResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsSetPurposeResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsSetPurposeResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - purpose:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                purpose: Swift.String? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.purpose = purpose
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case purpose
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsSetTopicResponse`.
        public struct GroupsSetTopicResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsSetTopicResponse/topic`.
            public var topic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsSetTopicResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsSetTopicResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsSetTopicResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsSetTopicResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsSetTopicResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsSetTopicResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsSetTopicResponse`.
            ///
            /// - Parameters:
            ///   - topic:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                topic: Swift.String? = nil,
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.topic = topic
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case topic
                case ok
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupsUnarchiveResponse`.
        public struct GroupsUnarchiveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupsUnarchiveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GroupsUnarchiveResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsUnarchiveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsUnarchiveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsUnarchiveResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GroupsUnarchiveResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `GroupsUnarchiveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/IMCloseResponse`.
        public struct IMCloseResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IMCloseResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/IMCloseResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMCloseResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMCloseResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMCloseResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMCloseResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `IMCloseResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/IMHistoryResponse`.
        public struct IMHistoryResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IMHistoryResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/IMHistoryResponse/messages`.
            public var messages: [Components.Schemas.Message]?
            /// - Remark: Generated from `#/components/schemas/IMHistoryResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMHistoryResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMHistoryResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMHistoryResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMHistoryResponse/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IMHistoryResponse/channelActionsCount`.
            public var channelActionsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/IMHistoryResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `IMHistoryResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - messages:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - hasMore:
            ///   - channelActionsCount:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                messages: [Components.Schemas.Message]? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                channelActionsCount: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.messages = messages
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.hasMore = hasMore
                self.channelActionsCount = channelActionsCount
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case messages
                case warning
                case error
                case needed
                case provided
                case hasMore
                case channelActionsCount
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/IMListResponse`.
        public struct IMListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IMListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/IMListResponse/ims`.
            public var ims: [Components.Schemas.Im]?
            /// - Remark: Generated from `#/components/schemas/IMListResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `IMListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - ims:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                ims: [Components.Schemas.Im]? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.ims = ims
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case ims
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/IM`.
        public struct Im: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IM/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IM/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/IM/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IM/priority`.
            public var priority: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/IM/isArchived`.
            public var isArchived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IM/isIm`.
            public var isIm: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IM/isOrgShared`.
            public var isOrgShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IM/lastRead`.
            public var lastRead: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IM/isOpen`.
            public var isOpen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IM/hasPins`.
            public var hasPins: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IM/contextTeamId`.
            public var contextTeamId: Swift.String?
            /// Creates a new `Im`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created:
            ///   - user:
            ///   - priority:
            ///   - isArchived:
            ///   - isIm:
            ///   - isOrgShared:
            ///   - lastRead:
            ///   - isOpen:
            ///   - hasPins:
            ///   - contextTeamId:
            public init(
                id: Swift.String? = nil,
                created: Swift.Int? = nil,
                user: Swift.String? = nil,
                priority: Swift.Int? = nil,
                isArchived: Swift.Bool? = nil,
                isIm: Swift.Bool? = nil,
                isOrgShared: Swift.Bool? = nil,
                lastRead: Swift.String? = nil,
                isOpen: Swift.Bool? = nil,
                hasPins: Swift.Bool? = nil,
                contextTeamId: Swift.String? = nil
            ) {
                self.id = id
                self.created = created
                self.user = user
                self.priority = priority
                self.isArchived = isArchived
                self.isIm = isIm
                self.isOrgShared = isOrgShared
                self.lastRead = lastRead
                self.isOpen = isOpen
                self.hasPins = hasPins
                self.contextTeamId = contextTeamId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case user
                case priority
                case isArchived
                case isIm
                case isOrgShared
                case lastRead
                case isOpen
                case hasPins
                case contextTeamId
            }
        }
        /// - Remark: Generated from `#/components/schemas/IMMarkResponse`.
        public struct IMMarkResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IMMarkResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/IMMarkResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMMarkResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMMarkResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMMarkResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMMarkResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `IMMarkResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/IMOpenResponse`.
        public struct IMOpenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IMOpenResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/IMOpenResponse/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/IMOpenResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMOpenResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMOpenResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMOpenResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMOpenResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// - Remark: Generated from `#/components/schemas/IMOpenResponse/noOp`.
            public var noOp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IMOpenResponse/alreadyOpen`.
            public var alreadyOpen: Swift.Bool?
            /// Creates a new `IMOpenResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channel:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            ///   - noOp:
            ///   - alreadyOpen:
            public init(
                ok: Swift.Bool,
                channel: Components.Schemas.Channel? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil,
                noOp: Swift.Bool? = nil,
                alreadyOpen: Swift.Bool? = nil
            ) {
                self.ok = ok
                self.channel = channel
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
                self.noOp = noOp
                self.alreadyOpen = alreadyOpen
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channel
                case warning
                case error
                case needed
                case provided
                case responseMetadata
                case noOp
                case alreadyOpen
            }
        }
        /// - Remark: Generated from `#/components/schemas/IMRepliesResponse`.
        public struct IMRepliesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IMRepliesResponse/messages`.
            public var messages: [Components.Schemas.Message]?
            /// - Remark: Generated from `#/components/schemas/IMRepliesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/IMRepliesResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMRepliesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMRepliesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMRepliesResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IMRepliesResponse/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IMRepliesResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `IMRepliesResponse`.
            ///
            /// - Parameters:
            ///   - messages:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - hasMore:
            ///   - responseMetadata:
            public init(
                messages: [Components.Schemas.Message]? = nil,
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.messages = messages
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.hasMore = hasMore
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case messages
                case ok
                case warning
                case error
                case needed
                case provided
                case hasMore
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/MigrationExchangeResponse`.
        public struct MigrationExchangeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MigrationExchangeResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/MigrationExchangeResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MigrationExchangeResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MigrationExchangeResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MigrationExchangeResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MigrationExchangeResponse/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MigrationExchangeResponse/enterpriseId`.
            public var enterpriseId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MigrationExchangeResponse/invalidUserIds`.
            public var invalidUserIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/MigrationExchangeResponse/userIdMap`.
            public var userIdMap: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `MigrationExchangeResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - teamId:
            ///   - enterpriseId:
            ///   - invalidUserIds:
            ///   - userIdMap:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                teamId: Swift.String? = nil,
                enterpriseId: Swift.String? = nil,
                invalidUserIds: [Swift.String]? = nil,
                userIdMap: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.teamId = teamId
                self.enterpriseId = enterpriseId
                self.invalidUserIds = invalidUserIds
                self.userIdMap = userIdMap
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case teamId
                case enterpriseId
                case invalidUserIds
                case userIdMap
            }
        }
        /// - Remark: Generated from `#/components/schemas/MpimCloseResponse`.
        public struct MpimCloseResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MpimCloseResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/MpimCloseResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimCloseResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimCloseResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimCloseResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimCloseResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `MpimCloseResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/MpimHistoryResponse`.
        public struct MpimHistoryResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MpimHistoryResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/MpimHistoryResponse/messages`.
            public var messages: [Components.Schemas.Message]?
            /// - Remark: Generated from `#/components/schemas/MpimHistoryResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimHistoryResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimHistoryResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimHistoryResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimHistoryResponse/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MpimHistoryResponse/channelActionsCount`.
            public var channelActionsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MpimHistoryResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `MpimHistoryResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - messages:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - hasMore:
            ///   - channelActionsCount:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                messages: [Components.Schemas.Message]? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                channelActionsCount: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.messages = messages
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.hasMore = hasMore
                self.channelActionsCount = channelActionsCount
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case messages
                case warning
                case error
                case needed
                case provided
                case hasMore
                case channelActionsCount
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/MpimListResponse`.
        public struct MpimListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MpimListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/MpimListResponse/groups`.
            public var groups: [Components.Schemas.Group]?
            /// - Remark: Generated from `#/components/schemas/MpimListResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `MpimListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - groups:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                groups: [Components.Schemas.Group]? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.groups = groups
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case groups
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/MpimMarkResponse`.
        public struct MpimMarkResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MpimMarkResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/MpimMarkResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimMarkResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimMarkResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimMarkResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimMarkResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `MpimMarkResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - warning:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                warning: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.warning = warning
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case warning
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/MpimOpenResponse`.
        public struct MpimOpenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MpimOpenResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/MpimOpenResponse/group`.
            public var group: Components.Schemas.Group?
            /// - Remark: Generated from `#/components/schemas/MpimOpenResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimOpenResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimOpenResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimOpenResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimOpenResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `MpimOpenResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - group:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                group: Components.Schemas.Group? = nil,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.group = group
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case group
                case warning
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/MpimRepliesResponse`.
        public struct MpimRepliesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MpimRepliesResponse/messages`.
            public var messages: [Components.Schemas.Message]?
            /// - Remark: Generated from `#/components/schemas/MpimRepliesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/MpimRepliesResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimRepliesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimRepliesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimRepliesResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MpimRepliesResponse/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MpimRepliesResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `MpimRepliesResponse`.
            ///
            /// - Parameters:
            ///   - messages:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - hasMore:
            ///   - responseMetadata:
            public init(
                messages: [Components.Schemas.Message]? = nil,
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.messages = messages
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.hasMore = hasMore
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case messages
                case ok
                case warning
                case error
                case needed
                case provided
                case hasMore
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/OauthAccessResponse`.
        public struct OauthAccessResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/scope`.
            public var scope: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/bot`.
            public var bot: Components.Schemas.Bot?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/scopes`.
            public var scopes: Components.Schemas.Scopes?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/tokenType`.
            public var tokenType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/accessToken`.
            public var accessToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/enterpriseId`.
            public var enterpriseId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/teamName`.
            public var teamName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/incomingWebhook`.
            public var incomingWebhook: Components.Schemas.IncomingWebhook?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/authorizingUser`.
            public var authorizingUser: Components.Schemas.User?
            /// - Remark: Generated from `#/components/schemas/OauthAccessResponse/installerUser`.
            public var installerUser: Components.Schemas.User?
            /// Creates a new `OauthAccessResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - scope:
            ///   - bot:
            ///   - scopes:
            ///   - tokenType:
            ///   - accessToken:
            ///   - enterpriseId:
            ///   - teamName:
            ///   - teamId:
            ///   - userId:
            ///   - incomingWebhook:
            ///   - authorizingUser:
            ///   - installerUser:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                scope: Swift.String? = nil,
                bot: Components.Schemas.Bot? = nil,
                scopes: Components.Schemas.Scopes? = nil,
                tokenType: Swift.String? = nil,
                accessToken: Swift.String? = nil,
                enterpriseId: Swift.String? = nil,
                teamName: Swift.String? = nil,
                teamId: Swift.String? = nil,
                userId: Swift.String? = nil,
                incomingWebhook: Components.Schemas.IncomingWebhook? = nil,
                authorizingUser: Components.Schemas.User? = nil,
                installerUser: Components.Schemas.User? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.scope = scope
                self.bot = bot
                self.scopes = scopes
                self.tokenType = tokenType
                self.accessToken = accessToken
                self.enterpriseId = enterpriseId
                self.teamName = teamName
                self.teamId = teamId
                self.userId = userId
                self.incomingWebhook = incomingWebhook
                self.authorizingUser = authorizingUser
                self.installerUser = installerUser
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case scope
                case bot
                case scopes
                case tokenType
                case accessToken
                case enterpriseId
                case teamName
                case teamId
                case userId
                case incomingWebhook
                case authorizingUser
                case installerUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/IncomingWebhook`.
        public struct IncomingWebhook: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IncomingWebhook/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IncomingWebhook/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IncomingWebhook/channelId`.
            public var channelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IncomingWebhook/configurationUrl`.
            public var configurationUrl: Swift.String?
            /// Creates a new `IncomingWebhook`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - channel:
            ///   - channelId:
            ///   - configurationUrl:
            public init(
                url: Swift.String? = nil,
                channel: Swift.String? = nil,
                channelId: Swift.String? = nil,
                configurationUrl: Swift.String? = nil
            ) {
                self.url = url
                self.channel = channel
                self.channelId = channelId
                self.configurationUrl = configurationUrl
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case channel
                case channelId
                case configurationUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/OauthTokenResponse`.
        public struct OauthTokenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OauthTokenResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/OauthTokenResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthTokenResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthTokenResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthTokenResponse/reqMethod`.
            public var reqMethod: Swift.String?
            /// Creates a new `OauthTokenResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - reqMethod:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                reqMethod: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.reqMethod = reqMethod
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case reqMethod
            }
        }
        /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse`.
        public struct OauthV2AccessResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/scope`.
            public var scope: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/team`.
            public var team: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/authedUser`.
            public var authedUser: Components.Schemas.AuthedUser?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/tokenType`.
            public var tokenType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/accessToken`.
            public var accessToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/refreshToken`.
            public var refreshToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/expiresIn`.
            public var expiresIn: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/botUserId`.
            public var botUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/isEnterpriseInstall`.
            public var isEnterpriseInstall: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/OauthV2AccessResponse/incomingWebhook`.
            public var incomingWebhook: Components.Schemas.IncomingWebhook?
            /// Creates a new `OauthV2AccessResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - scope:
            ///   - team:
            ///   - enterprise:
            ///   - appId:
            ///   - authedUser:
            ///   - tokenType:
            ///   - accessToken:
            ///   - refreshToken:
            ///   - expiresIn:
            ///   - botUserId:
            ///   - isEnterpriseInstall:
            ///   - incomingWebhook:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                scope: Swift.String? = nil,
                team: Components.Schemas.Enterprise? = nil,
                enterprise: Components.Schemas.Enterprise? = nil,
                appId: Swift.String? = nil,
                authedUser: Components.Schemas.AuthedUser? = nil,
                tokenType: Swift.String? = nil,
                accessToken: Swift.String? = nil,
                refreshToken: Swift.String? = nil,
                expiresIn: Swift.Int? = nil,
                botUserId: Swift.String? = nil,
                isEnterpriseInstall: Swift.Bool? = nil,
                incomingWebhook: Components.Schemas.IncomingWebhook? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.scope = scope
                self.team = team
                self.enterprise = enterprise
                self.appId = appId
                self.authedUser = authedUser
                self.tokenType = tokenType
                self.accessToken = accessToken
                self.refreshToken = refreshToken
                self.expiresIn = expiresIn
                self.botUserId = botUserId
                self.isEnterpriseInstall = isEnterpriseInstall
                self.incomingWebhook = incomingWebhook
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case scope
                case team
                case enterprise
                case appId
                case authedUser
                case tokenType
                case accessToken
                case refreshToken
                case expiresIn
                case botUserId
                case isEnterpriseInstall
                case incomingWebhook
            }
        }
        /// - Remark: Generated from `#/components/schemas/AuthedUser`.
        public struct AuthedUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuthedUser/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthedUser/scope`.
            public var scope: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthedUser/tokenType`.
            public var tokenType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthedUser/accessToken`.
            public var accessToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthedUser/refreshToken`.
            public var refreshToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthedUser/expiresIn`.
            public var expiresIn: Swift.Int?
            /// Creates a new `AuthedUser`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - scope:
            ///   - tokenType:
            ///   - accessToken:
            ///   - refreshToken:
            ///   - expiresIn:
            public init(
                id: Swift.String? = nil,
                scope: Swift.String? = nil,
                tokenType: Swift.String? = nil,
                accessToken: Swift.String? = nil,
                refreshToken: Swift.String? = nil,
                expiresIn: Swift.Int? = nil
            ) {
                self.id = id
                self.scope = scope
                self.tokenType = tokenType
                self.accessToken = accessToken
                self.refreshToken = refreshToken
                self.expiresIn = expiresIn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case scope
                case tokenType
                case accessToken
                case refreshToken
                case expiresIn
            }
        }
        /// - Remark: Generated from `#/components/schemas/Enterprise`.
        public struct Enterprise: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Enterprise/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Enterprise/name`.
            public var name: Swift.String?
            /// Creates a new `Enterprise`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse`.
        public struct OauthV2ExchangeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/scope`.
            public var scope: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/team`.
            public var team: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/authedUser`.
            public var authedUser: Components.Schemas.AuthedUser?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/tokenType`.
            public var tokenType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/accessToken`.
            public var accessToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/refreshToken`.
            public var refreshToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/expiresIn`.
            public var expiresIn: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/botUserId`.
            public var botUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/isEnterpriseInstall`.
            public var isEnterpriseInstall: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/incomingWebhook`.
            public var incomingWebhook: Components.Schemas.IncomingWebhook?
            /// - Remark: Generated from `#/components/schemas/OauthV2ExchangeResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `OauthV2ExchangeResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - scope:
            ///   - team:
            ///   - enterprise:
            ///   - appId:
            ///   - authedUser:
            ///   - tokenType:
            ///   - accessToken:
            ///   - refreshToken:
            ///   - expiresIn:
            ///   - botUserId:
            ///   - isEnterpriseInstall:
            ///   - incomingWebhook:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                scope: Swift.String? = nil,
                team: Components.Schemas.Enterprise? = nil,
                enterprise: Components.Schemas.Enterprise? = nil,
                appId: Swift.String? = nil,
                authedUser: Components.Schemas.AuthedUser? = nil,
                tokenType: Swift.String? = nil,
                accessToken: Swift.String? = nil,
                refreshToken: Swift.String? = nil,
                expiresIn: Swift.Int? = nil,
                botUserId: Swift.String? = nil,
                isEnterpriseInstall: Swift.Bool? = nil,
                incomingWebhook: Components.Schemas.IncomingWebhook? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.scope = scope
                self.team = team
                self.enterprise = enterprise
                self.appId = appId
                self.authedUser = authedUser
                self.tokenType = tokenType
                self.accessToken = accessToken
                self.refreshToken = refreshToken
                self.expiresIn = expiresIn
                self.botUserId = botUserId
                self.isEnterpriseInstall = isEnterpriseInstall
                self.incomingWebhook = incomingWebhook
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case scope
                case team
                case enterprise
                case appId
                case authedUser
                case tokenType
                case accessToken
                case refreshToken
                case expiresIn
                case botUserId
                case isEnterpriseInstall
                case incomingWebhook
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse`.
        public struct OpenidConnectTokenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse/accessToken`.
            public var accessToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse/tokenType`.
            public var tokenType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse/idToken`.
            public var idToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse/refreshToken`.
            public var refreshToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectTokenResponse/expiresIn`.
            public var expiresIn: Swift.Int?
            /// Creates a new `OpenidConnectTokenResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - accessToken:
            ///   - tokenType:
            ///   - idToken:
            ///   - refreshToken:
            ///   - expiresIn:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                accessToken: Swift.String? = nil,
                tokenType: Swift.String? = nil,
                idToken: Swift.String? = nil,
                refreshToken: Swift.String? = nil,
                expiresIn: Swift.Int? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.accessToken = accessToken
                self.tokenType = tokenType
                self.idToken = idToken
                self.refreshToken = refreshToken
                self.expiresIn = expiresIn
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case accessToken
                case tokenType
                case idToken
                case refreshToken
                case expiresIn
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse`.
        public struct OpenidConnectUserInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/sub`.
            public var sub: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/picture`.
            public var picture: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/locale`.
            public var locale: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/userId`.
            public var https_colon_Slack_comUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/teamId`.
            public var https_colon_Slack_comTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/enterpriseId`.
            public var https_colon_Slack_comEnterpriseId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/emailVerified`.
            public var emailVerified: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/dateEmailVerified`.
            public var dateEmailVerified: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/givenName`.
            public var givenName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/familyName`.
            public var familyName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/teamName`.
            public var https_colon_Slack_comTeamName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/teamDomain`.
            public var https_colon_Slack_comTeamDomain: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/enterpriseName`.
            public var https_colon_Slack_comEnterpriseName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/enterpriseDomain`.
            public var https_colon_Slack_comEnterpriseDomain: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/userImage24`.
            public var https_colon_Slack_comUserImage24: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/userImage32`.
            public var https_colon_Slack_comUserImage32: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/userImage48`.
            public var https_colon_Slack_comUserImage48: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/userImage72`.
            public var https_colon_Slack_comUserImage72: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/userImage192`.
            public var https_colon_Slack_comUserImage192: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/userImage512`.
            public var https_colon_Slack_comUserImage512: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/userImage1024`.
            public var https_colon_Slack_comUserImage1024: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/teamImage34`.
            public var https_colon_Slack_comTeamImage34: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/teamImage44`.
            public var https_colon_Slack_comTeamImage44: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/teamImage68`.
            public var https_colon_Slack_comTeamImage68: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/teamImage88`.
            public var https_colon_Slack_comTeamImage88: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/teamImage102`.
            public var https_colon_Slack_comTeamImage102: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/teamImage132`.
            public var https_colon_Slack_comTeamImage132: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenidConnectUserInfoResponse/https://slack.com/teamImage230`.
            public var https_colon_Slack_comTeamImage230: Swift.String?
            /// Creates a new `OpenidConnectUserInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - sub:
            ///   - email:
            ///   - name:
            ///   - picture:
            ///   - locale:
            ///   - https_colon_Slack_comUserId:
            ///   - https_colon_Slack_comTeamId:
            ///   - https_colon_Slack_comEnterpriseId:
            ///   - emailVerified:
            ///   - dateEmailVerified:
            ///   - givenName:
            ///   - familyName:
            ///   - https_colon_Slack_comTeamName:
            ///   - https_colon_Slack_comTeamDomain:
            ///   - https_colon_Slack_comEnterpriseName:
            ///   - https_colon_Slack_comEnterpriseDomain:
            ///   - https_colon_Slack_comUserImage24:
            ///   - https_colon_Slack_comUserImage32:
            ///   - https_colon_Slack_comUserImage48:
            ///   - https_colon_Slack_comUserImage72:
            ///   - https_colon_Slack_comUserImage192:
            ///   - https_colon_Slack_comUserImage512:
            ///   - https_colon_Slack_comUserImage1024:
            ///   - https_colon_Slack_comTeamImage34:
            ///   - https_colon_Slack_comTeamImage44:
            ///   - https_colon_Slack_comTeamImage68:
            ///   - https_colon_Slack_comTeamImage88:
            ///   - https_colon_Slack_comTeamImage102:
            ///   - https_colon_Slack_comTeamImage132:
            ///   - https_colon_Slack_comTeamImage230:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                sub: Swift.String? = nil,
                email: Swift.String? = nil,
                name: Swift.String? = nil,
                picture: Swift.String? = nil,
                locale: Swift.String? = nil,
                https_colon_Slack_comUserId: Swift.String? = nil,
                https_colon_Slack_comTeamId: Swift.String? = nil,
                https_colon_Slack_comEnterpriseId: Swift.String? = nil,
                emailVerified: Swift.Bool? = nil,
                dateEmailVerified: Swift.Int? = nil,
                givenName: Swift.String? = nil,
                familyName: Swift.String? = nil,
                https_colon_Slack_comTeamName: Swift.String? = nil,
                https_colon_Slack_comTeamDomain: Swift.String? = nil,
                https_colon_Slack_comEnterpriseName: Swift.String? = nil,
                https_colon_Slack_comEnterpriseDomain: Swift.String? = nil,
                https_colon_Slack_comUserImage24: Swift.String? = nil,
                https_colon_Slack_comUserImage32: Swift.String? = nil,
                https_colon_Slack_comUserImage48: Swift.String? = nil,
                https_colon_Slack_comUserImage72: Swift.String? = nil,
                https_colon_Slack_comUserImage192: Swift.String? = nil,
                https_colon_Slack_comUserImage512: Swift.String? = nil,
                https_colon_Slack_comUserImage1024: Swift.String? = nil,
                https_colon_Slack_comTeamImage34: Swift.String? = nil,
                https_colon_Slack_comTeamImage44: Swift.String? = nil,
                https_colon_Slack_comTeamImage68: Swift.String? = nil,
                https_colon_Slack_comTeamImage88: Swift.String? = nil,
                https_colon_Slack_comTeamImage102: Swift.String? = nil,
                https_colon_Slack_comTeamImage132: Swift.String? = nil,
                https_colon_Slack_comTeamImage230: Swift.String? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.sub = sub
                self.email = email
                self.name = name
                self.picture = picture
                self.locale = locale
                self.https_colon_Slack_comUserId = https_colon_Slack_comUserId
                self.https_colon_Slack_comTeamId = https_colon_Slack_comTeamId
                self.https_colon_Slack_comEnterpriseId = https_colon_Slack_comEnterpriseId
                self.emailVerified = emailVerified
                self.dateEmailVerified = dateEmailVerified
                self.givenName = givenName
                self.familyName = familyName
                self.https_colon_Slack_comTeamName = https_colon_Slack_comTeamName
                self.https_colon_Slack_comTeamDomain = https_colon_Slack_comTeamDomain
                self.https_colon_Slack_comEnterpriseName = https_colon_Slack_comEnterpriseName
                self.https_colon_Slack_comEnterpriseDomain = https_colon_Slack_comEnterpriseDomain
                self.https_colon_Slack_comUserImage24 = https_colon_Slack_comUserImage24
                self.https_colon_Slack_comUserImage32 = https_colon_Slack_comUserImage32
                self.https_colon_Slack_comUserImage48 = https_colon_Slack_comUserImage48
                self.https_colon_Slack_comUserImage72 = https_colon_Slack_comUserImage72
                self.https_colon_Slack_comUserImage192 = https_colon_Slack_comUserImage192
                self.https_colon_Slack_comUserImage512 = https_colon_Slack_comUserImage512
                self.https_colon_Slack_comUserImage1024 = https_colon_Slack_comUserImage1024
                self.https_colon_Slack_comTeamImage34 = https_colon_Slack_comTeamImage34
                self.https_colon_Slack_comTeamImage44 = https_colon_Slack_comTeamImage44
                self.https_colon_Slack_comTeamImage68 = https_colon_Slack_comTeamImage68
                self.https_colon_Slack_comTeamImage88 = https_colon_Slack_comTeamImage88
                self.https_colon_Slack_comTeamImage102 = https_colon_Slack_comTeamImage102
                self.https_colon_Slack_comTeamImage132 = https_colon_Slack_comTeamImage132
                self.https_colon_Slack_comTeamImage230 = https_colon_Slack_comTeamImage230
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case sub
                case email
                case name
                case picture
                case locale
                case https_colon_Slack_comUserId = "https://slack.com/userId"
                case https_colon_Slack_comTeamId = "https://slack.com/teamId"
                case https_colon_Slack_comEnterpriseId = "https://slack.com/enterpriseId"
                case emailVerified
                case dateEmailVerified
                case givenName
                case familyName
                case https_colon_Slack_comTeamName = "https://slack.com/teamName"
                case https_colon_Slack_comTeamDomain = "https://slack.com/teamDomain"
                case https_colon_Slack_comEnterpriseName = "https://slack.com/enterpriseName"
                case https_colon_Slack_comEnterpriseDomain = "https://slack.com/enterpriseDomain"
                case https_colon_Slack_comUserImage24 = "https://slack.com/userImage24"
                case https_colon_Slack_comUserImage32 = "https://slack.com/userImage32"
                case https_colon_Slack_comUserImage48 = "https://slack.com/userImage48"
                case https_colon_Slack_comUserImage72 = "https://slack.com/userImage72"
                case https_colon_Slack_comUserImage192 = "https://slack.com/userImage192"
                case https_colon_Slack_comUserImage512 = "https://slack.com/userImage512"
                case https_colon_Slack_comUserImage1024 = "https://slack.com/userImage1024"
                case https_colon_Slack_comTeamImage34 = "https://slack.com/teamImage34"
                case https_colon_Slack_comTeamImage44 = "https://slack.com/teamImage44"
                case https_colon_Slack_comTeamImage68 = "https://slack.com/teamImage68"
                case https_colon_Slack_comTeamImage88 = "https://slack.com/teamImage88"
                case https_colon_Slack_comTeamImage102 = "https://slack.com/teamImage102"
                case https_colon_Slack_comTeamImage132 = "https://slack.com/teamImage132"
                case https_colon_Slack_comTeamImage230 = "https://slack.com/teamImage230"
            }
        }
        /// - Remark: Generated from `#/components/schemas/PinsAddResponse`.
        public struct PinsAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PinsAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/PinsAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PinsAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PinsAddResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `PinsAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/PinsListResponse`.
        public struct PinsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PinsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/PinsListResponse/items`.
            public var items: [Components.Schemas.Item]?
            /// - Remark: Generated from `#/components/schemas/PinsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PinsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PinsListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `PinsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - items:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                items: [Components.Schemas.Item]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.items = items
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case items
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Item`.
        public struct Item: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Item/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Item/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Item/message`.
            public var message: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Item/file`.
            public var file: Components.Schemas.ItemFile?
            /// - Remark: Generated from `#/components/schemas/Item/comment`.
            public var comment: Components.Schemas.Comment?
            /// - Remark: Generated from `#/components/schemas/Item/dateCreate`.
            public var dateCreate: Swift.Int?
            /// Creates a new `Item`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - channel:
            ///   - message:
            ///   - file:
            ///   - comment:
            ///   - dateCreate:
            public init(
                _type: Swift.String? = nil,
                channel: Swift.String? = nil,
                message: Components.Schemas.Message? = nil,
                file: Components.Schemas.ItemFile? = nil,
                comment: Components.Schemas.Comment? = nil,
                dateCreate: Swift.Int? = nil
            ) {
                self._type = _type
                self.channel = channel
                self.message = message
                self.file = file
                self.comment = comment
                self.dateCreate = dateCreate
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case channel
                case message
                case file
                case comment
                case dateCreate
            }
        }
        /// - Remark: Generated from `#/components/schemas/PinsRemoveResponse`.
        public struct PinsRemoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PinsRemoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/PinsRemoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PinsRemoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PinsRemoveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `PinsRemoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ReactionsAddResponse`.
        public struct ReactionsAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReactionsAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ReactionsAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsAddResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ReactionsAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ReactionsGetResponse`.
        public struct ReactionsGetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReactionsGetResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ReactionsGetResponse/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsGetResponse/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsGetResponse/message`.
            public var message: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/ReactionsGetResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsGetResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsGetResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ReactionsGetResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - _type:
            ///   - channel:
            ///   - message:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                _type: Swift.String? = nil,
                channel: Swift.String? = nil,
                message: Components.Schemas.Message? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self._type = _type
                self.channel = channel
                self.message = message
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case _type = "type"
                case channel
                case message
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Knocks`.
        public typealias Knocks = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/ReactionsListResponse`.
        public struct ReactionsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReactionsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ReactionsListResponse/items`.
            public var items: [Components.Schemas.Item]?
            /// - Remark: Generated from `#/components/schemas/ReactionsListResponse/paging`.
            public var paging: Components.Schemas.Paging?
            /// - Remark: Generated from `#/components/schemas/ReactionsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ReactionsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - items:
            ///   - paging:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                items: [Components.Schemas.Item]? = nil,
                paging: Components.Schemas.Paging? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.items = items
                self.paging = paging
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case items
                case paging
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ItemMessage`.
        public struct ItemMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ItemMessage/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/upload`.
            public var upload: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/reactions`.
            public var reactions: [Components.Schemas.Reaction]?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/subscribed`.
            public var subscribed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/inviter`.
            public var inviter: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/icons`.
            public var icons: Components.Schemas.BotProfileIcons?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/room`.
            public var room: Components.Schemas.Room?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/edited`.
            public var edited: Components.Schemas.Edited?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/files`.
            public var files: [Components.Schemas.FileElement]?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/blocks`.
            public var blocks: [Components.Schemas.AssistantAppThreadBlock]?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/attachments`.
            public var attachments: [Components.Schemas.Attachment]?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/clientMsgId`.
            public var clientMsgId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/botProfile`.
            public var botProfile: Components.Schemas.BotProfile?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/threadTs`.
            public var threadTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/replyCount`.
            public var replyCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/replyUsersCount`.
            public var replyUsersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/latestReply`.
            public var latestReply: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/replyUsers`.
            public var replyUsers: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/parentUserId`.
            public var parentUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/isLocked`.
            public var isLocked: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/noNotifications`.
            public var noNotifications: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemMessage/assistantAppThread`.
            public var assistantAppThread: Components.Schemas.AssistantAppThread?
            /// Creates a new `ItemMessage`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - text:
            ///   - upload:
            ///   - user:
            ///   - ts:
            ///   - reactions:
            ///   - permalink:
            ///   - team:
            ///   - subscribed:
            ///   - subtype:
            ///   - username:
            ///   - inviter:
            ///   - icons:
            ///   - channel:
            ///   - room:
            ///   - edited:
            ///   - files:
            ///   - blocks:
            ///   - attachments:
            ///   - displayAsBot:
            ///   - clientMsgId:
            ///   - botId:
            ///   - botProfile:
            ///   - threadTs:
            ///   - replyCount:
            ///   - replyUsersCount:
            ///   - latestReply:
            ///   - replyUsers:
            ///   - parentUserId:
            ///   - isLocked:
            ///   - appId:
            ///   - noNotifications:
            ///   - assistantAppThread:
            public init(
                _type: Swift.String? = nil,
                text: Swift.String? = nil,
                upload: Swift.Bool? = nil,
                user: Swift.String? = nil,
                ts: Swift.String? = nil,
                reactions: [Components.Schemas.Reaction]? = nil,
                permalink: Swift.String? = nil,
                team: Swift.String? = nil,
                subscribed: Swift.Bool? = nil,
                subtype: Swift.String? = nil,
                username: Swift.String? = nil,
                inviter: Swift.String? = nil,
                icons: Components.Schemas.BotProfileIcons? = nil,
                channel: Swift.String? = nil,
                room: Components.Schemas.Room? = nil,
                edited: Components.Schemas.Edited? = nil,
                files: [Components.Schemas.FileElement]? = nil,
                blocks: [Components.Schemas.AssistantAppThreadBlock]? = nil,
                attachments: [Components.Schemas.Attachment]? = nil,
                displayAsBot: Swift.Bool? = nil,
                clientMsgId: Swift.String? = nil,
                botId: Swift.String? = nil,
                botProfile: Components.Schemas.BotProfile? = nil,
                threadTs: Swift.String? = nil,
                replyCount: Swift.Int? = nil,
                replyUsersCount: Swift.Int? = nil,
                latestReply: Swift.String? = nil,
                replyUsers: [Swift.String]? = nil,
                parentUserId: Swift.String? = nil,
                isLocked: Swift.Bool? = nil,
                appId: Swift.String? = nil,
                noNotifications: Swift.Bool? = nil,
                assistantAppThread: Components.Schemas.AssistantAppThread? = nil
            ) {
                self._type = _type
                self.text = text
                self.upload = upload
                self.user = user
                self.ts = ts
                self.reactions = reactions
                self.permalink = permalink
                self.team = team
                self.subscribed = subscribed
                self.subtype = subtype
                self.username = username
                self.inviter = inviter
                self.icons = icons
                self.channel = channel
                self.room = room
                self.edited = edited
                self.files = files
                self.blocks = blocks
                self.attachments = attachments
                self.displayAsBot = displayAsBot
                self.clientMsgId = clientMsgId
                self.botId = botId
                self.botProfile = botProfile
                self.threadTs = threadTs
                self.replyCount = replyCount
                self.replyUsersCount = replyUsersCount
                self.latestReply = latestReply
                self.replyUsers = replyUsers
                self.parentUserId = parentUserId
                self.isLocked = isLocked
                self.appId = appId
                self.noNotifications = noNotifications
                self.assistantAppThread = assistantAppThread
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case upload
                case user
                case ts
                case reactions
                case permalink
                case team
                case subscribed
                case subtype
                case username
                case inviter
                case icons
                case channel
                case room
                case edited
                case files
                case blocks
                case attachments
                case displayAsBot
                case clientMsgId
                case botId
                case botProfile
                case threadTs
                case replyCount
                case replyUsersCount
                case latestReply
                case replyUsers
                case parentUserId
                case isLocked
                case appId
                case noNotifications
                case assistantAppThread
            }
        }
        /// - Remark: Generated from `#/components/schemas/RootIcons`.
        public struct RootIcons: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RootIcons/emoji`.
            public var emoji: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RootIcons/image36`.
            public var image36: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RootIcons/image48`.
            public var image48: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RootIcons/image64`.
            public var image64: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RootIcons/image72`.
            public var image72: Swift.String?
            /// Creates a new `RootIcons`.
            ///
            /// - Parameters:
            ///   - emoji:
            ///   - image36:
            ///   - image48:
            ///   - image64:
            ///   - image72:
            public init(
                emoji: Swift.String? = nil,
                image36: Swift.String? = nil,
                image48: Swift.String? = nil,
                image64: Swift.String? = nil,
                image72: Swift.String? = nil
            ) {
                self.emoji = emoji
                self.image36 = image36
                self.image48 = image48
                self.image64 = image64
                self.image72 = image72
            }
            public enum CodingKeys: String, CodingKey {
                case emoji
                case image36
                case image48
                case image64
                case image72
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessageMetadata`.
        public struct MessageMetadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MessageMetadata/eventType`.
            public var eventType: Swift.String?
            /// Creates a new `MessageMetadata`.
            ///
            /// - Parameters:
            ///   - eventType:
            public init(eventType: Swift.String? = nil) {
                self.eventType = eventType
            }
            public enum CodingKeys: String, CodingKey {
                case eventType
            }
        }
        /// - Remark: Generated from `#/components/schemas/ReactionsRemoveResponse`.
        public struct ReactionsRemoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReactionsRemoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ReactionsRemoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsRemoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ReactionsRemoveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `ReactionsRemoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/RemindersAddResponse`.
        public struct RemindersAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RemindersAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/RemindersAddResponse/reminder`.
            public var reminder: Components.Schemas.Reminder?
            /// - Remark: Generated from `#/components/schemas/RemindersAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersAddResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersAddResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `RemindersAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - reminder:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                reminder: Components.Schemas.Reminder? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.reminder = reminder
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case reminder
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Reminder`.
        public struct Reminder: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Reminder/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Reminder/creator`.
            public var creator: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Reminder/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Reminder/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Reminder/recurring`.
            public var recurring: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Reminder/time`.
            public var time: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Reminder/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Reminder/recurrence`.
            public var recurrence: Components.Schemas.Recurrence?
            /// - Remark: Generated from `#/components/schemas/Reminder/completeTs`.
            public var completeTs: Swift.Int?
            /// Creates a new `Reminder`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - creator:
            ///   - text:
            ///   - user:
            ///   - recurring:
            ///   - time:
            ///   - channel:
            ///   - recurrence:
            ///   - completeTs:
            public init(
                id: Swift.String? = nil,
                creator: Swift.String? = nil,
                text: Swift.String? = nil,
                user: Swift.String? = nil,
                recurring: Swift.Bool? = nil,
                time: Swift.Int? = nil,
                channel: Swift.String? = nil,
                recurrence: Components.Schemas.Recurrence? = nil,
                completeTs: Swift.Int? = nil
            ) {
                self.id = id
                self.creator = creator
                self.text = text
                self.user = user
                self.recurring = recurring
                self.time = time
                self.channel = channel
                self.recurrence = recurrence
                self.completeTs = completeTs
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case creator
                case text
                case user
                case recurring
                case time
                case channel
                case recurrence
                case completeTs
            }
        }
        /// - Remark: Generated from `#/components/schemas/RemindersCompleteResponse`.
        public struct RemindersCompleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RemindersCompleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/RemindersCompleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersCompleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersCompleteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `RemindersCompleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/RemindersDeleteResponse`.
        public struct RemindersDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RemindersDeleteResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/RemindersDeleteResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersDeleteResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersDeleteResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `RemindersDeleteResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/RemindersInfoResponse`.
        public struct RemindersInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RemindersInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/RemindersInfoResponse/reminder`.
            public var reminder: Components.Schemas.Reminder?
            /// - Remark: Generated from `#/components/schemas/RemindersInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `RemindersInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - reminder:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                reminder: Components.Schemas.Reminder? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.reminder = reminder
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case reminder
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/RemindersListResponse`.
        public struct RemindersListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RemindersListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/RemindersListResponse/reminders`.
            public var reminders: [Components.Schemas.Reminder]?
            /// - Remark: Generated from `#/components/schemas/RemindersListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RemindersListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `RemindersListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - reminders:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                reminders: [Components.Schemas.Reminder]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.reminders = reminders
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case reminders
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Recurrence`.
        public struct Recurrence: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Recurrence/frequency`.
            public var frequency: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Recurrence/weekdays`.
            public var weekdays: [Swift.String]?
            /// Creates a new `Recurrence`.
            ///
            /// - Parameters:
            ///   - frequency:
            ///   - weekdays:
            public init(
                frequency: Swift.String? = nil,
                weekdays: [Swift.String]? = nil
            ) {
                self.frequency = frequency
                self.weekdays = weekdays
            }
            public enum CodingKeys: String, CodingKey {
                case frequency
                case weekdays
            }
        }
        /// - Remark: Generated from `#/components/schemas/RtmConnectResponse`.
        public struct RtmConnectResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/team`.
            public var team: Components.Schemas.Team?
            /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/self`.
            public var _self: Components.Schemas._Self?
            /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmConnectResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `RtmConnectResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - url:
            ///   - team:
            ///   - _self:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                url: Swift.String? = nil,
                team: Components.Schemas.Team? = nil,
                _self: Components.Schemas._Self? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.url = url
                self.team = team
                self._self = _self
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case url
                case team
                case _self = "self"
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Self`.
        public struct _Self: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Self/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Self/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Self/prefs`.
            public var prefs: Components.Schemas.SelfPrefs?
            /// - Remark: Generated from `#/components/schemas/Self/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Self/firstLogin`.
            public var firstLogin: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Self/manualPresence`.
            public var manualPresence: Swift.String?
            /// Creates a new `_Self`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - prefs:
            ///   - created:
            ///   - firstLogin:
            ///   - manualPresence:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                prefs: Components.Schemas.SelfPrefs? = nil,
                created: Swift.Int? = nil,
                firstLogin: Swift.Int? = nil,
                manualPresence: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.prefs = prefs
                self.created = created
                self.firstLogin = firstLogin
                self.manualPresence = manualPresence
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case prefs
                case created
                case firstLogin
                case manualPresence
            }
        }
        /// - Remark: Generated from `#/components/schemas/RtmStartResponse`.
        public struct RtmStartResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/self`.
            public var _self: Components.Schemas._Self?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/team`.
            public var team: Components.Schemas.Team?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/channels`.
            public var channels: [Components.Schemas.Channel]?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/groups`.
            public var groups: [Components.Schemas.Group]?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/ims`.
            public var ims: [Components.Schemas.Im]?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/subteams`.
            public var subteams: Components.Schemas.Subteams?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/dnd`.
            public var dnd: Components.Schemas.Dnd?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/users`.
            public var users: [Components.Schemas.User]?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/bots`.
            public var bots: [Components.Schemas.Bot]?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/links`.
            public var links: Components.Schemas.Links?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/acceptTosUrl`.
            public var acceptTosUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/latestEventTs`.
            public var latestEventTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/cacheTs`.
            public var cacheTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/mobileAppRequiresUpgrade`.
            public var mobileAppRequiresUpgrade: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/readOnlyChannels`.
            public var readOnlyChannels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/nonThreadableChannels`.
            public var nonThreadableChannels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/threadOnlyChannels`.
            public var threadOnlyChannels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/canManageSharedChannels`.
            public var canManageSharedChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/cacheVersion`.
            public var cacheVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/cacheTsVersion`.
            public var cacheTsVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/isEurope`.
            public var isEurope: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/RtmStartResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `RtmStartResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - _self:
            ///   - team:
            ///   - channels:
            ///   - groups:
            ///   - ims:
            ///   - subteams:
            ///   - dnd:
            ///   - users:
            ///   - bots:
            ///   - url:
            ///   - links:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - acceptTosUrl:
            ///   - latestEventTs:
            ///   - cacheTs:
            ///   - mobileAppRequiresUpgrade:
            ///   - readOnlyChannels:
            ///   - nonThreadableChannels:
            ///   - threadOnlyChannels:
            ///   - canManageSharedChannels:
            ///   - cacheVersion:
            ///   - cacheTsVersion:
            ///   - isEurope:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                _self: Components.Schemas._Self? = nil,
                team: Components.Schemas.Team? = nil,
                channels: [Components.Schemas.Channel]? = nil,
                groups: [Components.Schemas.Group]? = nil,
                ims: [Components.Schemas.Im]? = nil,
                subteams: Components.Schemas.Subteams? = nil,
                dnd: Components.Schemas.Dnd? = nil,
                users: [Components.Schemas.User]? = nil,
                bots: [Components.Schemas.Bot]? = nil,
                url: Swift.String? = nil,
                links: Components.Schemas.Links? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                acceptTosUrl: Swift.String? = nil,
                latestEventTs: Swift.String? = nil,
                cacheTs: Swift.Int? = nil,
                mobileAppRequiresUpgrade: Swift.Bool? = nil,
                readOnlyChannels: [Swift.String]? = nil,
                nonThreadableChannels: [Swift.String]? = nil,
                threadOnlyChannels: [Swift.String]? = nil,
                canManageSharedChannels: Swift.Bool? = nil,
                cacheVersion: Swift.String? = nil,
                cacheTsVersion: Swift.String? = nil,
                isEurope: Swift.Bool? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self._self = _self
                self.team = team
                self.channels = channels
                self.groups = groups
                self.ims = ims
                self.subteams = subteams
                self.dnd = dnd
                self.users = users
                self.bots = bots
                self.url = url
                self.links = links
                self.error = error
                self.needed = needed
                self.provided = provided
                self.acceptTosUrl = acceptTosUrl
                self.latestEventTs = latestEventTs
                self.cacheTs = cacheTs
                self.mobileAppRequiresUpgrade = mobileAppRequiresUpgrade
                self.readOnlyChannels = readOnlyChannels
                self.nonThreadableChannels = nonThreadableChannels
                self.threadOnlyChannels = threadOnlyChannels
                self.canManageSharedChannels = canManageSharedChannels
                self.cacheVersion = cacheVersion
                self.cacheTsVersion = cacheTsVersion
                self.isEurope = isEurope
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case _self = "self"
                case team
                case channels
                case groups
                case ims
                case subteams
                case dnd
                case users
                case bots
                case url
                case links
                case error
                case needed
                case provided
                case acceptTosUrl
                case latestEventTs
                case cacheTs
                case mobileAppRequiresUpgrade
                case readOnlyChannels
                case nonThreadableChannels
                case threadOnlyChannels
                case canManageSharedChannels
                case cacheVersion
                case cacheTsVersion
                case isEurope
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/BotIcons`.
        public struct BotIcons: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BotIcons/image36`.
            public var image36: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BotIcons/image48`.
            public var image48: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BotIcons/image72`.
            public var image72: Swift.String?
            /// Creates a new `BotIcons`.
            ///
            /// - Parameters:
            ///   - image36:
            ///   - image48:
            ///   - image72:
            public init(
                image36: Swift.String? = nil,
                image48: Swift.String? = nil,
                image72: Swift.String? = nil
            ) {
                self.image36 = image36
                self.image48 = image48
                self.image72 = image72
            }
            public enum CodingKeys: String, CodingKey {
                case image36
                case image48
                case image72
            }
        }
        /// - Remark: Generated from `#/components/schemas/TitleBlockElement`.
        public struct TitleBlockElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/type`.
            public var _type: Components.Schemas.BlockType?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/elements`.
            public var elements: [Components.Schemas.Accessory]?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/title`.
            public var title: Components.Schemas.DescriptionUnion?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/text`.
            public var text: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/fields`.
            public var fields: [Components.Schemas.DescriptionElement]?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/accessory`.
            public var accessory: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/expand`.
            public var expand: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/description`.
            public var description: Components.Schemas.DescriptionUnion?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/blockId`.
            public var blockId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/isAnimated`.
            public var isAnimated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/titleUrl`.
            public var titleUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/videoUrl`.
            public var videoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/thumbnailUrl`.
            public var thumbnailUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/authorName`.
            public var authorName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/providerName`.
            public var providerName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/providerIconUrl`.
            public var providerIconUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/functionTriggerId`.
            public var functionTriggerId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/isWorkflowApp`.
            public var isWorkflowApp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/salesHomeWorkflowAppType`.
            public var salesHomeWorkflowAppType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/appCollaborators`.
            public var appCollaborators: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/buttonLabel`.
            public var buttonLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/botUserId`.
            public var botUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/owningTeamId`.
            public var owningTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/workflowId`.
            public var workflowId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/developerTraceId`.
            public var developerTraceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/triggerType`.
            public var triggerType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/triggerSubtype`.
            public var triggerSubtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlockElement/shareUrl`.
            public var shareUrl: Swift.String?
            /// Creates a new `TitleBlockElement`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - fallback:
            ///   - title:
            ///   - text:
            ///   - fields:
            ///   - accessory:
            ///   - expand:
            ///   - description:
            ///   - url:
            ///   - blockId:
            ///   - imageUrl:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - isAnimated:
            ///   - slackFile:
            ///   - altText:
            ///   - titleUrl:
            ///   - videoUrl:
            ///   - thumbnailUrl:
            ///   - authorName:
            ///   - providerName:
            ///   - providerIconUrl:
            ///   - functionTriggerId:
            ///   - appId:
            ///   - isWorkflowApp:
            ///   - salesHomeWorkflowAppType:
            ///   - appCollaborators:
            ///   - buttonLabel:
            ///   - botUserId:
            ///   - owningTeamId:
            ///   - workflowId:
            ///   - developerTraceId:
            ///   - triggerType:
            ///   - triggerSubtype:
            ///   - shareUrl:
            public init(
                _type: Components.Schemas.BlockType? = nil,
                elements: [Components.Schemas.Accessory]? = nil,
                fallback: Swift.String? = nil,
                title: Components.Schemas.DescriptionUnion? = nil,
                text: Components.Schemas.DescriptionElement? = nil,
                fields: [Components.Schemas.DescriptionElement]? = nil,
                accessory: Components.Schemas.Accessory? = nil,
                expand: Swift.Bool? = nil,
                description: Components.Schemas.DescriptionUnion? = nil,
                url: Swift.String? = nil,
                blockId: Swift.String? = nil,
                imageUrl: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                isAnimated: Swift.Bool? = nil,
                slackFile: Components.Schemas.SlackFile? = nil,
                altText: Swift.String? = nil,
                titleUrl: Swift.String? = nil,
                videoUrl: Swift.String? = nil,
                thumbnailUrl: Swift.String? = nil,
                authorName: Swift.String? = nil,
                providerName: Swift.String? = nil,
                providerIconUrl: Swift.String? = nil,
                functionTriggerId: Swift.String? = nil,
                appId: Swift.String? = nil,
                isWorkflowApp: Swift.Bool? = nil,
                salesHomeWorkflowAppType: Swift.Int? = nil,
                appCollaborators: [Swift.String]? = nil,
                buttonLabel: Swift.String? = nil,
                botUserId: Swift.String? = nil,
                owningTeamId: Swift.String? = nil,
                workflowId: Swift.String? = nil,
                developerTraceId: Swift.String? = nil,
                triggerType: Swift.String? = nil,
                triggerSubtype: Swift.String? = nil,
                shareUrl: Swift.String? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.fallback = fallback
                self.title = title
                self.text = text
                self.fields = fields
                self.accessory = accessory
                self.expand = expand
                self.description = description
                self.url = url
                self.blockId = blockId
                self.imageUrl = imageUrl
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.isAnimated = isAnimated
                self.slackFile = slackFile
                self.altText = altText
                self.titleUrl = titleUrl
                self.videoUrl = videoUrl
                self.thumbnailUrl = thumbnailUrl
                self.authorName = authorName
                self.providerName = providerName
                self.providerIconUrl = providerIconUrl
                self.functionTriggerId = functionTriggerId
                self.appId = appId
                self.isWorkflowApp = isWorkflowApp
                self.salesHomeWorkflowAppType = salesHomeWorkflowAppType
                self.appCollaborators = appCollaborators
                self.buttonLabel = buttonLabel
                self.botUserId = botUserId
                self.owningTeamId = owningTeamId
                self.workflowId = workflowId
                self.developerTraceId = developerTraceId
                self.triggerType = triggerType
                self.triggerSubtype = triggerSubtype
                self.shareUrl = shareUrl
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case fallback
                case title
                case text
                case fields
                case accessory
                case expand
                case description
                case url
                case blockId
                case imageUrl
                case imageWidth
                case imageHeight
                case imageBytes
                case isAnimated
                case slackFile
                case altText
                case titleUrl
                case videoUrl
                case thumbnailUrl
                case authorName
                case providerName
                case providerIconUrl
                case functionTriggerId
                case appId
                case isWorkflowApp
                case salesHomeWorkflowAppType
                case appCollaborators
                case buttonLabel
                case botUserId
                case owningTeamId
                case workflowId
                case developerTraceId
                case triggerType
                case triggerSubtype
                case shareUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/PurpleShares`.
        public struct PurpleShares: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PurpleShares/public`.
            public var _public: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/PurpleShares/private`.
            public var _private: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `PurpleShares`.
            ///
            /// - Parameters:
            ///   - _public:
            ///   - _private:
            public init(
                _public: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                _private: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self._public = _public
                self._private = _private
            }
            public enum CodingKeys: String, CodingKey {
                case _public = "public"
                case _private = "private"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListShares`.
        public typealias ListShares = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/LatestBlock`.
        public struct LatestBlock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LatestBlock/type`.
            public var _type: Components.Schemas.BlockType?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/elements`.
            public var elements: [Components.Schemas.Accessory]?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/file`.
            public var file: Components.Schemas.FileElement?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/text`.
            public var text: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/title`.
            public var title: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/description`.
            public var description: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/fields`.
            public var fields: [Components.Schemas.DescriptionElement]?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/accessory`.
            public var accessory: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/expand`.
            public var expand: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/label`.
            public var label: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/element`.
            public var element: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/hint`.
            public var hint: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/optional`.
            public var optional: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/blockId`.
            public var blockId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/callId`.
            public var callId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/apiDecorationAvailable`.
            public var apiDecorationAvailable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/fileId`.
            public var fileId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/isAnimated`.
            public var isAnimated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/titleUrl`.
            public var titleUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/videoUrl`.
            public var videoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/thumbnailUrl`.
            public var thumbnailUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/authorName`.
            public var authorName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/providerName`.
            public var providerName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/providerIconUrl`.
            public var providerIconUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/functionTriggerId`.
            public var functionTriggerId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/isWorkflowApp`.
            public var isWorkflowApp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/salesHomeWorkflowAppType`.
            public var salesHomeWorkflowAppType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/appCollaborators`.
            public var appCollaborators: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/buttonLabel`.
            public var buttonLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/botUserId`.
            public var botUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/owningTeamId`.
            public var owningTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/workflowId`.
            public var workflowId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/developerTraceId`.
            public var developerTraceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/triggerType`.
            public var triggerType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/triggerSubtype`.
            public var triggerSubtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/shareUrl`.
            public var shareUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LatestBlock/dispatchAction`.
            public var dispatchAction: Swift.Bool?
            /// Creates a new `LatestBlock`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - call:
            ///   - source:
            ///   - file:
            ///   - text:
            ///   - fallback:
            ///   - title:
            ///   - description:
            ///   - url:
            ///   - fields:
            ///   - accessory:
            ///   - expand:
            ///   - label:
            ///   - element:
            ///   - hint:
            ///   - optional:
            ///   - blockId:
            ///   - callId:
            ///   - apiDecorationAvailable:
            ///   - externalId:
            ///   - fileId:
            ///   - imageUrl:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - isAnimated:
            ///   - slackFile:
            ///   - altText:
            ///   - titleUrl:
            ///   - videoUrl:
            ///   - thumbnailUrl:
            ///   - authorName:
            ///   - providerName:
            ///   - providerIconUrl:
            ///   - functionTriggerId:
            ///   - appId:
            ///   - isWorkflowApp:
            ///   - salesHomeWorkflowAppType:
            ///   - appCollaborators:
            ///   - buttonLabel:
            ///   - botUserId:
            ///   - owningTeamId:
            ///   - workflowId:
            ///   - developerTraceId:
            ///   - triggerType:
            ///   - triggerSubtype:
            ///   - shareUrl:
            ///   - dispatchAction:
            public init(
                _type: Components.Schemas.BlockType? = nil,
                elements: [Components.Schemas.Accessory]? = nil,
                call: Components.Schemas.Call? = nil,
                source: Swift.String? = nil,
                file: Components.Schemas.FileElement? = nil,
                text: Components.Schemas.DescriptionElement? = nil,
                fallback: Swift.String? = nil,
                title: Components.Schemas.DescriptionElement? = nil,
                description: Components.Schemas.DescriptionElement? = nil,
                url: Swift.String? = nil,
                fields: [Components.Schemas.DescriptionElement]? = nil,
                accessory: Components.Schemas.Accessory? = nil,
                expand: Swift.Bool? = nil,
                label: Components.Schemas.DescriptionElement? = nil,
                element: Components.Schemas.Accessory? = nil,
                hint: Components.Schemas.DescriptionElement? = nil,
                optional: Swift.Bool? = nil,
                blockId: Swift.String? = nil,
                callId: Swift.String? = nil,
                apiDecorationAvailable: Swift.Bool? = nil,
                externalId: Swift.String? = nil,
                fileId: Swift.String? = nil,
                imageUrl: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                isAnimated: Swift.Bool? = nil,
                slackFile: Components.Schemas.SlackFile? = nil,
                altText: Swift.String? = nil,
                titleUrl: Swift.String? = nil,
                videoUrl: Swift.String? = nil,
                thumbnailUrl: Swift.String? = nil,
                authorName: Swift.String? = nil,
                providerName: Swift.String? = nil,
                providerIconUrl: Swift.String? = nil,
                functionTriggerId: Swift.String? = nil,
                appId: Swift.String? = nil,
                isWorkflowApp: Swift.Bool? = nil,
                salesHomeWorkflowAppType: Swift.Int? = nil,
                appCollaborators: [Swift.String]? = nil,
                buttonLabel: Swift.String? = nil,
                botUserId: Swift.String? = nil,
                owningTeamId: Swift.String? = nil,
                workflowId: Swift.String? = nil,
                developerTraceId: Swift.String? = nil,
                triggerType: Swift.String? = nil,
                triggerSubtype: Swift.String? = nil,
                shareUrl: Swift.String? = nil,
                dispatchAction: Swift.Bool? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.call = call
                self.source = source
                self.file = file
                self.text = text
                self.fallback = fallback
                self.title = title
                self.description = description
                self.url = url
                self.fields = fields
                self.accessory = accessory
                self.expand = expand
                self.label = label
                self.element = element
                self.hint = hint
                self.optional = optional
                self.blockId = blockId
                self.callId = callId
                self.apiDecorationAvailable = apiDecorationAvailable
                self.externalId = externalId
                self.fileId = fileId
                self.imageUrl = imageUrl
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.isAnimated = isAnimated
                self.slackFile = slackFile
                self.altText = altText
                self.titleUrl = titleUrl
                self.videoUrl = videoUrl
                self.thumbnailUrl = thumbnailUrl
                self.authorName = authorName
                self.providerName = providerName
                self.providerIconUrl = providerIconUrl
                self.functionTriggerId = functionTriggerId
                self.appId = appId
                self.isWorkflowApp = isWorkflowApp
                self.salesHomeWorkflowAppType = salesHomeWorkflowAppType
                self.appCollaborators = appCollaborators
                self.buttonLabel = buttonLabel
                self.botUserId = botUserId
                self.owningTeamId = owningTeamId
                self.workflowId = workflowId
                self.developerTraceId = developerTraceId
                self.triggerType = triggerType
                self.triggerSubtype = triggerSubtype
                self.shareUrl = shareUrl
                self.dispatchAction = dispatchAction
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case call
                case source
                case file
                case text
                case fallback
                case title
                case description
                case url
                case fields
                case accessory
                case expand
                case label
                case element
                case hint
                case optional
                case blockId
                case callId
                case apiDecorationAvailable
                case externalId
                case fileId
                case imageUrl
                case imageWidth
                case imageHeight
                case imageBytes
                case isAnimated
                case slackFile
                case altText
                case titleUrl
                case videoUrl
                case thumbnailUrl
                case authorName
                case providerName
                case providerIconUrl
                case functionTriggerId
                case appId
                case isWorkflowApp
                case salesHomeWorkflowAppType
                case appCollaborators
                case buttonLabel
                case botUserId
                case owningTeamId
                case workflowId
                case developerTraceId
                case triggerType
                case triggerSubtype
                case shareUrl
                case dispatchAction
            }
        }
        /// - Remark: Generated from `#/components/schemas/Links`.
        public struct Links: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Links/domainsTs`.
            public var domainsTs: Swift.Int?
            /// Creates a new `Links`.
            ///
            /// - Parameters:
            ///   - domainsTs:
            public init(domainsTs: Swift.Int? = nil) {
                self.domainsTs = domainsTs
            }
            public enum CodingKeys: String, CodingKey {
                case domainsTs
            }
        }
        /// - Remark: Generated from `#/components/schemas/SelfPrefs`.
        public struct SelfPrefs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/time24`.
            public var time24: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/jumbomoji`.
            public var jumbomoji: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/locale`.
            public var locale: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/purchaser`.
            public var purchaser: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/tz`.
            public var tz: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/frecency`.
            public var frecency: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/underlineLinks`.
            public var underlineLinks: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/userColors`.
            public var userColors: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/colorNamesInList`.
            public var colorNamesInList: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emailAlerts`.
            public var emailAlerts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emailAlertsSleepUntil`.
            public var emailAlertsSleepUntil: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emailTips`.
            public var emailTips: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emailWeekly`.
            public var emailWeekly: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emailOffers`.
            public var emailOffers: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emailResearch`.
            public var emailResearch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emailDeveloper`.
            public var emailDeveloper: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/welcomeMessageHidden`.
            public var welcomeMessageHidden: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchSort`.
            public var searchSort: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchFileSort`.
            public var searchFileSort: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchChannelSort`.
            public var searchChannelSort: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchPeopleSort`.
            public var searchPeopleSort: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/expandInlineImgs`.
            public var expandInlineImgs: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/expandInternalInlineImgs`.
            public var expandInternalInlineImgs: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/expandSnippets`.
            public var expandSnippets: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/postsFormattingGuide`.
            public var postsFormattingGuide: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenWelcome2`.
            public var seenWelcome2: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenSsbPrompt`.
            public var seenSsbPrompt: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/spacesNewXpBannerDismissed`.
            public var spacesNewXpBannerDismissed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchOnlyMyChannels`.
            public var searchOnlyMyChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchOnlyCurrentTeam`.
            public var searchOnlyCurrentTeam: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchHideMyChannels`.
            public var searchHideMyChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchOnlyShowOnline`.
            public var searchOnlyShowOnline: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchHideDeactivatedUsers`.
            public var searchHideDeactivatedUsers: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emojiMode`.
            public var emojiMode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emojiUse`.
            public var emojiUse: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emojiUseOrg`.
            public var emojiUseOrg: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasInvited`.
            public var hasInvited: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasUploaded`.
            public var hasUploaded: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasCreatedChannel`.
            public var hasCreatedChannel: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasCreatedChannelSection`.
            public var hasCreatedChannelSection: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasSearched`.
            public var hasSearched: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchExcludeChannels`.
            public var searchExcludeChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/messagesTheme`.
            public var messagesTheme: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/webappSpellcheck`.
            public var webappSpellcheck: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/noJoinedOverlays`.
            public var noJoinedOverlays: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/noCreatedOverlays`.
            public var noCreatedOverlays: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dropboxEnabled`.
            public var dropboxEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenDomainInviteReminder`.
            public var seenDomainInviteReminder: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenMemberInviteReminder`.
            public var seenMemberInviteReminder: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/muteSounds`.
            public var muteSounds: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/arrowHistory`.
            public var arrowHistory: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/tabUiReturnSelects`.
            public var tabUiReturnSelects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/obeyInlineImgLimit`.
            public var obeyInlineImgLimit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/requireAt`.
            public var requireAt: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/ssbSpaceWindow`.
            public var ssbSpaceWindow: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/macSsbBounce`.
            public var macSsbBounce: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/macSsbBullet`.
            public var macSsbBullet: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/expandNonMediaAttachments`.
            public var expandNonMediaAttachments: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showTyping`.
            public var showTyping: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pagekeysHandled`.
            public var pagekeysHandled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/lastSnippetType`.
            public var lastSnippetType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/displayRealNamesOverride`.
            public var displayRealNamesOverride: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/displayDisplayNames`.
            public var displayDisplayNames: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enterIsSpecialInTbt`.
            public var enterIsSpecialInTbt: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/msgInputSendBtn`.
            public var msgInputSendBtn: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/msgInputSendBtnAutoSet`.
            public var msgInputSendBtnAutoSet: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/msgInputStickyComposer`.
            public var msgInputStickyComposer: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/composerNux`.
            public var composerNux: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/graphicEmoticons`.
            public var graphicEmoticons: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/convertEmoticons`.
            public var convertEmoticons: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/ssEmojis`.
            public var ssEmojis: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingStart`.
            public var seenOnboardingStart: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/onboardingCancelled`.
            public var onboardingCancelled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingSlackbotConversation`.
            public var seenOnboardingSlackbotConversation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingChannels`.
            public var seenOnboardingChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingDirectMessages`.
            public var seenOnboardingDirectMessages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingInvites`.
            public var seenOnboardingInvites: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingSearch`.
            public var seenOnboardingSearch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingRecentMentions`.
            public var seenOnboardingRecentMentions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingStarredItems`.
            public var seenOnboardingStarredItems: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingPrivateGroups`.
            public var seenOnboardingPrivateGroups: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingBanner`.
            public var seenOnboardingBanner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/onboardingSlackbotConversationStep`.
            public var onboardingSlackbotConversationStep: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/setTzAutomatically`.
            public var setTzAutomatically: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/suppressLinkWarning`.
            public var suppressLinkWarning: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/suppressExternalInvitesFromComposeWarning`.
            public var suppressExternalInvitesFromComposeWarning: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenEmojiPackCta`.
            public var seenEmojiPackCta: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenEmojiPackDialog`.
            public var seenEmojiPackDialog: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenScheduleSendCoachmark`.
            public var seenScheduleSendCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emojiPacksMostRecentAvailableTime`.
            public var emojiPacksMostRecentAvailableTime: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emojiPacksClickedPickerCta`.
            public var emojiPacksClickedPickerCta: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emojiPacksClickedPickerPostInstallCta`.
            public var emojiPacksClickedPickerPostInstallCta: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emojiPacksClickedCollectionCta`.
            public var emojiPacksClickedCollectionCta: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndEnabled`.
            public var dndEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndStartHour`.
            public var dndStartHour: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndEndHour`.
            public var dndEndHour: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndBeforeMonday`.
            public var dndBeforeMonday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndAfterMonday`.
            public var dndAfterMonday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndEnabledMonday`.
            public var dndEnabledMonday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndBeforeTuesday`.
            public var dndBeforeTuesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndAfterTuesday`.
            public var dndAfterTuesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndEnabledTuesday`.
            public var dndEnabledTuesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndBeforeWednesday`.
            public var dndBeforeWednesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndAfterWednesday`.
            public var dndAfterWednesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndEnabledWednesday`.
            public var dndEnabledWednesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndBeforeThursday`.
            public var dndBeforeThursday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndAfterThursday`.
            public var dndAfterThursday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndEnabledThursday`.
            public var dndEnabledThursday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndBeforeFriday`.
            public var dndBeforeFriday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndAfterFriday`.
            public var dndAfterFriday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndEnabledFriday`.
            public var dndEnabledFriday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndBeforeSaturday`.
            public var dndBeforeSaturday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndAfterSaturday`.
            public var dndAfterSaturday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndEnabledSaturday`.
            public var dndEnabledSaturday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndBeforeSunday`.
            public var dndBeforeSunday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndAfterSunday`.
            public var dndAfterSunday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndEnabledSunday`.
            public var dndEnabledSunday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndDays`.
            public var dndDays: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndWeekdaysOffAllday`.
            public var dndWeekdaysOffAllday: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/reminderNotificationTime`.
            public var reminderNotificationTime: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndCustomNewBadgeSeen`.
            public var dndCustomNewBadgeSeen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dndNotificationScheduleNewBadgeSeen`.
            public var dndNotificationScheduleNewBadgeSeen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/notificationCenterFilters`.
            public var notificationCenterFilters: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/callsSurveyLastSeen`.
            public var callsSurveyLastSeen: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddleSurveyLastSeen`.
            public var huddleSurveyLastSeen: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/sidebarBehavior`.
            public var sidebarBehavior: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/channelSort`.
            public var channelSort: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/separatePrivateChannels`.
            public var separatePrivateChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/separateSharedChannels`.
            public var separateSharedChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/sidebarTheme`.
            public var sidebarTheme: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/sidebarThemeCustomValues`.
            public var sidebarThemeCustomValues: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/noInvitesWidgetInSidebar`.
            public var noInvitesWidgetInSidebar: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/noOmniboxInChannels`.
            public var noOmniboxInChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/kKeyOmniboxAutoHideCount`.
            public var kKeyOmniboxAutoHideCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showSidebarQuickswitcherButton`.
            public var showSidebarQuickswitcherButton: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/entOrgWideChannelsSidebar`.
            public var entOrgWideChannelsSidebar: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/markMsgsReadImmediately`.
            public var markMsgsReadImmediately: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/startScrollAtOldest`.
            public var startScrollAtOldest: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/snippetEditorWrapLongLines`.
            public var snippetEditorWrapLongLines: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/lsDisabled`.
            public var lsDisabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/fKeySearch`.
            public var fKeySearch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/kKeyOmnibox`.
            public var kKeyOmnibox: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/promptedForEmailDisabling`.
            public var promptedForEmailDisabling: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/noMacelectronBanner`.
            public var noMacelectronBanner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/noMacssb1Banner`.
            public var noMacssb1Banner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/noMacssb2Banner`.
            public var noMacssb2Banner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/noWinssb1Banner`.
            public var noWinssb1Banner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hideUserGroupInfoPane`.
            public var hideUserGroupInfoPane: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/mentionsExcludeAtUserGroups`.
            public var mentionsExcludeAtUserGroups: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/mentionsExcludeReactions`.
            public var mentionsExcludeReactions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/privacyPolicySeen`.
            public var privacyPolicySeen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enterpriseMigrationSeen`.
            public var enterpriseMigrationSeen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/searchExcludeBots`.
            public var searchExcludeBots: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/loadLato2`.
            public var loadLato2: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/fullerTimestamps`.
            public var fullerTimestamps: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/lastSeenAtChannelWarning`.
            public var lastSeenAtChannelWarning: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/emojiAutocompleteBig`.
            public var emojiAutocompleteBig: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/twoFactorAuthEnabled`.
            public var twoFactorAuthEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hideHexSwatch`.
            public var hideHexSwatch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showJumperScores`.
            public var showJumperScores: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enterpriseMdmCustomMsg`.
            public var enterpriseMdmCustomMsg: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/clientLogsPri`.
            public var clientLogsPri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/flannelServerPool`.
            public var flannelServerPool: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/mentionsExcludeAtChannels`.
            public var mentionsExcludeAtChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/confirmClearAllUnreads`.
            public var confirmClearAllUnreads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/confirmUserMarkedAway`.
            public var confirmUserMarkedAway: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/boxEnabled`.
            public var boxEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenSingleEmojiMsg`.
            public var seenSingleEmojiMsg: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/confirmShCallStart`.
            public var confirmShCallStart: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/preferredSkinTone`.
            public var preferredSkinTone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showAllSkinTones`.
            public var showAllSkinTones: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/whatsNewRead`.
            public var whatsNewRead: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/helpModalOpenTimestamp`.
            public var helpModalOpenTimestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/helpModalConsultBannerDismissed`.
            public var helpModalConsultBannerDismissed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/helpFlexpaneSlackConnectCardSeen`.
            public var helpFlexpaneSlackConnectCardSeen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/helpFlexpaneClipsCardSeen`.
            public var helpFlexpaneClipsCardSeen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/helpMenuOpenTimestamp`.
            public var helpMenuOpenTimestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/frecencyJumper`.
            public var frecencyJumper: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/frecencyEntJumper`.
            public var frecencyEntJumper: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/newxpSeenLastMessage`.
            public var newxpSeenLastMessage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showMemoryInstrument`.
            public var showMemoryInstrument: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableUnreadView`.
            public var enableUnreadView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenUnreadViewCoachmark`.
            public var seenUnreadViewCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenConnectDmCoachmark`.
            public var seenConnectDmCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenConnectSectionCoachmark`.
            public var seenConnectSectionCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/shouldShowConnectSection`.
            public var shouldShowConnectSection: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableReactEmojiPicker`.
            public var enableReactEmojiPicker: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenCustomStatusBadge`.
            public var seenCustomStatusBadge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenCustomStatusCallout`.
            public var seenCustomStatusCallout: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenCustomStatusExpirationBadge`.
            public var seenCustomStatusExpirationBadge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/usedCustomStatusKbShortcut`.
            public var usedCustomStatusKbShortcut: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenGuestAdminSlackbotAnnouncement`.
            public var seenGuestAdminSlackbotAnnouncement: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenThreadsNotificationBanner`.
            public var seenThreadsNotificationBanner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenNameTaggingCoachmark`.
            public var seenNameTaggingCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/allUnreadsSortOrder`.
            public var allUnreadsSortOrder: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/allUnreadsSectionFilter`.
            public var allUnreadsSectionFilter: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenIntlChannelNamesCoachmark`.
            public var seenIntlChannelNamesCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenP3LocaleChangeMessageKoKr`.
            public var seenP3LocaleChangeMessageKoKr: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenToastNewLocaleLaunch`.
            public var seenToastNewLocaleLaunch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenToastNewLocaleLaunchTs`.
            public var seenToastNewLocaleLaunchTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenLocaleChangeMessage`.
            public var seenLocaleChangeMessage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenJapaneseLocaleChangeMessage`.
            public var seenJapaneseLocaleChangeMessage: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenSharedChannelsCoachmark`.
            public var seenSharedChannelsCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenSharedChannelsOptInChangeMessage`.
            public var seenSharedChannelsOptInChangeMessage: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasRecentlySharedAChannel`.
            public var hasRecentlySharedAChannel: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenChannelBrowserAdminCoachmark`.
            public var seenChannelBrowserAdminCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenAdministrationMenu`.
            public var seenAdministrationMenu: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenDraftsSectionCoachmark`.
            public var seenDraftsSectionCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenEmojiUpdateOverlayCoachmark`.
            public var seenEmojiUpdateOverlayCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenSonicDeluxeToast`.
            public var seenSonicDeluxeToast: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenWysiwygDeluxeToast`.
            public var seenWysiwygDeluxeToast: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenMarkdownPasteToast`.
            public var seenMarkdownPasteToast: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenMarkdownPasteShortcut`.
            public var seenMarkdownPasteShortcut: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenIaEducation`.
            public var seenIaEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showIaTourRelaunch`.
            public var showIaTourRelaunch: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/plainTextMode`.
            public var plainTextMode: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showSharedChannelsEducationBanner`.
            public var showSharedChannelsEducationBanner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/iaSlackbotSurveyTimestamp48h`.
            public var iaSlackbotSurveyTimestamp48h: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/iaSlackbotSurveyTimestamp7d`.
            public var iaSlackbotSurveyTimestamp7d: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableStreamlineView`.
            public var enableStreamlineView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableSentView`.
            public var enableSentView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/allowCallsToSetCurrentStatus`.
            public var allowCallsToSetCurrentStatus: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/inInteractiveMasMigrationFlow`.
            public var inInteractiveMasMigrationFlow: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/sunsetInteractiveMessageViews`.
            public var sunsetInteractiveMessageViews: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/shdepPromoCodeSubmitted`.
            public var shdepPromoCodeSubmitted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenShdepSlackbotMessage`.
            public var seenShdepSlackbotMessage: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenCallsInteractiveCoachmark`.
            public var seenCallsInteractiveCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/allowCmdTabIss`.
            public var allowCmdTabIss: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/joinCallsDeviceSettings`.
            public var joinCallsDeviceSettings: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/callsDisconnectOnLock`.
            public var callsDisconnectOnLock: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenWorkflowBuilderDeluxeToast`.
            public var seenWorkflowBuilderDeluxeToast: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/workflowBuilderIntroModalClickedThrough`.
            public var workflowBuilderIntroModalClickedThrough: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/workflowBuilderCoachmarks`.
            public var workflowBuilderCoachmarks: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenGdriveCoachmark`.
            public var seenGdriveCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenFirstInstallCoachmark`.
            public var seenFirstInstallCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenExistingInstallCoachmark`.
            public var seenExistingInstallCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenLinkUnfurlCoachmark`.
            public var seenLinkUnfurlCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/filePickerVariant`.
            public var filePickerVariant: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/openQuipDocInFlexpane`.
            public var openQuipDocInFlexpane: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/savedSearches`.
            public var savedSearches: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesVariant`.
            public var huddlesVariant: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesCcByDefault`.
            public var huddlesCcByDefault: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesMuteByDefault`.
            public var huddlesMuteByDefault: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesGlobalMute`.
            public var huddlesGlobalMute: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesMiniPanel`.
            public var huddlesMiniPanel: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesSetStatus`.
            public var huddlesSetStatus: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesShowShoutyRooster`.
            public var huddlesShowShoutyRooster: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesDisconnectOnLock`.
            public var huddlesDisconnectOnLock: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesPlayMusicWhenLast`.
            public var huddlesPlayMusicWhenLast: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesAllowSmartNotif`.
            public var huddlesAllowSmartNotif: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesReactionsPlaySound`.
            public var huddlesReactionsPlaySound: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesReactionsReadOutLoud`.
            public var huddlesReactionsReadOutLoud: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddlesChimeNewEndpointsCheckCompleted`.
            public var huddlesChimeNewEndpointsCheckCompleted: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/xwsSidebarVariant`.
            public var xwsSidebarVariant: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/inboxViewsWorkspaceFilter`.
            public var inboxViewsWorkspaceFilter: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/overloadedMessageEnabled`.
            public var overloadedMessageEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenHighlightsCoachmark`.
            public var seenHighlightsCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenHighlightsArrowsCoachmark`.
            public var seenHighlightsArrowsCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenHighlightsWarmWelcome`.
            public var seenHighlightsWarmWelcome: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenNewSearchUi`.
            public var seenNewSearchUi: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenChannelSearch`.
            public var seenChannelSearch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenPeopleSearch`.
            public var seenPeopleSearch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenPeopleSearchCount`.
            public var seenPeopleSearchCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedScrollSearchTooltipCount`.
            public var dismissedScrollSearchTooltipCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/lastDismissedScrollSearchTooltipTimestamp`.
            public var lastDismissedScrollSearchTooltipTimestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasUsedQuickswitcherShortcut`.
            public var hasUsedQuickswitcherShortcut: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenQuickswitcherShortcutTipCount`.
            public var seenQuickswitcherShortcutTipCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersDismissedChannelsLowResultsEducation`.
            public var browsersDismissedChannelsLowResultsEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersSeenInitialChannelsEducation`.
            public var browsersSeenInitialChannelsEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersDismissedPeopleLowResultsEducation`.
            public var browsersDismissedPeopleLowResultsEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersSeenInitialPeopleEducation`.
            public var browsersSeenInitialPeopleEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersDismissedUserGroupsLowResultsEducation`.
            public var browsersDismissedUserGroupsLowResultsEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersSeenInitialUserGroupsEducation`.
            public var browsersSeenInitialUserGroupsEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersDismissedFilesLowResultsEducation`.
            public var browsersDismissedFilesLowResultsEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersSeenInitialFilesEducation`.
            public var browsersSeenInitialFilesEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersDismissedInitialDraftsEducation`.
            public var browsersDismissedInitialDraftsEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersSeenInitialDraftsEducation`.
            public var browsersSeenInitialDraftsEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersDismissedInitialActivityEducation`.
            public var browsersDismissedInitialActivityEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersSeenInitialActivityEducation`.
            public var browsersSeenInitialActivityEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersDismissedInitialSavedEducation`.
            public var browsersDismissedInitialSavedEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/browsersSeenInitialSavedEducation`.
            public var browsersSeenInitialSavedEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenEditMode`.
            public var seenEditMode: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenEditModeEdu`.
            public var seenEditModeEdu: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/xwsDismissedEducation`.
            public var xwsDismissedEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/xwsSeenEducation`.
            public var xwsSeenEducation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/sidebarPrefDismissedTip`.
            public var sidebarPrefDismissedTip: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/a11yDyslexic`.
            public var a11yDyslexic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/a11yAnimations`.
            public var a11yAnimations: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenKeyboardShortcutsCoachmark`.
            public var seenKeyboardShortcutsCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/needsInitialPasswordSet`.
            public var needsInitialPasswordSet: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/lessonsEnabled`.
            public var lessonsEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/tractorEnabled`.
            public var tractorEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/tractorExperimentGroup`.
            public var tractorExperimentGroup: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/openedSlackbotDm`.
            public var openedSlackbotDm: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/newxpSeenHelpMessage`.
            public var newxpSeenHelpMessage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/newxpSuggestedChannels`.
            public var newxpSuggestedChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/onboardingComplete`.
            public var onboardingComplete: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/welcomePlaceState`.
            public var welcomePlaceState: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasReceivedThreadedMessage`.
            public var hasReceivedThreadedMessage: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/joinerNotificationsMuted`.
            public var joinerNotificationsMuted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/inviteAcceptedNotificationsMuted`.
            public var inviteAcceptedNotificationsMuted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/joinerMessageSuggestionDismissed`.
            public var joinerMessageSuggestionDismissed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedFullscreenDownloadSsbPrompt`.
            public var dismissedFullscreenDownloadSsbPrompt: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedBannerDownloadSsbPrompt`.
            public var dismissedBannerDownloadSsbPrompt: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/onboardingState`.
            public var onboardingState: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/whocanseethisDmMpdmBadge`.
            public var whocanseethisDmMpdmBadge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/highlightWords`.
            public var highlightWords: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/threadsEverything`.
            public var threadsEverything: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/noTextInNotifications`.
            public var noTextInNotifications: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pushShowPreview`.
            public var pushShowPreview: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/growlsEnabled`.
            public var growlsEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/allChannelsLoud`.
            public var allChannelsLoud: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pushDmAlert`.
            public var pushDmAlert: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pushMentionAlert`.
            public var pushMentionAlert: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pushEverything`.
            public var pushEverything: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pushIdleWait`.
            public var pushIdleWait: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pushSound`.
            public var pushSound: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/newMsgSnd`.
            public var newMsgSnd: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/huddleInviteSound`.
            public var huddleInviteSound: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pushLoudChannels`.
            public var pushLoudChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pushMentionChannels`.
            public var pushMentionChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pushLoudChannelsSet`.
            public var pushLoudChannelsSet: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/loudChannels`.
            public var loudChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/neverChannels`.
            public var neverChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/loudChannelsSet`.
            public var loudChannelsSet: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/atChannelSuppressedChannels`.
            public var atChannelSuppressedChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/pushAtChannelSuppressedChannels`.
            public var pushAtChannelSuppressedChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/mutedChannels`.
            public var mutedChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/allNotificationsPrefs`.
            public var allNotificationsPrefs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/growthMsgLimitApproachingCtaCount`.
            public var growthMsgLimitApproachingCtaCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/growthMsgLimitApproachingCtaTs`.
            public var growthMsgLimitApproachingCtaTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/growthMsgLimitReachedCtaCount`.
            public var growthMsgLimitReachedCtaCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/growthMsgLimitReachedCtaLastTs`.
            public var growthMsgLimitReachedCtaLastTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/growthMsgLimitLongReachedCtaCount`.
            public var growthMsgLimitLongReachedCtaCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/growthMsgLimitLongReachedCtaLastTs`.
            public var growthMsgLimitLongReachedCtaLastTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/growthMsgLimitSixtyDayBannerCtaCount`.
            public var growthMsgLimitSixtyDayBannerCtaCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/growthMsgLimitSixtyDayBannerCtaLastTs`.
            public var growthMsgLimitSixtyDayBannerCtaLastTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/growthAllBannersPrefs`.
            public var growthAllBannersPrefs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/analyticsUpsellCoachmarkSeen`.
            public var analyticsUpsellCoachmarkSeen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenAppSpaceCoachmark`.
            public var seenAppSpaceCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenAppSpaceTutorial`.
            public var seenAppSpaceTutorial: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedAppLauncherWelcome`.
            public var dismissedAppLauncherWelcome: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedAppLauncherLimit`.
            public var dismissedAppLauncherLimit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedAppLauncherAtlassianPromo`.
            public var dismissedAppLauncherAtlassianPromo: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableAppConfigRedesign`.
            public var enableAppConfigRedesign: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedAppConfigRedesignCoachmark`.
            public var dismissedAppConfigRedesignCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedAppManifestDescription`.
            public var dismissedAppManifestDescription: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedAppManifestCoachmark`.
            public var dismissedAppManifestCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenChannelEmailTooltip`.
            public var seenChannelEmailTooltip: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showEntOnboarding`.
            public var showEntOnboarding: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/foldersEnabled`.
            public var foldersEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/folderData`.
            public var folderData: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenCorporateExportAlert`.
            public var seenCorporateExportAlert: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showAutocompleteHelp`.
            public var showAutocompleteHelp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/deprecationToastLastSeen`.
            public var deprecationToastLastSeen: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/deprecationModalLastSeen`.
            public var deprecationModalLastSeen: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/deprecationBannerLastSeen`.
            public var deprecationBannerLastSeen: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/iap1Lab`.
            public var iap1Lab: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/iaTopNavTheme`.
            public var iaTopNavTheme: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/iaPlatformActionsLab`.
            public var iaPlatformActionsLab: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/activityView`.
            public var activityView: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/savedView`.
            public var savedView: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenFloatingSidebarCoachmark`.
            public var seenFloatingSidebarCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/desktopClientIds`.
            public var desktopClientIds: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/failoverProxyCheckCompleted`.
            public var failoverProxyCheckCompleted: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/chimeAccessCheckCompleted`.
            public var chimeAccessCheckCompleted: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/mxCalendarType`.
            public var mxCalendarType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/edgeUploadProxyCheckCompleted`.
            public var edgeUploadProxyCheckCompleted: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/appSubdomainCheckCompleted`.
            public var appSubdomainCheckCompleted: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/addPromptInteracted`.
            public var addPromptInteracted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/addAppsPromptDismissed`.
            public var addAppsPromptDismissed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/addChannelPromptDismissed`.
            public var addChannelPromptDismissed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/channelSidebarHideInvite`.
            public var channelSidebarHideInvite: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/channelSidebarHideBrowseDmsLink`.
            public var channelSidebarHideBrowseDmsLink: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/inProdSurveysEnabled`.
            public var inProdSurveysEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/connectDmEarlyAccess`.
            public var connectDmEarlyAccess: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedInstalledAppDmSuggestions`.
            public var dismissedInstalledAppDmSuggestions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenContextualMessageShortcutsModal`.
            public var seenContextualMessageShortcutsModal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenMessageNavigationEducationalToast`.
            public var seenMessageNavigationEducationalToast: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/contextualMessageShortcutsModalWasSeen`.
            public var contextualMessageShortcutsModalWasSeen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/messageNavigationToastWasSeen`.
            public var messageNavigationToastWasSeen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/upToBrowseKbShortcut`.
            public var upToBrowseKbShortcut: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/setA11yPrefsNewUser`.
            public var setA11yPrefsNewUser: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/a11yPlaySoundForIncomingDm`.
            public var a11yPlaySoundForIncomingDm: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/a11yPlaySoundForSentDm`.
            public var a11yPlaySoundForSentDm: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/a11yReadOutIncomingDm`.
            public var a11yReadOutIncomingDm: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/a11yScreenReaderMessageLabelDateTimeFirst`.
            public var a11yScreenReaderMessageLabelDateTimeFirst: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/shouldShowContextualHelpForConversationNavigation`.
            public var shouldShowContextualHelpForConversationNavigation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/shouldShowContextualHelpForJumpToConversation`.
            public var shouldShowContextualHelpForJumpToConversation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/shouldShowContextualHelpForSectionNavigation`.
            public var shouldShowContextualHelpForSectionNavigation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/shouldShowContextualHelpForThreadNavigation`.
            public var shouldShowContextualHelpForThreadNavigation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/shouldShowUnsendMessageConfirmation`.
            public var shouldShowUnsendMessageConfirmation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/channelSections`.
            public var channelSections: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showQuickReactions`.
            public var showQuickReactions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/userCustomizedQuickReactionsDisplayFeature`.
            public var userCustomizedQuickReactionsDisplayFeature: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/userCustomizedQuickReactionsHasCustomized`.
            public var userCustomizedQuickReactionsHasCustomized: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/userCustomizedQuickReactionsUseFrequentlyUsedEmoji`.
            public var userCustomizedQuickReactionsUseFrequentlyUsedEmoji: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/reactionNotifications`.
            public var reactionNotifications: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasReceivedMentionOrReaction`.
            public var hasReceivedMentionOrReaction: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasStarredItem`.
            public var hasStarredItem: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasDraftedMessage`.
            public var hasDraftedMessage: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableMentionsAndReactionsView`.
            public var enableMentionsAndReactionsView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableRemindersView`.
            public var enableRemindersView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableSavedItemsView`.
            public var enableSavedItemsView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableHqView`.
            public var enableHqView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableAllDmsView`.
            public var enableAllDmsView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableChannelBrowserView`.
            public var enableChannelBrowserView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableFileBrowserView`.
            public var enableFileBrowserView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enablePeopleBrowserView`.
            public var enablePeopleBrowserView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableAppBrowserView`.
            public var enableAppBrowserView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/reachedAllDmsDisclosure`.
            public var reachedAllDmsDisclosure: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableSlackConnectView`.
            public var enableSlackConnectView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableSlackConnectView2`.
            public var enableSlackConnectView2: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasAcknowledgedShortcutSpeedbump`.
            public var hasAcknowledgedShortcutSpeedbump: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableMediaCaptions`.
            public var enableMediaCaptions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/mediaPlaybackSpeed`.
            public var mediaPlaybackSpeed: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/mediaMuted`.
            public var mediaMuted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/mediaVolume`.
            public var mediaVolume: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedConnectAutoApprovalModal`.
            public var dismissedConnectAutoApprovalModal: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/tasksView`.
            public var tasksView: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showSidebarAvatars`.
            public var showSidebarAvatars: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasDismissedGoogleDirectoryCoachmark`.
            public var hasDismissedGoogleDirectoryCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenScPageBanner`.
            public var seenScPageBanner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenScMenuCoachmark`.
            public var seenScMenuCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenScPage`.
            public var seenScPage: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedScdmEducation`.
            public var dismissedScdmEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenBookmarksIntro`.
            public var seenBookmarksIntro: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/scdmTrialOfferBanner`.
            public var scdmTrialOfferBanner: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/identityLinksPrefs`.
            public var identityLinksPrefs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/identityLinksGlobalPrefs`.
            public var identityLinksGlobalPrefs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenSectionsUnreadsOnlyPromptCount`.
            public var seenSectionsUnreadsOnlyPromptCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/lastSeenSectionsUnreadsOnlyPromptTimestamp`.
            public var lastSeenSectionsUnreadsOnlyPromptTimestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/notificationsView`.
            public var notificationsView: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/progressiveDisclosureState`.
            public var progressiveDisclosureState: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/suggestionsRequestId`.
            public var suggestionsRequestId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/allowedUnfurlSenders`.
            public var allowedUnfurlSenders: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/iaDetailsCoachmarkSeen`.
            public var iaDetailsCoachmarkSeen: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hideExternalMembersSharingSpeedBump`.
            public var hideExternalMembersSharingSpeedBump: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/whoCanShareContactCard`.
            public var whoCanShareContactCard: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/slackConnectInviteShouldBadgeSidebar`.
            public var slackConnectInviteShouldBadgeSidebar: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/phcDismissed`.
            public var phcDismissed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedGovSlackFirstTimePopup`.
            public var dismissedGovSlackFirstTimePopup: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/mobileChannelListSort`.
            public var mobileChannelListSort: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/userExpectationsSurveyLastTriggerAttempt`.
            public var userExpectationsSurveyLastTriggerAttempt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/localesEnabled`.
            public var localesEnabled: Components.Schemas.LocalesEnabled?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/phcViewed`.
            public var phcViewed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenA11yPrefSetupCoachmark`.
            public var seenA11yPrefSetupCoachmark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableFileBrowserViewForDocs`.
            public var enableFileBrowserViewForDocs: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableShortcutsView`.
            public var enableShortcutsView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/showGovSlackContextBarBanner`.
            public var showGovSlackContextBarBanner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/whoCanSeeAccountBySearchingEmail`.
            public var whoCanSeeAccountBySearchingEmail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/contextualHelpResetCount`.
            public var contextualHelpResetCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/mobileChannelListShowAllDms`.
            public var mobileChannelListShowAllDms: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableQuipFileBrowserView`.
            public var enableQuipFileBrowserView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/a11yPlaySoundForIncomingDmChoice`.
            public var a11yPlaySoundForIncomingDmChoice: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/a11yPlaySoundForSentDmChoice`.
            public var a11yPlaySoundForSentDmChoice: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/onboardingTipOptOut`.
            public var onboardingTipOptOut: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingSynthView`.
            public var seenOnboardingSynthView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableDraftsView`.
            public var enableDraftsView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableScheduledView`.
            public var enableScheduledView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenSentPageInSidebar`.
            public var seenSentPageInSidebar: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/firstSeenSentPageInSidebar`.
            public var firstSeenSentPageInSidebar: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenNewBadgeInMoreMenuSidebar`.
            public var seenNewBadgeInMoreMenuSidebar: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/firstSeenNewBadgeInMoreMenuSidebar`.
            public var firstSeenNewBadgeInMoreMenuSidebar: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingSynthViewCount`.
            public var seenOnboardingSynthViewCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/synthViewPrefs`.
            public var synthViewPrefs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/clipsFeedbackSurveyLastTriggerAttempt`.
            public var clipsFeedbackSurveyLastTriggerAttempt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/enableLaterView`.
            public var enableLaterView: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasJoinedHuddle`.
            public var hasJoinedHuddle: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hasSentTenMessages`.
            public var hasSentTenMessages: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/suppressThreadMentionWarning`.
            public var suppressThreadMentionWarning: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/hiddenUsers`.
            public var hiddenUsers: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/dismissedSentPageEducation`.
            public var dismissedSentPageEducation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingSynthViewV2`.
            public var seenOnboardingSynthViewV2: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/clickedCloseOnboardingSynthViewBanner`.
            public var clickedCloseOnboardingSynthViewBanner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/seenOnboardingSynthViewCountV2`.
            public var seenOnboardingSynthViewCountV2: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/appManifestSchemaFormat`.
            public var appManifestSchemaFormat: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SelfPrefs/channelCanvasVariant`.
            public var channelCanvasVariant: Swift.Int?
            /// Creates a new `SelfPrefs`.
            ///
            /// - Parameters:
            ///   - time24:
            ///   - jumbomoji:
            ///   - locale:
            ///   - purchaser:
            ///   - tz:
            ///   - frecency:
            ///   - underlineLinks:
            ///   - userColors:
            ///   - colorNamesInList:
            ///   - emailAlerts:
            ///   - emailAlertsSleepUntil:
            ///   - emailTips:
            ///   - emailWeekly:
            ///   - emailOffers:
            ///   - emailResearch:
            ///   - emailDeveloper:
            ///   - welcomeMessageHidden:
            ///   - searchSort:
            ///   - searchFileSort:
            ///   - searchChannelSort:
            ///   - searchPeopleSort:
            ///   - expandInlineImgs:
            ///   - expandInternalInlineImgs:
            ///   - expandSnippets:
            ///   - postsFormattingGuide:
            ///   - seenWelcome2:
            ///   - seenSsbPrompt:
            ///   - spacesNewXpBannerDismissed:
            ///   - searchOnlyMyChannels:
            ///   - searchOnlyCurrentTeam:
            ///   - searchHideMyChannels:
            ///   - searchOnlyShowOnline:
            ///   - searchHideDeactivatedUsers:
            ///   - emojiMode:
            ///   - emojiUse:
            ///   - emojiUseOrg:
            ///   - hasInvited:
            ///   - hasUploaded:
            ///   - hasCreatedChannel:
            ///   - hasCreatedChannelSection:
            ///   - hasSearched:
            ///   - searchExcludeChannels:
            ///   - messagesTheme:
            ///   - webappSpellcheck:
            ///   - noJoinedOverlays:
            ///   - noCreatedOverlays:
            ///   - dropboxEnabled:
            ///   - seenDomainInviteReminder:
            ///   - seenMemberInviteReminder:
            ///   - muteSounds:
            ///   - arrowHistory:
            ///   - tabUiReturnSelects:
            ///   - obeyInlineImgLimit:
            ///   - requireAt:
            ///   - ssbSpaceWindow:
            ///   - macSsbBounce:
            ///   - macSsbBullet:
            ///   - expandNonMediaAttachments:
            ///   - showTyping:
            ///   - pagekeysHandled:
            ///   - lastSnippetType:
            ///   - displayRealNamesOverride:
            ///   - displayDisplayNames:
            ///   - enterIsSpecialInTbt:
            ///   - msgInputSendBtn:
            ///   - msgInputSendBtnAutoSet:
            ///   - msgInputStickyComposer:
            ///   - composerNux:
            ///   - graphicEmoticons:
            ///   - convertEmoticons:
            ///   - ssEmojis:
            ///   - seenOnboardingStart:
            ///   - onboardingCancelled:
            ///   - seenOnboardingSlackbotConversation:
            ///   - seenOnboardingChannels:
            ///   - seenOnboardingDirectMessages:
            ///   - seenOnboardingInvites:
            ///   - seenOnboardingSearch:
            ///   - seenOnboardingRecentMentions:
            ///   - seenOnboardingStarredItems:
            ///   - seenOnboardingPrivateGroups:
            ///   - seenOnboardingBanner:
            ///   - onboardingSlackbotConversationStep:
            ///   - setTzAutomatically:
            ///   - suppressLinkWarning:
            ///   - suppressExternalInvitesFromComposeWarning:
            ///   - seenEmojiPackCta:
            ///   - seenEmojiPackDialog:
            ///   - seenScheduleSendCoachmark:
            ///   - emojiPacksMostRecentAvailableTime:
            ///   - emojiPacksClickedPickerCta:
            ///   - emojiPacksClickedPickerPostInstallCta:
            ///   - emojiPacksClickedCollectionCta:
            ///   - dndEnabled:
            ///   - dndStartHour:
            ///   - dndEndHour:
            ///   - dndBeforeMonday:
            ///   - dndAfterMonday:
            ///   - dndEnabledMonday:
            ///   - dndBeforeTuesday:
            ///   - dndAfterTuesday:
            ///   - dndEnabledTuesday:
            ///   - dndBeforeWednesday:
            ///   - dndAfterWednesday:
            ///   - dndEnabledWednesday:
            ///   - dndBeforeThursday:
            ///   - dndAfterThursday:
            ///   - dndEnabledThursday:
            ///   - dndBeforeFriday:
            ///   - dndAfterFriday:
            ///   - dndEnabledFriday:
            ///   - dndBeforeSaturday:
            ///   - dndAfterSaturday:
            ///   - dndEnabledSaturday:
            ///   - dndBeforeSunday:
            ///   - dndAfterSunday:
            ///   - dndEnabledSunday:
            ///   - dndDays:
            ///   - dndWeekdaysOffAllday:
            ///   - reminderNotificationTime:
            ///   - dndCustomNewBadgeSeen:
            ///   - dndNotificationScheduleNewBadgeSeen:
            ///   - notificationCenterFilters:
            ///   - callsSurveyLastSeen:
            ///   - huddleSurveyLastSeen:
            ///   - sidebarBehavior:
            ///   - channelSort:
            ///   - separatePrivateChannels:
            ///   - separateSharedChannels:
            ///   - sidebarTheme:
            ///   - sidebarThemeCustomValues:
            ///   - noInvitesWidgetInSidebar:
            ///   - noOmniboxInChannels:
            ///   - kKeyOmniboxAutoHideCount:
            ///   - showSidebarQuickswitcherButton:
            ///   - entOrgWideChannelsSidebar:
            ///   - markMsgsReadImmediately:
            ///   - startScrollAtOldest:
            ///   - snippetEditorWrapLongLines:
            ///   - lsDisabled:
            ///   - fKeySearch:
            ///   - kKeyOmnibox:
            ///   - promptedForEmailDisabling:
            ///   - noMacelectronBanner:
            ///   - noMacssb1Banner:
            ///   - noMacssb2Banner:
            ///   - noWinssb1Banner:
            ///   - hideUserGroupInfoPane:
            ///   - mentionsExcludeAtUserGroups:
            ///   - mentionsExcludeReactions:
            ///   - privacyPolicySeen:
            ///   - enterpriseMigrationSeen:
            ///   - searchExcludeBots:
            ///   - loadLato2:
            ///   - fullerTimestamps:
            ///   - lastSeenAtChannelWarning:
            ///   - emojiAutocompleteBig:
            ///   - twoFactorAuthEnabled:
            ///   - hideHexSwatch:
            ///   - showJumperScores:
            ///   - enterpriseMdmCustomMsg:
            ///   - clientLogsPri:
            ///   - flannelServerPool:
            ///   - mentionsExcludeAtChannels:
            ///   - confirmClearAllUnreads:
            ///   - confirmUserMarkedAway:
            ///   - boxEnabled:
            ///   - seenSingleEmojiMsg:
            ///   - confirmShCallStart:
            ///   - preferredSkinTone:
            ///   - showAllSkinTones:
            ///   - whatsNewRead:
            ///   - helpModalOpenTimestamp:
            ///   - helpModalConsultBannerDismissed:
            ///   - helpFlexpaneSlackConnectCardSeen:
            ///   - helpFlexpaneClipsCardSeen:
            ///   - helpMenuOpenTimestamp:
            ///   - frecencyJumper:
            ///   - frecencyEntJumper:
            ///   - newxpSeenLastMessage:
            ///   - showMemoryInstrument:
            ///   - enableUnreadView:
            ///   - seenUnreadViewCoachmark:
            ///   - seenConnectDmCoachmark:
            ///   - seenConnectSectionCoachmark:
            ///   - shouldShowConnectSection:
            ///   - enableReactEmojiPicker:
            ///   - seenCustomStatusBadge:
            ///   - seenCustomStatusCallout:
            ///   - seenCustomStatusExpirationBadge:
            ///   - usedCustomStatusKbShortcut:
            ///   - seenGuestAdminSlackbotAnnouncement:
            ///   - seenThreadsNotificationBanner:
            ///   - seenNameTaggingCoachmark:
            ///   - allUnreadsSortOrder:
            ///   - allUnreadsSectionFilter:
            ///   - seenIntlChannelNamesCoachmark:
            ///   - seenP3LocaleChangeMessageKoKr:
            ///   - seenToastNewLocaleLaunch:
            ///   - seenToastNewLocaleLaunchTs:
            ///   - seenLocaleChangeMessage:
            ///   - seenJapaneseLocaleChangeMessage:
            ///   - seenSharedChannelsCoachmark:
            ///   - seenSharedChannelsOptInChangeMessage:
            ///   - hasRecentlySharedAChannel:
            ///   - seenChannelBrowserAdminCoachmark:
            ///   - seenAdministrationMenu:
            ///   - seenDraftsSectionCoachmark:
            ///   - seenEmojiUpdateOverlayCoachmark:
            ///   - seenSonicDeluxeToast:
            ///   - seenWysiwygDeluxeToast:
            ///   - seenMarkdownPasteToast:
            ///   - seenMarkdownPasteShortcut:
            ///   - seenIaEducation:
            ///   - showIaTourRelaunch:
            ///   - plainTextMode:
            ///   - showSharedChannelsEducationBanner:
            ///   - iaSlackbotSurveyTimestamp48h:
            ///   - iaSlackbotSurveyTimestamp7d:
            ///   - enableStreamlineView:
            ///   - enableSentView:
            ///   - allowCallsToSetCurrentStatus:
            ///   - inInteractiveMasMigrationFlow:
            ///   - sunsetInteractiveMessageViews:
            ///   - shdepPromoCodeSubmitted:
            ///   - seenShdepSlackbotMessage:
            ///   - seenCallsInteractiveCoachmark:
            ///   - allowCmdTabIss:
            ///   - joinCallsDeviceSettings:
            ///   - callsDisconnectOnLock:
            ///   - seenWorkflowBuilderDeluxeToast:
            ///   - workflowBuilderIntroModalClickedThrough:
            ///   - workflowBuilderCoachmarks:
            ///   - seenGdriveCoachmark:
            ///   - seenFirstInstallCoachmark:
            ///   - seenExistingInstallCoachmark:
            ///   - seenLinkUnfurlCoachmark:
            ///   - filePickerVariant:
            ///   - openQuipDocInFlexpane:
            ///   - savedSearches:
            ///   - huddlesVariant:
            ///   - huddlesCcByDefault:
            ///   - huddlesMuteByDefault:
            ///   - huddlesGlobalMute:
            ///   - huddlesMiniPanel:
            ///   - huddlesSetStatus:
            ///   - huddlesShowShoutyRooster:
            ///   - huddlesDisconnectOnLock:
            ///   - huddlesPlayMusicWhenLast:
            ///   - huddlesAllowSmartNotif:
            ///   - huddlesReactionsPlaySound:
            ///   - huddlesReactionsReadOutLoud:
            ///   - huddlesChimeNewEndpointsCheckCompleted:
            ///   - xwsSidebarVariant:
            ///   - inboxViewsWorkspaceFilter:
            ///   - overloadedMessageEnabled:
            ///   - seenHighlightsCoachmark:
            ///   - seenHighlightsArrowsCoachmark:
            ///   - seenHighlightsWarmWelcome:
            ///   - seenNewSearchUi:
            ///   - seenChannelSearch:
            ///   - seenPeopleSearch:
            ///   - seenPeopleSearchCount:
            ///   - dismissedScrollSearchTooltipCount:
            ///   - lastDismissedScrollSearchTooltipTimestamp:
            ///   - hasUsedQuickswitcherShortcut:
            ///   - seenQuickswitcherShortcutTipCount:
            ///   - browsersDismissedChannelsLowResultsEducation:
            ///   - browsersSeenInitialChannelsEducation:
            ///   - browsersDismissedPeopleLowResultsEducation:
            ///   - browsersSeenInitialPeopleEducation:
            ///   - browsersDismissedUserGroupsLowResultsEducation:
            ///   - browsersSeenInitialUserGroupsEducation:
            ///   - browsersDismissedFilesLowResultsEducation:
            ///   - browsersSeenInitialFilesEducation:
            ///   - browsersDismissedInitialDraftsEducation:
            ///   - browsersSeenInitialDraftsEducation:
            ///   - browsersDismissedInitialActivityEducation:
            ///   - browsersSeenInitialActivityEducation:
            ///   - browsersDismissedInitialSavedEducation:
            ///   - browsersSeenInitialSavedEducation:
            ///   - seenEditMode:
            ///   - seenEditModeEdu:
            ///   - xwsDismissedEducation:
            ///   - xwsSeenEducation:
            ///   - sidebarPrefDismissedTip:
            ///   - a11yDyslexic:
            ///   - a11yAnimations:
            ///   - seenKeyboardShortcutsCoachmark:
            ///   - needsInitialPasswordSet:
            ///   - lessonsEnabled:
            ///   - tractorEnabled:
            ///   - tractorExperimentGroup:
            ///   - openedSlackbotDm:
            ///   - newxpSeenHelpMessage:
            ///   - newxpSuggestedChannels:
            ///   - onboardingComplete:
            ///   - welcomePlaceState:
            ///   - hasReceivedThreadedMessage:
            ///   - joinerNotificationsMuted:
            ///   - inviteAcceptedNotificationsMuted:
            ///   - joinerMessageSuggestionDismissed:
            ///   - dismissedFullscreenDownloadSsbPrompt:
            ///   - dismissedBannerDownloadSsbPrompt:
            ///   - onboardingState:
            ///   - whocanseethisDmMpdmBadge:
            ///   - highlightWords:
            ///   - threadsEverything:
            ///   - noTextInNotifications:
            ///   - pushShowPreview:
            ///   - growlsEnabled:
            ///   - allChannelsLoud:
            ///   - pushDmAlert:
            ///   - pushMentionAlert:
            ///   - pushEverything:
            ///   - pushIdleWait:
            ///   - pushSound:
            ///   - newMsgSnd:
            ///   - huddleInviteSound:
            ///   - pushLoudChannels:
            ///   - pushMentionChannels:
            ///   - pushLoudChannelsSet:
            ///   - loudChannels:
            ///   - neverChannels:
            ///   - loudChannelsSet:
            ///   - atChannelSuppressedChannels:
            ///   - pushAtChannelSuppressedChannels:
            ///   - mutedChannels:
            ///   - allNotificationsPrefs:
            ///   - growthMsgLimitApproachingCtaCount:
            ///   - growthMsgLimitApproachingCtaTs:
            ///   - growthMsgLimitReachedCtaCount:
            ///   - growthMsgLimitReachedCtaLastTs:
            ///   - growthMsgLimitLongReachedCtaCount:
            ///   - growthMsgLimitLongReachedCtaLastTs:
            ///   - growthMsgLimitSixtyDayBannerCtaCount:
            ///   - growthMsgLimitSixtyDayBannerCtaLastTs:
            ///   - growthAllBannersPrefs:
            ///   - analyticsUpsellCoachmarkSeen:
            ///   - seenAppSpaceCoachmark:
            ///   - seenAppSpaceTutorial:
            ///   - dismissedAppLauncherWelcome:
            ///   - dismissedAppLauncherLimit:
            ///   - dismissedAppLauncherAtlassianPromo:
            ///   - enableAppConfigRedesign:
            ///   - dismissedAppConfigRedesignCoachmark:
            ///   - dismissedAppManifestDescription:
            ///   - dismissedAppManifestCoachmark:
            ///   - seenChannelEmailTooltip:
            ///   - showEntOnboarding:
            ///   - foldersEnabled:
            ///   - folderData:
            ///   - seenCorporateExportAlert:
            ///   - showAutocompleteHelp:
            ///   - deprecationToastLastSeen:
            ///   - deprecationModalLastSeen:
            ///   - deprecationBannerLastSeen:
            ///   - iap1Lab:
            ///   - iaTopNavTheme:
            ///   - iaPlatformActionsLab:
            ///   - activityView:
            ///   - savedView:
            ///   - seenFloatingSidebarCoachmark:
            ///   - desktopClientIds:
            ///   - failoverProxyCheckCompleted:
            ///   - chimeAccessCheckCompleted:
            ///   - mxCalendarType:
            ///   - edgeUploadProxyCheckCompleted:
            ///   - appSubdomainCheckCompleted:
            ///   - addPromptInteracted:
            ///   - addAppsPromptDismissed:
            ///   - addChannelPromptDismissed:
            ///   - channelSidebarHideInvite:
            ///   - channelSidebarHideBrowseDmsLink:
            ///   - inProdSurveysEnabled:
            ///   - connectDmEarlyAccess:
            ///   - dismissedInstalledAppDmSuggestions:
            ///   - seenContextualMessageShortcutsModal:
            ///   - seenMessageNavigationEducationalToast:
            ///   - contextualMessageShortcutsModalWasSeen:
            ///   - messageNavigationToastWasSeen:
            ///   - upToBrowseKbShortcut:
            ///   - setA11yPrefsNewUser:
            ///   - a11yPlaySoundForIncomingDm:
            ///   - a11yPlaySoundForSentDm:
            ///   - a11yReadOutIncomingDm:
            ///   - a11yScreenReaderMessageLabelDateTimeFirst:
            ///   - shouldShowContextualHelpForConversationNavigation:
            ///   - shouldShowContextualHelpForJumpToConversation:
            ///   - shouldShowContextualHelpForSectionNavigation:
            ///   - shouldShowContextualHelpForThreadNavigation:
            ///   - shouldShowUnsendMessageConfirmation:
            ///   - channelSections:
            ///   - showQuickReactions:
            ///   - userCustomizedQuickReactionsDisplayFeature:
            ///   - userCustomizedQuickReactionsHasCustomized:
            ///   - userCustomizedQuickReactionsUseFrequentlyUsedEmoji:
            ///   - reactionNotifications:
            ///   - hasReceivedMentionOrReaction:
            ///   - hasStarredItem:
            ///   - hasDraftedMessage:
            ///   - enableMentionsAndReactionsView:
            ///   - enableRemindersView:
            ///   - enableSavedItemsView:
            ///   - enableHqView:
            ///   - enableAllDmsView:
            ///   - enableChannelBrowserView:
            ///   - enableFileBrowserView:
            ///   - enablePeopleBrowserView:
            ///   - enableAppBrowserView:
            ///   - reachedAllDmsDisclosure:
            ///   - enableSlackConnectView:
            ///   - enableSlackConnectView2:
            ///   - hasAcknowledgedShortcutSpeedbump:
            ///   - enableMediaCaptions:
            ///   - mediaPlaybackSpeed:
            ///   - mediaMuted:
            ///   - mediaVolume:
            ///   - dismissedConnectAutoApprovalModal:
            ///   - tasksView:
            ///   - showSidebarAvatars:
            ///   - hasDismissedGoogleDirectoryCoachmark:
            ///   - seenScPageBanner:
            ///   - seenScMenuCoachmark:
            ///   - seenScPage:
            ///   - dismissedScdmEducation:
            ///   - seenBookmarksIntro:
            ///   - scdmTrialOfferBanner:
            ///   - identityLinksPrefs:
            ///   - identityLinksGlobalPrefs:
            ///   - seenSectionsUnreadsOnlyPromptCount:
            ///   - lastSeenSectionsUnreadsOnlyPromptTimestamp:
            ///   - notificationsView:
            ///   - progressiveDisclosureState:
            ///   - suggestionsRequestId:
            ///   - allowedUnfurlSenders:
            ///   - iaDetailsCoachmarkSeen:
            ///   - hideExternalMembersSharingSpeedBump:
            ///   - whoCanShareContactCard:
            ///   - slackConnectInviteShouldBadgeSidebar:
            ///   - phcDismissed:
            ///   - dismissedGovSlackFirstTimePopup:
            ///   - mobileChannelListSort:
            ///   - userExpectationsSurveyLastTriggerAttempt:
            ///   - localesEnabled:
            ///   - phcViewed:
            ///   - seenA11yPrefSetupCoachmark:
            ///   - enableFileBrowserViewForDocs:
            ///   - enableShortcutsView:
            ///   - showGovSlackContextBarBanner:
            ///   - whoCanSeeAccountBySearchingEmail:
            ///   - contextualHelpResetCount:
            ///   - mobileChannelListShowAllDms:
            ///   - enableQuipFileBrowserView:
            ///   - a11yPlaySoundForIncomingDmChoice:
            ///   - a11yPlaySoundForSentDmChoice:
            ///   - onboardingTipOptOut:
            ///   - seenOnboardingSynthView:
            ///   - enableDraftsView:
            ///   - enableScheduledView:
            ///   - seenSentPageInSidebar:
            ///   - firstSeenSentPageInSidebar:
            ///   - seenNewBadgeInMoreMenuSidebar:
            ///   - firstSeenNewBadgeInMoreMenuSidebar:
            ///   - seenOnboardingSynthViewCount:
            ///   - synthViewPrefs:
            ///   - clipsFeedbackSurveyLastTriggerAttempt:
            ///   - enableLaterView:
            ///   - hasJoinedHuddle:
            ///   - hasSentTenMessages:
            ///   - suppressThreadMentionWarning:
            ///   - hiddenUsers:
            ///   - dismissedSentPageEducation:
            ///   - seenOnboardingSynthViewV2:
            ///   - clickedCloseOnboardingSynthViewBanner:
            ///   - seenOnboardingSynthViewCountV2:
            ///   - appManifestSchemaFormat:
            ///   - channelCanvasVariant:
            public init(
                time24: Swift.Bool? = nil,
                jumbomoji: Swift.Bool? = nil,
                locale: Swift.String? = nil,
                purchaser: Swift.Bool? = nil,
                tz: Swift.String? = nil,
                frecency: Swift.String? = nil,
                underlineLinks: Swift.Bool? = nil,
                userColors: Swift.String? = nil,
                colorNamesInList: Swift.Bool? = nil,
                emailAlerts: Swift.String? = nil,
                emailAlertsSleepUntil: Swift.Int? = nil,
                emailTips: Swift.Bool? = nil,
                emailWeekly: Swift.Bool? = nil,
                emailOffers: Swift.Bool? = nil,
                emailResearch: Swift.Bool? = nil,
                emailDeveloper: Swift.Bool? = nil,
                welcomeMessageHidden: Swift.Bool? = nil,
                searchSort: Swift.String? = nil,
                searchFileSort: Swift.String? = nil,
                searchChannelSort: Swift.String? = nil,
                searchPeopleSort: Swift.String? = nil,
                expandInlineImgs: Swift.Bool? = nil,
                expandInternalInlineImgs: Swift.Bool? = nil,
                expandSnippets: Swift.Bool? = nil,
                postsFormattingGuide: Swift.Bool? = nil,
                seenWelcome2: Swift.Bool? = nil,
                seenSsbPrompt: Swift.Bool? = nil,
                spacesNewXpBannerDismissed: Swift.Bool? = nil,
                searchOnlyMyChannels: Swift.Bool? = nil,
                searchOnlyCurrentTeam: Swift.Bool? = nil,
                searchHideMyChannels: Swift.Bool? = nil,
                searchOnlyShowOnline: Swift.Bool? = nil,
                searchHideDeactivatedUsers: Swift.Bool? = nil,
                emojiMode: Swift.String? = nil,
                emojiUse: Swift.String? = nil,
                emojiUseOrg: Swift.String? = nil,
                hasInvited: Swift.Bool? = nil,
                hasUploaded: Swift.Bool? = nil,
                hasCreatedChannel: Swift.Bool? = nil,
                hasCreatedChannelSection: Swift.Bool? = nil,
                hasSearched: Swift.Bool? = nil,
                searchExcludeChannels: Swift.String? = nil,
                messagesTheme: Swift.String? = nil,
                webappSpellcheck: Swift.Bool? = nil,
                noJoinedOverlays: Swift.Bool? = nil,
                noCreatedOverlays: Swift.Bool? = nil,
                dropboxEnabled: Swift.Bool? = nil,
                seenDomainInviteReminder: Swift.Bool? = nil,
                seenMemberInviteReminder: Swift.Bool? = nil,
                muteSounds: Swift.Bool? = nil,
                arrowHistory: Swift.Bool? = nil,
                tabUiReturnSelects: Swift.Bool? = nil,
                obeyInlineImgLimit: Swift.Bool? = nil,
                requireAt: Swift.Bool? = nil,
                ssbSpaceWindow: Swift.String? = nil,
                macSsbBounce: Swift.String? = nil,
                macSsbBullet: Swift.Bool? = nil,
                expandNonMediaAttachments: Swift.Bool? = nil,
                showTyping: Swift.Bool? = nil,
                pagekeysHandled: Swift.Bool? = nil,
                lastSnippetType: Swift.String? = nil,
                displayRealNamesOverride: Swift.Int? = nil,
                displayDisplayNames: Swift.Bool? = nil,
                enterIsSpecialInTbt: Swift.Bool? = nil,
                msgInputSendBtn: Swift.Bool? = nil,
                msgInputSendBtnAutoSet: Swift.Bool? = nil,
                msgInputStickyComposer: Swift.Bool? = nil,
                composerNux: Swift.String? = nil,
                graphicEmoticons: Swift.Bool? = nil,
                convertEmoticons: Swift.Bool? = nil,
                ssEmojis: Swift.Bool? = nil,
                seenOnboardingStart: Swift.Bool? = nil,
                onboardingCancelled: Swift.Bool? = nil,
                seenOnboardingSlackbotConversation: Swift.Bool? = nil,
                seenOnboardingChannels: Swift.Bool? = nil,
                seenOnboardingDirectMessages: Swift.Bool? = nil,
                seenOnboardingInvites: Swift.Bool? = nil,
                seenOnboardingSearch: Swift.Bool? = nil,
                seenOnboardingRecentMentions: Swift.Bool? = nil,
                seenOnboardingStarredItems: Swift.Bool? = nil,
                seenOnboardingPrivateGroups: Swift.Bool? = nil,
                seenOnboardingBanner: Swift.Bool? = nil,
                onboardingSlackbotConversationStep: Swift.Int? = nil,
                setTzAutomatically: Swift.Bool? = nil,
                suppressLinkWarning: Swift.Bool? = nil,
                suppressExternalInvitesFromComposeWarning: Swift.Bool? = nil,
                seenEmojiPackCta: Swift.Int? = nil,
                seenEmojiPackDialog: Swift.Bool? = nil,
                seenScheduleSendCoachmark: Swift.Bool? = nil,
                emojiPacksMostRecentAvailableTime: Swift.Int? = nil,
                emojiPacksClickedPickerCta: Swift.Bool? = nil,
                emojiPacksClickedPickerPostInstallCta: Swift.Bool? = nil,
                emojiPacksClickedCollectionCta: Swift.Bool? = nil,
                dndEnabled: Swift.Bool? = nil,
                dndStartHour: Swift.String? = nil,
                dndEndHour: Swift.String? = nil,
                dndBeforeMonday: Swift.String? = nil,
                dndAfterMonday: Swift.String? = nil,
                dndEnabledMonday: Swift.String? = nil,
                dndBeforeTuesday: Swift.String? = nil,
                dndAfterTuesday: Swift.String? = nil,
                dndEnabledTuesday: Swift.String? = nil,
                dndBeforeWednesday: Swift.String? = nil,
                dndAfterWednesday: Swift.String? = nil,
                dndEnabledWednesday: Swift.String? = nil,
                dndBeforeThursday: Swift.String? = nil,
                dndAfterThursday: Swift.String? = nil,
                dndEnabledThursday: Swift.String? = nil,
                dndBeforeFriday: Swift.String? = nil,
                dndAfterFriday: Swift.String? = nil,
                dndEnabledFriday: Swift.String? = nil,
                dndBeforeSaturday: Swift.String? = nil,
                dndAfterSaturday: Swift.String? = nil,
                dndEnabledSaturday: Swift.String? = nil,
                dndBeforeSunday: Swift.String? = nil,
                dndAfterSunday: Swift.String? = nil,
                dndEnabledSunday: Swift.String? = nil,
                dndDays: Swift.String? = nil,
                dndWeekdaysOffAllday: Swift.Bool? = nil,
                reminderNotificationTime: Swift.String? = nil,
                dndCustomNewBadgeSeen: Swift.Bool? = nil,
                dndNotificationScheduleNewBadgeSeen: Swift.Bool? = nil,
                notificationCenterFilters: Swift.String? = nil,
                callsSurveyLastSeen: Swift.String? = nil,
                huddleSurveyLastSeen: Swift.String? = nil,
                sidebarBehavior: Swift.String? = nil,
                channelSort: Swift.String? = nil,
                separatePrivateChannels: Swift.Bool? = nil,
                separateSharedChannels: Swift.Bool? = nil,
                sidebarTheme: Swift.String? = nil,
                sidebarThemeCustomValues: Swift.String? = nil,
                noInvitesWidgetInSidebar: Swift.Bool? = nil,
                noOmniboxInChannels: Swift.Bool? = nil,
                kKeyOmniboxAutoHideCount: Swift.Int? = nil,
                showSidebarQuickswitcherButton: Swift.Bool? = nil,
                entOrgWideChannelsSidebar: Swift.Bool? = nil,
                markMsgsReadImmediately: Swift.Bool? = nil,
                startScrollAtOldest: Swift.Bool? = nil,
                snippetEditorWrapLongLines: Swift.Bool? = nil,
                lsDisabled: Swift.Bool? = nil,
                fKeySearch: Swift.Bool? = nil,
                kKeyOmnibox: Swift.Bool? = nil,
                promptedForEmailDisabling: Swift.Bool? = nil,
                noMacelectronBanner: Swift.Bool? = nil,
                noMacssb1Banner: Swift.Bool? = nil,
                noMacssb2Banner: Swift.Bool? = nil,
                noWinssb1Banner: Swift.Bool? = nil,
                hideUserGroupInfoPane: Swift.Bool? = nil,
                mentionsExcludeAtUserGroups: Swift.Bool? = nil,
                mentionsExcludeReactions: Swift.Bool? = nil,
                privacyPolicySeen: Swift.Bool? = nil,
                enterpriseMigrationSeen: Swift.Bool? = nil,
                searchExcludeBots: Swift.Bool? = nil,
                loadLato2: Swift.Bool? = nil,
                fullerTimestamps: Swift.Bool? = nil,
                lastSeenAtChannelWarning: Swift.Int? = nil,
                emojiAutocompleteBig: Swift.Bool? = nil,
                twoFactorAuthEnabled: Swift.Bool? = nil,
                hideHexSwatch: Swift.Bool? = nil,
                showJumperScores: Swift.Bool? = nil,
                enterpriseMdmCustomMsg: Swift.String? = nil,
                clientLogsPri: Swift.String? = nil,
                flannelServerPool: Swift.String? = nil,
                mentionsExcludeAtChannels: Swift.Bool? = nil,
                confirmClearAllUnreads: Swift.Bool? = nil,
                confirmUserMarkedAway: Swift.Bool? = nil,
                boxEnabled: Swift.Bool? = nil,
                seenSingleEmojiMsg: Swift.Bool? = nil,
                confirmShCallStart: Swift.Bool? = nil,
                preferredSkinTone: Swift.String? = nil,
                showAllSkinTones: Swift.Bool? = nil,
                whatsNewRead: Swift.Int? = nil,
                helpModalOpenTimestamp: Swift.Int? = nil,
                helpModalConsultBannerDismissed: Swift.Bool? = nil,
                helpFlexpaneSlackConnectCardSeen: Swift.Bool? = nil,
                helpFlexpaneClipsCardSeen: Swift.Bool? = nil,
                helpMenuOpenTimestamp: Swift.Int? = nil,
                frecencyJumper: Swift.String? = nil,
                frecencyEntJumper: Swift.String? = nil,
                newxpSeenLastMessage: Swift.Int? = nil,
                showMemoryInstrument: Swift.Bool? = nil,
                enableUnreadView: Swift.Bool? = nil,
                seenUnreadViewCoachmark: Swift.Bool? = nil,
                seenConnectDmCoachmark: Swift.Bool? = nil,
                seenConnectSectionCoachmark: Swift.Bool? = nil,
                shouldShowConnectSection: Swift.Bool? = nil,
                enableReactEmojiPicker: Swift.Bool? = nil,
                seenCustomStatusBadge: Swift.Bool? = nil,
                seenCustomStatusCallout: Swift.Bool? = nil,
                seenCustomStatusExpirationBadge: Swift.Bool? = nil,
                usedCustomStatusKbShortcut: Swift.Bool? = nil,
                seenGuestAdminSlackbotAnnouncement: Swift.Bool? = nil,
                seenThreadsNotificationBanner: Swift.Bool? = nil,
                seenNameTaggingCoachmark: Swift.Bool? = nil,
                allUnreadsSortOrder: Swift.String? = nil,
                allUnreadsSectionFilter: Swift.String? = nil,
                seenIntlChannelNamesCoachmark: Swift.Bool? = nil,
                seenP3LocaleChangeMessageKoKr: Swift.Int? = nil,
                seenToastNewLocaleLaunch: Swift.String? = nil,
                seenToastNewLocaleLaunchTs: Swift.Int? = nil,
                seenLocaleChangeMessage: Swift.Int? = nil,
                seenJapaneseLocaleChangeMessage: Swift.Bool? = nil,
                seenSharedChannelsCoachmark: Swift.Bool? = nil,
                seenSharedChannelsOptInChangeMessage: Swift.Bool? = nil,
                hasRecentlySharedAChannel: Swift.Bool? = nil,
                seenChannelBrowserAdminCoachmark: Swift.Bool? = nil,
                seenAdministrationMenu: Swift.Bool? = nil,
                seenDraftsSectionCoachmark: Swift.Bool? = nil,
                seenEmojiUpdateOverlayCoachmark: Swift.Bool? = nil,
                seenSonicDeluxeToast: Swift.Int? = nil,
                seenWysiwygDeluxeToast: Swift.Bool? = nil,
                seenMarkdownPasteToast: Swift.Int? = nil,
                seenMarkdownPasteShortcut: Swift.Int? = nil,
                seenIaEducation: Swift.Bool? = nil,
                showIaTourRelaunch: Swift.Int? = nil,
                plainTextMode: Swift.Bool? = nil,
                showSharedChannelsEducationBanner: Swift.Bool? = nil,
                iaSlackbotSurveyTimestamp48h: Swift.Int? = nil,
                iaSlackbotSurveyTimestamp7d: Swift.Int? = nil,
                enableStreamlineView: Swift.Bool? = nil,
                enableSentView: Swift.Bool? = nil,
                allowCallsToSetCurrentStatus: Swift.Bool? = nil,
                inInteractiveMasMigrationFlow: Swift.Bool? = nil,
                sunsetInteractiveMessageViews: Swift.Int? = nil,
                shdepPromoCodeSubmitted: Swift.Bool? = nil,
                seenShdepSlackbotMessage: Swift.Bool? = nil,
                seenCallsInteractiveCoachmark: Swift.Bool? = nil,
                allowCmdTabIss: Swift.Bool? = nil,
                joinCallsDeviceSettings: Swift.String? = nil,
                callsDisconnectOnLock: Swift.Bool? = nil,
                seenWorkflowBuilderDeluxeToast: Swift.Bool? = nil,
                workflowBuilderIntroModalClickedThrough: Swift.Bool? = nil,
                workflowBuilderCoachmarks: Swift.String? = nil,
                seenGdriveCoachmark: Swift.Bool? = nil,
                seenFirstInstallCoachmark: Swift.Bool? = nil,
                seenExistingInstallCoachmark: Swift.Bool? = nil,
                seenLinkUnfurlCoachmark: Swift.Bool? = nil,
                filePickerVariant: Swift.Int? = nil,
                openQuipDocInFlexpane: Swift.Bool? = nil,
                savedSearches: Swift.String? = nil,
                huddlesVariant: Swift.Int? = nil,
                huddlesCcByDefault: Swift.Bool? = nil,
                huddlesMuteByDefault: Swift.Bool? = nil,
                huddlesGlobalMute: Swift.Bool? = nil,
                huddlesMiniPanel: Swift.Bool? = nil,
                huddlesSetStatus: Swift.Bool? = nil,
                huddlesShowShoutyRooster: Swift.Bool? = nil,
                huddlesDisconnectOnLock: Swift.Bool? = nil,
                huddlesPlayMusicWhenLast: Swift.Bool? = nil,
                huddlesAllowSmartNotif: Swift.Bool? = nil,
                huddlesReactionsPlaySound: Swift.Bool? = nil,
                huddlesReactionsReadOutLoud: Swift.Bool? = nil,
                huddlesChimeNewEndpointsCheckCompleted: Swift.Int? = nil,
                xwsSidebarVariant: Swift.Int? = nil,
                inboxViewsWorkspaceFilter: Swift.String? = nil,
                overloadedMessageEnabled: Swift.Bool? = nil,
                seenHighlightsCoachmark: Swift.Bool? = nil,
                seenHighlightsArrowsCoachmark: Swift.Bool? = nil,
                seenHighlightsWarmWelcome: Swift.Bool? = nil,
                seenNewSearchUi: Swift.Bool? = nil,
                seenChannelSearch: Swift.Bool? = nil,
                seenPeopleSearch: Swift.Bool? = nil,
                seenPeopleSearchCount: Swift.Int? = nil,
                dismissedScrollSearchTooltipCount: Swift.Int? = nil,
                lastDismissedScrollSearchTooltipTimestamp: Swift.Int? = nil,
                hasUsedQuickswitcherShortcut: Swift.Bool? = nil,
                seenQuickswitcherShortcutTipCount: Swift.Int? = nil,
                browsersDismissedChannelsLowResultsEducation: Swift.Bool? = nil,
                browsersSeenInitialChannelsEducation: Swift.Bool? = nil,
                browsersDismissedPeopleLowResultsEducation: Swift.Bool? = nil,
                browsersSeenInitialPeopleEducation: Swift.Bool? = nil,
                browsersDismissedUserGroupsLowResultsEducation: Swift.Bool? = nil,
                browsersSeenInitialUserGroupsEducation: Swift.Bool? = nil,
                browsersDismissedFilesLowResultsEducation: Swift.Bool? = nil,
                browsersSeenInitialFilesEducation: Swift.Bool? = nil,
                browsersDismissedInitialDraftsEducation: Swift.Bool? = nil,
                browsersSeenInitialDraftsEducation: Swift.Bool? = nil,
                browsersDismissedInitialActivityEducation: Swift.Bool? = nil,
                browsersSeenInitialActivityEducation: Swift.Bool? = nil,
                browsersDismissedInitialSavedEducation: Swift.Bool? = nil,
                browsersSeenInitialSavedEducation: Swift.Bool? = nil,
                seenEditMode: Swift.Bool? = nil,
                seenEditModeEdu: Swift.Bool? = nil,
                xwsDismissedEducation: Swift.Bool? = nil,
                xwsSeenEducation: Swift.Int? = nil,
                sidebarPrefDismissedTip: Swift.Bool? = nil,
                a11yDyslexic: Swift.Bool? = nil,
                a11yAnimations: Swift.Bool? = nil,
                seenKeyboardShortcutsCoachmark: Swift.Bool? = nil,
                needsInitialPasswordSet: Swift.Bool? = nil,
                lessonsEnabled: Swift.Bool? = nil,
                tractorEnabled: Swift.Bool? = nil,
                tractorExperimentGroup: Swift.String? = nil,
                openedSlackbotDm: Swift.Bool? = nil,
                newxpSeenHelpMessage: Swift.Int? = nil,
                newxpSuggestedChannels: Swift.String? = nil,
                onboardingComplete: Swift.Bool? = nil,
                welcomePlaceState: Swift.String? = nil,
                hasReceivedThreadedMessage: Swift.Bool? = nil,
                joinerNotificationsMuted: Swift.Bool? = nil,
                inviteAcceptedNotificationsMuted: Swift.Bool? = nil,
                joinerMessageSuggestionDismissed: Swift.Bool? = nil,
                dismissedFullscreenDownloadSsbPrompt: Swift.Bool? = nil,
                dismissedBannerDownloadSsbPrompt: Swift.Bool? = nil,
                onboardingState: Swift.Int? = nil,
                whocanseethisDmMpdmBadge: Swift.Bool? = nil,
                highlightWords: Swift.String? = nil,
                threadsEverything: Swift.Bool? = nil,
                noTextInNotifications: Swift.Bool? = nil,
                pushShowPreview: Swift.Bool? = nil,
                growlsEnabled: Swift.Bool? = nil,
                allChannelsLoud: Swift.Bool? = nil,
                pushDmAlert: Swift.Bool? = nil,
                pushMentionAlert: Swift.Bool? = nil,
                pushEverything: Swift.Bool? = nil,
                pushIdleWait: Swift.Int? = nil,
                pushSound: Swift.String? = nil,
                newMsgSnd: Swift.String? = nil,
                huddleInviteSound: Swift.String? = nil,
                pushLoudChannels: Swift.String? = nil,
                pushMentionChannels: Swift.String? = nil,
                pushLoudChannelsSet: Swift.String? = nil,
                loudChannels: Swift.String? = nil,
                neverChannels: Swift.String? = nil,
                loudChannelsSet: Swift.String? = nil,
                atChannelSuppressedChannels: Swift.String? = nil,
                pushAtChannelSuppressedChannels: Swift.String? = nil,
                mutedChannels: Swift.String? = nil,
                allNotificationsPrefs: Swift.String? = nil,
                growthMsgLimitApproachingCtaCount: Swift.Int? = nil,
                growthMsgLimitApproachingCtaTs: Swift.Int? = nil,
                growthMsgLimitReachedCtaCount: Swift.Int? = nil,
                growthMsgLimitReachedCtaLastTs: Swift.Int? = nil,
                growthMsgLimitLongReachedCtaCount: Swift.Int? = nil,
                growthMsgLimitLongReachedCtaLastTs: Swift.Int? = nil,
                growthMsgLimitSixtyDayBannerCtaCount: Swift.Int? = nil,
                growthMsgLimitSixtyDayBannerCtaLastTs: Swift.Int? = nil,
                growthAllBannersPrefs: Swift.String? = nil,
                analyticsUpsellCoachmarkSeen: Swift.Bool? = nil,
                seenAppSpaceCoachmark: Swift.Bool? = nil,
                seenAppSpaceTutorial: Swift.Bool? = nil,
                dismissedAppLauncherWelcome: Swift.Bool? = nil,
                dismissedAppLauncherLimit: Swift.Bool? = nil,
                dismissedAppLauncherAtlassianPromo: Swift.Bool? = nil,
                enableAppConfigRedesign: Swift.Bool? = nil,
                dismissedAppConfigRedesignCoachmark: Swift.Bool? = nil,
                dismissedAppManifestDescription: Swift.Bool? = nil,
                dismissedAppManifestCoachmark: Swift.Bool? = nil,
                seenChannelEmailTooltip: Swift.Bool? = nil,
                showEntOnboarding: Swift.Bool? = nil,
                foldersEnabled: Swift.Bool? = nil,
                folderData: Swift.String? = nil,
                seenCorporateExportAlert: Swift.Bool? = nil,
                showAutocompleteHelp: Swift.Int? = nil,
                deprecationToastLastSeen: Swift.Int? = nil,
                deprecationModalLastSeen: Swift.Int? = nil,
                deprecationBannerLastSeen: Swift.Int? = nil,
                iap1Lab: Swift.Int? = nil,
                iaTopNavTheme: Swift.String? = nil,
                iaPlatformActionsLab: Swift.Int? = nil,
                activityView: Swift.String? = nil,
                savedView: Swift.String? = nil,
                seenFloatingSidebarCoachmark: Swift.Bool? = nil,
                desktopClientIds: Swift.String? = nil,
                failoverProxyCheckCompleted: Swift.Int? = nil,
                chimeAccessCheckCompleted: Swift.Int? = nil,
                mxCalendarType: Swift.String? = nil,
                edgeUploadProxyCheckCompleted: Swift.Int? = nil,
                appSubdomainCheckCompleted: Swift.Int? = nil,
                addPromptInteracted: Swift.Bool? = nil,
                addAppsPromptDismissed: Swift.Bool? = nil,
                addChannelPromptDismissed: Swift.Bool? = nil,
                channelSidebarHideInvite: Swift.Bool? = nil,
                channelSidebarHideBrowseDmsLink: Swift.Bool? = nil,
                inProdSurveysEnabled: Swift.Bool? = nil,
                connectDmEarlyAccess: Swift.Bool? = nil,
                dismissedInstalledAppDmSuggestions: Swift.String? = nil,
                seenContextualMessageShortcutsModal: Swift.Bool? = nil,
                seenMessageNavigationEducationalToast: Swift.Bool? = nil,
                contextualMessageShortcutsModalWasSeen: Swift.Bool? = nil,
                messageNavigationToastWasSeen: Swift.Bool? = nil,
                upToBrowseKbShortcut: Swift.Bool? = nil,
                setA11yPrefsNewUser: Swift.Bool? = nil,
                a11yPlaySoundForIncomingDm: Swift.Bool? = nil,
                a11yPlaySoundForSentDm: Swift.Bool? = nil,
                a11yReadOutIncomingDm: Swift.Bool? = nil,
                a11yScreenReaderMessageLabelDateTimeFirst: Swift.Bool? = nil,
                shouldShowContextualHelpForConversationNavigation: Swift.Bool? = nil,
                shouldShowContextualHelpForJumpToConversation: Swift.Bool? = nil,
                shouldShowContextualHelpForSectionNavigation: Swift.Bool? = nil,
                shouldShowContextualHelpForThreadNavigation: Swift.Bool? = nil,
                shouldShowUnsendMessageConfirmation: Swift.Bool? = nil,
                channelSections: Swift.String? = nil,
                showQuickReactions: Swift.Bool? = nil,
                userCustomizedQuickReactionsDisplayFeature: Swift.Int? = nil,
                userCustomizedQuickReactionsHasCustomized: Swift.Bool? = nil,
                userCustomizedQuickReactionsUseFrequentlyUsedEmoji: Swift.Bool? = nil,
                reactionNotifications: Swift.String? = nil,
                hasReceivedMentionOrReaction: Swift.Bool? = nil,
                hasStarredItem: Swift.Bool? = nil,
                hasDraftedMessage: Swift.Bool? = nil,
                enableMentionsAndReactionsView: Swift.Bool? = nil,
                enableRemindersView: Swift.Bool? = nil,
                enableSavedItemsView: Swift.Bool? = nil,
                enableHqView: Swift.Bool? = nil,
                enableAllDmsView: Swift.Bool? = nil,
                enableChannelBrowserView: Swift.Bool? = nil,
                enableFileBrowserView: Swift.Bool? = nil,
                enablePeopleBrowserView: Swift.Bool? = nil,
                enableAppBrowserView: Swift.Bool? = nil,
                reachedAllDmsDisclosure: Swift.Bool? = nil,
                enableSlackConnectView: Swift.Bool? = nil,
                enableSlackConnectView2: Swift.Int? = nil,
                hasAcknowledgedShortcutSpeedbump: Swift.Bool? = nil,
                enableMediaCaptions: Swift.Bool? = nil,
                mediaPlaybackSpeed: Swift.Int? = nil,
                mediaMuted: Swift.Bool? = nil,
                mediaVolume: Swift.Int? = nil,
                dismissedConnectAutoApprovalModal: Swift.String? = nil,
                tasksView: Swift.String? = nil,
                showSidebarAvatars: Swift.Bool? = nil,
                hasDismissedGoogleDirectoryCoachmark: Swift.Bool? = nil,
                seenScPageBanner: Swift.Bool? = nil,
                seenScMenuCoachmark: Swift.Bool? = nil,
                seenScPage: Swift.Bool? = nil,
                dismissedScdmEducation: Swift.Bool? = nil,
                seenBookmarksIntro: Swift.Bool? = nil,
                scdmTrialOfferBanner: Swift.String? = nil,
                identityLinksPrefs: Swift.String? = nil,
                identityLinksGlobalPrefs: Swift.String? = nil,
                seenSectionsUnreadsOnlyPromptCount: Swift.Int? = nil,
                lastSeenSectionsUnreadsOnlyPromptTimestamp: Swift.Int? = nil,
                notificationsView: Swift.String? = nil,
                progressiveDisclosureState: Swift.String? = nil,
                suggestionsRequestId: Swift.String? = nil,
                allowedUnfurlSenders: Swift.String? = nil,
                iaDetailsCoachmarkSeen: Swift.Bool? = nil,
                hideExternalMembersSharingSpeedBump: Swift.Bool? = nil,
                whoCanShareContactCard: Swift.String? = nil,
                slackConnectInviteShouldBadgeSidebar: Swift.Bool? = nil,
                phcDismissed: Swift.String? = nil,
                dismissedGovSlackFirstTimePopup: Swift.Bool? = nil,
                mobileChannelListSort: Swift.String? = nil,
                userExpectationsSurveyLastTriggerAttempt: Swift.Int? = nil,
                localesEnabled: Components.Schemas.LocalesEnabled? = nil,
                phcViewed: Swift.String? = nil,
                seenA11yPrefSetupCoachmark: Swift.Bool? = nil,
                enableFileBrowserViewForDocs: Swift.Bool? = nil,
                enableShortcutsView: Swift.Bool? = nil,
                showGovSlackContextBarBanner: Swift.Bool? = nil,
                whoCanSeeAccountBySearchingEmail: Swift.String? = nil,
                contextualHelpResetCount: Swift.Int? = nil,
                mobileChannelListShowAllDms: Swift.Bool? = nil,
                enableQuipFileBrowserView: Swift.Bool? = nil,
                a11yPlaySoundForIncomingDmChoice: Swift.String? = nil,
                a11yPlaySoundForSentDmChoice: Swift.String? = nil,
                onboardingTipOptOut: Swift.Bool? = nil,
                seenOnboardingSynthView: Swift.Bool? = nil,
                enableDraftsView: Swift.Bool? = nil,
                enableScheduledView: Swift.Bool? = nil,
                seenSentPageInSidebar: Swift.Bool? = nil,
                firstSeenSentPageInSidebar: Swift.Int? = nil,
                seenNewBadgeInMoreMenuSidebar: Swift.Bool? = nil,
                firstSeenNewBadgeInMoreMenuSidebar: Swift.Int? = nil,
                seenOnboardingSynthViewCount: Swift.Int? = nil,
                synthViewPrefs: Swift.String? = nil,
                clipsFeedbackSurveyLastTriggerAttempt: Swift.Int? = nil,
                enableLaterView: Swift.Bool? = nil,
                hasJoinedHuddle: Swift.Bool? = nil,
                hasSentTenMessages: Swift.Int? = nil,
                suppressThreadMentionWarning: Swift.Bool? = nil,
                hiddenUsers: Swift.String? = nil,
                dismissedSentPageEducation: Swift.Bool? = nil,
                seenOnboardingSynthViewV2: Swift.Bool? = nil,
                clickedCloseOnboardingSynthViewBanner: Swift.Bool? = nil,
                seenOnboardingSynthViewCountV2: Swift.Int? = nil,
                appManifestSchemaFormat: Swift.String? = nil,
                channelCanvasVariant: Swift.Int? = nil
            ) {
                self.time24 = time24
                self.jumbomoji = jumbomoji
                self.locale = locale
                self.purchaser = purchaser
                self.tz = tz
                self.frecency = frecency
                self.underlineLinks = underlineLinks
                self.userColors = userColors
                self.colorNamesInList = colorNamesInList
                self.emailAlerts = emailAlerts
                self.emailAlertsSleepUntil = emailAlertsSleepUntil
                self.emailTips = emailTips
                self.emailWeekly = emailWeekly
                self.emailOffers = emailOffers
                self.emailResearch = emailResearch
                self.emailDeveloper = emailDeveloper
                self.welcomeMessageHidden = welcomeMessageHidden
                self.searchSort = searchSort
                self.searchFileSort = searchFileSort
                self.searchChannelSort = searchChannelSort
                self.searchPeopleSort = searchPeopleSort
                self.expandInlineImgs = expandInlineImgs
                self.expandInternalInlineImgs = expandInternalInlineImgs
                self.expandSnippets = expandSnippets
                self.postsFormattingGuide = postsFormattingGuide
                self.seenWelcome2 = seenWelcome2
                self.seenSsbPrompt = seenSsbPrompt
                self.spacesNewXpBannerDismissed = spacesNewXpBannerDismissed
                self.searchOnlyMyChannels = searchOnlyMyChannels
                self.searchOnlyCurrentTeam = searchOnlyCurrentTeam
                self.searchHideMyChannels = searchHideMyChannels
                self.searchOnlyShowOnline = searchOnlyShowOnline
                self.searchHideDeactivatedUsers = searchHideDeactivatedUsers
                self.emojiMode = emojiMode
                self.emojiUse = emojiUse
                self.emojiUseOrg = emojiUseOrg
                self.hasInvited = hasInvited
                self.hasUploaded = hasUploaded
                self.hasCreatedChannel = hasCreatedChannel
                self.hasCreatedChannelSection = hasCreatedChannelSection
                self.hasSearched = hasSearched
                self.searchExcludeChannels = searchExcludeChannels
                self.messagesTheme = messagesTheme
                self.webappSpellcheck = webappSpellcheck
                self.noJoinedOverlays = noJoinedOverlays
                self.noCreatedOverlays = noCreatedOverlays
                self.dropboxEnabled = dropboxEnabled
                self.seenDomainInviteReminder = seenDomainInviteReminder
                self.seenMemberInviteReminder = seenMemberInviteReminder
                self.muteSounds = muteSounds
                self.arrowHistory = arrowHistory
                self.tabUiReturnSelects = tabUiReturnSelects
                self.obeyInlineImgLimit = obeyInlineImgLimit
                self.requireAt = requireAt
                self.ssbSpaceWindow = ssbSpaceWindow
                self.macSsbBounce = macSsbBounce
                self.macSsbBullet = macSsbBullet
                self.expandNonMediaAttachments = expandNonMediaAttachments
                self.showTyping = showTyping
                self.pagekeysHandled = pagekeysHandled
                self.lastSnippetType = lastSnippetType
                self.displayRealNamesOverride = displayRealNamesOverride
                self.displayDisplayNames = displayDisplayNames
                self.enterIsSpecialInTbt = enterIsSpecialInTbt
                self.msgInputSendBtn = msgInputSendBtn
                self.msgInputSendBtnAutoSet = msgInputSendBtnAutoSet
                self.msgInputStickyComposer = msgInputStickyComposer
                self.composerNux = composerNux
                self.graphicEmoticons = graphicEmoticons
                self.convertEmoticons = convertEmoticons
                self.ssEmojis = ssEmojis
                self.seenOnboardingStart = seenOnboardingStart
                self.onboardingCancelled = onboardingCancelled
                self.seenOnboardingSlackbotConversation = seenOnboardingSlackbotConversation
                self.seenOnboardingChannels = seenOnboardingChannels
                self.seenOnboardingDirectMessages = seenOnboardingDirectMessages
                self.seenOnboardingInvites = seenOnboardingInvites
                self.seenOnboardingSearch = seenOnboardingSearch
                self.seenOnboardingRecentMentions = seenOnboardingRecentMentions
                self.seenOnboardingStarredItems = seenOnboardingStarredItems
                self.seenOnboardingPrivateGroups = seenOnboardingPrivateGroups
                self.seenOnboardingBanner = seenOnboardingBanner
                self.onboardingSlackbotConversationStep = onboardingSlackbotConversationStep
                self.setTzAutomatically = setTzAutomatically
                self.suppressLinkWarning = suppressLinkWarning
                self.suppressExternalInvitesFromComposeWarning = suppressExternalInvitesFromComposeWarning
                self.seenEmojiPackCta = seenEmojiPackCta
                self.seenEmojiPackDialog = seenEmojiPackDialog
                self.seenScheduleSendCoachmark = seenScheduleSendCoachmark
                self.emojiPacksMostRecentAvailableTime = emojiPacksMostRecentAvailableTime
                self.emojiPacksClickedPickerCta = emojiPacksClickedPickerCta
                self.emojiPacksClickedPickerPostInstallCta = emojiPacksClickedPickerPostInstallCta
                self.emojiPacksClickedCollectionCta = emojiPacksClickedCollectionCta
                self.dndEnabled = dndEnabled
                self.dndStartHour = dndStartHour
                self.dndEndHour = dndEndHour
                self.dndBeforeMonday = dndBeforeMonday
                self.dndAfterMonday = dndAfterMonday
                self.dndEnabledMonday = dndEnabledMonday
                self.dndBeforeTuesday = dndBeforeTuesday
                self.dndAfterTuesday = dndAfterTuesday
                self.dndEnabledTuesday = dndEnabledTuesday
                self.dndBeforeWednesday = dndBeforeWednesday
                self.dndAfterWednesday = dndAfterWednesday
                self.dndEnabledWednesday = dndEnabledWednesday
                self.dndBeforeThursday = dndBeforeThursday
                self.dndAfterThursday = dndAfterThursday
                self.dndEnabledThursday = dndEnabledThursday
                self.dndBeforeFriday = dndBeforeFriday
                self.dndAfterFriday = dndAfterFriday
                self.dndEnabledFriday = dndEnabledFriday
                self.dndBeforeSaturday = dndBeforeSaturday
                self.dndAfterSaturday = dndAfterSaturday
                self.dndEnabledSaturday = dndEnabledSaturday
                self.dndBeforeSunday = dndBeforeSunday
                self.dndAfterSunday = dndAfterSunday
                self.dndEnabledSunday = dndEnabledSunday
                self.dndDays = dndDays
                self.dndWeekdaysOffAllday = dndWeekdaysOffAllday
                self.reminderNotificationTime = reminderNotificationTime
                self.dndCustomNewBadgeSeen = dndCustomNewBadgeSeen
                self.dndNotificationScheduleNewBadgeSeen = dndNotificationScheduleNewBadgeSeen
                self.notificationCenterFilters = notificationCenterFilters
                self.callsSurveyLastSeen = callsSurveyLastSeen
                self.huddleSurveyLastSeen = huddleSurveyLastSeen
                self.sidebarBehavior = sidebarBehavior
                self.channelSort = channelSort
                self.separatePrivateChannels = separatePrivateChannels
                self.separateSharedChannels = separateSharedChannels
                self.sidebarTheme = sidebarTheme
                self.sidebarThemeCustomValues = sidebarThemeCustomValues
                self.noInvitesWidgetInSidebar = noInvitesWidgetInSidebar
                self.noOmniboxInChannels = noOmniboxInChannels
                self.kKeyOmniboxAutoHideCount = kKeyOmniboxAutoHideCount
                self.showSidebarQuickswitcherButton = showSidebarQuickswitcherButton
                self.entOrgWideChannelsSidebar = entOrgWideChannelsSidebar
                self.markMsgsReadImmediately = markMsgsReadImmediately
                self.startScrollAtOldest = startScrollAtOldest
                self.snippetEditorWrapLongLines = snippetEditorWrapLongLines
                self.lsDisabled = lsDisabled
                self.fKeySearch = fKeySearch
                self.kKeyOmnibox = kKeyOmnibox
                self.promptedForEmailDisabling = promptedForEmailDisabling
                self.noMacelectronBanner = noMacelectronBanner
                self.noMacssb1Banner = noMacssb1Banner
                self.noMacssb2Banner = noMacssb2Banner
                self.noWinssb1Banner = noWinssb1Banner
                self.hideUserGroupInfoPane = hideUserGroupInfoPane
                self.mentionsExcludeAtUserGroups = mentionsExcludeAtUserGroups
                self.mentionsExcludeReactions = mentionsExcludeReactions
                self.privacyPolicySeen = privacyPolicySeen
                self.enterpriseMigrationSeen = enterpriseMigrationSeen
                self.searchExcludeBots = searchExcludeBots
                self.loadLato2 = loadLato2
                self.fullerTimestamps = fullerTimestamps
                self.lastSeenAtChannelWarning = lastSeenAtChannelWarning
                self.emojiAutocompleteBig = emojiAutocompleteBig
                self.twoFactorAuthEnabled = twoFactorAuthEnabled
                self.hideHexSwatch = hideHexSwatch
                self.showJumperScores = showJumperScores
                self.enterpriseMdmCustomMsg = enterpriseMdmCustomMsg
                self.clientLogsPri = clientLogsPri
                self.flannelServerPool = flannelServerPool
                self.mentionsExcludeAtChannels = mentionsExcludeAtChannels
                self.confirmClearAllUnreads = confirmClearAllUnreads
                self.confirmUserMarkedAway = confirmUserMarkedAway
                self.boxEnabled = boxEnabled
                self.seenSingleEmojiMsg = seenSingleEmojiMsg
                self.confirmShCallStart = confirmShCallStart
                self.preferredSkinTone = preferredSkinTone
                self.showAllSkinTones = showAllSkinTones
                self.whatsNewRead = whatsNewRead
                self.helpModalOpenTimestamp = helpModalOpenTimestamp
                self.helpModalConsultBannerDismissed = helpModalConsultBannerDismissed
                self.helpFlexpaneSlackConnectCardSeen = helpFlexpaneSlackConnectCardSeen
                self.helpFlexpaneClipsCardSeen = helpFlexpaneClipsCardSeen
                self.helpMenuOpenTimestamp = helpMenuOpenTimestamp
                self.frecencyJumper = frecencyJumper
                self.frecencyEntJumper = frecencyEntJumper
                self.newxpSeenLastMessage = newxpSeenLastMessage
                self.showMemoryInstrument = showMemoryInstrument
                self.enableUnreadView = enableUnreadView
                self.seenUnreadViewCoachmark = seenUnreadViewCoachmark
                self.seenConnectDmCoachmark = seenConnectDmCoachmark
                self.seenConnectSectionCoachmark = seenConnectSectionCoachmark
                self.shouldShowConnectSection = shouldShowConnectSection
                self.enableReactEmojiPicker = enableReactEmojiPicker
                self.seenCustomStatusBadge = seenCustomStatusBadge
                self.seenCustomStatusCallout = seenCustomStatusCallout
                self.seenCustomStatusExpirationBadge = seenCustomStatusExpirationBadge
                self.usedCustomStatusKbShortcut = usedCustomStatusKbShortcut
                self.seenGuestAdminSlackbotAnnouncement = seenGuestAdminSlackbotAnnouncement
                self.seenThreadsNotificationBanner = seenThreadsNotificationBanner
                self.seenNameTaggingCoachmark = seenNameTaggingCoachmark
                self.allUnreadsSortOrder = allUnreadsSortOrder
                self.allUnreadsSectionFilter = allUnreadsSectionFilter
                self.seenIntlChannelNamesCoachmark = seenIntlChannelNamesCoachmark
                self.seenP3LocaleChangeMessageKoKr = seenP3LocaleChangeMessageKoKr
                self.seenToastNewLocaleLaunch = seenToastNewLocaleLaunch
                self.seenToastNewLocaleLaunchTs = seenToastNewLocaleLaunchTs
                self.seenLocaleChangeMessage = seenLocaleChangeMessage
                self.seenJapaneseLocaleChangeMessage = seenJapaneseLocaleChangeMessage
                self.seenSharedChannelsCoachmark = seenSharedChannelsCoachmark
                self.seenSharedChannelsOptInChangeMessage = seenSharedChannelsOptInChangeMessage
                self.hasRecentlySharedAChannel = hasRecentlySharedAChannel
                self.seenChannelBrowserAdminCoachmark = seenChannelBrowserAdminCoachmark
                self.seenAdministrationMenu = seenAdministrationMenu
                self.seenDraftsSectionCoachmark = seenDraftsSectionCoachmark
                self.seenEmojiUpdateOverlayCoachmark = seenEmojiUpdateOverlayCoachmark
                self.seenSonicDeluxeToast = seenSonicDeluxeToast
                self.seenWysiwygDeluxeToast = seenWysiwygDeluxeToast
                self.seenMarkdownPasteToast = seenMarkdownPasteToast
                self.seenMarkdownPasteShortcut = seenMarkdownPasteShortcut
                self.seenIaEducation = seenIaEducation
                self.showIaTourRelaunch = showIaTourRelaunch
                self.plainTextMode = plainTextMode
                self.showSharedChannelsEducationBanner = showSharedChannelsEducationBanner
                self.iaSlackbotSurveyTimestamp48h = iaSlackbotSurveyTimestamp48h
                self.iaSlackbotSurveyTimestamp7d = iaSlackbotSurveyTimestamp7d
                self.enableStreamlineView = enableStreamlineView
                self.enableSentView = enableSentView
                self.allowCallsToSetCurrentStatus = allowCallsToSetCurrentStatus
                self.inInteractiveMasMigrationFlow = inInteractiveMasMigrationFlow
                self.sunsetInteractiveMessageViews = sunsetInteractiveMessageViews
                self.shdepPromoCodeSubmitted = shdepPromoCodeSubmitted
                self.seenShdepSlackbotMessage = seenShdepSlackbotMessage
                self.seenCallsInteractiveCoachmark = seenCallsInteractiveCoachmark
                self.allowCmdTabIss = allowCmdTabIss
                self.joinCallsDeviceSettings = joinCallsDeviceSettings
                self.callsDisconnectOnLock = callsDisconnectOnLock
                self.seenWorkflowBuilderDeluxeToast = seenWorkflowBuilderDeluxeToast
                self.workflowBuilderIntroModalClickedThrough = workflowBuilderIntroModalClickedThrough
                self.workflowBuilderCoachmarks = workflowBuilderCoachmarks
                self.seenGdriveCoachmark = seenGdriveCoachmark
                self.seenFirstInstallCoachmark = seenFirstInstallCoachmark
                self.seenExistingInstallCoachmark = seenExistingInstallCoachmark
                self.seenLinkUnfurlCoachmark = seenLinkUnfurlCoachmark
                self.filePickerVariant = filePickerVariant
                self.openQuipDocInFlexpane = openQuipDocInFlexpane
                self.savedSearches = savedSearches
                self.huddlesVariant = huddlesVariant
                self.huddlesCcByDefault = huddlesCcByDefault
                self.huddlesMuteByDefault = huddlesMuteByDefault
                self.huddlesGlobalMute = huddlesGlobalMute
                self.huddlesMiniPanel = huddlesMiniPanel
                self.huddlesSetStatus = huddlesSetStatus
                self.huddlesShowShoutyRooster = huddlesShowShoutyRooster
                self.huddlesDisconnectOnLock = huddlesDisconnectOnLock
                self.huddlesPlayMusicWhenLast = huddlesPlayMusicWhenLast
                self.huddlesAllowSmartNotif = huddlesAllowSmartNotif
                self.huddlesReactionsPlaySound = huddlesReactionsPlaySound
                self.huddlesReactionsReadOutLoud = huddlesReactionsReadOutLoud
                self.huddlesChimeNewEndpointsCheckCompleted = huddlesChimeNewEndpointsCheckCompleted
                self.xwsSidebarVariant = xwsSidebarVariant
                self.inboxViewsWorkspaceFilter = inboxViewsWorkspaceFilter
                self.overloadedMessageEnabled = overloadedMessageEnabled
                self.seenHighlightsCoachmark = seenHighlightsCoachmark
                self.seenHighlightsArrowsCoachmark = seenHighlightsArrowsCoachmark
                self.seenHighlightsWarmWelcome = seenHighlightsWarmWelcome
                self.seenNewSearchUi = seenNewSearchUi
                self.seenChannelSearch = seenChannelSearch
                self.seenPeopleSearch = seenPeopleSearch
                self.seenPeopleSearchCount = seenPeopleSearchCount
                self.dismissedScrollSearchTooltipCount = dismissedScrollSearchTooltipCount
                self.lastDismissedScrollSearchTooltipTimestamp = lastDismissedScrollSearchTooltipTimestamp
                self.hasUsedQuickswitcherShortcut = hasUsedQuickswitcherShortcut
                self.seenQuickswitcherShortcutTipCount = seenQuickswitcherShortcutTipCount
                self.browsersDismissedChannelsLowResultsEducation = browsersDismissedChannelsLowResultsEducation
                self.browsersSeenInitialChannelsEducation = browsersSeenInitialChannelsEducation
                self.browsersDismissedPeopleLowResultsEducation = browsersDismissedPeopleLowResultsEducation
                self.browsersSeenInitialPeopleEducation = browsersSeenInitialPeopleEducation
                self.browsersDismissedUserGroupsLowResultsEducation = browsersDismissedUserGroupsLowResultsEducation
                self.browsersSeenInitialUserGroupsEducation = browsersSeenInitialUserGroupsEducation
                self.browsersDismissedFilesLowResultsEducation = browsersDismissedFilesLowResultsEducation
                self.browsersSeenInitialFilesEducation = browsersSeenInitialFilesEducation
                self.browsersDismissedInitialDraftsEducation = browsersDismissedInitialDraftsEducation
                self.browsersSeenInitialDraftsEducation = browsersSeenInitialDraftsEducation
                self.browsersDismissedInitialActivityEducation = browsersDismissedInitialActivityEducation
                self.browsersSeenInitialActivityEducation = browsersSeenInitialActivityEducation
                self.browsersDismissedInitialSavedEducation = browsersDismissedInitialSavedEducation
                self.browsersSeenInitialSavedEducation = browsersSeenInitialSavedEducation
                self.seenEditMode = seenEditMode
                self.seenEditModeEdu = seenEditModeEdu
                self.xwsDismissedEducation = xwsDismissedEducation
                self.xwsSeenEducation = xwsSeenEducation
                self.sidebarPrefDismissedTip = sidebarPrefDismissedTip
                self.a11yDyslexic = a11yDyslexic
                self.a11yAnimations = a11yAnimations
                self.seenKeyboardShortcutsCoachmark = seenKeyboardShortcutsCoachmark
                self.needsInitialPasswordSet = needsInitialPasswordSet
                self.lessonsEnabled = lessonsEnabled
                self.tractorEnabled = tractorEnabled
                self.tractorExperimentGroup = tractorExperimentGroup
                self.openedSlackbotDm = openedSlackbotDm
                self.newxpSeenHelpMessage = newxpSeenHelpMessage
                self.newxpSuggestedChannels = newxpSuggestedChannels
                self.onboardingComplete = onboardingComplete
                self.welcomePlaceState = welcomePlaceState
                self.hasReceivedThreadedMessage = hasReceivedThreadedMessage
                self.joinerNotificationsMuted = joinerNotificationsMuted
                self.inviteAcceptedNotificationsMuted = inviteAcceptedNotificationsMuted
                self.joinerMessageSuggestionDismissed = joinerMessageSuggestionDismissed
                self.dismissedFullscreenDownloadSsbPrompt = dismissedFullscreenDownloadSsbPrompt
                self.dismissedBannerDownloadSsbPrompt = dismissedBannerDownloadSsbPrompt
                self.onboardingState = onboardingState
                self.whocanseethisDmMpdmBadge = whocanseethisDmMpdmBadge
                self.highlightWords = highlightWords
                self.threadsEverything = threadsEverything
                self.noTextInNotifications = noTextInNotifications
                self.pushShowPreview = pushShowPreview
                self.growlsEnabled = growlsEnabled
                self.allChannelsLoud = allChannelsLoud
                self.pushDmAlert = pushDmAlert
                self.pushMentionAlert = pushMentionAlert
                self.pushEverything = pushEverything
                self.pushIdleWait = pushIdleWait
                self.pushSound = pushSound
                self.newMsgSnd = newMsgSnd
                self.huddleInviteSound = huddleInviteSound
                self.pushLoudChannels = pushLoudChannels
                self.pushMentionChannels = pushMentionChannels
                self.pushLoudChannelsSet = pushLoudChannelsSet
                self.loudChannels = loudChannels
                self.neverChannels = neverChannels
                self.loudChannelsSet = loudChannelsSet
                self.atChannelSuppressedChannels = atChannelSuppressedChannels
                self.pushAtChannelSuppressedChannels = pushAtChannelSuppressedChannels
                self.mutedChannels = mutedChannels
                self.allNotificationsPrefs = allNotificationsPrefs
                self.growthMsgLimitApproachingCtaCount = growthMsgLimitApproachingCtaCount
                self.growthMsgLimitApproachingCtaTs = growthMsgLimitApproachingCtaTs
                self.growthMsgLimitReachedCtaCount = growthMsgLimitReachedCtaCount
                self.growthMsgLimitReachedCtaLastTs = growthMsgLimitReachedCtaLastTs
                self.growthMsgLimitLongReachedCtaCount = growthMsgLimitLongReachedCtaCount
                self.growthMsgLimitLongReachedCtaLastTs = growthMsgLimitLongReachedCtaLastTs
                self.growthMsgLimitSixtyDayBannerCtaCount = growthMsgLimitSixtyDayBannerCtaCount
                self.growthMsgLimitSixtyDayBannerCtaLastTs = growthMsgLimitSixtyDayBannerCtaLastTs
                self.growthAllBannersPrefs = growthAllBannersPrefs
                self.analyticsUpsellCoachmarkSeen = analyticsUpsellCoachmarkSeen
                self.seenAppSpaceCoachmark = seenAppSpaceCoachmark
                self.seenAppSpaceTutorial = seenAppSpaceTutorial
                self.dismissedAppLauncherWelcome = dismissedAppLauncherWelcome
                self.dismissedAppLauncherLimit = dismissedAppLauncherLimit
                self.dismissedAppLauncherAtlassianPromo = dismissedAppLauncherAtlassianPromo
                self.enableAppConfigRedesign = enableAppConfigRedesign
                self.dismissedAppConfigRedesignCoachmark = dismissedAppConfigRedesignCoachmark
                self.dismissedAppManifestDescription = dismissedAppManifestDescription
                self.dismissedAppManifestCoachmark = dismissedAppManifestCoachmark
                self.seenChannelEmailTooltip = seenChannelEmailTooltip
                self.showEntOnboarding = showEntOnboarding
                self.foldersEnabled = foldersEnabled
                self.folderData = folderData
                self.seenCorporateExportAlert = seenCorporateExportAlert
                self.showAutocompleteHelp = showAutocompleteHelp
                self.deprecationToastLastSeen = deprecationToastLastSeen
                self.deprecationModalLastSeen = deprecationModalLastSeen
                self.deprecationBannerLastSeen = deprecationBannerLastSeen
                self.iap1Lab = iap1Lab
                self.iaTopNavTheme = iaTopNavTheme
                self.iaPlatformActionsLab = iaPlatformActionsLab
                self.activityView = activityView
                self.savedView = savedView
                self.seenFloatingSidebarCoachmark = seenFloatingSidebarCoachmark
                self.desktopClientIds = desktopClientIds
                self.failoverProxyCheckCompleted = failoverProxyCheckCompleted
                self.chimeAccessCheckCompleted = chimeAccessCheckCompleted
                self.mxCalendarType = mxCalendarType
                self.edgeUploadProxyCheckCompleted = edgeUploadProxyCheckCompleted
                self.appSubdomainCheckCompleted = appSubdomainCheckCompleted
                self.addPromptInteracted = addPromptInteracted
                self.addAppsPromptDismissed = addAppsPromptDismissed
                self.addChannelPromptDismissed = addChannelPromptDismissed
                self.channelSidebarHideInvite = channelSidebarHideInvite
                self.channelSidebarHideBrowseDmsLink = channelSidebarHideBrowseDmsLink
                self.inProdSurveysEnabled = inProdSurveysEnabled
                self.connectDmEarlyAccess = connectDmEarlyAccess
                self.dismissedInstalledAppDmSuggestions = dismissedInstalledAppDmSuggestions
                self.seenContextualMessageShortcutsModal = seenContextualMessageShortcutsModal
                self.seenMessageNavigationEducationalToast = seenMessageNavigationEducationalToast
                self.contextualMessageShortcutsModalWasSeen = contextualMessageShortcutsModalWasSeen
                self.messageNavigationToastWasSeen = messageNavigationToastWasSeen
                self.upToBrowseKbShortcut = upToBrowseKbShortcut
                self.setA11yPrefsNewUser = setA11yPrefsNewUser
                self.a11yPlaySoundForIncomingDm = a11yPlaySoundForIncomingDm
                self.a11yPlaySoundForSentDm = a11yPlaySoundForSentDm
                self.a11yReadOutIncomingDm = a11yReadOutIncomingDm
                self.a11yScreenReaderMessageLabelDateTimeFirst = a11yScreenReaderMessageLabelDateTimeFirst
                self.shouldShowContextualHelpForConversationNavigation = shouldShowContextualHelpForConversationNavigation
                self.shouldShowContextualHelpForJumpToConversation = shouldShowContextualHelpForJumpToConversation
                self.shouldShowContextualHelpForSectionNavigation = shouldShowContextualHelpForSectionNavigation
                self.shouldShowContextualHelpForThreadNavigation = shouldShowContextualHelpForThreadNavigation
                self.shouldShowUnsendMessageConfirmation = shouldShowUnsendMessageConfirmation
                self.channelSections = channelSections
                self.showQuickReactions = showQuickReactions
                self.userCustomizedQuickReactionsDisplayFeature = userCustomizedQuickReactionsDisplayFeature
                self.userCustomizedQuickReactionsHasCustomized = userCustomizedQuickReactionsHasCustomized
                self.userCustomizedQuickReactionsUseFrequentlyUsedEmoji = userCustomizedQuickReactionsUseFrequentlyUsedEmoji
                self.reactionNotifications = reactionNotifications
                self.hasReceivedMentionOrReaction = hasReceivedMentionOrReaction
                self.hasStarredItem = hasStarredItem
                self.hasDraftedMessage = hasDraftedMessage
                self.enableMentionsAndReactionsView = enableMentionsAndReactionsView
                self.enableRemindersView = enableRemindersView
                self.enableSavedItemsView = enableSavedItemsView
                self.enableHqView = enableHqView
                self.enableAllDmsView = enableAllDmsView
                self.enableChannelBrowserView = enableChannelBrowserView
                self.enableFileBrowserView = enableFileBrowserView
                self.enablePeopleBrowserView = enablePeopleBrowserView
                self.enableAppBrowserView = enableAppBrowserView
                self.reachedAllDmsDisclosure = reachedAllDmsDisclosure
                self.enableSlackConnectView = enableSlackConnectView
                self.enableSlackConnectView2 = enableSlackConnectView2
                self.hasAcknowledgedShortcutSpeedbump = hasAcknowledgedShortcutSpeedbump
                self.enableMediaCaptions = enableMediaCaptions
                self.mediaPlaybackSpeed = mediaPlaybackSpeed
                self.mediaMuted = mediaMuted
                self.mediaVolume = mediaVolume
                self.dismissedConnectAutoApprovalModal = dismissedConnectAutoApprovalModal
                self.tasksView = tasksView
                self.showSidebarAvatars = showSidebarAvatars
                self.hasDismissedGoogleDirectoryCoachmark = hasDismissedGoogleDirectoryCoachmark
                self.seenScPageBanner = seenScPageBanner
                self.seenScMenuCoachmark = seenScMenuCoachmark
                self.seenScPage = seenScPage
                self.dismissedScdmEducation = dismissedScdmEducation
                self.seenBookmarksIntro = seenBookmarksIntro
                self.scdmTrialOfferBanner = scdmTrialOfferBanner
                self.identityLinksPrefs = identityLinksPrefs
                self.identityLinksGlobalPrefs = identityLinksGlobalPrefs
                self.seenSectionsUnreadsOnlyPromptCount = seenSectionsUnreadsOnlyPromptCount
                self.lastSeenSectionsUnreadsOnlyPromptTimestamp = lastSeenSectionsUnreadsOnlyPromptTimestamp
                self.notificationsView = notificationsView
                self.progressiveDisclosureState = progressiveDisclosureState
                self.suggestionsRequestId = suggestionsRequestId
                self.allowedUnfurlSenders = allowedUnfurlSenders
                self.iaDetailsCoachmarkSeen = iaDetailsCoachmarkSeen
                self.hideExternalMembersSharingSpeedBump = hideExternalMembersSharingSpeedBump
                self.whoCanShareContactCard = whoCanShareContactCard
                self.slackConnectInviteShouldBadgeSidebar = slackConnectInviteShouldBadgeSidebar
                self.phcDismissed = phcDismissed
                self.dismissedGovSlackFirstTimePopup = dismissedGovSlackFirstTimePopup
                self.mobileChannelListSort = mobileChannelListSort
                self.userExpectationsSurveyLastTriggerAttempt = userExpectationsSurveyLastTriggerAttempt
                self.localesEnabled = localesEnabled
                self.phcViewed = phcViewed
                self.seenA11yPrefSetupCoachmark = seenA11yPrefSetupCoachmark
                self.enableFileBrowserViewForDocs = enableFileBrowserViewForDocs
                self.enableShortcutsView = enableShortcutsView
                self.showGovSlackContextBarBanner = showGovSlackContextBarBanner
                self.whoCanSeeAccountBySearchingEmail = whoCanSeeAccountBySearchingEmail
                self.contextualHelpResetCount = contextualHelpResetCount
                self.mobileChannelListShowAllDms = mobileChannelListShowAllDms
                self.enableQuipFileBrowserView = enableQuipFileBrowserView
                self.a11yPlaySoundForIncomingDmChoice = a11yPlaySoundForIncomingDmChoice
                self.a11yPlaySoundForSentDmChoice = a11yPlaySoundForSentDmChoice
                self.onboardingTipOptOut = onboardingTipOptOut
                self.seenOnboardingSynthView = seenOnboardingSynthView
                self.enableDraftsView = enableDraftsView
                self.enableScheduledView = enableScheduledView
                self.seenSentPageInSidebar = seenSentPageInSidebar
                self.firstSeenSentPageInSidebar = firstSeenSentPageInSidebar
                self.seenNewBadgeInMoreMenuSidebar = seenNewBadgeInMoreMenuSidebar
                self.firstSeenNewBadgeInMoreMenuSidebar = firstSeenNewBadgeInMoreMenuSidebar
                self.seenOnboardingSynthViewCount = seenOnboardingSynthViewCount
                self.synthViewPrefs = synthViewPrefs
                self.clipsFeedbackSurveyLastTriggerAttempt = clipsFeedbackSurveyLastTriggerAttempt
                self.enableLaterView = enableLaterView
                self.hasJoinedHuddle = hasJoinedHuddle
                self.hasSentTenMessages = hasSentTenMessages
                self.suppressThreadMentionWarning = suppressThreadMentionWarning
                self.hiddenUsers = hiddenUsers
                self.dismissedSentPageEducation = dismissedSentPageEducation
                self.seenOnboardingSynthViewV2 = seenOnboardingSynthViewV2
                self.clickedCloseOnboardingSynthViewBanner = clickedCloseOnboardingSynthViewBanner
                self.seenOnboardingSynthViewCountV2 = seenOnboardingSynthViewCountV2
                self.appManifestSchemaFormat = appManifestSchemaFormat
                self.channelCanvasVariant = channelCanvasVariant
            }
            public enum CodingKeys: String, CodingKey {
                case time24
                case jumbomoji
                case locale
                case purchaser
                case tz
                case frecency
                case underlineLinks
                case userColors
                case colorNamesInList
                case emailAlerts
                case emailAlertsSleepUntil
                case emailTips
                case emailWeekly
                case emailOffers
                case emailResearch
                case emailDeveloper
                case welcomeMessageHidden
                case searchSort
                case searchFileSort
                case searchChannelSort
                case searchPeopleSort
                case expandInlineImgs
                case expandInternalInlineImgs
                case expandSnippets
                case postsFormattingGuide
                case seenWelcome2
                case seenSsbPrompt
                case spacesNewXpBannerDismissed
                case searchOnlyMyChannels
                case searchOnlyCurrentTeam
                case searchHideMyChannels
                case searchOnlyShowOnline
                case searchHideDeactivatedUsers
                case emojiMode
                case emojiUse
                case emojiUseOrg
                case hasInvited
                case hasUploaded
                case hasCreatedChannel
                case hasCreatedChannelSection
                case hasSearched
                case searchExcludeChannels
                case messagesTheme
                case webappSpellcheck
                case noJoinedOverlays
                case noCreatedOverlays
                case dropboxEnabled
                case seenDomainInviteReminder
                case seenMemberInviteReminder
                case muteSounds
                case arrowHistory
                case tabUiReturnSelects
                case obeyInlineImgLimit
                case requireAt
                case ssbSpaceWindow
                case macSsbBounce
                case macSsbBullet
                case expandNonMediaAttachments
                case showTyping
                case pagekeysHandled
                case lastSnippetType
                case displayRealNamesOverride
                case displayDisplayNames
                case enterIsSpecialInTbt
                case msgInputSendBtn
                case msgInputSendBtnAutoSet
                case msgInputStickyComposer
                case composerNux
                case graphicEmoticons
                case convertEmoticons
                case ssEmojis
                case seenOnboardingStart
                case onboardingCancelled
                case seenOnboardingSlackbotConversation
                case seenOnboardingChannels
                case seenOnboardingDirectMessages
                case seenOnboardingInvites
                case seenOnboardingSearch
                case seenOnboardingRecentMentions
                case seenOnboardingStarredItems
                case seenOnboardingPrivateGroups
                case seenOnboardingBanner
                case onboardingSlackbotConversationStep
                case setTzAutomatically
                case suppressLinkWarning
                case suppressExternalInvitesFromComposeWarning
                case seenEmojiPackCta
                case seenEmojiPackDialog
                case seenScheduleSendCoachmark
                case emojiPacksMostRecentAvailableTime
                case emojiPacksClickedPickerCta
                case emojiPacksClickedPickerPostInstallCta
                case emojiPacksClickedCollectionCta
                case dndEnabled
                case dndStartHour
                case dndEndHour
                case dndBeforeMonday
                case dndAfterMonday
                case dndEnabledMonday
                case dndBeforeTuesday
                case dndAfterTuesday
                case dndEnabledTuesday
                case dndBeforeWednesday
                case dndAfterWednesday
                case dndEnabledWednesday
                case dndBeforeThursday
                case dndAfterThursday
                case dndEnabledThursday
                case dndBeforeFriday
                case dndAfterFriday
                case dndEnabledFriday
                case dndBeforeSaturday
                case dndAfterSaturday
                case dndEnabledSaturday
                case dndBeforeSunday
                case dndAfterSunday
                case dndEnabledSunday
                case dndDays
                case dndWeekdaysOffAllday
                case reminderNotificationTime
                case dndCustomNewBadgeSeen
                case dndNotificationScheduleNewBadgeSeen
                case notificationCenterFilters
                case callsSurveyLastSeen
                case huddleSurveyLastSeen
                case sidebarBehavior
                case channelSort
                case separatePrivateChannels
                case separateSharedChannels
                case sidebarTheme
                case sidebarThemeCustomValues
                case noInvitesWidgetInSidebar
                case noOmniboxInChannels
                case kKeyOmniboxAutoHideCount
                case showSidebarQuickswitcherButton
                case entOrgWideChannelsSidebar
                case markMsgsReadImmediately
                case startScrollAtOldest
                case snippetEditorWrapLongLines
                case lsDisabled
                case fKeySearch
                case kKeyOmnibox
                case promptedForEmailDisabling
                case noMacelectronBanner
                case noMacssb1Banner
                case noMacssb2Banner
                case noWinssb1Banner
                case hideUserGroupInfoPane
                case mentionsExcludeAtUserGroups
                case mentionsExcludeReactions
                case privacyPolicySeen
                case enterpriseMigrationSeen
                case searchExcludeBots
                case loadLato2
                case fullerTimestamps
                case lastSeenAtChannelWarning
                case emojiAutocompleteBig
                case twoFactorAuthEnabled
                case hideHexSwatch
                case showJumperScores
                case enterpriseMdmCustomMsg
                case clientLogsPri
                case flannelServerPool
                case mentionsExcludeAtChannels
                case confirmClearAllUnreads
                case confirmUserMarkedAway
                case boxEnabled
                case seenSingleEmojiMsg
                case confirmShCallStart
                case preferredSkinTone
                case showAllSkinTones
                case whatsNewRead
                case helpModalOpenTimestamp
                case helpModalConsultBannerDismissed
                case helpFlexpaneSlackConnectCardSeen
                case helpFlexpaneClipsCardSeen
                case helpMenuOpenTimestamp
                case frecencyJumper
                case frecencyEntJumper
                case newxpSeenLastMessage
                case showMemoryInstrument
                case enableUnreadView
                case seenUnreadViewCoachmark
                case seenConnectDmCoachmark
                case seenConnectSectionCoachmark
                case shouldShowConnectSection
                case enableReactEmojiPicker
                case seenCustomStatusBadge
                case seenCustomStatusCallout
                case seenCustomStatusExpirationBadge
                case usedCustomStatusKbShortcut
                case seenGuestAdminSlackbotAnnouncement
                case seenThreadsNotificationBanner
                case seenNameTaggingCoachmark
                case allUnreadsSortOrder
                case allUnreadsSectionFilter
                case seenIntlChannelNamesCoachmark
                case seenP3LocaleChangeMessageKoKr
                case seenToastNewLocaleLaunch
                case seenToastNewLocaleLaunchTs
                case seenLocaleChangeMessage
                case seenJapaneseLocaleChangeMessage
                case seenSharedChannelsCoachmark
                case seenSharedChannelsOptInChangeMessage
                case hasRecentlySharedAChannel
                case seenChannelBrowserAdminCoachmark
                case seenAdministrationMenu
                case seenDraftsSectionCoachmark
                case seenEmojiUpdateOverlayCoachmark
                case seenSonicDeluxeToast
                case seenWysiwygDeluxeToast
                case seenMarkdownPasteToast
                case seenMarkdownPasteShortcut
                case seenIaEducation
                case showIaTourRelaunch
                case plainTextMode
                case showSharedChannelsEducationBanner
                case iaSlackbotSurveyTimestamp48h
                case iaSlackbotSurveyTimestamp7d
                case enableStreamlineView
                case enableSentView
                case allowCallsToSetCurrentStatus
                case inInteractiveMasMigrationFlow
                case sunsetInteractiveMessageViews
                case shdepPromoCodeSubmitted
                case seenShdepSlackbotMessage
                case seenCallsInteractiveCoachmark
                case allowCmdTabIss
                case joinCallsDeviceSettings
                case callsDisconnectOnLock
                case seenWorkflowBuilderDeluxeToast
                case workflowBuilderIntroModalClickedThrough
                case workflowBuilderCoachmarks
                case seenGdriveCoachmark
                case seenFirstInstallCoachmark
                case seenExistingInstallCoachmark
                case seenLinkUnfurlCoachmark
                case filePickerVariant
                case openQuipDocInFlexpane
                case savedSearches
                case huddlesVariant
                case huddlesCcByDefault
                case huddlesMuteByDefault
                case huddlesGlobalMute
                case huddlesMiniPanel
                case huddlesSetStatus
                case huddlesShowShoutyRooster
                case huddlesDisconnectOnLock
                case huddlesPlayMusicWhenLast
                case huddlesAllowSmartNotif
                case huddlesReactionsPlaySound
                case huddlesReactionsReadOutLoud
                case huddlesChimeNewEndpointsCheckCompleted
                case xwsSidebarVariant
                case inboxViewsWorkspaceFilter
                case overloadedMessageEnabled
                case seenHighlightsCoachmark
                case seenHighlightsArrowsCoachmark
                case seenHighlightsWarmWelcome
                case seenNewSearchUi
                case seenChannelSearch
                case seenPeopleSearch
                case seenPeopleSearchCount
                case dismissedScrollSearchTooltipCount
                case lastDismissedScrollSearchTooltipTimestamp
                case hasUsedQuickswitcherShortcut
                case seenQuickswitcherShortcutTipCount
                case browsersDismissedChannelsLowResultsEducation
                case browsersSeenInitialChannelsEducation
                case browsersDismissedPeopleLowResultsEducation
                case browsersSeenInitialPeopleEducation
                case browsersDismissedUserGroupsLowResultsEducation
                case browsersSeenInitialUserGroupsEducation
                case browsersDismissedFilesLowResultsEducation
                case browsersSeenInitialFilesEducation
                case browsersDismissedInitialDraftsEducation
                case browsersSeenInitialDraftsEducation
                case browsersDismissedInitialActivityEducation
                case browsersSeenInitialActivityEducation
                case browsersDismissedInitialSavedEducation
                case browsersSeenInitialSavedEducation
                case seenEditMode
                case seenEditModeEdu
                case xwsDismissedEducation
                case xwsSeenEducation
                case sidebarPrefDismissedTip
                case a11yDyslexic
                case a11yAnimations
                case seenKeyboardShortcutsCoachmark
                case needsInitialPasswordSet
                case lessonsEnabled
                case tractorEnabled
                case tractorExperimentGroup
                case openedSlackbotDm
                case newxpSeenHelpMessage
                case newxpSuggestedChannels
                case onboardingComplete
                case welcomePlaceState
                case hasReceivedThreadedMessage
                case joinerNotificationsMuted
                case inviteAcceptedNotificationsMuted
                case joinerMessageSuggestionDismissed
                case dismissedFullscreenDownloadSsbPrompt
                case dismissedBannerDownloadSsbPrompt
                case onboardingState
                case whocanseethisDmMpdmBadge
                case highlightWords
                case threadsEverything
                case noTextInNotifications
                case pushShowPreview
                case growlsEnabled
                case allChannelsLoud
                case pushDmAlert
                case pushMentionAlert
                case pushEverything
                case pushIdleWait
                case pushSound
                case newMsgSnd
                case huddleInviteSound
                case pushLoudChannels
                case pushMentionChannels
                case pushLoudChannelsSet
                case loudChannels
                case neverChannels
                case loudChannelsSet
                case atChannelSuppressedChannels
                case pushAtChannelSuppressedChannels
                case mutedChannels
                case allNotificationsPrefs
                case growthMsgLimitApproachingCtaCount
                case growthMsgLimitApproachingCtaTs
                case growthMsgLimitReachedCtaCount
                case growthMsgLimitReachedCtaLastTs
                case growthMsgLimitLongReachedCtaCount
                case growthMsgLimitLongReachedCtaLastTs
                case growthMsgLimitSixtyDayBannerCtaCount
                case growthMsgLimitSixtyDayBannerCtaLastTs
                case growthAllBannersPrefs
                case analyticsUpsellCoachmarkSeen
                case seenAppSpaceCoachmark
                case seenAppSpaceTutorial
                case dismissedAppLauncherWelcome
                case dismissedAppLauncherLimit
                case dismissedAppLauncherAtlassianPromo
                case enableAppConfigRedesign
                case dismissedAppConfigRedesignCoachmark
                case dismissedAppManifestDescription
                case dismissedAppManifestCoachmark
                case seenChannelEmailTooltip
                case showEntOnboarding
                case foldersEnabled
                case folderData
                case seenCorporateExportAlert
                case showAutocompleteHelp
                case deprecationToastLastSeen
                case deprecationModalLastSeen
                case deprecationBannerLastSeen
                case iap1Lab
                case iaTopNavTheme
                case iaPlatformActionsLab
                case activityView
                case savedView
                case seenFloatingSidebarCoachmark
                case desktopClientIds
                case failoverProxyCheckCompleted
                case chimeAccessCheckCompleted
                case mxCalendarType
                case edgeUploadProxyCheckCompleted
                case appSubdomainCheckCompleted
                case addPromptInteracted
                case addAppsPromptDismissed
                case addChannelPromptDismissed
                case channelSidebarHideInvite
                case channelSidebarHideBrowseDmsLink
                case inProdSurveysEnabled
                case connectDmEarlyAccess
                case dismissedInstalledAppDmSuggestions
                case seenContextualMessageShortcutsModal
                case seenMessageNavigationEducationalToast
                case contextualMessageShortcutsModalWasSeen
                case messageNavigationToastWasSeen
                case upToBrowseKbShortcut
                case setA11yPrefsNewUser
                case a11yPlaySoundForIncomingDm
                case a11yPlaySoundForSentDm
                case a11yReadOutIncomingDm
                case a11yScreenReaderMessageLabelDateTimeFirst
                case shouldShowContextualHelpForConversationNavigation
                case shouldShowContextualHelpForJumpToConversation
                case shouldShowContextualHelpForSectionNavigation
                case shouldShowContextualHelpForThreadNavigation
                case shouldShowUnsendMessageConfirmation
                case channelSections
                case showQuickReactions
                case userCustomizedQuickReactionsDisplayFeature
                case userCustomizedQuickReactionsHasCustomized
                case userCustomizedQuickReactionsUseFrequentlyUsedEmoji
                case reactionNotifications
                case hasReceivedMentionOrReaction
                case hasStarredItem
                case hasDraftedMessage
                case enableMentionsAndReactionsView
                case enableRemindersView
                case enableSavedItemsView
                case enableHqView
                case enableAllDmsView
                case enableChannelBrowserView
                case enableFileBrowserView
                case enablePeopleBrowserView
                case enableAppBrowserView
                case reachedAllDmsDisclosure
                case enableSlackConnectView
                case enableSlackConnectView2
                case hasAcknowledgedShortcutSpeedbump
                case enableMediaCaptions
                case mediaPlaybackSpeed
                case mediaMuted
                case mediaVolume
                case dismissedConnectAutoApprovalModal
                case tasksView
                case showSidebarAvatars
                case hasDismissedGoogleDirectoryCoachmark
                case seenScPageBanner
                case seenScMenuCoachmark
                case seenScPage
                case dismissedScdmEducation
                case seenBookmarksIntro
                case scdmTrialOfferBanner
                case identityLinksPrefs
                case identityLinksGlobalPrefs
                case seenSectionsUnreadsOnlyPromptCount
                case lastSeenSectionsUnreadsOnlyPromptTimestamp
                case notificationsView
                case progressiveDisclosureState
                case suggestionsRequestId
                case allowedUnfurlSenders
                case iaDetailsCoachmarkSeen
                case hideExternalMembersSharingSpeedBump
                case whoCanShareContactCard
                case slackConnectInviteShouldBadgeSidebar
                case phcDismissed
                case dismissedGovSlackFirstTimePopup
                case mobileChannelListSort
                case userExpectationsSurveyLastTriggerAttempt
                case localesEnabled
                case phcViewed
                case seenA11yPrefSetupCoachmark
                case enableFileBrowserViewForDocs
                case enableShortcutsView
                case showGovSlackContextBarBanner
                case whoCanSeeAccountBySearchingEmail
                case contextualHelpResetCount
                case mobileChannelListShowAllDms
                case enableQuipFileBrowserView
                case a11yPlaySoundForIncomingDmChoice
                case a11yPlaySoundForSentDmChoice
                case onboardingTipOptOut
                case seenOnboardingSynthView
                case enableDraftsView
                case enableScheduledView
                case seenSentPageInSidebar
                case firstSeenSentPageInSidebar
                case seenNewBadgeInMoreMenuSidebar
                case firstSeenNewBadgeInMoreMenuSidebar
                case seenOnboardingSynthViewCount
                case synthViewPrefs
                case clipsFeedbackSurveyLastTriggerAttempt
                case enableLaterView
                case hasJoinedHuddle
                case hasSentTenMessages
                case suppressThreadMentionWarning
                case hiddenUsers
                case dismissedSentPageEducation
                case seenOnboardingSynthViewV2
                case clickedCloseOnboardingSynthViewBanner
                case seenOnboardingSynthViewCountV2
                case appManifestSchemaFormat
                case channelCanvasVariant
            }
        }
        /// - Remark: Generated from `#/components/schemas/LocalesEnabled`.
        public struct LocalesEnabled: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/de-DE`.
            public var deDE: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/en-GB`.
            public var enGB: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/en-US`.
            public var enUS: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/es-ES`.
            public var esES: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/es-LA`.
            public var esLA: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/fr-FR`.
            public var frFR: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/it-IT`.
            public var itIT: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/pt-BR`.
            public var ptBR: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/ru-RU`.
            public var ruRU: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/ja-JP`.
            public var jaJP: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/zh-CN`.
            public var zhCN: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/zh-TW`.
            public var zhTW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalesEnabled/ko-KR`.
            public var koKR: Swift.String?
            /// Creates a new `LocalesEnabled`.
            ///
            /// - Parameters:
            ///   - deDE:
            ///   - enGB:
            ///   - enUS:
            ///   - esES:
            ///   - esLA:
            ///   - frFR:
            ///   - itIT:
            ///   - ptBR:
            ///   - ruRU:
            ///   - jaJP:
            ///   - zhCN:
            ///   - zhTW:
            ///   - koKR:
            public init(
                deDE: Swift.String? = nil,
                enGB: Swift.String? = nil,
                enUS: Swift.String? = nil,
                esES: Swift.String? = nil,
                esLA: Swift.String? = nil,
                frFR: Swift.String? = nil,
                itIT: Swift.String? = nil,
                ptBR: Swift.String? = nil,
                ruRU: Swift.String? = nil,
                jaJP: Swift.String? = nil,
                zhCN: Swift.String? = nil,
                zhTW: Swift.String? = nil,
                koKR: Swift.String? = nil
            ) {
                self.deDE = deDE
                self.enGB = enGB
                self.enUS = enUS
                self.esES = esES
                self.esLA = esLA
                self.frFR = frFR
                self.itIT = itIT
                self.ptBR = ptBR
                self.ruRU = ruRU
                self.jaJP = jaJP
                self.zhCN = zhCN
                self.zhTW = zhTW
                self.koKR = koKR
            }
            public enum CodingKeys: String, CodingKey {
                case deDE = "de-DE"
                case enGB = "en-GB"
                case enUS = "en-US"
                case esES = "es-ES"
                case esLA = "es-LA"
                case frFR = "fr-FR"
                case itIT = "it-IT"
                case ptBR = "pt-BR"
                case ruRU = "ru-RU"
                case jaJP = "ja-JP"
                case zhCN = "zh-CN"
                case zhTW = "zh-TW"
                case koKR = "ko-KR"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Subteams`.
        public struct Subteams: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Subteams/self`.
            public var _self: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Subteams/all`.
            public var all: [Components.Schemas.All]?
            /// Creates a new `Subteams`.
            ///
            /// - Parameters:
            ///   - _self:
            ///   - all:
            public init(
                _self: [Swift.String]? = nil,
                all: [Components.Schemas.All]? = nil
            ) {
                self._self = _self
                self.all = all
            }
            public enum CodingKeys: String, CodingKey {
                case _self = "self"
                case all
            }
        }
        /// - Remark: Generated from `#/components/schemas/All`.
        public struct All: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/All/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/All/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/All/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/All/handle`.
            public var handle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/All/prefs`.
            public var prefs: Components.Schemas.AllPrefs?
            /// - Remark: Generated from `#/components/schemas/All/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/All/isUsergroup`.
            public var isUsergroup: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/All/isSubteam`.
            public var isSubteam: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/All/isExternal`.
            public var isExternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/All/dateCreate`.
            public var dateCreate: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/All/dateUpdate`.
            public var dateUpdate: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/All/dateDelete`.
            public var dateDelete: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/All/autoProvision`.
            public var autoProvision: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/All/enterpriseSubteamId`.
            public var enterpriseSubteamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/All/createdBy`.
            public var createdBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/All/updatedBy`.
            public var updatedBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/All/userCount`.
            public var userCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/All/channelCount`.
            public var channelCount: Swift.Int?
            /// Creates a new `All`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - description:
            ///   - handle:
            ///   - prefs:
            ///   - teamId:
            ///   - isUsergroup:
            ///   - isSubteam:
            ///   - isExternal:
            ///   - dateCreate:
            ///   - dateUpdate:
            ///   - dateDelete:
            ///   - autoProvision:
            ///   - enterpriseSubteamId:
            ///   - createdBy:
            ///   - updatedBy:
            ///   - userCount:
            ///   - channelCount:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                handle: Swift.String? = nil,
                prefs: Components.Schemas.AllPrefs? = nil,
                teamId: Swift.String? = nil,
                isUsergroup: Swift.Bool? = nil,
                isSubteam: Swift.Bool? = nil,
                isExternal: Swift.Bool? = nil,
                dateCreate: Swift.Int? = nil,
                dateUpdate: Swift.Int? = nil,
                dateDelete: Swift.Int? = nil,
                autoProvision: Swift.Bool? = nil,
                enterpriseSubteamId: Swift.String? = nil,
                createdBy: Swift.String? = nil,
                updatedBy: Swift.String? = nil,
                userCount: Swift.Int? = nil,
                channelCount: Swift.Int? = nil
            ) {
                self.id = id
                self.name = name
                self.description = description
                self.handle = handle
                self.prefs = prefs
                self.teamId = teamId
                self.isUsergroup = isUsergroup
                self.isSubteam = isSubteam
                self.isExternal = isExternal
                self.dateCreate = dateCreate
                self.dateUpdate = dateUpdate
                self.dateDelete = dateDelete
                self.autoProvision = autoProvision
                self.enterpriseSubteamId = enterpriseSubteamId
                self.createdBy = createdBy
                self.updatedBy = updatedBy
                self.userCount = userCount
                self.channelCount = channelCount
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case description
                case handle
                case prefs
                case teamId
                case isUsergroup
                case isSubteam
                case isExternal
                case dateCreate
                case dateUpdate
                case dateDelete
                case autoProvision
                case enterpriseSubteamId
                case createdBy
                case updatedBy
                case userCount
                case channelCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/AllPrefs`.
        public struct AllPrefs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AllPrefs/channels`.
            public var channels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AllPrefs/groups`.
            public var groups: [Components.Schemas.Group]?
            /// Creates a new `AllPrefs`.
            ///
            /// - Parameters:
            ///   - channels:
            ///   - groups:
            public init(
                channels: [Swift.String]? = nil,
                groups: [Components.Schemas.Group]? = nil
            ) {
                self.channels = channels
                self.groups = groups
            }
            public enum CodingKeys: String, CodingKey {
                case channels
                case groups
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamPrefs`.
        public struct TeamPrefs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/locale`.
            public var locale: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/discoverable`.
            public var discoverable: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/defaultChannels`.
            public var defaultChannels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowCalls`.
            public var allowCalls: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/displayEmailAddresses`.
            public var displayEmailAddresses: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/gdriveEnabledTeam`.
            public var gdriveEnabledTeam: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allUsersCanPurchase`.
            public var allUsersCanPurchase: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enableSharedChannels`.
            public var enableSharedChannels: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/canReceiveSharedChannelsInvites`.
            public var canReceiveSharedChannelsInvites: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/invitedUserPreset`.
            public var invitedUserPreset: Components.Schemas.InvitedUserPreset?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dropboxLegacyPicker`.
            public var dropboxLegacyPicker: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/appWhitelistEnabled`.
            public var appWhitelistEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanManageIntegrations`.
            public var whoCanManageIntegrations: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/welcomePlaceEnabled`.
            public var welcomePlaceEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/msgEditWindowMins`.
            public var msgEditWindowMins: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowMessageDeletion`.
            public var allowMessageDeletion: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/displayExternalEmailAddresses`.
            public var displayExternalEmailAddresses: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/joinerNotificationsEnabled`.
            public var joinerNotificationsEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/receivedEscRouteToChannelAwarenessMessage`.
            public var receivedEscRouteToChannelAwarenessMessage: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanCreateChannels`.
            public var whoCanCreateChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanArchiveChannels`.
            public var whoCanArchiveChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanCreateGroups`.
            public var whoCanCreateGroups: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanManageChannelPostingPrefs`.
            public var whoCanManageChannelPostingPrefs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanKickChannels`.
            public var whoCanKickChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanKickGroups`.
            public var whoCanKickGroups: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/displayPronouns`.
            public var displayPronouns: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/adminCustomizedQuickReactions`.
            public var adminCustomizedQuickReactions: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowAdminRetentionOverride`.
            public var allowAdminRetentionOverride: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowAudioClipSharingSlackConnect`.
            public var allowAudioClipSharingSlackConnect: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowAudioClips`.
            public var allowAudioClips: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowBoxCfs`.
            public var allowBoxCfs: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowCallsInteractiveScreenSharing`.
            public var allowCallsInteractiveScreenSharing: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowClipDownloads`.
            public var allowClipDownloads: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowHuddles`.
            public var allowHuddles: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowHuddlesTranscriptions`.
            public var allowHuddlesTranscriptions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowMediaTranscriptions`.
            public var allowMediaTranscriptions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowRetentionOverride`.
            public var allowRetentionOverride: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowSponsoredSlackConnections`.
            public var allowSponsoredSlackConnections: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowVideoClipSharingSlackConnect`.
            public var allowVideoClipSharingSlackConnect: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowVideoClips`.
            public var allowVideoClips: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/appDirOnly`.
            public var appDirOnly: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/appManagementApps`.
            public var appManagementApps: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/blockFileDownload`.
            public var blockFileDownload: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/boxAppInstalled`.
            public var boxAppInstalled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/callsApps`.
            public var callsApps: Components.Schemas.CallsApps?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/callsLocations`.
            public var callsLocations: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/canAcceptSlackConnectChannelInvites`.
            public var canAcceptSlackConnectChannelInvites: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/canCreateExternalLimitedInvite`.
            public var canCreateExternalLimitedInvite: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/canCreateSlackConnectChannelInvite`.
            public var canCreateSlackConnectChannelInvite: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/channelEmailAddressesEnabled`.
            public var channelEmailAddressesEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/complianceExportStart`.
            public var complianceExportStart: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/contentReviewEnabled`.
            public var contentReviewEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/createdWithGoogle`.
            public var createdWithGoogle: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/customStatusDefaultEmoji`.
            public var customStatusDefaultEmoji: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/customStatusPresets`.
            public var customStatusPresets: [[Swift.String]]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/defaultChannelCreationEnabled`.
            public var defaultChannelCreationEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/defaultRxns`.
            public var defaultRxns: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/disableEmailIngestion`.
            public var disableEmailIngestion: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/disableFileDeleting`.
            public var disableFileDeleting: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/disableFileEditing`.
            public var disableFileEditing: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/disableFileUploads`.
            public var disableFileUploads: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/disableSidebarConnectPrompts`.
            public var disableSidebarConnectPrompts: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/disableSidebarInstallPrompts`.
            public var disableSidebarInstallPrompts: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/disallowPublicFileUrls`.
            public var disallowPublicFileUrls: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/displayDefaultPhone`.
            public var displayDefaultPhone: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/displayNamePronunciation`.
            public var displayNamePronunciation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/displayRealNames`.
            public var displayRealNames: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dmRetentionDuration`.
            public var dmRetentionDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dmRetentionType`.
            public var dmRetentionType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndDays`.
            public var dndDays: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enableConnectDmEarlyAccess`.
            public var enableConnectDmEarlyAccess: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enableDomainAllowlistForCea`.
            public var enableDomainAllowlistForCea: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enableInfoBarriers`.
            public var enableInfoBarriers: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enableMpdmToPrivateChannelConversion`.
            public var enableMpdmToPrivateChannelConversion: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enterpriseDefaultChannels`.
            public var enterpriseDefaultChannels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enterpriseHasCorporateExports`.
            public var enterpriseHasCorporateExports: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enterpriseIntuneEnabled`.
            public var enterpriseIntuneEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enterpriseMandatoryChannels`.
            public var enterpriseMandatoryChannels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enterpriseMdmDateEnabled`.
            public var enterpriseMdmDateEnabled: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enterpriseMdmDisableFileDownload`.
            public var enterpriseMdmDisableFileDownload: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enterpriseMdmLevel`.
            public var enterpriseMdmLevel: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enterpriseMobileDeviceCheck`.
            public var enterpriseMobileDeviceCheck: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enterpriseTeamCreationRequest`.
            public var enterpriseTeamCreationRequest: Components.Schemas.EnterpriseTeamCreationRequest?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/fileLimitWhitelisted`.
            public var fileLimitWhitelisted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/fileRetentionDuration`.
            public var fileRetentionDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/fileRetentionType`.
            public var fileRetentionType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/filepickerAppFirstInstall`.
            public var filepickerAppFirstInstall: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/ggEnabled`.
            public var ggEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/groupRetentionDuration`.
            public var groupRetentionDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/groupRetentionType`.
            public var groupRetentionType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/hasComplianceExport`.
            public var hasComplianceExport: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/hasHipaaCompliance`.
            public var hasHipaaCompliance: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/hasSeenPartnerPromo`.
            public var hasSeenPartnerPromo: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/hermesHasAcceptedTos`.
            public var hermesHasAcceptedTos: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/hermesTriggersTrippableBySlackConnectedTeams`.
            public var hermesTriggersTrippableBySlackConnectedTeams: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/hideGsuiteInviteOption`.
            public var hideGsuiteInviteOption: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/hideReferers`.
            public var hideReferers: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/inviteRequestsEnabled`.
            public var inviteRequestsEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/invitesOnlyAdmins`.
            public var invitesOnlyAdmins: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/loudChannelMentionsLimit`.
            public var loudChannelMentionsLimit: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/memberAnalyticsDisabled`.
            public var memberAnalyticsDisabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/mlOptOut`.
            public var mlOptOut: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/mobilePasscodeTimeoutInSeconds`.
            public var mobilePasscodeTimeoutInSeconds: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/notificationRedactionType`.
            public var notificationRedactionType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/notifyPendingEnabled`.
            public var notifyPendingEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/ntlmCredentialDomains`.
            public var ntlmCredentialDomains: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/onedriveAppInstalled`.
            public var onedriveAppInstalled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/onedriveEnabledTeam`.
            public var onedriveEnabledTeam: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/privateChannelMembershipLimit`.
            public var privateChannelMembershipLimit: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/retentionDuration`.
            public var retentionDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/retentionType`.
            public var retentionType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/searchFeedbackOptOut`.
            public var searchFeedbackOptOut: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/selfServeSelect`.
            public var selfServeSelect: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/sessionDuration`.
            public var sessionDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/sessionDurationType`.
            public var sessionDurationType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/showJoinLeave`.
            public var showJoinLeave: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/showLegacyPaidBenefitsPage`.
            public var showLegacyPaidBenefitsPage: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/signInWithSlackDisabled`.
            public var signInWithSlackDisabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/singleUserExports`.
            public var singleUserExports: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/slackConnectAllowedWorkspaces`.
            public var slackConnectAllowedWorkspaces: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/slackConnectApprovalType`.
            public var slackConnectApprovalType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/slackConnectDmOnlyVerifiedOrgs`.
            public var slackConnectDmOnlyVerifiedOrgs: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/slackConnectFileUploadSharingEnabled`.
            public var slackConnectFileUploadSharingEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/slackbotResponsesDisabled`.
            public var slackbotResponsesDisabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/ssoDisableEmails`.
            public var ssoDisableEmails: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/ssoOptional`.
            public var ssoOptional: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/ssoSignupRestrictions`.
            public var ssoSignupRestrictions: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/ssoSyncWithProvider`.
            public var ssoSyncWithProvider: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/subteamsAutoCreateAdmin`.
            public var subteamsAutoCreateAdmin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/subteamsAutoCreateOwner`.
            public var subteamsAutoCreateOwner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/useBrowserPicker`.
            public var useBrowserPicker: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/usesCustomizedCustomStatusPresets`.
            public var usesCustomizedCustomStatusPresets: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/warnBeforeAtChannel`.
            public var warnBeforeAtChannel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanAcceptSlackConnectChannelInvites`.
            public var whoCanAcceptSlackConnectChannelInvites: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanAtChannel`.
            public var whoCanAtChannel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanAtEveryone`.
            public var whoCanAtEveryone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanChangeTeamProfile`.
            public var whoCanChangeTeamProfile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanCreateDeleteUserGroups`.
            public var whoCanCreateDeleteUserGroups: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanCreateExternalLimitedInvite`.
            public var whoCanCreateExternalLimitedInvite: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanCreateSharedChannels`.
            public var whoCanCreateSharedChannels: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanCreateSlackConnectChannelInvite`.
            public var whoCanCreateSlackConnectChannelInvite: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanDmAnyone`.
            public var whoCanDmAnyone: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanEditUserGroups`.
            public var whoCanEditUserGroups: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanManageExtSharedChannels`.
            public var whoCanManageExtSharedChannels: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanManageGuests`.
            public var whoCanManageGuests: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanManagePrivateChannels`.
            public var whoCanManagePrivateChannels: Components.Schemas.WhoCanManageP?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanManagePrivateChannelsAtWorkspaceLevel`.
            public var whoCanManagePrivateChannelsAtWorkspaceLevel: Components.Schemas.WhoCanManageP?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanManagePublicChannels`.
            public var whoCanManagePublicChannels: Components.Schemas.WhoCanManageP?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanManageSharedChannels`.
            public var whoCanManageSharedChannels: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanPostGeneral`.
            public var whoCanPostGeneral: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanPostInSharedChannels`.
            public var whoCanPostInSharedChannels: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanRequestExtSharedChannels`.
            public var whoCanRequestExtSharedChannels: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanReviewFlaggedContent`.
            public var whoCanReviewFlaggedContent: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanViewMessageActivity`.
            public var whoCanViewMessageActivity: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/workflowBuilderEnabled`.
            public var workflowBuilderEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/workflowExtensionStepsBetaOptIn`.
            public var workflowExtensionStepsBetaOptIn: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndEnabled`.
            public var dndEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndStartHour`.
            public var dndStartHour: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndEndHour`.
            public var dndEndHour: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndBeforeMonday`.
            public var dndBeforeMonday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndAfterMonday`.
            public var dndAfterMonday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndBeforeTuesday`.
            public var dndBeforeTuesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndAfterTuesday`.
            public var dndAfterTuesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndBeforeWednesday`.
            public var dndBeforeWednesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndAfterWednesday`.
            public var dndAfterWednesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndBeforeThursday`.
            public var dndBeforeThursday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndAfterThursday`.
            public var dndAfterThursday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndBeforeFriday`.
            public var dndBeforeFriday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndAfterFriday`.
            public var dndAfterFriday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndBeforeSaturday`.
            public var dndBeforeSaturday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndAfterSaturday`.
            public var dndAfterSaturday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndBeforeSunday`.
            public var dndBeforeSunday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndAfterSunday`.
            public var dndAfterSunday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndEnabledMonday`.
            public var dndEnabledMonday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndEnabledTuesday`.
            public var dndEnabledTuesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndEnabledWednesday`.
            public var dndEnabledWednesday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndEnabledThursday`.
            public var dndEnabledThursday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndEnabledFriday`.
            public var dndEnabledFriday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndEnabledSaturday`.
            public var dndEnabledSaturday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndEnabledSunday`.
            public var dndEnabledSunday: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dndWeekdaysOffAllday`.
            public var dndWeekdaysOffAllday: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/authMode`.
            public var authMode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanCreateWorkflows`.
            public var whoCanCreateWorkflows: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/workflowsWebhookTriggerEnabled`.
            public var workflowsWebhookTriggerEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/workflowExtensionStepsEnabled`.
            public var workflowExtensionStepsEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/workflowsExportCsvEnabled`.
            public var workflowsExportCsvEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanUseHermes`.
            public var whoCanUseHermes: Components.Schemas.WhoCanUseHermes?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/whoCanCreateChannelEmailAddresses`.
            public var whoCanCreateChannelEmailAddresses: Components.Schemas.SlackConnectAllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/identityLinksPrefs`.
            public var identityLinksPrefs: Components.Schemas.EnterpriseTeamCreationRequest?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/magicUnfurlsEnabled`.
            public var magicUnfurlsEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/invitesLimit`.
            public var invitesLimit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/showMobilePromos`.
            public var showMobilePromos: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dmRetentionRedactionDuration`.
            public var dmRetentionRedactionDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/privateRetentionRedactionDuration`.
            public var privateRetentionRedactionDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/publicRetentionRedactionDuration`.
            public var publicRetentionRedactionDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/slackConnectAccountVisibility`.
            public var slackConnectAccountVisibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/richPreviewsDefault`.
            public var richPreviewsDefault: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/signInWithSlackDefault`.
            public var signInWithSlackDefault: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/mobileSessionDuration`.
            public var mobileSessionDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/uneditableUserProfileFields`.
            public var uneditableUserProfileFields: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/thornSaferScan`.
            public var thornSaferScan: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowFreeAutomatedTrials`.
            public var allowFreeAutomatedTrials: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/warnUserBeforeLogout`.
            public var warnUserBeforeLogout: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/extAuditLogRetentionType`.
            public var extAuditLogRetentionType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/extAuditLogRetentionDuration`.
            public var extAuditLogRetentionDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/warnUserBeforeLogoutDesktop`.
            public var warnUserBeforeLogoutDesktop: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/warnUserBeforeLogoutMobile`.
            public var warnUserBeforeLogoutMobile: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowHuddlesVideo`.
            public var allowHuddlesVideo: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/displayAnniversaryCelebration`.
            public var displayAnniversaryCelebration: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/displayNewHireCelebration`.
            public var displayNewHireCelebration: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/allowSpaceship`.
            public var allowSpaceship: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/spaceshipWorkspaceSettingVisible`.
            public var spaceshipWorkspaceSettingVisible: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/dailyPromptsEnabled`.
            public var dailyPromptsEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/emojiOnlyAdmins`.
            public var emojiOnlyAdmins: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/loadingOnlyAdmins`.
            public var loadingOnlyAdmins: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/defaultCreatePrivateChannel`.
            public var defaultCreatePrivateChannel: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/enterpriseMdmToken`.
            public var enterpriseMdmToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/samlEnable`.
            public var samlEnable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/statsOnlyAdmins`.
            public var statsOnlyAdmins: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/twoFactorAuthRequired`.
            public var twoFactorAuthRequired: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPrefs/slackbotResponsesOnlyAdmins`.
            public var slackbotResponsesOnlyAdmins: Swift.Bool?
            /// Creates a new `TeamPrefs`.
            ///
            /// - Parameters:
            ///   - locale:
            ///   - discoverable:
            ///   - defaultChannels:
            ///   - allowCalls:
            ///   - displayEmailAddresses:
            ///   - gdriveEnabledTeam:
            ///   - allUsersCanPurchase:
            ///   - enableSharedChannels:
            ///   - canReceiveSharedChannelsInvites:
            ///   - invitedUserPreset:
            ///   - dropboxLegacyPicker:
            ///   - appWhitelistEnabled:
            ///   - whoCanManageIntegrations:
            ///   - welcomePlaceEnabled:
            ///   - msgEditWindowMins:
            ///   - allowMessageDeletion:
            ///   - displayExternalEmailAddresses:
            ///   - joinerNotificationsEnabled:
            ///   - receivedEscRouteToChannelAwarenessMessage:
            ///   - whoCanCreateChannels:
            ///   - whoCanArchiveChannels:
            ///   - whoCanCreateGroups:
            ///   - whoCanManageChannelPostingPrefs:
            ///   - whoCanKickChannels:
            ///   - whoCanKickGroups:
            ///   - displayPronouns:
            ///   - adminCustomizedQuickReactions:
            ///   - allowAdminRetentionOverride:
            ///   - allowAudioClipSharingSlackConnect:
            ///   - allowAudioClips:
            ///   - allowBoxCfs:
            ///   - allowCallsInteractiveScreenSharing:
            ///   - allowClipDownloads:
            ///   - allowHuddles:
            ///   - allowHuddlesTranscriptions:
            ///   - allowMediaTranscriptions:
            ///   - allowRetentionOverride:
            ///   - allowSponsoredSlackConnections:
            ///   - allowVideoClipSharingSlackConnect:
            ///   - allowVideoClips:
            ///   - appDirOnly:
            ///   - appManagementApps:
            ///   - blockFileDownload:
            ///   - boxAppInstalled:
            ///   - callsApps:
            ///   - callsLocations:
            ///   - canAcceptSlackConnectChannelInvites:
            ///   - canCreateExternalLimitedInvite:
            ///   - canCreateSlackConnectChannelInvite:
            ///   - channelEmailAddressesEnabled:
            ///   - complianceExportStart:
            ///   - contentReviewEnabled:
            ///   - createdWithGoogle:
            ///   - customStatusDefaultEmoji:
            ///   - customStatusPresets:
            ///   - defaultChannelCreationEnabled:
            ///   - defaultRxns:
            ///   - disableEmailIngestion:
            ///   - disableFileDeleting:
            ///   - disableFileEditing:
            ///   - disableFileUploads:
            ///   - disableSidebarConnectPrompts:
            ///   - disableSidebarInstallPrompts:
            ///   - disallowPublicFileUrls:
            ///   - displayDefaultPhone:
            ///   - displayNamePronunciation:
            ///   - displayRealNames:
            ///   - dmRetentionDuration:
            ///   - dmRetentionType:
            ///   - dndDays:
            ///   - enableConnectDmEarlyAccess:
            ///   - enableDomainAllowlistForCea:
            ///   - enableInfoBarriers:
            ///   - enableMpdmToPrivateChannelConversion:
            ///   - enterpriseDefaultChannels:
            ///   - enterpriseHasCorporateExports:
            ///   - enterpriseIntuneEnabled:
            ///   - enterpriseMandatoryChannels:
            ///   - enterpriseMdmDateEnabled:
            ///   - enterpriseMdmDisableFileDownload:
            ///   - enterpriseMdmLevel:
            ///   - enterpriseMobileDeviceCheck:
            ///   - enterpriseTeamCreationRequest:
            ///   - fileLimitWhitelisted:
            ///   - fileRetentionDuration:
            ///   - fileRetentionType:
            ///   - filepickerAppFirstInstall:
            ///   - ggEnabled:
            ///   - groupRetentionDuration:
            ///   - groupRetentionType:
            ///   - hasComplianceExport:
            ///   - hasHipaaCompliance:
            ///   - hasSeenPartnerPromo:
            ///   - hermesHasAcceptedTos:
            ///   - hermesTriggersTrippableBySlackConnectedTeams:
            ///   - hideGsuiteInviteOption:
            ///   - hideReferers:
            ///   - inviteRequestsEnabled:
            ///   - invitesOnlyAdmins:
            ///   - loudChannelMentionsLimit:
            ///   - memberAnalyticsDisabled:
            ///   - mlOptOut:
            ///   - mobilePasscodeTimeoutInSeconds:
            ///   - notificationRedactionType:
            ///   - notifyPendingEnabled:
            ///   - ntlmCredentialDomains:
            ///   - onedriveAppInstalled:
            ///   - onedriveEnabledTeam:
            ///   - privateChannelMembershipLimit:
            ///   - retentionDuration:
            ///   - retentionType:
            ///   - searchFeedbackOptOut:
            ///   - selfServeSelect:
            ///   - sessionDuration:
            ///   - sessionDurationType:
            ///   - showJoinLeave:
            ///   - showLegacyPaidBenefitsPage:
            ///   - signInWithSlackDisabled:
            ///   - singleUserExports:
            ///   - slackConnectAllowedWorkspaces:
            ///   - slackConnectApprovalType:
            ///   - slackConnectDmOnlyVerifiedOrgs:
            ///   - slackConnectFileUploadSharingEnabled:
            ///   - slackbotResponsesDisabled:
            ///   - ssoDisableEmails:
            ///   - ssoOptional:
            ///   - ssoSignupRestrictions:
            ///   - ssoSyncWithProvider:
            ///   - subteamsAutoCreateAdmin:
            ///   - subteamsAutoCreateOwner:
            ///   - useBrowserPicker:
            ///   - usesCustomizedCustomStatusPresets:
            ///   - warnBeforeAtChannel:
            ///   - whoCanAcceptSlackConnectChannelInvites:
            ///   - whoCanAtChannel:
            ///   - whoCanAtEveryone:
            ///   - whoCanChangeTeamProfile:
            ///   - whoCanCreateDeleteUserGroups:
            ///   - whoCanCreateExternalLimitedInvite:
            ///   - whoCanCreateSharedChannels:
            ///   - whoCanCreateSlackConnectChannelInvite:
            ///   - whoCanDmAnyone:
            ///   - whoCanEditUserGroups:
            ///   - whoCanManageExtSharedChannels:
            ///   - whoCanManageGuests:
            ///   - whoCanManagePrivateChannels:
            ///   - whoCanManagePrivateChannelsAtWorkspaceLevel:
            ///   - whoCanManagePublicChannels:
            ///   - whoCanManageSharedChannels:
            ///   - whoCanPostGeneral:
            ///   - whoCanPostInSharedChannels:
            ///   - whoCanRequestExtSharedChannels:
            ///   - whoCanReviewFlaggedContent:
            ///   - whoCanViewMessageActivity:
            ///   - workflowBuilderEnabled:
            ///   - workflowExtensionStepsBetaOptIn:
            ///   - dndEnabled:
            ///   - dndStartHour:
            ///   - dndEndHour:
            ///   - dndBeforeMonday:
            ///   - dndAfterMonday:
            ///   - dndBeforeTuesday:
            ///   - dndAfterTuesday:
            ///   - dndBeforeWednesday:
            ///   - dndAfterWednesday:
            ///   - dndBeforeThursday:
            ///   - dndAfterThursday:
            ///   - dndBeforeFriday:
            ///   - dndAfterFriday:
            ///   - dndBeforeSaturday:
            ///   - dndAfterSaturday:
            ///   - dndBeforeSunday:
            ///   - dndAfterSunday:
            ///   - dndEnabledMonday:
            ///   - dndEnabledTuesday:
            ///   - dndEnabledWednesday:
            ///   - dndEnabledThursday:
            ///   - dndEnabledFriday:
            ///   - dndEnabledSaturday:
            ///   - dndEnabledSunday:
            ///   - dndWeekdaysOffAllday:
            ///   - authMode:
            ///   - whoCanCreateWorkflows:
            ///   - workflowsWebhookTriggerEnabled:
            ///   - workflowExtensionStepsEnabled:
            ///   - workflowsExportCsvEnabled:
            ///   - whoCanUseHermes:
            ///   - whoCanCreateChannelEmailAddresses:
            ///   - identityLinksPrefs:
            ///   - magicUnfurlsEnabled:
            ///   - invitesLimit:
            ///   - showMobilePromos:
            ///   - dmRetentionRedactionDuration:
            ///   - privateRetentionRedactionDuration:
            ///   - publicRetentionRedactionDuration:
            ///   - slackConnectAccountVisibility:
            ///   - richPreviewsDefault:
            ///   - signInWithSlackDefault:
            ///   - mobileSessionDuration:
            ///   - uneditableUserProfileFields:
            ///   - thornSaferScan:
            ///   - allowFreeAutomatedTrials:
            ///   - warnUserBeforeLogout:
            ///   - extAuditLogRetentionType:
            ///   - extAuditLogRetentionDuration:
            ///   - warnUserBeforeLogoutDesktop:
            ///   - warnUserBeforeLogoutMobile:
            ///   - allowHuddlesVideo:
            ///   - displayAnniversaryCelebration:
            ///   - displayNewHireCelebration:
            ///   - allowSpaceship:
            ///   - spaceshipWorkspaceSettingVisible:
            ///   - dailyPromptsEnabled:
            ///   - emojiOnlyAdmins:
            ///   - loadingOnlyAdmins:
            ///   - defaultCreatePrivateChannel:
            ///   - enterpriseMdmToken:
            ///   - samlEnable:
            ///   - statsOnlyAdmins:
            ///   - twoFactorAuthRequired:
            ///   - slackbotResponsesOnlyAdmins:
            public init(
                locale: Swift.String? = nil,
                discoverable: Swift.String? = nil,
                defaultChannels: [Swift.String]? = nil,
                allowCalls: Swift.Bool? = nil,
                displayEmailAddresses: Swift.Bool? = nil,
                gdriveEnabledTeam: Swift.Bool? = nil,
                allUsersCanPurchase: Swift.Bool? = nil,
                enableSharedChannels: Swift.Int? = nil,
                canReceiveSharedChannelsInvites: Swift.Bool? = nil,
                invitedUserPreset: Components.Schemas.InvitedUserPreset? = nil,
                dropboxLegacyPicker: Swift.Bool? = nil,
                appWhitelistEnabled: Swift.Bool? = nil,
                whoCanManageIntegrations: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                welcomePlaceEnabled: Swift.Bool? = nil,
                msgEditWindowMins: Swift.Int? = nil,
                allowMessageDeletion: Swift.Bool? = nil,
                displayExternalEmailAddresses: Swift.Bool? = nil,
                joinerNotificationsEnabled: Swift.Bool? = nil,
                receivedEscRouteToChannelAwarenessMessage: Swift.Bool? = nil,
                whoCanCreateChannels: Swift.String? = nil,
                whoCanArchiveChannels: Swift.String? = nil,
                whoCanCreateGroups: Swift.String? = nil,
                whoCanManageChannelPostingPrefs: Swift.String? = nil,
                whoCanKickChannels: Swift.String? = nil,
                whoCanKickGroups: Swift.String? = nil,
                displayPronouns: Swift.Bool? = nil,
                adminCustomizedQuickReactions: [Swift.String]? = nil,
                allowAdminRetentionOverride: Swift.Int? = nil,
                allowAudioClipSharingSlackConnect: Swift.Bool? = nil,
                allowAudioClips: Swift.Bool? = nil,
                allowBoxCfs: Swift.Bool? = nil,
                allowCallsInteractiveScreenSharing: Swift.Bool? = nil,
                allowClipDownloads: Swift.String? = nil,
                allowHuddles: Swift.Bool? = nil,
                allowHuddlesTranscriptions: Swift.Bool? = nil,
                allowMediaTranscriptions: Swift.Bool? = nil,
                allowRetentionOverride: Swift.Bool? = nil,
                allowSponsoredSlackConnections: Swift.Bool? = nil,
                allowVideoClipSharingSlackConnect: Swift.Bool? = nil,
                allowVideoClips: Swift.Bool? = nil,
                appDirOnly: Swift.Bool? = nil,
                appManagementApps: [Swift.String]? = nil,
                blockFileDownload: Swift.Bool? = nil,
                boxAppInstalled: Swift.Bool? = nil,
                callsApps: Components.Schemas.CallsApps? = nil,
                callsLocations: [Swift.String]? = nil,
                canAcceptSlackConnectChannelInvites: Swift.Bool? = nil,
                canCreateExternalLimitedInvite: Swift.Bool? = nil,
                canCreateSlackConnectChannelInvite: Swift.Bool? = nil,
                channelEmailAddressesEnabled: Swift.Bool? = nil,
                complianceExportStart: Swift.Int? = nil,
                contentReviewEnabled: Swift.Bool? = nil,
                createdWithGoogle: Swift.Bool? = nil,
                customStatusDefaultEmoji: Swift.String? = nil,
                customStatusPresets: [[Swift.String]]? = nil,
                defaultChannelCreationEnabled: Swift.Bool? = nil,
                defaultRxns: [Swift.String]? = nil,
                disableEmailIngestion: Swift.Bool? = nil,
                disableFileDeleting: Swift.Bool? = nil,
                disableFileEditing: Swift.Bool? = nil,
                disableFileUploads: Swift.String? = nil,
                disableSidebarConnectPrompts: [Swift.String]? = nil,
                disableSidebarInstallPrompts: [Swift.String]? = nil,
                disallowPublicFileUrls: Swift.Bool? = nil,
                displayDefaultPhone: Swift.Bool? = nil,
                displayNamePronunciation: Swift.Bool? = nil,
                displayRealNames: Swift.Bool? = nil,
                dmRetentionDuration: Swift.Int? = nil,
                dmRetentionType: Swift.Int? = nil,
                dndDays: Swift.String? = nil,
                enableConnectDmEarlyAccess: Swift.Bool? = nil,
                enableDomainAllowlistForCea: Swift.Bool? = nil,
                enableInfoBarriers: Swift.Bool? = nil,
                enableMpdmToPrivateChannelConversion: Swift.Bool? = nil,
                enterpriseDefaultChannels: [Swift.String]? = nil,
                enterpriseHasCorporateExports: Swift.Bool? = nil,
                enterpriseIntuneEnabled: Swift.Bool? = nil,
                enterpriseMandatoryChannels: [Swift.String]? = nil,
                enterpriseMdmDateEnabled: Swift.Int? = nil,
                enterpriseMdmDisableFileDownload: Swift.Bool? = nil,
                enterpriseMdmLevel: Swift.Int? = nil,
                enterpriseMobileDeviceCheck: Swift.Bool? = nil,
                enterpriseTeamCreationRequest: Components.Schemas.EnterpriseTeamCreationRequest? = nil,
                fileLimitWhitelisted: Swift.Bool? = nil,
                fileRetentionDuration: Swift.Int? = nil,
                fileRetentionType: Swift.Int? = nil,
                filepickerAppFirstInstall: Swift.Bool? = nil,
                ggEnabled: Swift.Bool? = nil,
                groupRetentionDuration: Swift.Int? = nil,
                groupRetentionType: Swift.Int? = nil,
                hasComplianceExport: Swift.Bool? = nil,
                hasHipaaCompliance: Swift.Bool? = nil,
                hasSeenPartnerPromo: Swift.Bool? = nil,
                hermesHasAcceptedTos: Swift.Bool? = nil,
                hermesTriggersTrippableBySlackConnectedTeams: Swift.Bool? = nil,
                hideGsuiteInviteOption: Swift.Bool? = nil,
                hideReferers: Swift.Bool? = nil,
                inviteRequestsEnabled: Swift.Bool? = nil,
                invitesOnlyAdmins: Swift.Bool? = nil,
                loudChannelMentionsLimit: Swift.Int? = nil,
                memberAnalyticsDisabled: Swift.Bool? = nil,
                mlOptOut: Swift.Bool? = nil,
                mobilePasscodeTimeoutInSeconds: Swift.Int? = nil,
                notificationRedactionType: Swift.String? = nil,
                notifyPendingEnabled: Swift.Bool? = nil,
                ntlmCredentialDomains: Swift.String? = nil,
                onedriveAppInstalled: Swift.Bool? = nil,
                onedriveEnabledTeam: Swift.Bool? = nil,
                privateChannelMembershipLimit: Swift.Int? = nil,
                retentionDuration: Swift.Int? = nil,
                retentionType: Swift.Int? = nil,
                searchFeedbackOptOut: Swift.Bool? = nil,
                selfServeSelect: Swift.Bool? = nil,
                sessionDuration: Swift.Int? = nil,
                sessionDurationType: Swift.Int? = nil,
                showJoinLeave: Swift.Bool? = nil,
                showLegacyPaidBenefitsPage: Swift.Bool? = nil,
                signInWithSlackDisabled: Swift.Bool? = nil,
                singleUserExports: Swift.Bool? = nil,
                slackConnectAllowedWorkspaces: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                slackConnectApprovalType: Swift.String? = nil,
                slackConnectDmOnlyVerifiedOrgs: Swift.Bool? = nil,
                slackConnectFileUploadSharingEnabled: Swift.Bool? = nil,
                slackbotResponsesDisabled: Swift.Bool? = nil,
                ssoDisableEmails: Swift.Bool? = nil,
                ssoOptional: Swift.Bool? = nil,
                ssoSignupRestrictions: Swift.Int? = nil,
                ssoSyncWithProvider: Swift.Bool? = nil,
                subteamsAutoCreateAdmin: Swift.Bool? = nil,
                subteamsAutoCreateOwner: Swift.Bool? = nil,
                useBrowserPicker: Swift.Bool? = nil,
                usesCustomizedCustomStatusPresets: Swift.Bool? = nil,
                warnBeforeAtChannel: Swift.String? = nil,
                whoCanAcceptSlackConnectChannelInvites: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                whoCanAtChannel: Swift.String? = nil,
                whoCanAtEveryone: Swift.String? = nil,
                whoCanChangeTeamProfile: Swift.String? = nil,
                whoCanCreateDeleteUserGroups: Swift.String? = nil,
                whoCanCreateExternalLimitedInvite: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                whoCanCreateSharedChannels: Swift.String? = nil,
                whoCanCreateSlackConnectChannelInvite: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                whoCanDmAnyone: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                whoCanEditUserGroups: Swift.String? = nil,
                whoCanManageExtSharedChannels: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                whoCanManageGuests: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                whoCanManagePrivateChannels: Components.Schemas.WhoCanManageP? = nil,
                whoCanManagePrivateChannelsAtWorkspaceLevel: Components.Schemas.WhoCanManageP? = nil,
                whoCanManagePublicChannels: Components.Schemas.WhoCanManageP? = nil,
                whoCanManageSharedChannels: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                whoCanPostGeneral: Swift.String? = nil,
                whoCanPostInSharedChannels: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                whoCanRequestExtSharedChannels: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                whoCanReviewFlaggedContent: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                whoCanViewMessageActivity: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                workflowBuilderEnabled: Swift.Bool? = nil,
                workflowExtensionStepsBetaOptIn: Swift.Bool? = nil,
                dndEnabled: Swift.Bool? = nil,
                dndStartHour: Swift.String? = nil,
                dndEndHour: Swift.String? = nil,
                dndBeforeMonday: Swift.String? = nil,
                dndAfterMonday: Swift.String? = nil,
                dndBeforeTuesday: Swift.String? = nil,
                dndAfterTuesday: Swift.String? = nil,
                dndBeforeWednesday: Swift.String? = nil,
                dndAfterWednesday: Swift.String? = nil,
                dndBeforeThursday: Swift.String? = nil,
                dndAfterThursday: Swift.String? = nil,
                dndBeforeFriday: Swift.String? = nil,
                dndAfterFriday: Swift.String? = nil,
                dndBeforeSaturday: Swift.String? = nil,
                dndAfterSaturday: Swift.String? = nil,
                dndBeforeSunday: Swift.String? = nil,
                dndAfterSunday: Swift.String? = nil,
                dndEnabledMonday: Swift.String? = nil,
                dndEnabledTuesday: Swift.String? = nil,
                dndEnabledWednesday: Swift.String? = nil,
                dndEnabledThursday: Swift.String? = nil,
                dndEnabledFriday: Swift.String? = nil,
                dndEnabledSaturday: Swift.String? = nil,
                dndEnabledSunday: Swift.String? = nil,
                dndWeekdaysOffAllday: Swift.Bool? = nil,
                authMode: Swift.String? = nil,
                whoCanCreateWorkflows: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                workflowsWebhookTriggerEnabled: Swift.Bool? = nil,
                workflowExtensionStepsEnabled: Swift.Bool? = nil,
                workflowsExportCsvEnabled: Swift.Bool? = nil,
                whoCanUseHermes: Components.Schemas.WhoCanUseHermes? = nil,
                whoCanCreateChannelEmailAddresses: Components.Schemas.SlackConnectAllowedWorkspaces? = nil,
                identityLinksPrefs: Components.Schemas.EnterpriseTeamCreationRequest? = nil,
                magicUnfurlsEnabled: Swift.Bool? = nil,
                invitesLimit: Swift.Bool? = nil,
                showMobilePromos: Swift.Bool? = nil,
                dmRetentionRedactionDuration: Swift.Int? = nil,
                privateRetentionRedactionDuration: Swift.Int? = nil,
                publicRetentionRedactionDuration: Swift.Int? = nil,
                slackConnectAccountVisibility: Swift.String? = nil,
                richPreviewsDefault: Swift.String? = nil,
                signInWithSlackDefault: Swift.String? = nil,
                mobileSessionDuration: Swift.Int? = nil,
                uneditableUserProfileFields: [Swift.String]? = nil,
                thornSaferScan: Swift.Bool? = nil,
                allowFreeAutomatedTrials: Swift.Bool? = nil,
                warnUserBeforeLogout: Swift.Bool? = nil,
                extAuditLogRetentionType: Swift.Int? = nil,
                extAuditLogRetentionDuration: Swift.Int? = nil,
                warnUserBeforeLogoutDesktop: Swift.Bool? = nil,
                warnUserBeforeLogoutMobile: Swift.Bool? = nil,
                allowHuddlesVideo: Swift.Bool? = nil,
                displayAnniversaryCelebration: Swift.Bool? = nil,
                displayNewHireCelebration: Swift.Bool? = nil,
                allowSpaceship: Swift.String? = nil,
                spaceshipWorkspaceSettingVisible: Swift.Bool? = nil,
                dailyPromptsEnabled: Swift.Bool? = nil,
                emojiOnlyAdmins: Swift.Bool? = nil,
                loadingOnlyAdmins: Swift.Bool? = nil,
                defaultCreatePrivateChannel: Swift.Bool? = nil,
                enterpriseMdmToken: Swift.String? = nil,
                samlEnable: Swift.Bool? = nil,
                statsOnlyAdmins: Swift.Bool? = nil,
                twoFactorAuthRequired: Swift.Int? = nil,
                slackbotResponsesOnlyAdmins: Swift.Bool? = nil
            ) {
                self.locale = locale
                self.discoverable = discoverable
                self.defaultChannels = defaultChannels
                self.allowCalls = allowCalls
                self.displayEmailAddresses = displayEmailAddresses
                self.gdriveEnabledTeam = gdriveEnabledTeam
                self.allUsersCanPurchase = allUsersCanPurchase
                self.enableSharedChannels = enableSharedChannels
                self.canReceiveSharedChannelsInvites = canReceiveSharedChannelsInvites
                self.invitedUserPreset = invitedUserPreset
                self.dropboxLegacyPicker = dropboxLegacyPicker
                self.appWhitelistEnabled = appWhitelistEnabled
                self.whoCanManageIntegrations = whoCanManageIntegrations
                self.welcomePlaceEnabled = welcomePlaceEnabled
                self.msgEditWindowMins = msgEditWindowMins
                self.allowMessageDeletion = allowMessageDeletion
                self.displayExternalEmailAddresses = displayExternalEmailAddresses
                self.joinerNotificationsEnabled = joinerNotificationsEnabled
                self.receivedEscRouteToChannelAwarenessMessage = receivedEscRouteToChannelAwarenessMessage
                self.whoCanCreateChannels = whoCanCreateChannels
                self.whoCanArchiveChannels = whoCanArchiveChannels
                self.whoCanCreateGroups = whoCanCreateGroups
                self.whoCanManageChannelPostingPrefs = whoCanManageChannelPostingPrefs
                self.whoCanKickChannels = whoCanKickChannels
                self.whoCanKickGroups = whoCanKickGroups
                self.displayPronouns = displayPronouns
                self.adminCustomizedQuickReactions = adminCustomizedQuickReactions
                self.allowAdminRetentionOverride = allowAdminRetentionOverride
                self.allowAudioClipSharingSlackConnect = allowAudioClipSharingSlackConnect
                self.allowAudioClips = allowAudioClips
                self.allowBoxCfs = allowBoxCfs
                self.allowCallsInteractiveScreenSharing = allowCallsInteractiveScreenSharing
                self.allowClipDownloads = allowClipDownloads
                self.allowHuddles = allowHuddles
                self.allowHuddlesTranscriptions = allowHuddlesTranscriptions
                self.allowMediaTranscriptions = allowMediaTranscriptions
                self.allowRetentionOverride = allowRetentionOverride
                self.allowSponsoredSlackConnections = allowSponsoredSlackConnections
                self.allowVideoClipSharingSlackConnect = allowVideoClipSharingSlackConnect
                self.allowVideoClips = allowVideoClips
                self.appDirOnly = appDirOnly
                self.appManagementApps = appManagementApps
                self.blockFileDownload = blockFileDownload
                self.boxAppInstalled = boxAppInstalled
                self.callsApps = callsApps
                self.callsLocations = callsLocations
                self.canAcceptSlackConnectChannelInvites = canAcceptSlackConnectChannelInvites
                self.canCreateExternalLimitedInvite = canCreateExternalLimitedInvite
                self.canCreateSlackConnectChannelInvite = canCreateSlackConnectChannelInvite
                self.channelEmailAddressesEnabled = channelEmailAddressesEnabled
                self.complianceExportStart = complianceExportStart
                self.contentReviewEnabled = contentReviewEnabled
                self.createdWithGoogle = createdWithGoogle
                self.customStatusDefaultEmoji = customStatusDefaultEmoji
                self.customStatusPresets = customStatusPresets
                self.defaultChannelCreationEnabled = defaultChannelCreationEnabled
                self.defaultRxns = defaultRxns
                self.disableEmailIngestion = disableEmailIngestion
                self.disableFileDeleting = disableFileDeleting
                self.disableFileEditing = disableFileEditing
                self.disableFileUploads = disableFileUploads
                self.disableSidebarConnectPrompts = disableSidebarConnectPrompts
                self.disableSidebarInstallPrompts = disableSidebarInstallPrompts
                self.disallowPublicFileUrls = disallowPublicFileUrls
                self.displayDefaultPhone = displayDefaultPhone
                self.displayNamePronunciation = displayNamePronunciation
                self.displayRealNames = displayRealNames
                self.dmRetentionDuration = dmRetentionDuration
                self.dmRetentionType = dmRetentionType
                self.dndDays = dndDays
                self.enableConnectDmEarlyAccess = enableConnectDmEarlyAccess
                self.enableDomainAllowlistForCea = enableDomainAllowlistForCea
                self.enableInfoBarriers = enableInfoBarriers
                self.enableMpdmToPrivateChannelConversion = enableMpdmToPrivateChannelConversion
                self.enterpriseDefaultChannels = enterpriseDefaultChannels
                self.enterpriseHasCorporateExports = enterpriseHasCorporateExports
                self.enterpriseIntuneEnabled = enterpriseIntuneEnabled
                self.enterpriseMandatoryChannels = enterpriseMandatoryChannels
                self.enterpriseMdmDateEnabled = enterpriseMdmDateEnabled
                self.enterpriseMdmDisableFileDownload = enterpriseMdmDisableFileDownload
                self.enterpriseMdmLevel = enterpriseMdmLevel
                self.enterpriseMobileDeviceCheck = enterpriseMobileDeviceCheck
                self.enterpriseTeamCreationRequest = enterpriseTeamCreationRequest
                self.fileLimitWhitelisted = fileLimitWhitelisted
                self.fileRetentionDuration = fileRetentionDuration
                self.fileRetentionType = fileRetentionType
                self.filepickerAppFirstInstall = filepickerAppFirstInstall
                self.ggEnabled = ggEnabled
                self.groupRetentionDuration = groupRetentionDuration
                self.groupRetentionType = groupRetentionType
                self.hasComplianceExport = hasComplianceExport
                self.hasHipaaCompliance = hasHipaaCompliance
                self.hasSeenPartnerPromo = hasSeenPartnerPromo
                self.hermesHasAcceptedTos = hermesHasAcceptedTos
                self.hermesTriggersTrippableBySlackConnectedTeams = hermesTriggersTrippableBySlackConnectedTeams
                self.hideGsuiteInviteOption = hideGsuiteInviteOption
                self.hideReferers = hideReferers
                self.inviteRequestsEnabled = inviteRequestsEnabled
                self.invitesOnlyAdmins = invitesOnlyAdmins
                self.loudChannelMentionsLimit = loudChannelMentionsLimit
                self.memberAnalyticsDisabled = memberAnalyticsDisabled
                self.mlOptOut = mlOptOut
                self.mobilePasscodeTimeoutInSeconds = mobilePasscodeTimeoutInSeconds
                self.notificationRedactionType = notificationRedactionType
                self.notifyPendingEnabled = notifyPendingEnabled
                self.ntlmCredentialDomains = ntlmCredentialDomains
                self.onedriveAppInstalled = onedriveAppInstalled
                self.onedriveEnabledTeam = onedriveEnabledTeam
                self.privateChannelMembershipLimit = privateChannelMembershipLimit
                self.retentionDuration = retentionDuration
                self.retentionType = retentionType
                self.searchFeedbackOptOut = searchFeedbackOptOut
                self.selfServeSelect = selfServeSelect
                self.sessionDuration = sessionDuration
                self.sessionDurationType = sessionDurationType
                self.showJoinLeave = showJoinLeave
                self.showLegacyPaidBenefitsPage = showLegacyPaidBenefitsPage
                self.signInWithSlackDisabled = signInWithSlackDisabled
                self.singleUserExports = singleUserExports
                self.slackConnectAllowedWorkspaces = slackConnectAllowedWorkspaces
                self.slackConnectApprovalType = slackConnectApprovalType
                self.slackConnectDmOnlyVerifiedOrgs = slackConnectDmOnlyVerifiedOrgs
                self.slackConnectFileUploadSharingEnabled = slackConnectFileUploadSharingEnabled
                self.slackbotResponsesDisabled = slackbotResponsesDisabled
                self.ssoDisableEmails = ssoDisableEmails
                self.ssoOptional = ssoOptional
                self.ssoSignupRestrictions = ssoSignupRestrictions
                self.ssoSyncWithProvider = ssoSyncWithProvider
                self.subteamsAutoCreateAdmin = subteamsAutoCreateAdmin
                self.subteamsAutoCreateOwner = subteamsAutoCreateOwner
                self.useBrowserPicker = useBrowserPicker
                self.usesCustomizedCustomStatusPresets = usesCustomizedCustomStatusPresets
                self.warnBeforeAtChannel = warnBeforeAtChannel
                self.whoCanAcceptSlackConnectChannelInvites = whoCanAcceptSlackConnectChannelInvites
                self.whoCanAtChannel = whoCanAtChannel
                self.whoCanAtEveryone = whoCanAtEveryone
                self.whoCanChangeTeamProfile = whoCanChangeTeamProfile
                self.whoCanCreateDeleteUserGroups = whoCanCreateDeleteUserGroups
                self.whoCanCreateExternalLimitedInvite = whoCanCreateExternalLimitedInvite
                self.whoCanCreateSharedChannels = whoCanCreateSharedChannels
                self.whoCanCreateSlackConnectChannelInvite = whoCanCreateSlackConnectChannelInvite
                self.whoCanDmAnyone = whoCanDmAnyone
                self.whoCanEditUserGroups = whoCanEditUserGroups
                self.whoCanManageExtSharedChannels = whoCanManageExtSharedChannels
                self.whoCanManageGuests = whoCanManageGuests
                self.whoCanManagePrivateChannels = whoCanManagePrivateChannels
                self.whoCanManagePrivateChannelsAtWorkspaceLevel = whoCanManagePrivateChannelsAtWorkspaceLevel
                self.whoCanManagePublicChannels = whoCanManagePublicChannels
                self.whoCanManageSharedChannels = whoCanManageSharedChannels
                self.whoCanPostGeneral = whoCanPostGeneral
                self.whoCanPostInSharedChannels = whoCanPostInSharedChannels
                self.whoCanRequestExtSharedChannels = whoCanRequestExtSharedChannels
                self.whoCanReviewFlaggedContent = whoCanReviewFlaggedContent
                self.whoCanViewMessageActivity = whoCanViewMessageActivity
                self.workflowBuilderEnabled = workflowBuilderEnabled
                self.workflowExtensionStepsBetaOptIn = workflowExtensionStepsBetaOptIn
                self.dndEnabled = dndEnabled
                self.dndStartHour = dndStartHour
                self.dndEndHour = dndEndHour
                self.dndBeforeMonday = dndBeforeMonday
                self.dndAfterMonday = dndAfterMonday
                self.dndBeforeTuesday = dndBeforeTuesday
                self.dndAfterTuesday = dndAfterTuesday
                self.dndBeforeWednesday = dndBeforeWednesday
                self.dndAfterWednesday = dndAfterWednesday
                self.dndBeforeThursday = dndBeforeThursday
                self.dndAfterThursday = dndAfterThursday
                self.dndBeforeFriday = dndBeforeFriday
                self.dndAfterFriday = dndAfterFriday
                self.dndBeforeSaturday = dndBeforeSaturday
                self.dndAfterSaturday = dndAfterSaturday
                self.dndBeforeSunday = dndBeforeSunday
                self.dndAfterSunday = dndAfterSunday
                self.dndEnabledMonday = dndEnabledMonday
                self.dndEnabledTuesday = dndEnabledTuesday
                self.dndEnabledWednesday = dndEnabledWednesday
                self.dndEnabledThursday = dndEnabledThursday
                self.dndEnabledFriday = dndEnabledFriday
                self.dndEnabledSaturday = dndEnabledSaturday
                self.dndEnabledSunday = dndEnabledSunday
                self.dndWeekdaysOffAllday = dndWeekdaysOffAllday
                self.authMode = authMode
                self.whoCanCreateWorkflows = whoCanCreateWorkflows
                self.workflowsWebhookTriggerEnabled = workflowsWebhookTriggerEnabled
                self.workflowExtensionStepsEnabled = workflowExtensionStepsEnabled
                self.workflowsExportCsvEnabled = workflowsExportCsvEnabled
                self.whoCanUseHermes = whoCanUseHermes
                self.whoCanCreateChannelEmailAddresses = whoCanCreateChannelEmailAddresses
                self.identityLinksPrefs = identityLinksPrefs
                self.magicUnfurlsEnabled = magicUnfurlsEnabled
                self.invitesLimit = invitesLimit
                self.showMobilePromos = showMobilePromos
                self.dmRetentionRedactionDuration = dmRetentionRedactionDuration
                self.privateRetentionRedactionDuration = privateRetentionRedactionDuration
                self.publicRetentionRedactionDuration = publicRetentionRedactionDuration
                self.slackConnectAccountVisibility = slackConnectAccountVisibility
                self.richPreviewsDefault = richPreviewsDefault
                self.signInWithSlackDefault = signInWithSlackDefault
                self.mobileSessionDuration = mobileSessionDuration
                self.uneditableUserProfileFields = uneditableUserProfileFields
                self.thornSaferScan = thornSaferScan
                self.allowFreeAutomatedTrials = allowFreeAutomatedTrials
                self.warnUserBeforeLogout = warnUserBeforeLogout
                self.extAuditLogRetentionType = extAuditLogRetentionType
                self.extAuditLogRetentionDuration = extAuditLogRetentionDuration
                self.warnUserBeforeLogoutDesktop = warnUserBeforeLogoutDesktop
                self.warnUserBeforeLogoutMobile = warnUserBeforeLogoutMobile
                self.allowHuddlesVideo = allowHuddlesVideo
                self.displayAnniversaryCelebration = displayAnniversaryCelebration
                self.displayNewHireCelebration = displayNewHireCelebration
                self.allowSpaceship = allowSpaceship
                self.spaceshipWorkspaceSettingVisible = spaceshipWorkspaceSettingVisible
                self.dailyPromptsEnabled = dailyPromptsEnabled
                self.emojiOnlyAdmins = emojiOnlyAdmins
                self.loadingOnlyAdmins = loadingOnlyAdmins
                self.defaultCreatePrivateChannel = defaultCreatePrivateChannel
                self.enterpriseMdmToken = enterpriseMdmToken
                self.samlEnable = samlEnable
                self.statsOnlyAdmins = statsOnlyAdmins
                self.twoFactorAuthRequired = twoFactorAuthRequired
                self.slackbotResponsesOnlyAdmins = slackbotResponsesOnlyAdmins
            }
            public enum CodingKeys: String, CodingKey {
                case locale
                case discoverable
                case defaultChannels
                case allowCalls
                case displayEmailAddresses
                case gdriveEnabledTeam
                case allUsersCanPurchase
                case enableSharedChannels
                case canReceiveSharedChannelsInvites
                case invitedUserPreset
                case dropboxLegacyPicker
                case appWhitelistEnabled
                case whoCanManageIntegrations
                case welcomePlaceEnabled
                case msgEditWindowMins
                case allowMessageDeletion
                case displayExternalEmailAddresses
                case joinerNotificationsEnabled
                case receivedEscRouteToChannelAwarenessMessage
                case whoCanCreateChannels
                case whoCanArchiveChannels
                case whoCanCreateGroups
                case whoCanManageChannelPostingPrefs
                case whoCanKickChannels
                case whoCanKickGroups
                case displayPronouns
                case adminCustomizedQuickReactions
                case allowAdminRetentionOverride
                case allowAudioClipSharingSlackConnect
                case allowAudioClips
                case allowBoxCfs
                case allowCallsInteractiveScreenSharing
                case allowClipDownloads
                case allowHuddles
                case allowHuddlesTranscriptions
                case allowMediaTranscriptions
                case allowRetentionOverride
                case allowSponsoredSlackConnections
                case allowVideoClipSharingSlackConnect
                case allowVideoClips
                case appDirOnly
                case appManagementApps
                case blockFileDownload
                case boxAppInstalled
                case callsApps
                case callsLocations
                case canAcceptSlackConnectChannelInvites
                case canCreateExternalLimitedInvite
                case canCreateSlackConnectChannelInvite
                case channelEmailAddressesEnabled
                case complianceExportStart
                case contentReviewEnabled
                case createdWithGoogle
                case customStatusDefaultEmoji
                case customStatusPresets
                case defaultChannelCreationEnabled
                case defaultRxns
                case disableEmailIngestion
                case disableFileDeleting
                case disableFileEditing
                case disableFileUploads
                case disableSidebarConnectPrompts
                case disableSidebarInstallPrompts
                case disallowPublicFileUrls
                case displayDefaultPhone
                case displayNamePronunciation
                case displayRealNames
                case dmRetentionDuration
                case dmRetentionType
                case dndDays
                case enableConnectDmEarlyAccess
                case enableDomainAllowlistForCea
                case enableInfoBarriers
                case enableMpdmToPrivateChannelConversion
                case enterpriseDefaultChannels
                case enterpriseHasCorporateExports
                case enterpriseIntuneEnabled
                case enterpriseMandatoryChannels
                case enterpriseMdmDateEnabled
                case enterpriseMdmDisableFileDownload
                case enterpriseMdmLevel
                case enterpriseMobileDeviceCheck
                case enterpriseTeamCreationRequest
                case fileLimitWhitelisted
                case fileRetentionDuration
                case fileRetentionType
                case filepickerAppFirstInstall
                case ggEnabled
                case groupRetentionDuration
                case groupRetentionType
                case hasComplianceExport
                case hasHipaaCompliance
                case hasSeenPartnerPromo
                case hermesHasAcceptedTos
                case hermesTriggersTrippableBySlackConnectedTeams
                case hideGsuiteInviteOption
                case hideReferers
                case inviteRequestsEnabled
                case invitesOnlyAdmins
                case loudChannelMentionsLimit
                case memberAnalyticsDisabled
                case mlOptOut
                case mobilePasscodeTimeoutInSeconds
                case notificationRedactionType
                case notifyPendingEnabled
                case ntlmCredentialDomains
                case onedriveAppInstalled
                case onedriveEnabledTeam
                case privateChannelMembershipLimit
                case retentionDuration
                case retentionType
                case searchFeedbackOptOut
                case selfServeSelect
                case sessionDuration
                case sessionDurationType
                case showJoinLeave
                case showLegacyPaidBenefitsPage
                case signInWithSlackDisabled
                case singleUserExports
                case slackConnectAllowedWorkspaces
                case slackConnectApprovalType
                case slackConnectDmOnlyVerifiedOrgs
                case slackConnectFileUploadSharingEnabled
                case slackbotResponsesDisabled
                case ssoDisableEmails
                case ssoOptional
                case ssoSignupRestrictions
                case ssoSyncWithProvider
                case subteamsAutoCreateAdmin
                case subteamsAutoCreateOwner
                case useBrowserPicker
                case usesCustomizedCustomStatusPresets
                case warnBeforeAtChannel
                case whoCanAcceptSlackConnectChannelInvites
                case whoCanAtChannel
                case whoCanAtEveryone
                case whoCanChangeTeamProfile
                case whoCanCreateDeleteUserGroups
                case whoCanCreateExternalLimitedInvite
                case whoCanCreateSharedChannels
                case whoCanCreateSlackConnectChannelInvite
                case whoCanDmAnyone
                case whoCanEditUserGroups
                case whoCanManageExtSharedChannels
                case whoCanManageGuests
                case whoCanManagePrivateChannels
                case whoCanManagePrivateChannelsAtWorkspaceLevel
                case whoCanManagePublicChannels
                case whoCanManageSharedChannels
                case whoCanPostGeneral
                case whoCanPostInSharedChannels
                case whoCanRequestExtSharedChannels
                case whoCanReviewFlaggedContent
                case whoCanViewMessageActivity
                case workflowBuilderEnabled
                case workflowExtensionStepsBetaOptIn
                case dndEnabled
                case dndStartHour
                case dndEndHour
                case dndBeforeMonday
                case dndAfterMonday
                case dndBeforeTuesday
                case dndAfterTuesday
                case dndBeforeWednesday
                case dndAfterWednesday
                case dndBeforeThursday
                case dndAfterThursday
                case dndBeforeFriday
                case dndAfterFriday
                case dndBeforeSaturday
                case dndAfterSaturday
                case dndBeforeSunday
                case dndAfterSunday
                case dndEnabledMonday
                case dndEnabledTuesday
                case dndEnabledWednesday
                case dndEnabledThursday
                case dndEnabledFriday
                case dndEnabledSaturday
                case dndEnabledSunday
                case dndWeekdaysOffAllday
                case authMode
                case whoCanCreateWorkflows
                case workflowsWebhookTriggerEnabled
                case workflowExtensionStepsEnabled
                case workflowsExportCsvEnabled
                case whoCanUseHermes
                case whoCanCreateChannelEmailAddresses
                case identityLinksPrefs
                case magicUnfurlsEnabled
                case invitesLimit
                case showMobilePromos
                case dmRetentionRedactionDuration
                case privateRetentionRedactionDuration
                case publicRetentionRedactionDuration
                case slackConnectAccountVisibility
                case richPreviewsDefault
                case signInWithSlackDefault
                case mobileSessionDuration
                case uneditableUserProfileFields
                case thornSaferScan
                case allowFreeAutomatedTrials
                case warnUserBeforeLogout
                case extAuditLogRetentionType
                case extAuditLogRetentionDuration
                case warnUserBeforeLogoutDesktop
                case warnUserBeforeLogoutMobile
                case allowHuddlesVideo
                case displayAnniversaryCelebration
                case displayNewHireCelebration
                case allowSpaceship
                case spaceshipWorkspaceSettingVisible
                case dailyPromptsEnabled
                case emojiOnlyAdmins
                case loadingOnlyAdmins
                case defaultCreatePrivateChannel
                case enterpriseMdmToken
                case samlEnable
                case statsOnlyAdmins
                case twoFactorAuthRequired
                case slackbotResponsesOnlyAdmins
            }
        }
        /// - Remark: Generated from `#/components/schemas/CallsApps`.
        public struct CallsApps: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CallsApps/video`.
            public var video: [Components.Schemas.Video]?
            /// - Remark: Generated from `#/components/schemas/CallsApps/audio`.
            public var audio: [Swift.String]?
            /// Creates a new `CallsApps`.
            ///
            /// - Parameters:
            ///   - video:
            ///   - audio:
            public init(
                video: [Components.Schemas.Video]? = nil,
                audio: [Swift.String]? = nil
            ) {
                self.video = video
                self.audio = audio
            }
            public enum CodingKeys: String, CodingKey {
                case video
                case audio
            }
        }
        /// - Remark: Generated from `#/components/schemas/Video`.
        public struct Video: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Video/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Video/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Video/image`.
            public var image: Swift.String?
            /// Creates a new `Video`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - image:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                image: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.image = image
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case image
            }
        }
        /// - Remark: Generated from `#/components/schemas/EnterpriseTeamCreationRequest`.
        public struct EnterpriseTeamCreationRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EnterpriseTeamCreationRequest/isEnabled`.
            public var isEnabled: Swift.Bool?
            /// Creates a new `EnterpriseTeamCreationRequest`.
            ///
            /// - Parameters:
            ///   - isEnabled:
            public init(isEnabled: Swift.Bool? = nil) {
                self.isEnabled = isEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case isEnabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvitedUserPreset`.
        public struct InvitedUserPreset: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InvitedUserPreset/enableInvitedUser`.
            public var enableInvitedUser: Swift.Bool?
            /// Creates a new `InvitedUserPreset`.
            ///
            /// - Parameters:
            ///   - enableInvitedUser:
            public init(enableInvitedUser: Swift.Bool? = nil) {
                self.enableInvitedUser = enableInvitedUser
            }
            public enum CodingKeys: String, CodingKey {
                case enableInvitedUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/SlackConnectAllowedWorkspaces`.
        public struct SlackConnectAllowedWorkspaces: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SlackConnectAllowedWorkspaces/type`.
            public var _type: [Swift.String]?
            /// Creates a new `SlackConnectAllowedWorkspaces`.
            ///
            /// - Parameters:
            ///   - _type:
            public init(_type: [Swift.String]? = nil) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/WhoCanManageP`.
        public struct WhoCanManageP: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WhoCanManageP/user`.
            public var user: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/WhoCanManageP/type`.
            public var _type: [Swift.String]?
            /// Creates a new `WhoCanManageP`.
            ///
            /// - Parameters:
            ///   - user:
            ///   - _type:
            public init(
                user: [Swift.String]? = nil,
                _type: [Swift.String]? = nil
            ) {
                self.user = user
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case user
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/WhoCanUseHermes`.
        public struct WhoCanUseHermes: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WhoCanUseHermes/type`.
            public var _type: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/WhoCanUseHermes/user`.
            public var user: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/WhoCanUseHermes/subteam`.
            public var subteam: [Swift.String]?
            /// Creates a new `WhoCanUseHermes`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - user:
            ///   - subteam:
            public init(
                _type: [Swift.String]? = nil,
                user: [Swift.String]? = nil,
                subteam: [Swift.String]? = nil
            ) {
                self._type = _type
                self.user = user
                self.subteam = subteam
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case user
                case subteam
            }
        }
        /// - Remark: Generated from `#/components/schemas/Fields`.
        public typealias Fields = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/Xf019LT13Z16`.
        public struct Xf019LT13Z16: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Xf019LT13Z16/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Xf019LT13Z16/alt`.
            public var alt: Swift.String?
            /// Creates a new `Xf019LT13Z16`.
            ///
            /// - Parameters:
            ///   - value:
            ///   - alt:
            public init(
                value: Swift.String? = nil,
                alt: Swift.String? = nil
            ) {
                self.value = value
                self.alt = alt
            }
            public enum CodingKeys: String, CodingKey {
                case value
                case alt
            }
        }
        /// - Remark: Generated from `#/components/schemas/StatusEmojiDisplayInfo`.
        public struct StatusEmojiDisplayInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StatusEmojiDisplayInfo/unicode`.
            public var unicode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StatusEmojiDisplayInfo/emojiName`.
            public var emojiName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StatusEmojiDisplayInfo/displayAlias`.
            public var displayAlias: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StatusEmojiDisplayInfo/displayUrl`.
            public var displayUrl: Swift.String?
            /// Creates a new `StatusEmojiDisplayInfo`.
            ///
            /// - Parameters:
            ///   - unicode:
            ///   - emojiName:
            ///   - displayAlias:
            ///   - displayUrl:
            public init(
                unicode: Swift.String? = nil,
                emojiName: Swift.String? = nil,
                displayAlias: Swift.String? = nil,
                displayUrl: Swift.String? = nil
            ) {
                self.unicode = unicode
                self.emojiName = emojiName
                self.displayAlias = displayAlias
                self.displayUrl = displayUrl
            }
            public enum CodingKeys: String, CodingKey {
                case unicode
                case emojiName
                case displayAlias
                case displayUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppID`.
        @frozen public enum AppID: String, Codable, Hashable, Sendable, CaseIterable {
            case a00000000 = "A00000000"
            case _empty_ = ""
        }
        /// - Remark: Generated from `#/components/schemas/ID`.
        @frozen public enum Id: String, Codable, Hashable, Sendable, CaseIterable {
            case b00000000 = "B00000000"
            case _empty_ = ""
        }
        /// - Remark: Generated from `#/components/schemas/ActionType`.
        @frozen public enum ActionType: String, Codable, Hashable, Sendable, CaseIterable {
            case richTextList = "rich_text_list"
            case richTextPreformatted = "rich_text_preformatted"
            case richTextQuote = "rich_text_quote"
            case richTextSection = "rich_text_section"
            case image = "image"
            case button = "button"
            case workflowButton = "workflow_button"
            case checkboxes = "checkboxes"
            case radioButtons = "radio_buttons"
            case channelsSelect = "channels_select"
            case multiChannelsSelect = "multi_channels_select"
            case conversationsSelect = "conversations_select"
            case multiConversationsSelect = "multi_conversations_select"
            case datepicker = "datepicker"
            case timepicker = "timepicker"
            case datetimepicker = "datetimepicker"
            case externalSelect = "external_select"
            case multiExternalSelect = "multi_external_select"
            case overflow = "overflow"
            case staticSelect = "static_select"
            case multiStaticSelect = "multi_static_select"
            case usersSelect = "users_select"
            case multiUsersSelect = "multi_users_select"
        }
        /// - Remark: Generated from `#/components/schemas/Dnd`.
        public struct Dnd: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Dnd/dndEnabled`.
            public var dndEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Dnd/nextDndStartTs`.
            public var nextDndStartTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Dnd/nextDndEndTs`.
            public var nextDndEndTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Dnd/snoozeEnabled`.
            public var snoozeEnabled: Swift.Bool?
            /// Creates a new `Dnd`.
            ///
            /// - Parameters:
            ///   - dndEnabled:
            ///   - nextDndStartTs:
            ///   - nextDndEndTs:
            ///   - snoozeEnabled:
            public init(
                dndEnabled: Swift.Bool? = nil,
                nextDndStartTs: Swift.Int? = nil,
                nextDndEndTs: Swift.Int? = nil,
                snoozeEnabled: Swift.Bool? = nil
            ) {
                self.dndEnabled = dndEnabled
                self.nextDndStartTs = nextDndStartTs
                self.nextDndEndTs = nextDndEndTs
                self.snoozeEnabled = snoozeEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case dndEnabled
                case nextDndStartTs
                case nextDndEndTs
                case snoozeEnabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/SearchAllResponse`.
        public struct SearchAllResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SearchAllResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/SearchAllResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchAllResponse/query`.
            public var query: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchAllResponse/messages`.
            public var messages: Components.Schemas.Messages?
            /// - Remark: Generated from `#/components/schemas/SearchAllResponse/files`.
            public var files: Components.Schemas.Files?
            /// - Remark: Generated from `#/components/schemas/SearchAllResponse/posts`.
            public var posts: Components.Schemas.Posts?
            /// - Remark: Generated from `#/components/schemas/SearchAllResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchAllResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `SearchAllResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - query:
            ///   - messages:
            ///   - files:
            ///   - posts:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                query: Swift.String? = nil,
                messages: Components.Schemas.Messages? = nil,
                files: Components.Schemas.Files? = nil,
                posts: Components.Schemas.Posts? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.query = query
                self.messages = messages
                self.files = files
                self.posts = posts
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case query
                case messages
                case files
                case posts
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Files`.
        public struct Files: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Files/total`.
            public var total: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Files/pagination`.
            public var pagination: Components.Schemas.Pagination?
            /// - Remark: Generated from `#/components/schemas/Files/paging`.
            public var paging: Components.Schemas.Paging?
            /// - Remark: Generated from `#/components/schemas/Files/matches`.
            public var matches: [Components.Schemas.Match]?
            /// Creates a new `Files`.
            ///
            /// - Parameters:
            ///   - total:
            ///   - pagination:
            ///   - paging:
            ///   - matches:
            public init(
                total: Swift.Int? = nil,
                pagination: Components.Schemas.Pagination? = nil,
                paging: Components.Schemas.Paging? = nil,
                matches: [Components.Schemas.Match]? = nil
            ) {
                self.total = total
                self.pagination = pagination
                self.paging = paging
                self.matches = matches
            }
            public enum CodingKeys: String, CodingKey {
                case total
                case pagination
                case paging
                case matches
            }
        }
        /// - Remark: Generated from `#/components/schemas/FilesMatch`.
        public struct FilesMatch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesMatch/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/timestamp`.
            public var timestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/mimetype`.
            public var mimetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/filetype`.
            public var filetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/user`.
            public var user: Components.Schemas.LastEditor?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/editable`.
            public var editable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/mode`.
            public var mode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/shares`.
            public var shares: Components.Schemas.MatchShares?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/channels`.
            public var channels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/groups`.
            public var groups: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/ims`.
            public var ims: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/preview`.
            public var preview: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/lines`.
            public var lines: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/subject`.
            public var subject: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/to`.
            public var to: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/from`.
            public var from: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/cc`.
            public var cc: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/headers`.
            public var headers: Components.Schemas.MatchHeaders?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/editors`.
            public var editors: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/access`.
            public var access: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/deanimate`.
            public var deanimate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/attachments`.
            public var attachments: [Components.Schemas.Attachment]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/prettyType`.
            public var prettyType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/isExternal`.
            public var isExternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/externalType`.
            public var externalType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/isPublic`.
            public var isPublic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/publicUrlShared`.
            public var publicUrlShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/urlPrivate`.
            public var urlPrivate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb64`.
            public var thumb64: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb80`.
            public var thumb80: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb360`.
            public var thumb360: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb360W`.
            public var thumb360W: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb360H`.
            public var thumb360H: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb480`.
            public var thumb480: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb480W`.
            public var thumb480W: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb480H`.
            public var thumb480H: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb160`.
            public var thumb160: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb720`.
            public var thumb720: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb720W`.
            public var thumb720W: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb720H`.
            public var thumb720H: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb800`.
            public var thumb800: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb800W`.
            public var thumb800W: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb800H`.
            public var thumb800H: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb960`.
            public var thumb960: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb960W`.
            public var thumb960W: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb960H`.
            public var thumb960H: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb1024`.
            public var thumb1024: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb1024W`.
            public var thumb1024W: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb1024H`.
            public var thumb1024H: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/originalW`.
            public var originalW: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/originalH`.
            public var originalH: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumbTiny`.
            public var thumbTiny: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/isStarred`.
            public var isStarred: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/externalUrl`.
            public var externalUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/hasRichPreview`.
            public var hasRichPreview: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/urlPrivateDownload`.
            public var urlPrivateDownload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/permalinkPublic`.
            public var permalinkPublic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/editLink`.
            public var editLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/previewHighlight`.
            public var previewHighlight: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/linesMore`.
            public var linesMore: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/previewIsTruncated`.
            public var previewIsTruncated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/imageExifRotation`.
            public var imageExifRotation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/lastEditor`.
            public var lastEditor: Components.Schemas.LastEditor?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/nonOwnerEditable`.
            public var nonOwnerEditable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumbVideo`.
            public var thumbVideo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/commentsCount`.
            public var commentsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/mediaDisplayType`.
            public var mediaDisplayType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/convertedPdf`.
            public var convertedPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumbPdf`.
            public var thumbPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumbPdfW`.
            public var thumbPdfW: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumbPdfH`.
            public var thumbPdfH: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/fileAccess`.
            public var fileAccess: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/userTeam`.
            public var userTeam: Components.Schemas.UserTeam?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/hasMoreShares`.
            public var hasMoreShares: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/originalAttachmentCount`.
            public var originalAttachmentCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/plainText`.
            public var plainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/previewPlainText`.
            public var previewPlainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/sentToSelf`.
            public var sentToSelf: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/urlStaticPreview`.
            public var urlStaticPreview: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/quipThreadId`.
            public var quipThreadId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/updateNotification`.
            public var updateNotification: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/privateChannelsWithFileAccessCount`.
            public var privateChannelsWithFileAccessCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/dmMpdmUsersWithFileAccess`.
            public var dmMpdmUsersWithFileAccess: [Components.Schemas.DmMpdmUsersWithFileAccess]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/teamsSharedWith`.
            public var teamsSharedWith: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/orgOrWorkspaceAccess`.
            public var orgOrWorkspaceAccess: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/teamPrefVersionHistoryEnabled`.
            public var teamPrefVersionHistoryEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/editorsCount`.
            public var editorsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/isChannelSpace`.
            public var isChannelSpace: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/linkedChannelId`.
            public var linkedChannelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb360Gif`.
            public var thumb360Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/thumb480Gif`.
            public var thumb480Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/deanimateGif`.
            public var deanimateGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/privateFileWithAccessCount`.
            public var privateFileWithAccessCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/titleBlocks`.
            public var titleBlocks: [Components.Schemas.MatchTitleBlock]?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/isRestrictedSharingEnabled`.
            public var isRestrictedSharingEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FilesMatch/canvasPrintingEnabled`.
            public var canvasPrintingEnabled: Swift.Bool?
            /// Creates a new `FilesMatch`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created:
            ///   - timestamp:
            ///   - name:
            ///   - title:
            ///   - mimetype:
            ///   - filetype:
            ///   - user:
            ///   - editable:
            ///   - size:
            ///   - mode:
            ///   - username:
            ///   - permalink:
            ///   - shares:
            ///   - channels:
            ///   - groups:
            ///   - ims:
            ///   - preview:
            ///   - lines:
            ///   - updated:
            ///   - subject:
            ///   - to:
            ///   - from:
            ///   - cc:
            ///   - headers:
            ///   - editors:
            ///   - access:
            ///   - deanimate:
            ///   - attachments:
            ///   - prettyType:
            ///   - isExternal:
            ///   - externalType:
            ///   - isPublic:
            ///   - publicUrlShared:
            ///   - displayAsBot:
            ///   - urlPrivate:
            ///   - thumb64:
            ///   - thumb80:
            ///   - thumb360:
            ///   - thumb360W:
            ///   - thumb360H:
            ///   - thumb480:
            ///   - thumb480W:
            ///   - thumb480H:
            ///   - thumb160:
            ///   - thumb720:
            ///   - thumb720W:
            ///   - thumb720H:
            ///   - thumb800:
            ///   - thumb800W:
            ///   - thumb800H:
            ///   - thumb960:
            ///   - thumb960W:
            ///   - thumb960H:
            ///   - thumb1024:
            ///   - thumb1024W:
            ///   - thumb1024H:
            ///   - originalW:
            ///   - originalH:
            ///   - thumbTiny:
            ///   - isStarred:
            ///   - externalId:
            ///   - externalUrl:
            ///   - hasRichPreview:
            ///   - urlPrivateDownload:
            ///   - permalinkPublic:
            ///   - editLink:
            ///   - previewHighlight:
            ///   - linesMore:
            ///   - previewIsTruncated:
            ///   - imageExifRotation:
            ///   - lastEditor:
            ///   - nonOwnerEditable:
            ///   - thumbVideo:
            ///   - commentsCount:
            ///   - mediaDisplayType:
            ///   - convertedPdf:
            ///   - thumbPdf:
            ///   - thumbPdfW:
            ///   - thumbPdfH:
            ///   - fileAccess:
            ///   - userTeam:
            ///   - hasMoreShares:
            ///   - originalAttachmentCount:
            ///   - plainText:
            ///   - previewPlainText:
            ///   - hasMore:
            ///   - sentToSelf:
            ///   - botId:
            ///   - urlStaticPreview:
            ///   - quipThreadId:
            ///   - updateNotification:
            ///   - privateChannelsWithFileAccessCount:
            ///   - dmMpdmUsersWithFileAccess:
            ///   - teamsSharedWith:
            ///   - orgOrWorkspaceAccess:
            ///   - teamPrefVersionHistoryEnabled:
            ///   - editorsCount:
            ///   - isChannelSpace:
            ///   - linkedChannelId:
            ///   - thumb360Gif:
            ///   - thumb480Gif:
            ///   - deanimateGif:
            ///   - privateFileWithAccessCount:
            ///   - titleBlocks:
            ///   - isRestrictedSharingEnabled:
            ///   - canvasPrintingEnabled:
            public init(
                id: Swift.String? = nil,
                created: Swift.Int? = nil,
                timestamp: Swift.Int? = nil,
                name: Swift.String? = nil,
                title: Swift.String? = nil,
                mimetype: Swift.String? = nil,
                filetype: Swift.String? = nil,
                user: Components.Schemas.LastEditor? = nil,
                editable: Swift.Bool? = nil,
                size: Swift.Int? = nil,
                mode: Swift.String? = nil,
                username: Swift.String? = nil,
                permalink: Swift.String? = nil,
                shares: Components.Schemas.MatchShares? = nil,
                channels: [Swift.String]? = nil,
                groups: [Swift.String]? = nil,
                ims: [Swift.String]? = nil,
                preview: Swift.String? = nil,
                lines: Swift.Int? = nil,
                updated: Swift.Int? = nil,
                subject: Swift.String? = nil,
                to: [Components.Schemas.Cc]? = nil,
                from: [Components.Schemas.Cc]? = nil,
                cc: [Components.Schemas.Cc]? = nil,
                headers: Components.Schemas.MatchHeaders? = nil,
                editors: [Swift.String]? = nil,
                access: Swift.String? = nil,
                deanimate: Swift.String? = nil,
                attachments: [Components.Schemas.Attachment]? = nil,
                prettyType: Swift.String? = nil,
                isExternal: Swift.Bool? = nil,
                externalType: Swift.String? = nil,
                isPublic: Swift.Bool? = nil,
                publicUrlShared: Swift.Bool? = nil,
                displayAsBot: Swift.Bool? = nil,
                urlPrivate: Swift.String? = nil,
                thumb64: Swift.String? = nil,
                thumb80: Swift.String? = nil,
                thumb360: Swift.String? = nil,
                thumb360W: Swift.Int? = nil,
                thumb360H: Swift.Int? = nil,
                thumb480: Swift.String? = nil,
                thumb480W: Swift.Int? = nil,
                thumb480H: Swift.Int? = nil,
                thumb160: Swift.String? = nil,
                thumb720: Swift.String? = nil,
                thumb720W: Swift.Int? = nil,
                thumb720H: Swift.Int? = nil,
                thumb800: Swift.String? = nil,
                thumb800W: Swift.Int? = nil,
                thumb800H: Swift.Int? = nil,
                thumb960: Swift.String? = nil,
                thumb960W: Swift.Int? = nil,
                thumb960H: Swift.Int? = nil,
                thumb1024: Swift.String? = nil,
                thumb1024W: Swift.Int? = nil,
                thumb1024H: Swift.Int? = nil,
                originalW: Swift.Int? = nil,
                originalH: Swift.Int? = nil,
                thumbTiny: Swift.String? = nil,
                isStarred: Swift.Bool? = nil,
                externalId: Swift.String? = nil,
                externalUrl: Swift.String? = nil,
                hasRichPreview: Swift.Bool? = nil,
                urlPrivateDownload: Swift.String? = nil,
                permalinkPublic: Swift.String? = nil,
                editLink: Swift.String? = nil,
                previewHighlight: Swift.String? = nil,
                linesMore: Swift.Int? = nil,
                previewIsTruncated: Swift.Bool? = nil,
                imageExifRotation: Swift.Int? = nil,
                lastEditor: Components.Schemas.LastEditor? = nil,
                nonOwnerEditable: Swift.Bool? = nil,
                thumbVideo: Swift.String? = nil,
                commentsCount: Swift.Int? = nil,
                mediaDisplayType: Swift.String? = nil,
                convertedPdf: Swift.String? = nil,
                thumbPdf: Swift.String? = nil,
                thumbPdfW: Swift.Int? = nil,
                thumbPdfH: Swift.Int? = nil,
                fileAccess: Swift.String? = nil,
                userTeam: Components.Schemas.UserTeam? = nil,
                hasMoreShares: Swift.Bool? = nil,
                originalAttachmentCount: Swift.Int? = nil,
                plainText: Swift.String? = nil,
                previewPlainText: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                sentToSelf: Swift.Bool? = nil,
                botId: Swift.String? = nil,
                urlStaticPreview: Swift.String? = nil,
                quipThreadId: Swift.String? = nil,
                updateNotification: Swift.Int? = nil,
                privateChannelsWithFileAccessCount: Swift.Int? = nil,
                dmMpdmUsersWithFileAccess: [Components.Schemas.DmMpdmUsersWithFileAccess]? = nil,
                teamsSharedWith: [Swift.String]? = nil,
                orgOrWorkspaceAccess: Swift.String? = nil,
                teamPrefVersionHistoryEnabled: Swift.Bool? = nil,
                editorsCount: Swift.Int? = nil,
                isChannelSpace: Swift.Bool? = nil,
                linkedChannelId: Swift.String? = nil,
                thumb360Gif: Swift.String? = nil,
                thumb480Gif: Swift.String? = nil,
                deanimateGif: Swift.String? = nil,
                privateFileWithAccessCount: Swift.Int? = nil,
                titleBlocks: [Components.Schemas.MatchTitleBlock]? = nil,
                isRestrictedSharingEnabled: Swift.Bool? = nil,
                canvasPrintingEnabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.created = created
                self.timestamp = timestamp
                self.name = name
                self.title = title
                self.mimetype = mimetype
                self.filetype = filetype
                self.user = user
                self.editable = editable
                self.size = size
                self.mode = mode
                self.username = username
                self.permalink = permalink
                self.shares = shares
                self.channels = channels
                self.groups = groups
                self.ims = ims
                self.preview = preview
                self.lines = lines
                self.updated = updated
                self.subject = subject
                self.to = to
                self.from = from
                self.cc = cc
                self.headers = headers
                self.editors = editors
                self.access = access
                self.deanimate = deanimate
                self.attachments = attachments
                self.prettyType = prettyType
                self.isExternal = isExternal
                self.externalType = externalType
                self.isPublic = isPublic
                self.publicUrlShared = publicUrlShared
                self.displayAsBot = displayAsBot
                self.urlPrivate = urlPrivate
                self.thumb64 = thumb64
                self.thumb80 = thumb80
                self.thumb360 = thumb360
                self.thumb360W = thumb360W
                self.thumb360H = thumb360H
                self.thumb480 = thumb480
                self.thumb480W = thumb480W
                self.thumb480H = thumb480H
                self.thumb160 = thumb160
                self.thumb720 = thumb720
                self.thumb720W = thumb720W
                self.thumb720H = thumb720H
                self.thumb800 = thumb800
                self.thumb800W = thumb800W
                self.thumb800H = thumb800H
                self.thumb960 = thumb960
                self.thumb960W = thumb960W
                self.thumb960H = thumb960H
                self.thumb1024 = thumb1024
                self.thumb1024W = thumb1024W
                self.thumb1024H = thumb1024H
                self.originalW = originalW
                self.originalH = originalH
                self.thumbTiny = thumbTiny
                self.isStarred = isStarred
                self.externalId = externalId
                self.externalUrl = externalUrl
                self.hasRichPreview = hasRichPreview
                self.urlPrivateDownload = urlPrivateDownload
                self.permalinkPublic = permalinkPublic
                self.editLink = editLink
                self.previewHighlight = previewHighlight
                self.linesMore = linesMore
                self.previewIsTruncated = previewIsTruncated
                self.imageExifRotation = imageExifRotation
                self.lastEditor = lastEditor
                self.nonOwnerEditable = nonOwnerEditable
                self.thumbVideo = thumbVideo
                self.commentsCount = commentsCount
                self.mediaDisplayType = mediaDisplayType
                self.convertedPdf = convertedPdf
                self.thumbPdf = thumbPdf
                self.thumbPdfW = thumbPdfW
                self.thumbPdfH = thumbPdfH
                self.fileAccess = fileAccess
                self.userTeam = userTeam
                self.hasMoreShares = hasMoreShares
                self.originalAttachmentCount = originalAttachmentCount
                self.plainText = plainText
                self.previewPlainText = previewPlainText
                self.hasMore = hasMore
                self.sentToSelf = sentToSelf
                self.botId = botId
                self.urlStaticPreview = urlStaticPreview
                self.quipThreadId = quipThreadId
                self.updateNotification = updateNotification
                self.privateChannelsWithFileAccessCount = privateChannelsWithFileAccessCount
                self.dmMpdmUsersWithFileAccess = dmMpdmUsersWithFileAccess
                self.teamsSharedWith = teamsSharedWith
                self.orgOrWorkspaceAccess = orgOrWorkspaceAccess
                self.teamPrefVersionHistoryEnabled = teamPrefVersionHistoryEnabled
                self.editorsCount = editorsCount
                self.isChannelSpace = isChannelSpace
                self.linkedChannelId = linkedChannelId
                self.thumb360Gif = thumb360Gif
                self.thumb480Gif = thumb480Gif
                self.deanimateGif = deanimateGif
                self.privateFileWithAccessCount = privateFileWithAccessCount
                self.titleBlocks = titleBlocks
                self.isRestrictedSharingEnabled = isRestrictedSharingEnabled
                self.canvasPrintingEnabled = canvasPrintingEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case timestamp
                case name
                case title
                case mimetype
                case filetype
                case user
                case editable
                case size
                case mode
                case username
                case permalink
                case shares
                case channels
                case groups
                case ims
                case preview
                case lines
                case updated
                case subject
                case to
                case from
                case cc
                case headers
                case editors
                case access
                case deanimate
                case attachments
                case prettyType
                case isExternal
                case externalType
                case isPublic
                case publicUrlShared
                case displayAsBot
                case urlPrivate
                case thumb64
                case thumb80
                case thumb360
                case thumb360W
                case thumb360H
                case thumb480
                case thumb480W
                case thumb480H
                case thumb160
                case thumb720
                case thumb720W
                case thumb720H
                case thumb800
                case thumb800W
                case thumb800H
                case thumb960
                case thumb960W
                case thumb960H
                case thumb1024
                case thumb1024W
                case thumb1024H
                case originalW
                case originalH
                case thumbTiny
                case isStarred
                case externalId
                case externalUrl
                case hasRichPreview
                case urlPrivateDownload
                case permalinkPublic
                case editLink
                case previewHighlight
                case linesMore
                case previewIsTruncated
                case imageExifRotation
                case lastEditor
                case nonOwnerEditable
                case thumbVideo
                case commentsCount
                case mediaDisplayType
                case convertedPdf
                case thumbPdf
                case thumbPdfW
                case thumbPdfH
                case fileAccess
                case userTeam
                case hasMoreShares
                case originalAttachmentCount
                case plainText
                case previewPlainText
                case hasMore
                case sentToSelf
                case botId
                case urlStaticPreview
                case quipThreadId
                case updateNotification
                case privateChannelsWithFileAccessCount
                case dmMpdmUsersWithFileAccess
                case teamsSharedWith
                case orgOrWorkspaceAccess
                case teamPrefVersionHistoryEnabled
                case editorsCount
                case isChannelSpace
                case linkedChannelId
                case thumb360Gif
                case thumb480Gif
                case deanimateGif
                case privateFileWithAccessCount
                case titleBlocks
                case isRestrictedSharingEnabled
                case canvasPrintingEnabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/FileHeaders`.
        public struct FileHeaders: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FileHeaders/date`.
            public var date: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileHeaders/inReplyTo`.
            public var inReplyTo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileHeaders/replyTo`.
            public var replyTo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FileHeaders/messageId`.
            public var messageId: Swift.String?
            /// Creates a new `FileHeaders`.
            ///
            /// - Parameters:
            ///   - date:
            ///   - inReplyTo:
            ///   - replyTo:
            ///   - messageId:
            public init(
                date: Swift.String? = nil,
                inReplyTo: Swift.String? = nil,
                replyTo: Swift.String? = nil,
                messageId: Swift.String? = nil
            ) {
                self.date = date
                self.inReplyTo = inReplyTo
                self.replyTo = replyTo
                self.messageId = messageId
            }
            public enum CodingKeys: String, CodingKey {
                case date
                case inReplyTo
                case replyTo
                case messageId
            }
        }
        /// - Remark: Generated from `#/components/schemas/MatchHeaders`.
        public struct MatchHeaders: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MatchHeaders/date`.
            public var date: Swift.String?
            /// Creates a new `MatchHeaders`.
            ///
            /// - Parameters:
            ///   - date:
            public init(date: Swift.String? = nil) {
                self.date = date
            }
            public enum CodingKeys: String, CodingKey {
                case date
            }
        }
        /// - Remark: Generated from `#/components/schemas/MatchShares`.
        public struct MatchShares: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MatchShares/public`.
            public var _public: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `MatchShares`.
            ///
            /// - Parameters:
            ///   - _public:
            public init(_public: OpenAPIRuntime.OpenAPIObjectContainer? = nil) {
                self._public = _public
            }
            public enum CodingKeys: String, CodingKey {
                case _public = "public"
            }
        }
        /// - Remark: Generated from `#/components/schemas/MatchTitleBlock`.
        public struct MatchTitleBlock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/type`.
            public var _type: Components.Schemas.BlockType?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/elements`.
            public var elements: [Components.Schemas.Accessory]?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/file`.
            public var file: Components.Schemas.FileElement?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/text`.
            public var text: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/title`.
            public var title: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/description`.
            public var description: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/fields`.
            public var fields: [Components.Schemas.DescriptionElement]?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/accessory`.
            public var accessory: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/expand`.
            public var expand: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/label`.
            public var label: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/element`.
            public var element: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/hint`.
            public var hint: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/optional`.
            public var optional: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/blockId`.
            public var blockId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/callId`.
            public var callId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/apiDecorationAvailable`.
            public var apiDecorationAvailable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/fileId`.
            public var fileId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/isAnimated`.
            public var isAnimated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/titleUrl`.
            public var titleUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/videoUrl`.
            public var videoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/thumbnailUrl`.
            public var thumbnailUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/authorName`.
            public var authorName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/providerName`.
            public var providerName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/providerIconUrl`.
            public var providerIconUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/functionTriggerId`.
            public var functionTriggerId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/isWorkflowApp`.
            public var isWorkflowApp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/salesHomeWorkflowAppType`.
            public var salesHomeWorkflowAppType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/appCollaborators`.
            public var appCollaborators: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/buttonLabel`.
            public var buttonLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/botUserId`.
            public var botUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/owningTeamId`.
            public var owningTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/workflowId`.
            public var workflowId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/developerTraceId`.
            public var developerTraceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/triggerType`.
            public var triggerType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/triggerSubtype`.
            public var triggerSubtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/shareUrl`.
            public var shareUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchTitleBlock/dispatchAction`.
            public var dispatchAction: Swift.Bool?
            /// Creates a new `MatchTitleBlock`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - call:
            ///   - source:
            ///   - file:
            ///   - text:
            ///   - fallback:
            ///   - title:
            ///   - description:
            ///   - url:
            ///   - fields:
            ///   - accessory:
            ///   - expand:
            ///   - label:
            ///   - element:
            ///   - hint:
            ///   - optional:
            ///   - blockId:
            ///   - callId:
            ///   - apiDecorationAvailable:
            ///   - externalId:
            ///   - fileId:
            ///   - imageUrl:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - isAnimated:
            ///   - slackFile:
            ///   - altText:
            ///   - titleUrl:
            ///   - videoUrl:
            ///   - thumbnailUrl:
            ///   - authorName:
            ///   - providerName:
            ///   - providerIconUrl:
            ///   - functionTriggerId:
            ///   - appId:
            ///   - isWorkflowApp:
            ///   - salesHomeWorkflowAppType:
            ///   - appCollaborators:
            ///   - buttonLabel:
            ///   - botUserId:
            ///   - owningTeamId:
            ///   - workflowId:
            ///   - developerTraceId:
            ///   - triggerType:
            ///   - triggerSubtype:
            ///   - shareUrl:
            ///   - dispatchAction:
            public init(
                _type: Components.Schemas.BlockType? = nil,
                elements: [Components.Schemas.Accessory]? = nil,
                call: Components.Schemas.Call? = nil,
                source: Swift.String? = nil,
                file: Components.Schemas.FileElement? = nil,
                text: Components.Schemas.DescriptionElement? = nil,
                fallback: Swift.String? = nil,
                title: Components.Schemas.DescriptionElement? = nil,
                description: Components.Schemas.DescriptionElement? = nil,
                url: Swift.String? = nil,
                fields: [Components.Schemas.DescriptionElement]? = nil,
                accessory: Components.Schemas.Accessory? = nil,
                expand: Swift.Bool? = nil,
                label: Components.Schemas.DescriptionElement? = nil,
                element: Components.Schemas.Accessory? = nil,
                hint: Components.Schemas.DescriptionElement? = nil,
                optional: Swift.Bool? = nil,
                blockId: Swift.String? = nil,
                callId: Swift.String? = nil,
                apiDecorationAvailable: Swift.Bool? = nil,
                externalId: Swift.String? = nil,
                fileId: Swift.String? = nil,
                imageUrl: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                isAnimated: Swift.Bool? = nil,
                slackFile: Components.Schemas.SlackFile? = nil,
                altText: Swift.String? = nil,
                titleUrl: Swift.String? = nil,
                videoUrl: Swift.String? = nil,
                thumbnailUrl: Swift.String? = nil,
                authorName: Swift.String? = nil,
                providerName: Swift.String? = nil,
                providerIconUrl: Swift.String? = nil,
                functionTriggerId: Swift.String? = nil,
                appId: Swift.String? = nil,
                isWorkflowApp: Swift.Bool? = nil,
                salesHomeWorkflowAppType: Swift.Int? = nil,
                appCollaborators: [Swift.String]? = nil,
                buttonLabel: Swift.String? = nil,
                botUserId: Swift.String? = nil,
                owningTeamId: Swift.String? = nil,
                workflowId: Swift.String? = nil,
                developerTraceId: Swift.String? = nil,
                triggerType: Swift.String? = nil,
                triggerSubtype: Swift.String? = nil,
                shareUrl: Swift.String? = nil,
                dispatchAction: Swift.Bool? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.call = call
                self.source = source
                self.file = file
                self.text = text
                self.fallback = fallback
                self.title = title
                self.description = description
                self.url = url
                self.fields = fields
                self.accessory = accessory
                self.expand = expand
                self.label = label
                self.element = element
                self.hint = hint
                self.optional = optional
                self.blockId = blockId
                self.callId = callId
                self.apiDecorationAvailable = apiDecorationAvailable
                self.externalId = externalId
                self.fileId = fileId
                self.imageUrl = imageUrl
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.isAnimated = isAnimated
                self.slackFile = slackFile
                self.altText = altText
                self.titleUrl = titleUrl
                self.videoUrl = videoUrl
                self.thumbnailUrl = thumbnailUrl
                self.authorName = authorName
                self.providerName = providerName
                self.providerIconUrl = providerIconUrl
                self.functionTriggerId = functionTriggerId
                self.appId = appId
                self.isWorkflowApp = isWorkflowApp
                self.salesHomeWorkflowAppType = salesHomeWorkflowAppType
                self.appCollaborators = appCollaborators
                self.buttonLabel = buttonLabel
                self.botUserId = botUserId
                self.owningTeamId = owningTeamId
                self.workflowId = workflowId
                self.developerTraceId = developerTraceId
                self.triggerType = triggerType
                self.triggerSubtype = triggerSubtype
                self.shareUrl = shareUrl
                self.dispatchAction = dispatchAction
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case call
                case source
                case file
                case text
                case fallback
                case title
                case description
                case url
                case fields
                case accessory
                case expand
                case label
                case element
                case hint
                case optional
                case blockId
                case callId
                case apiDecorationAvailable
                case externalId
                case fileId
                case imageUrl
                case imageWidth
                case imageHeight
                case imageBytes
                case isAnimated
                case slackFile
                case altText
                case titleUrl
                case videoUrl
                case thumbnailUrl
                case authorName
                case providerName
                case providerIconUrl
                case functionTriggerId
                case appId
                case isWorkflowApp
                case salesHomeWorkflowAppType
                case appCollaborators
                case buttonLabel
                case botUserId
                case owningTeamId
                case workflowId
                case developerTraceId
                case triggerType
                case triggerSubtype
                case shareUrl
                case dispatchAction
            }
        }
        /// - Remark: Generated from `#/components/schemas/Pagination`.
        public struct Pagination: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Pagination/page`.
            public var page: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Pagination/first`.
            public var first: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Pagination/last`.
            public var last: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Pagination/totalCount`.
            public var totalCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Pagination/perPage`.
            public var perPage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Pagination/pageCount`.
            public var pageCount: Swift.Int?
            /// Creates a new `Pagination`.
            ///
            /// - Parameters:
            ///   - page:
            ///   - first:
            ///   - last:
            ///   - totalCount:
            ///   - perPage:
            ///   - pageCount:
            public init(
                page: Swift.Int? = nil,
                first: Swift.Int? = nil,
                last: Swift.Int? = nil,
                totalCount: Swift.Int? = nil,
                perPage: Swift.Int? = nil,
                pageCount: Swift.Int? = nil
            ) {
                self.page = page
                self.first = first
                self.last = last
                self.totalCount = totalCount
                self.perPage = perPage
                self.pageCount = pageCount
            }
            public enum CodingKeys: String, CodingKey {
                case page
                case first
                case last
                case totalCount
                case perPage
                case pageCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/Messages`.
        public struct Messages: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Messages/total`.
            public var total: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Messages/pagination`.
            public var pagination: Components.Schemas.Pagination?
            /// - Remark: Generated from `#/components/schemas/Messages/paging`.
            public var paging: Components.Schemas.Paging?
            /// - Remark: Generated from `#/components/schemas/Messages/matches`.
            public var matches: [Components.Schemas.Match]?
            /// Creates a new `Messages`.
            ///
            /// - Parameters:
            ///   - total:
            ///   - pagination:
            ///   - paging:
            ///   - matches:
            public init(
                total: Swift.Int? = nil,
                pagination: Components.Schemas.Pagination? = nil,
                paging: Components.Schemas.Paging? = nil,
                matches: [Components.Schemas.Match]? = nil
            ) {
                self.total = total
                self.pagination = pagination
                self.paging = paging
                self.matches = matches
            }
            public enum CodingKeys: String, CodingKey {
                case total
                case pagination
                case paging
                case matches
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessagesMatch`.
        public struct MessagesMatch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/iid`.
            public var iid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/team`.
            public var team: Components.Schemas.UserTeam?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/user`.
            public var user: Components.Schemas.LastEditor?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/ts`.
            public var ts: Components.Schemas.Ts?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/previous`.
            public var previous: Components.Schemas.Previous?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/score`.
            public var score: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/blocks`.
            public var blocks: [Components.Schemas.MatchTitleBlock]?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/attachments`.
            public var attachments: [Components.Schemas.Attachment]?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/files`.
            public var files: [Components.Schemas.FileElement]?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/noReactions`.
            public var noReactions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/previous2`.
            public var previous2: Components.Schemas.Previous?
            /// - Remark: Generated from `#/components/schemas/MessagesMatch/isMpim`.
            public var isMpim: Swift.Bool?
            /// Creates a new `MessagesMatch`.
            ///
            /// - Parameters:
            ///   - iid:
            ///   - team:
            ///   - channel:
            ///   - _type:
            ///   - user:
            ///   - username:
            ///   - ts:
            ///   - text:
            ///   - permalink:
            ///   - previous:
            ///   - score:
            ///   - blocks:
            ///   - attachments:
            ///   - files:
            ///   - noReactions:
            ///   - previous2:
            ///   - isMpim:
            public init(
                iid: Swift.String? = nil,
                team: Components.Schemas.UserTeam? = nil,
                channel: Components.Schemas.Channel? = nil,
                _type: Swift.String? = nil,
                user: Components.Schemas.LastEditor? = nil,
                username: Swift.String? = nil,
                ts: Components.Schemas.Ts? = nil,
                text: Swift.String? = nil,
                permalink: Swift.String? = nil,
                previous: Components.Schemas.Previous? = nil,
                score: Swift.Int? = nil,
                blocks: [Components.Schemas.MatchTitleBlock]? = nil,
                attachments: [Components.Schemas.Attachment]? = nil,
                files: [Components.Schemas.FileElement]? = nil,
                noReactions: Swift.Bool? = nil,
                previous2: Components.Schemas.Previous? = nil,
                isMpim: Swift.Bool? = nil
            ) {
                self.iid = iid
                self.team = team
                self.channel = channel
                self._type = _type
                self.user = user
                self.username = username
                self.ts = ts
                self.text = text
                self.permalink = permalink
                self.previous = previous
                self.score = score
                self.blocks = blocks
                self.attachments = attachments
                self.files = files
                self.noReactions = noReactions
                self.previous2 = previous2
                self.isMpim = isMpim
            }
            public enum CodingKeys: String, CodingKey {
                case iid
                case team
                case channel
                case _type = "type"
                case user
                case username
                case ts
                case text
                case permalink
                case previous
                case score
                case blocks
                case attachments
                case files
                case noReactions
                case previous2
                case isMpim
            }
        }
        /// - Remark: Generated from `#/components/schemas/Previous`.
        public struct Previous: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Previous/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Previous/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Previous/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Previous/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Previous/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Previous/iid`.
            public var iid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Previous/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Previous/attachments`.
            public var attachments: [Components.Schemas.Attachment]?
            /// - Remark: Generated from `#/components/schemas/Previous/blocks`.
            public var blocks: [Components.Schemas.MatchBlock]?
            /// Creates a new `Previous`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - user:
            ///   - username:
            ///   - ts:
            ///   - text:
            ///   - iid:
            ///   - permalink:
            ///   - attachments:
            ///   - blocks:
            public init(
                _type: Swift.String? = nil,
                user: Swift.String? = nil,
                username: Swift.String? = nil,
                ts: Swift.String? = nil,
                text: Swift.String? = nil,
                iid: Swift.String? = nil,
                permalink: Swift.String? = nil,
                attachments: [Components.Schemas.Attachment]? = nil,
                blocks: [Components.Schemas.MatchBlock]? = nil
            ) {
                self._type = _type
                self.user = user
                self.username = username
                self.ts = ts
                self.text = text
                self.iid = iid
                self.permalink = permalink
                self.attachments = attachments
                self.blocks = blocks
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case user
                case username
                case ts
                case text
                case iid
                case permalink
                case attachments
                case blocks
            }
        }
        /// - Remark: Generated from `#/components/schemas/Posts`.
        public struct Posts: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Posts/total`.
            public var total: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Posts/matches`.
            public var matches: [Swift.String]?
            /// Creates a new `Posts`.
            ///
            /// - Parameters:
            ///   - total:
            ///   - matches:
            public init(
                total: Swift.Int? = nil,
                matches: [Swift.String]? = nil
            ) {
                self.total = total
                self.matches = matches
            }
            public enum CodingKeys: String, CodingKey {
                case total
                case matches
            }
        }
        /// - Remark: Generated from `#/components/schemas/LastEditor`.
        @frozen public enum LastEditor: String, Codable, Hashable, Sendable, CaseIterable {
            case _empty_ = ""
            case u00000000 = "U00000000"
        }
        /// - Remark: Generated from `#/components/schemas/UserTeam`.
        @frozen public enum UserTeam: String, Codable, Hashable, Sendable, CaseIterable {
            case _empty_ = ""
            case t00000000 = "T00000000"
        }
        /// - Remark: Generated from `#/components/schemas/Ts`.
        @frozen public enum Ts: String, Codable, Hashable, Sendable, CaseIterable {
            case _empty_ = ""
            case _0000000000_000000 = "0000000000.000000"
        }
        /// - Remark: Generated from `#/components/schemas/SearchFilesResponse`.
        public struct SearchFilesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SearchFilesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/SearchFilesResponse/query`.
            public var query: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchFilesResponse/files`.
            public var files: Components.Schemas.Files?
            /// - Remark: Generated from `#/components/schemas/SearchFilesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchFilesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchFilesResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `SearchFilesResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - query:
            ///   - files:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                query: Swift.String? = nil,
                files: Components.Schemas.Files? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.query = query
                self.files = files
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case query
                case files
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Match`.
        public struct Match: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Match/iid`.
            public var iid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Match/team`.
            public var team: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Match/channel`.
            public var channel: Components.Schemas.Channel?
            /// - Remark: Generated from `#/components/schemas/Match/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Match/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Match/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Match/ts`.
            public var ts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Match/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Match/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Match/previous`.
            public var previous: Components.Schemas.Previous?
            /// - Remark: Generated from `#/components/schemas/Match/score`.
            public var score: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Match/blocks`.
            public var blocks: [Components.Schemas.MatchBlock]?
            /// - Remark: Generated from `#/components/schemas/Match/attachments`.
            public var attachments: [Components.Schemas.Attachment]?
            /// - Remark: Generated from `#/components/schemas/Match/files`.
            public var files: [Components.Schemas.FileElement]?
            /// - Remark: Generated from `#/components/schemas/Match/noReactions`.
            public var noReactions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Match/previous2`.
            public var previous2: Components.Schemas.Previous?
            /// - Remark: Generated from `#/components/schemas/Match/isMpim`.
            public var isMpim: Swift.Bool?
            /// Creates a new `Match`.
            ///
            /// - Parameters:
            ///   - iid:
            ///   - team:
            ///   - channel:
            ///   - _type:
            ///   - user:
            ///   - username:
            ///   - ts:
            ///   - text:
            ///   - permalink:
            ///   - previous:
            ///   - score:
            ///   - blocks:
            ///   - attachments:
            ///   - files:
            ///   - noReactions:
            ///   - previous2:
            ///   - isMpim:
            public init(
                iid: Swift.String? = nil,
                team: Swift.String? = nil,
                channel: Components.Schemas.Channel? = nil,
                _type: Swift.String? = nil,
                user: Swift.String? = nil,
                username: Swift.String? = nil,
                ts: Swift.String? = nil,
                text: Swift.String? = nil,
                permalink: Swift.String? = nil,
                previous: Components.Schemas.Previous? = nil,
                score: Swift.Int? = nil,
                blocks: [Components.Schemas.MatchBlock]? = nil,
                attachments: [Components.Schemas.Attachment]? = nil,
                files: [Components.Schemas.FileElement]? = nil,
                noReactions: Swift.Bool? = nil,
                previous2: Components.Schemas.Previous? = nil,
                isMpim: Swift.Bool? = nil
            ) {
                self.iid = iid
                self.team = team
                self.channel = channel
                self._type = _type
                self.user = user
                self.username = username
                self.ts = ts
                self.text = text
                self.permalink = permalink
                self.previous = previous
                self.score = score
                self.blocks = blocks
                self.attachments = attachments
                self.files = files
                self.noReactions = noReactions
                self.previous2 = previous2
                self.isMpim = isMpim
            }
            public enum CodingKeys: String, CodingKey {
                case iid
                case team
                case channel
                case _type = "type"
                case user
                case username
                case ts
                case text
                case permalink
                case previous
                case score
                case blocks
                case attachments
                case files
                case noReactions
                case previous2
                case isMpim
            }
        }
        /// - Remark: Generated from `#/components/schemas/TitleBlock`.
        public struct TitleBlock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TitleBlock/type`.
            public var _type: Components.Schemas.BlockType?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/elements`.
            public var elements: [Components.Schemas.Accessory]?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/file`.
            public var file: Components.Schemas.FileElement?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/text`.
            public var text: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/title`.
            public var title: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/description`.
            public var description: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/fields`.
            public var fields: [Components.Schemas.DescriptionElement]?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/accessory`.
            public var accessory: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/expand`.
            public var expand: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/label`.
            public var label: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/element`.
            public var element: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/hint`.
            public var hint: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/optional`.
            public var optional: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/blockId`.
            public var blockId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/callId`.
            public var callId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/apiDecorationAvailable`.
            public var apiDecorationAvailable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/fileId`.
            public var fileId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/isAnimated`.
            public var isAnimated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/titleUrl`.
            public var titleUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/videoUrl`.
            public var videoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/thumbnailUrl`.
            public var thumbnailUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/authorName`.
            public var authorName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/providerName`.
            public var providerName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/providerIconUrl`.
            public var providerIconUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/functionTriggerId`.
            public var functionTriggerId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/isWorkflowApp`.
            public var isWorkflowApp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/salesHomeWorkflowAppType`.
            public var salesHomeWorkflowAppType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/appCollaborators`.
            public var appCollaborators: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/buttonLabel`.
            public var buttonLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/botUserId`.
            public var botUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/owningTeamId`.
            public var owningTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/workflowId`.
            public var workflowId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/developerTraceId`.
            public var developerTraceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/triggerType`.
            public var triggerType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/triggerSubtype`.
            public var triggerSubtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/shareUrl`.
            public var shareUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TitleBlock/dispatchAction`.
            public var dispatchAction: Swift.Bool?
            /// Creates a new `TitleBlock`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - call:
            ///   - source:
            ///   - file:
            ///   - text:
            ///   - fallback:
            ///   - title:
            ///   - description:
            ///   - url:
            ///   - fields:
            ///   - accessory:
            ///   - expand:
            ///   - label:
            ///   - element:
            ///   - hint:
            ///   - optional:
            ///   - blockId:
            ///   - callId:
            ///   - apiDecorationAvailable:
            ///   - externalId:
            ///   - fileId:
            ///   - imageUrl:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - isAnimated:
            ///   - slackFile:
            ///   - altText:
            ///   - titleUrl:
            ///   - videoUrl:
            ///   - thumbnailUrl:
            ///   - authorName:
            ///   - providerName:
            ///   - providerIconUrl:
            ///   - functionTriggerId:
            ///   - appId:
            ///   - isWorkflowApp:
            ///   - salesHomeWorkflowAppType:
            ///   - appCollaborators:
            ///   - buttonLabel:
            ///   - botUserId:
            ///   - owningTeamId:
            ///   - workflowId:
            ///   - developerTraceId:
            ///   - triggerType:
            ///   - triggerSubtype:
            ///   - shareUrl:
            ///   - dispatchAction:
            public init(
                _type: Components.Schemas.BlockType? = nil,
                elements: [Components.Schemas.Accessory]? = nil,
                call: Components.Schemas.Call? = nil,
                source: Swift.String? = nil,
                file: Components.Schemas.FileElement? = nil,
                text: Components.Schemas.DescriptionElement? = nil,
                fallback: Swift.String? = nil,
                title: Components.Schemas.DescriptionElement? = nil,
                description: Components.Schemas.DescriptionElement? = nil,
                url: Swift.String? = nil,
                fields: [Components.Schemas.DescriptionElement]? = nil,
                accessory: Components.Schemas.Accessory? = nil,
                expand: Swift.Bool? = nil,
                label: Components.Schemas.DescriptionElement? = nil,
                element: Components.Schemas.Accessory? = nil,
                hint: Components.Schemas.DescriptionElement? = nil,
                optional: Swift.Bool? = nil,
                blockId: Swift.String? = nil,
                callId: Swift.String? = nil,
                apiDecorationAvailable: Swift.Bool? = nil,
                externalId: Swift.String? = nil,
                fileId: Swift.String? = nil,
                imageUrl: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                isAnimated: Swift.Bool? = nil,
                slackFile: Components.Schemas.SlackFile? = nil,
                altText: Swift.String? = nil,
                titleUrl: Swift.String? = nil,
                videoUrl: Swift.String? = nil,
                thumbnailUrl: Swift.String? = nil,
                authorName: Swift.String? = nil,
                providerName: Swift.String? = nil,
                providerIconUrl: Swift.String? = nil,
                functionTriggerId: Swift.String? = nil,
                appId: Swift.String? = nil,
                isWorkflowApp: Swift.Bool? = nil,
                salesHomeWorkflowAppType: Swift.Int? = nil,
                appCollaborators: [Swift.String]? = nil,
                buttonLabel: Swift.String? = nil,
                botUserId: Swift.String? = nil,
                owningTeamId: Swift.String? = nil,
                workflowId: Swift.String? = nil,
                developerTraceId: Swift.String? = nil,
                triggerType: Swift.String? = nil,
                triggerSubtype: Swift.String? = nil,
                shareUrl: Swift.String? = nil,
                dispatchAction: Swift.Bool? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.call = call
                self.source = source
                self.file = file
                self.text = text
                self.fallback = fallback
                self.title = title
                self.description = description
                self.url = url
                self.fields = fields
                self.accessory = accessory
                self.expand = expand
                self.label = label
                self.element = element
                self.hint = hint
                self.optional = optional
                self.blockId = blockId
                self.callId = callId
                self.apiDecorationAvailable = apiDecorationAvailable
                self.externalId = externalId
                self.fileId = fileId
                self.imageUrl = imageUrl
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.isAnimated = isAnimated
                self.slackFile = slackFile
                self.altText = altText
                self.titleUrl = titleUrl
                self.videoUrl = videoUrl
                self.thumbnailUrl = thumbnailUrl
                self.authorName = authorName
                self.providerName = providerName
                self.providerIconUrl = providerIconUrl
                self.functionTriggerId = functionTriggerId
                self.appId = appId
                self.isWorkflowApp = isWorkflowApp
                self.salesHomeWorkflowAppType = salesHomeWorkflowAppType
                self.appCollaborators = appCollaborators
                self.buttonLabel = buttonLabel
                self.botUserId = botUserId
                self.owningTeamId = owningTeamId
                self.workflowId = workflowId
                self.developerTraceId = developerTraceId
                self.triggerType = triggerType
                self.triggerSubtype = triggerSubtype
                self.shareUrl = shareUrl
                self.dispatchAction = dispatchAction
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case call
                case source
                case file
                case text
                case fallback
                case title
                case description
                case url
                case fields
                case accessory
                case expand
                case label
                case element
                case hint
                case optional
                case blockId
                case callId
                case apiDecorationAvailable
                case externalId
                case fileId
                case imageUrl
                case imageWidth
                case imageHeight
                case imageBytes
                case isAnimated
                case slackFile
                case altText
                case titleUrl
                case videoUrl
                case thumbnailUrl
                case authorName
                case providerName
                case providerIconUrl
                case functionTriggerId
                case appId
                case isWorkflowApp
                case salesHomeWorkflowAppType
                case appCollaborators
                case buttonLabel
                case botUserId
                case owningTeamId
                case workflowId
                case developerTraceId
                case triggerType
                case triggerSubtype
                case shareUrl
                case dispatchAction
            }
        }
        /// - Remark: Generated from `#/components/schemas/SearchMessagesResponse`.
        public struct SearchMessagesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SearchMessagesResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/SearchMessagesResponse/query`.
            public var query: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchMessagesResponse/messages`.
            public var messages: Components.Schemas.Messages?
            /// - Remark: Generated from `#/components/schemas/SearchMessagesResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchMessagesResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchMessagesResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `SearchMessagesResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - query:
            ///   - messages:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                query: Swift.String? = nil,
                messages: Components.Schemas.Messages? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.query = query
                self.messages = messages
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case query
                case messages
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/MatchBlock`.
        public struct MatchBlock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MatchBlock/type`.
            public var _type: Components.Schemas.BlockType?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/elements`.
            public var elements: [Components.Schemas.Accessory]?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/call`.
            public var call: Components.Schemas.Call?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/file`.
            public var file: Components.Schemas.FileElement?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/text`.
            public var text: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/title`.
            public var title: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/description`.
            public var description: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/fields`.
            public var fields: [Components.Schemas.DescriptionElement]?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/accessory`.
            public var accessory: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/expand`.
            public var expand: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/label`.
            public var label: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/element`.
            public var element: Components.Schemas.Accessory?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/hint`.
            public var hint: Components.Schemas.DescriptionElement?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/optional`.
            public var optional: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/blockId`.
            public var blockId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/callId`.
            public var callId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/apiDecorationAvailable`.
            public var apiDecorationAvailable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/fileId`.
            public var fileId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/isAnimated`.
            public var isAnimated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/titleUrl`.
            public var titleUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/videoUrl`.
            public var videoUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/thumbnailUrl`.
            public var thumbnailUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/authorName`.
            public var authorName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/providerName`.
            public var providerName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/providerIconUrl`.
            public var providerIconUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/functionTriggerId`.
            public var functionTriggerId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/isWorkflowApp`.
            public var isWorkflowApp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/salesHomeWorkflowAppType`.
            public var salesHomeWorkflowAppType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/appCollaborators`.
            public var appCollaborators: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/buttonLabel`.
            public var buttonLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/botUserId`.
            public var botUserId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/owningTeamId`.
            public var owningTeamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/workflowId`.
            public var workflowId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/developerTraceId`.
            public var developerTraceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/triggerType`.
            public var triggerType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/triggerSubtype`.
            public var triggerSubtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/shareUrl`.
            public var shareUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MatchBlock/dispatchAction`.
            public var dispatchAction: Swift.Bool?
            /// Creates a new `MatchBlock`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - call:
            ///   - source:
            ///   - file:
            ///   - text:
            ///   - fallback:
            ///   - title:
            ///   - description:
            ///   - url:
            ///   - fields:
            ///   - accessory:
            ///   - expand:
            ///   - label:
            ///   - element:
            ///   - hint:
            ///   - optional:
            ///   - blockId:
            ///   - callId:
            ///   - apiDecorationAvailable:
            ///   - externalId:
            ///   - fileId:
            ///   - imageUrl:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - isAnimated:
            ///   - slackFile:
            ///   - altText:
            ///   - titleUrl:
            ///   - videoUrl:
            ///   - thumbnailUrl:
            ///   - authorName:
            ///   - providerName:
            ///   - providerIconUrl:
            ///   - functionTriggerId:
            ///   - appId:
            ///   - isWorkflowApp:
            ///   - salesHomeWorkflowAppType:
            ///   - appCollaborators:
            ///   - buttonLabel:
            ///   - botUserId:
            ///   - owningTeamId:
            ///   - workflowId:
            ///   - developerTraceId:
            ///   - triggerType:
            ///   - triggerSubtype:
            ///   - shareUrl:
            ///   - dispatchAction:
            public init(
                _type: Components.Schemas.BlockType? = nil,
                elements: [Components.Schemas.Accessory]? = nil,
                call: Components.Schemas.Call? = nil,
                source: Swift.String? = nil,
                file: Components.Schemas.FileElement? = nil,
                text: Components.Schemas.DescriptionElement? = nil,
                fallback: Swift.String? = nil,
                title: Components.Schemas.DescriptionElement? = nil,
                description: Components.Schemas.DescriptionElement? = nil,
                url: Swift.String? = nil,
                fields: [Components.Schemas.DescriptionElement]? = nil,
                accessory: Components.Schemas.Accessory? = nil,
                expand: Swift.Bool? = nil,
                label: Components.Schemas.DescriptionElement? = nil,
                element: Components.Schemas.Accessory? = nil,
                hint: Components.Schemas.DescriptionElement? = nil,
                optional: Swift.Bool? = nil,
                blockId: Swift.String? = nil,
                callId: Swift.String? = nil,
                apiDecorationAvailable: Swift.Bool? = nil,
                externalId: Swift.String? = nil,
                fileId: Swift.String? = nil,
                imageUrl: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                isAnimated: Swift.Bool? = nil,
                slackFile: Components.Schemas.SlackFile? = nil,
                altText: Swift.String? = nil,
                titleUrl: Swift.String? = nil,
                videoUrl: Swift.String? = nil,
                thumbnailUrl: Swift.String? = nil,
                authorName: Swift.String? = nil,
                providerName: Swift.String? = nil,
                providerIconUrl: Swift.String? = nil,
                functionTriggerId: Swift.String? = nil,
                appId: Swift.String? = nil,
                isWorkflowApp: Swift.Bool? = nil,
                salesHomeWorkflowAppType: Swift.Int? = nil,
                appCollaborators: [Swift.String]? = nil,
                buttonLabel: Swift.String? = nil,
                botUserId: Swift.String? = nil,
                owningTeamId: Swift.String? = nil,
                workflowId: Swift.String? = nil,
                developerTraceId: Swift.String? = nil,
                triggerType: Swift.String? = nil,
                triggerSubtype: Swift.String? = nil,
                shareUrl: Swift.String? = nil,
                dispatchAction: Swift.Bool? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.call = call
                self.source = source
                self.file = file
                self.text = text
                self.fallback = fallback
                self.title = title
                self.description = description
                self.url = url
                self.fields = fields
                self.accessory = accessory
                self.expand = expand
                self.label = label
                self.element = element
                self.hint = hint
                self.optional = optional
                self.blockId = blockId
                self.callId = callId
                self.apiDecorationAvailable = apiDecorationAvailable
                self.externalId = externalId
                self.fileId = fileId
                self.imageUrl = imageUrl
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.isAnimated = isAnimated
                self.slackFile = slackFile
                self.altText = altText
                self.titleUrl = titleUrl
                self.videoUrl = videoUrl
                self.thumbnailUrl = thumbnailUrl
                self.authorName = authorName
                self.providerName = providerName
                self.providerIconUrl = providerIconUrl
                self.functionTriggerId = functionTriggerId
                self.appId = appId
                self.isWorkflowApp = isWorkflowApp
                self.salesHomeWorkflowAppType = salesHomeWorkflowAppType
                self.appCollaborators = appCollaborators
                self.buttonLabel = buttonLabel
                self.botUserId = botUserId
                self.owningTeamId = owningTeamId
                self.workflowId = workflowId
                self.developerTraceId = developerTraceId
                self.triggerType = triggerType
                self.triggerSubtype = triggerSubtype
                self.shareUrl = shareUrl
                self.dispatchAction = dispatchAction
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case call
                case source
                case file
                case text
                case fallback
                case title
                case description
                case url
                case fields
                case accessory
                case expand
                case label
                case element
                case hint
                case optional
                case blockId
                case callId
                case apiDecorationAvailable
                case externalId
                case fileId
                case imageUrl
                case imageWidth
                case imageHeight
                case imageBytes
                case isAnimated
                case slackFile
                case altText
                case titleUrl
                case videoUrl
                case thumbnailUrl
                case authorName
                case providerName
                case providerIconUrl
                case functionTriggerId
                case appId
                case isWorkflowApp
                case salesHomeWorkflowAppType
                case appCollaborators
                case buttonLabel
                case botUserId
                case owningTeamId
                case workflowId
                case developerTraceId
                case triggerType
                case triggerSubtype
                case shareUrl
                case dispatchAction
            }
        }
        /// - Remark: Generated from `#/components/schemas/StarsAddResponse`.
        public struct StarsAddResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StarsAddResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/StarsAddResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StarsAddResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StarsAddResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `StarsAddResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/StarsListResponse`.
        public struct StarsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StarsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/StarsListResponse/items`.
            public var items: [Components.Schemas.Item]?
            /// - Remark: Generated from `#/components/schemas/StarsListResponse/paging`.
            public var paging: Components.Schemas.Paging?
            /// - Remark: Generated from `#/components/schemas/StarsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StarsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StarsListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `StarsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - items:
            ///   - paging:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                items: [Components.Schemas.Item]? = nil,
                paging: Components.Schemas.Paging? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.items = items
                self.paging = paging
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case items
                case paging
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ItemFile`.
        public struct ItemFile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ItemFile/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/created`.
            public var created: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/timestamp`.
            public var timestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/subject`.
            public var subject: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/mimetype`.
            public var mimetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/filetype`.
            public var filetype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/mode`.
            public var mode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/editable`.
            public var editable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/editor`.
            public var editor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/subtype`.
            public var subtype: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/transcription`.
            public var transcription: Components.Schemas.Transcription?
            /// - Remark: Generated from `#/components/schemas/ItemFile/mp4`.
            public var mp4: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/vtt`.
            public var vtt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/hls`.
            public var hls: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/deanimate`.
            public var deanimate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/pjpeg`.
            public var pjpeg: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/permalink`.
            public var permalink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/preview`.
            public var preview: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/lines`.
            public var lines: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/channels`.
            public var channels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ItemFile/groups`.
            public var groups: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ItemFile/ims`.
            public var ims: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ItemFile/shares`.
            public var shares: Components.Schemas.Shares?
            /// - Remark: Generated from `#/components/schemas/ItemFile/to`.
            public var to: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/ItemFile/from`.
            public var from: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/ItemFile/cc`.
            public var cc: [Components.Schemas.Cc]?
            /// - Remark: Generated from `#/components/schemas/ItemFile/headers`.
            public var headers: Components.Schemas.Headers?
            /// - Remark: Generated from `#/components/schemas/ItemFile/saved`.
            public var saved: Components.Schemas.Saved?
            /// - Remark: Generated from `#/components/schemas/ItemFile/reactions`.
            public var reactions: [Components.Schemas.Reaction]?
            /// - Remark: Generated from `#/components/schemas/ItemFile/prettyType`.
            public var prettyType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/userTeam`.
            public var userTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/sourceTeam`.
            public var sourceTeam: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/nonOwnerEditable`.
            public var nonOwnerEditable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/lastEditor`.
            public var lastEditor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/fileAccess`.
            public var fileAccess: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/altTxt`.
            public var altTxt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/mp4Low`.
            public var mp4Low: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/hlsEmbed`.
            public var hlsEmbed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/durationMs`.
            public var durationMs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumbVideoW`.
            public var thumbVideoW: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumbVideoH`.
            public var thumbVideoH: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/originalAttachmentCount`.
            public var originalAttachmentCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/isExternal`.
            public var isExternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/externalType`.
            public var externalType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/externalId`.
            public var externalId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/externalUrl`.
            public var externalUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/urlPrivate`.
            public var urlPrivate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/urlPrivateDownload`.
            public var urlPrivateDownload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/appName`.
            public var appName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb64`.
            public var thumb64: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb64Gif`.
            public var thumb64Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb64W`.
            public var thumb64W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb64H`.
            public var thumb64H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb80`.
            public var thumb80: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb80Gif`.
            public var thumb80Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb80W`.
            public var thumb80W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb80H`.
            public var thumb80H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb160`.
            public var thumb160: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb160Gif`.
            public var thumb160Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb160W`.
            public var thumb160W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb160H`.
            public var thumb160H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb360`.
            public var thumb360: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb360Gif`.
            public var thumb360Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb360W`.
            public var thumb360W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb360H`.
            public var thumb360H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb480`.
            public var thumb480: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb480Gif`.
            public var thumb480Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb480W`.
            public var thumb480W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb480H`.
            public var thumb480H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb720`.
            public var thumb720: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb720Gif`.
            public var thumb720Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb720W`.
            public var thumb720W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb720H`.
            public var thumb720H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb800`.
            public var thumb800: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb800Gif`.
            public var thumb800Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb800W`.
            public var thumb800W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb800H`.
            public var thumb800H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb960`.
            public var thumb960: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb960Gif`.
            public var thumb960Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb960W`.
            public var thumb960W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb960H`.
            public var thumb960H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb1024`.
            public var thumb1024: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb1024Gif`.
            public var thumb1024Gif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb1024W`.
            public var thumb1024W: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumb1024H`.
            public var thumb1024H: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumbVideo`.
            public var thumbVideo: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumbGif`.
            public var thumbGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumbPdf`.
            public var thumbPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumbPdfW`.
            public var thumbPdfW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumbPdfH`.
            public var thumbPdfH: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/thumbTiny`.
            public var thumbTiny: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/convertedPdf`.
            public var convertedPdf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/imageExifRotation`.
            public var imageExifRotation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/originalW`.
            public var originalW: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/originalH`.
            public var originalH: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/deanimateGif`.
            public var deanimateGif: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/permalinkPublic`.
            public var permalinkPublic: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/editLink`.
            public var editLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/hasRichPreview`.
            public var hasRichPreview: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/mediaDisplayType`.
            public var mediaDisplayType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/previewIsTruncated`.
            public var previewIsTruncated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/previewHighlight`.
            public var previewHighlight: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/plainText`.
            public var plainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/previewPlainText`.
            public var previewPlainText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/hasMore`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/sentToSelf`.
            public var sentToSelf: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/linesMore`.
            public var linesMore: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/isPublic`.
            public var isPublic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/publicUrlShared`.
            public var publicUrlShared: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/displayAsBot`.
            public var displayAsBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/hasMoreShares`.
            public var hasMoreShares: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/channelActionsTs`.
            public var channelActionsTs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/channelActionsCount`.
            public var channelActionsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/simplifiedHtml`.
            public var simplifiedHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/mediaProgress`.
            public var mediaProgress: Components.Schemas.MediaProgress?
            /// - Remark: Generated from `#/components/schemas/ItemFile/botId`.
            public var botId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ItemFile/initialComment`.
            public var initialComment: Components.Schemas.Comment?
            /// - Remark: Generated from `#/components/schemas/ItemFile/numStars`.
            public var numStars: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ItemFile/isStarred`.
            public var isStarred: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ItemFile/pinnedTo`.
            public var pinnedTo: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ItemFile/commentsCount`.
            public var commentsCount: Swift.Int?
            /// Creates a new `ItemFile`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created:
            ///   - timestamp:
            ///   - name:
            ///   - title:
            ///   - subject:
            ///   - mimetype:
            ///   - filetype:
            ///   - user:
            ///   - mode:
            ///   - editable:
            ///   - editor:
            ///   - updated:
            ///   - subtype:
            ///   - transcription:
            ///   - mp4:
            ///   - vtt:
            ///   - hls:
            ///   - username:
            ///   - size:
            ///   - deanimate:
            ///   - pjpeg:
            ///   - permalink:
            ///   - preview:
            ///   - lines:
            ///   - channels:
            ///   - groups:
            ///   - ims:
            ///   - shares:
            ///   - to:
            ///   - from:
            ///   - cc:
            ///   - headers:
            ///   - saved:
            ///   - reactions:
            ///   - prettyType:
            ///   - userTeam:
            ///   - sourceTeam:
            ///   - nonOwnerEditable:
            ///   - lastEditor:
            ///   - fileAccess:
            ///   - altTxt:
            ///   - mp4Low:
            ///   - hlsEmbed:
            ///   - durationMs:
            ///   - thumbVideoW:
            ///   - thumbVideoH:
            ///   - originalAttachmentCount:
            ///   - isExternal:
            ///   - externalType:
            ///   - externalId:
            ///   - externalUrl:
            ///   - urlPrivate:
            ///   - urlPrivateDownload:
            ///   - appId:
            ///   - appName:
            ///   - thumb64:
            ///   - thumb64Gif:
            ///   - thumb64W:
            ///   - thumb64H:
            ///   - thumb80:
            ///   - thumb80Gif:
            ///   - thumb80W:
            ///   - thumb80H:
            ///   - thumb160:
            ///   - thumb160Gif:
            ///   - thumb160W:
            ///   - thumb160H:
            ///   - thumb360:
            ///   - thumb360Gif:
            ///   - thumb360W:
            ///   - thumb360H:
            ///   - thumb480:
            ///   - thumb480Gif:
            ///   - thumb480W:
            ///   - thumb480H:
            ///   - thumb720:
            ///   - thumb720Gif:
            ///   - thumb720W:
            ///   - thumb720H:
            ///   - thumb800:
            ///   - thumb800Gif:
            ///   - thumb800W:
            ///   - thumb800H:
            ///   - thumb960:
            ///   - thumb960Gif:
            ///   - thumb960W:
            ///   - thumb960H:
            ///   - thumb1024:
            ///   - thumb1024Gif:
            ///   - thumb1024W:
            ///   - thumb1024H:
            ///   - thumbVideo:
            ///   - thumbGif:
            ///   - thumbPdf:
            ///   - thumbPdfW:
            ///   - thumbPdfH:
            ///   - thumbTiny:
            ///   - convertedPdf:
            ///   - imageExifRotation:
            ///   - originalW:
            ///   - originalH:
            ///   - deanimateGif:
            ///   - permalinkPublic:
            ///   - editLink:
            ///   - hasRichPreview:
            ///   - mediaDisplayType:
            ///   - previewIsTruncated:
            ///   - previewHighlight:
            ///   - plainText:
            ///   - previewPlainText:
            ///   - hasMore:
            ///   - sentToSelf:
            ///   - linesMore:
            ///   - isPublic:
            ///   - publicUrlShared:
            ///   - displayAsBot:
            ///   - hasMoreShares:
            ///   - channelActionsTs:
            ///   - channelActionsCount:
            ///   - simplifiedHtml:
            ///   - mediaProgress:
            ///   - botId:
            ///   - initialComment:
            ///   - numStars:
            ///   - isStarred:
            ///   - pinnedTo:
            ///   - commentsCount:
            public init(
                id: Swift.String? = nil,
                created: Swift.Int? = nil,
                timestamp: Swift.Int? = nil,
                name: Swift.String? = nil,
                title: Swift.String? = nil,
                subject: Swift.String? = nil,
                mimetype: Swift.String? = nil,
                filetype: Swift.String? = nil,
                user: Swift.String? = nil,
                mode: Swift.String? = nil,
                editable: Swift.Bool? = nil,
                editor: Swift.String? = nil,
                updated: Swift.Int? = nil,
                subtype: Swift.String? = nil,
                transcription: Components.Schemas.Transcription? = nil,
                mp4: Swift.String? = nil,
                vtt: Swift.String? = nil,
                hls: Swift.String? = nil,
                username: Swift.String? = nil,
                size: Swift.Int? = nil,
                deanimate: Swift.String? = nil,
                pjpeg: Swift.String? = nil,
                permalink: Swift.String? = nil,
                preview: Swift.String? = nil,
                lines: Swift.Int? = nil,
                channels: [Swift.String]? = nil,
                groups: [Swift.String]? = nil,
                ims: [Swift.String]? = nil,
                shares: Components.Schemas.Shares? = nil,
                to: [Components.Schemas.Cc]? = nil,
                from: [Components.Schemas.Cc]? = nil,
                cc: [Components.Schemas.Cc]? = nil,
                headers: Components.Schemas.Headers? = nil,
                saved: Components.Schemas.Saved? = nil,
                reactions: [Components.Schemas.Reaction]? = nil,
                prettyType: Swift.String? = nil,
                userTeam: Swift.String? = nil,
                sourceTeam: Swift.String? = nil,
                nonOwnerEditable: Swift.Bool? = nil,
                lastEditor: Swift.String? = nil,
                fileAccess: Swift.String? = nil,
                altTxt: Swift.String? = nil,
                mp4Low: Swift.String? = nil,
                hlsEmbed: Swift.String? = nil,
                durationMs: Swift.Int? = nil,
                thumbVideoW: Swift.Int? = nil,
                thumbVideoH: Swift.Int? = nil,
                originalAttachmentCount: Swift.Int? = nil,
                isExternal: Swift.Bool? = nil,
                externalType: Swift.String? = nil,
                externalId: Swift.String? = nil,
                externalUrl: Swift.String? = nil,
                urlPrivate: Swift.String? = nil,
                urlPrivateDownload: Swift.String? = nil,
                appId: Swift.String? = nil,
                appName: Swift.String? = nil,
                thumb64: Swift.String? = nil,
                thumb64Gif: Swift.String? = nil,
                thumb64W: Swift.String? = nil,
                thumb64H: Swift.String? = nil,
                thumb80: Swift.String? = nil,
                thumb80Gif: Swift.String? = nil,
                thumb80W: Swift.String? = nil,
                thumb80H: Swift.String? = nil,
                thumb160: Swift.String? = nil,
                thumb160Gif: Swift.String? = nil,
                thumb160W: Swift.String? = nil,
                thumb160H: Swift.String? = nil,
                thumb360: Swift.String? = nil,
                thumb360Gif: Swift.String? = nil,
                thumb360W: Swift.String? = nil,
                thumb360H: Swift.String? = nil,
                thumb480: Swift.String? = nil,
                thumb480Gif: Swift.String? = nil,
                thumb480W: Swift.String? = nil,
                thumb480H: Swift.String? = nil,
                thumb720: Swift.String? = nil,
                thumb720Gif: Swift.String? = nil,
                thumb720W: Swift.String? = nil,
                thumb720H: Swift.String? = nil,
                thumb800: Swift.String? = nil,
                thumb800Gif: Swift.String? = nil,
                thumb800W: Swift.String? = nil,
                thumb800H: Swift.String? = nil,
                thumb960: Swift.String? = nil,
                thumb960Gif: Swift.String? = nil,
                thumb960W: Swift.String? = nil,
                thumb960H: Swift.String? = nil,
                thumb1024: Swift.String? = nil,
                thumb1024Gif: Swift.String? = nil,
                thumb1024W: Swift.String? = nil,
                thumb1024H: Swift.String? = nil,
                thumbVideo: Swift.String? = nil,
                thumbGif: Swift.String? = nil,
                thumbPdf: Swift.String? = nil,
                thumbPdfW: Swift.String? = nil,
                thumbPdfH: Swift.String? = nil,
                thumbTiny: Swift.String? = nil,
                convertedPdf: Swift.String? = nil,
                imageExifRotation: Swift.Int? = nil,
                originalW: Swift.String? = nil,
                originalH: Swift.String? = nil,
                deanimateGif: Swift.String? = nil,
                permalinkPublic: Swift.String? = nil,
                editLink: Swift.String? = nil,
                hasRichPreview: Swift.Bool? = nil,
                mediaDisplayType: Swift.String? = nil,
                previewIsTruncated: Swift.Bool? = nil,
                previewHighlight: Swift.String? = nil,
                plainText: Swift.String? = nil,
                previewPlainText: Swift.String? = nil,
                hasMore: Swift.Bool? = nil,
                sentToSelf: Swift.Bool? = nil,
                linesMore: Swift.Int? = nil,
                isPublic: Swift.Bool? = nil,
                publicUrlShared: Swift.Bool? = nil,
                displayAsBot: Swift.Bool? = nil,
                hasMoreShares: Swift.Bool? = nil,
                channelActionsTs: Swift.String? = nil,
                channelActionsCount: Swift.Int? = nil,
                simplifiedHtml: Swift.String? = nil,
                mediaProgress: Components.Schemas.MediaProgress? = nil,
                botId: Swift.String? = nil,
                initialComment: Components.Schemas.Comment? = nil,
                numStars: Swift.Int? = nil,
                isStarred: Swift.Bool? = nil,
                pinnedTo: [Swift.String]? = nil,
                commentsCount: Swift.Int? = nil
            ) {
                self.id = id
                self.created = created
                self.timestamp = timestamp
                self.name = name
                self.title = title
                self.subject = subject
                self.mimetype = mimetype
                self.filetype = filetype
                self.user = user
                self.mode = mode
                self.editable = editable
                self.editor = editor
                self.updated = updated
                self.subtype = subtype
                self.transcription = transcription
                self.mp4 = mp4
                self.vtt = vtt
                self.hls = hls
                self.username = username
                self.size = size
                self.deanimate = deanimate
                self.pjpeg = pjpeg
                self.permalink = permalink
                self.preview = preview
                self.lines = lines
                self.channels = channels
                self.groups = groups
                self.ims = ims
                self.shares = shares
                self.to = to
                self.from = from
                self.cc = cc
                self.headers = headers
                self.saved = saved
                self.reactions = reactions
                self.prettyType = prettyType
                self.userTeam = userTeam
                self.sourceTeam = sourceTeam
                self.nonOwnerEditable = nonOwnerEditable
                self.lastEditor = lastEditor
                self.fileAccess = fileAccess
                self.altTxt = altTxt
                self.mp4Low = mp4Low
                self.hlsEmbed = hlsEmbed
                self.durationMs = durationMs
                self.thumbVideoW = thumbVideoW
                self.thumbVideoH = thumbVideoH
                self.originalAttachmentCount = originalAttachmentCount
                self.isExternal = isExternal
                self.externalType = externalType
                self.externalId = externalId
                self.externalUrl = externalUrl
                self.urlPrivate = urlPrivate
                self.urlPrivateDownload = urlPrivateDownload
                self.appId = appId
                self.appName = appName
                self.thumb64 = thumb64
                self.thumb64Gif = thumb64Gif
                self.thumb64W = thumb64W
                self.thumb64H = thumb64H
                self.thumb80 = thumb80
                self.thumb80Gif = thumb80Gif
                self.thumb80W = thumb80W
                self.thumb80H = thumb80H
                self.thumb160 = thumb160
                self.thumb160Gif = thumb160Gif
                self.thumb160W = thumb160W
                self.thumb160H = thumb160H
                self.thumb360 = thumb360
                self.thumb360Gif = thumb360Gif
                self.thumb360W = thumb360W
                self.thumb360H = thumb360H
                self.thumb480 = thumb480
                self.thumb480Gif = thumb480Gif
                self.thumb480W = thumb480W
                self.thumb480H = thumb480H
                self.thumb720 = thumb720
                self.thumb720Gif = thumb720Gif
                self.thumb720W = thumb720W
                self.thumb720H = thumb720H
                self.thumb800 = thumb800
                self.thumb800Gif = thumb800Gif
                self.thumb800W = thumb800W
                self.thumb800H = thumb800H
                self.thumb960 = thumb960
                self.thumb960Gif = thumb960Gif
                self.thumb960W = thumb960W
                self.thumb960H = thumb960H
                self.thumb1024 = thumb1024
                self.thumb1024Gif = thumb1024Gif
                self.thumb1024W = thumb1024W
                self.thumb1024H = thumb1024H
                self.thumbVideo = thumbVideo
                self.thumbGif = thumbGif
                self.thumbPdf = thumbPdf
                self.thumbPdfW = thumbPdfW
                self.thumbPdfH = thumbPdfH
                self.thumbTiny = thumbTiny
                self.convertedPdf = convertedPdf
                self.imageExifRotation = imageExifRotation
                self.originalW = originalW
                self.originalH = originalH
                self.deanimateGif = deanimateGif
                self.permalinkPublic = permalinkPublic
                self.editLink = editLink
                self.hasRichPreview = hasRichPreview
                self.mediaDisplayType = mediaDisplayType
                self.previewIsTruncated = previewIsTruncated
                self.previewHighlight = previewHighlight
                self.plainText = plainText
                self.previewPlainText = previewPlainText
                self.hasMore = hasMore
                self.sentToSelf = sentToSelf
                self.linesMore = linesMore
                self.isPublic = isPublic
                self.publicUrlShared = publicUrlShared
                self.displayAsBot = displayAsBot
                self.hasMoreShares = hasMoreShares
                self.channelActionsTs = channelActionsTs
                self.channelActionsCount = channelActionsCount
                self.simplifiedHtml = simplifiedHtml
                self.mediaProgress = mediaProgress
                self.botId = botId
                self.initialComment = initialComment
                self.numStars = numStars
                self.isStarred = isStarred
                self.pinnedTo = pinnedTo
                self.commentsCount = commentsCount
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case timestamp
                case name
                case title
                case subject
                case mimetype
                case filetype
                case user
                case mode
                case editable
                case editor
                case updated
                case subtype
                case transcription
                case mp4
                case vtt
                case hls
                case username
                case size
                case deanimate
                case pjpeg
                case permalink
                case preview
                case lines
                case channels
                case groups
                case ims
                case shares
                case to
                case from
                case cc
                case headers
                case saved
                case reactions
                case prettyType
                case userTeam
                case sourceTeam
                case nonOwnerEditable
                case lastEditor
                case fileAccess
                case altTxt
                case mp4Low
                case hlsEmbed
                case durationMs
                case thumbVideoW
                case thumbVideoH
                case originalAttachmentCount
                case isExternal
                case externalType
                case externalId
                case externalUrl
                case urlPrivate
                case urlPrivateDownload
                case appId
                case appName
                case thumb64
                case thumb64Gif
                case thumb64W
                case thumb64H
                case thumb80
                case thumb80Gif
                case thumb80W
                case thumb80H
                case thumb160
                case thumb160Gif
                case thumb160W
                case thumb160H
                case thumb360
                case thumb360Gif
                case thumb360W
                case thumb360H
                case thumb480
                case thumb480Gif
                case thumb480W
                case thumb480H
                case thumb720
                case thumb720Gif
                case thumb720W
                case thumb720H
                case thumb800
                case thumb800Gif
                case thumb800W
                case thumb800H
                case thumb960
                case thumb960Gif
                case thumb960W
                case thumb960H
                case thumb1024
                case thumb1024Gif
                case thumb1024W
                case thumb1024H
                case thumbVideo
                case thumbGif
                case thumbPdf
                case thumbPdfW
                case thumbPdfH
                case thumbTiny
                case convertedPdf
                case imageExifRotation
                case originalW
                case originalH
                case deanimateGif
                case permalinkPublic
                case editLink
                case hasRichPreview
                case mediaDisplayType
                case previewIsTruncated
                case previewHighlight
                case plainText
                case previewPlainText
                case hasMore
                case sentToSelf
                case linesMore
                case isPublic
                case publicUrlShared
                case displayAsBot
                case hasMoreShares
                case channelActionsTs
                case channelActionsCount
                case simplifiedHtml
                case mediaProgress
                case botId
                case initialComment
                case numStars
                case isStarred
                case pinnedTo
                case commentsCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/StarsRemoveResponse`.
        public struct StarsRemoveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StarsRemoveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/StarsRemoveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StarsRemoveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StarsRemoveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `StarsRemoveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse`.
        public struct TeamAccessLogsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/logins`.
            public var logins: [Components.Schemas.Login]?
            /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/paging`.
            public var paging: Components.Schemas.Paging?
            /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamAccessLogsResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `TeamAccessLogsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - logins:
            ///   - paging:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                logins: [Components.Schemas.Login]? = nil,
                paging: Components.Schemas.Paging? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.logins = logins
                self.paging = paging
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case logins
                case paging
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Login`.
        public struct Login: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Login/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Login/count`.
            public var count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Login/ip`.
            public var ip: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Login/isp`.
            public var isp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Login/country`.
            public var country: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Login/region`.
            public var region: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Login/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Login/dateFirst`.
            public var dateFirst: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Login/dateLast`.
            public var dateLast: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Login/userAgent`.
            public var userAgent: Swift.String?
            /// Creates a new `Login`.
            ///
            /// - Parameters:
            ///   - username:
            ///   - count:
            ///   - ip:
            ///   - isp:
            ///   - country:
            ///   - region:
            ///   - userId:
            ///   - dateFirst:
            ///   - dateLast:
            ///   - userAgent:
            public init(
                username: Swift.String? = nil,
                count: Swift.Int? = nil,
                ip: Swift.String? = nil,
                isp: Swift.String? = nil,
                country: Swift.String? = nil,
                region: Swift.String? = nil,
                userId: Swift.String? = nil,
                dateFirst: Swift.Int? = nil,
                dateLast: Swift.Int? = nil,
                userAgent: Swift.String? = nil
            ) {
                self.username = username
                self.count = count
                self.ip = ip
                self.isp = isp
                self.country = country
                self.region = region
                self.userId = userId
                self.dateFirst = dateFirst
                self.dateLast = dateLast
                self.userAgent = userAgent
            }
            public enum CodingKeys: String, CodingKey {
                case username
                case count
                case ip
                case isp
                case country
                case region
                case userId
                case dateFirst
                case dateLast
                case userAgent
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse`.
        public struct TeamBillableInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/billableInfo`.
            public var billableInfo: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/TeamBillableInfoResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `TeamBillableInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - billableInfo:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                billableInfo: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.billableInfo = billableInfo
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case billableInfo
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/BillableInfo`.
        public struct BillableInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BillableInfo/billingActive`.
            public var billingActive: Swift.Bool?
            /// Creates a new `BillableInfo`.
            ///
            /// - Parameters:
            ///   - billingActive:
            public init(billingActive: Swift.Bool? = nil) {
                self.billingActive = billingActive
            }
            public enum CodingKeys: String, CodingKey {
                case billingActive
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse`.
        public struct TeamBillingInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamBillingInfoResponse/plan`.
            public var plan: Swift.String?
            /// Creates a new `TeamBillingInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - plan:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                plan: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.plan = plan
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case plan
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse`.
        public struct TeamExternalTeamsDisconnectResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsDisconnectResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `TeamExternalTeamsDisconnectResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse`.
        public struct TeamExternalTeamsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/organizations`.
            public var organizations: [Components.Schemas.Organization]?
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/totalCount`.
            public var totalCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamExternalTeamsListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `TeamExternalTeamsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - organizations:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - totalCount:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                organizations: [Components.Schemas.Organization]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                totalCount: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.organizations = organizations
                self.error = error
                self.needed = needed
                self.provided = provided
                self.totalCount = totalCount
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case organizations
                case error
                case needed
                case provided
                case totalCount
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Organization`.
        public struct Organization: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Organization/canvas`.
            public var canvas: Components.Schemas.Canvas?
            /// - Remark: Generated from `#/components/schemas/Organization/lists`.
            public var lists: Components.Schemas.Canvas?
            /// - Remark: Generated from `#/components/schemas/Organization/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Organization/teamName`.
            public var teamName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Organization/teamDomain`.
            public var teamDomain: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Organization/publicChannelCount`.
            public var publicChannelCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Organization/privateChannelCount`.
            public var privateChannelCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Organization/imChannelCount`.
            public var imChannelCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Organization/mpimChannelCount`.
            public var mpimChannelCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Organization/connectedWorkspaces`.
            public var connectedWorkspaces: [Components.Schemas.ConnectedWorkspace]?
            /// - Remark: Generated from `#/components/schemas/Organization/slackConnectPrefs`.
            public var slackConnectPrefs: Components.Schemas.SlackConnectPrefs?
            /// - Remark: Generated from `#/components/schemas/Organization/connectionStatus`.
            public var connectionStatus: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Organization/lastActiveTimestamp`.
            public var lastActiveTimestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Organization/isSponsored`.
            public var isSponsored: Swift.Bool?
            /// Creates a new `Organization`.
            ///
            /// - Parameters:
            ///   - canvas:
            ///   - lists:
            ///   - teamId:
            ///   - teamName:
            ///   - teamDomain:
            ///   - publicChannelCount:
            ///   - privateChannelCount:
            ///   - imChannelCount:
            ///   - mpimChannelCount:
            ///   - connectedWorkspaces:
            ///   - slackConnectPrefs:
            ///   - connectionStatus:
            ///   - lastActiveTimestamp:
            ///   - isSponsored:
            public init(
                canvas: Components.Schemas.Canvas? = nil,
                lists: Components.Schemas.Canvas? = nil,
                teamId: Swift.String? = nil,
                teamName: Swift.String? = nil,
                teamDomain: Swift.String? = nil,
                publicChannelCount: Swift.Int? = nil,
                privateChannelCount: Swift.Int? = nil,
                imChannelCount: Swift.Int? = nil,
                mpimChannelCount: Swift.Int? = nil,
                connectedWorkspaces: [Components.Schemas.ConnectedWorkspace]? = nil,
                slackConnectPrefs: Components.Schemas.SlackConnectPrefs? = nil,
                connectionStatus: Swift.String? = nil,
                lastActiveTimestamp: Swift.Int? = nil,
                isSponsored: Swift.Bool? = nil
            ) {
                self.canvas = canvas
                self.lists = lists
                self.teamId = teamId
                self.teamName = teamName
                self.teamDomain = teamDomain
                self.publicChannelCount = publicChannelCount
                self.privateChannelCount = privateChannelCount
                self.imChannelCount = imChannelCount
                self.mpimChannelCount = mpimChannelCount
                self.connectedWorkspaces = connectedWorkspaces
                self.slackConnectPrefs = slackConnectPrefs
                self.connectionStatus = connectionStatus
                self.lastActiveTimestamp = lastActiveTimestamp
                self.isSponsored = isSponsored
            }
            public enum CodingKeys: String, CodingKey {
                case canvas
                case lists
                case teamId
                case teamName
                case teamDomain
                case publicChannelCount
                case privateChannelCount
                case imChannelCount
                case mpimChannelCount
                case connectedWorkspaces
                case slackConnectPrefs
                case connectionStatus
                case lastActiveTimestamp
                case isSponsored
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConnectedWorkspace`.
        public struct ConnectedWorkspace: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConnectedWorkspace/workspaceId`.
            public var workspaceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConnectedWorkspace/workspaceName`.
            public var workspaceName: Swift.String?
            /// Creates a new `ConnectedWorkspace`.
            ///
            /// - Parameters:
            ///   - workspaceId:
            ///   - workspaceName:
            public init(
                workspaceId: Swift.String? = nil,
                workspaceName: Swift.String? = nil
            ) {
                self.workspaceId = workspaceId
                self.workspaceName = workspaceName
            }
            public enum CodingKeys: String, CodingKey {
                case workspaceId
                case workspaceName
            }
        }
        /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs`.
        public struct SlackConnectPrefs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/allowScFileUploads`.
            public var allowScFileUploads: Components.Schemas.AllowScFileUploads?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/approvedOrgInfo`.
            public var approvedOrgInfo: Components.Schemas.AllowScFileUploads?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/profileVisibility`.
            public var profileVisibility: Components.Schemas.AllowScFileUploads?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/allowedWorkspaces`.
            public var allowedWorkspaces: Components.Schemas.AllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/allowedCanvasSharing`.
            public var allowedCanvasSharing: Components.Schemas.AllowScFileUploads?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/allowedListSharing`.
            public var allowedListSharing: Components.Schemas.AllowScFileUploads?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/awayTeamScInvitePermissions`.
            public var awayTeamScInvitePermissions: Components.Schemas.AllowedWorkspaces?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/awayTeamScInviteRequire2fa`.
            public var awayTeamScInviteRequire2fa: Components.Schemas.AllowScFileUploads?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/acceptScInvites`.
            public var acceptScInvites: Components.Schemas.AcceptScInvites?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/scChannelLimitedAccess`.
            public var scChannelLimitedAccess: Components.Schemas.AllowScFileUploads?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/scMpdmToPrivate`.
            public var scMpdmToPrivate: Components.Schemas.ScMpdmToPrivate?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/externalAwarenessContextBar`.
            public var externalAwarenessContextBar: Components.Schemas.AllowScFileUploads?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/requireScChannelForScDm`.
            public var requireScChannelForScDm: Components.Schemas.AllowScFileUploads?
            /// - Remark: Generated from `#/components/schemas/SlackConnectPrefs/sharedChannelInviteRequested`.
            public var sharedChannelInviteRequested: Components.Schemas.SharedChannelInviteRequested?
            /// Creates a new `SlackConnectPrefs`.
            ///
            /// - Parameters:
            ///   - allowScFileUploads:
            ///   - approvedOrgInfo:
            ///   - profileVisibility:
            ///   - allowedWorkspaces:
            ///   - allowedCanvasSharing:
            ///   - allowedListSharing:
            ///   - awayTeamScInvitePermissions:
            ///   - awayTeamScInviteRequire2fa:
            ///   - acceptScInvites:
            ///   - scChannelLimitedAccess:
            ///   - scMpdmToPrivate:
            ///   - externalAwarenessContextBar:
            ///   - requireScChannelForScDm:
            ///   - sharedChannelInviteRequested:
            public init(
                allowScFileUploads: Components.Schemas.AllowScFileUploads? = nil,
                approvedOrgInfo: Components.Schemas.AllowScFileUploads? = nil,
                profileVisibility: Components.Schemas.AllowScFileUploads? = nil,
                allowedWorkspaces: Components.Schemas.AllowedWorkspaces? = nil,
                allowedCanvasSharing: Components.Schemas.AllowScFileUploads? = nil,
                allowedListSharing: Components.Schemas.AllowScFileUploads? = nil,
                awayTeamScInvitePermissions: Components.Schemas.AllowedWorkspaces? = nil,
                awayTeamScInviteRequire2fa: Components.Schemas.AllowScFileUploads? = nil,
                acceptScInvites: Components.Schemas.AcceptScInvites? = nil,
                scChannelLimitedAccess: Components.Schemas.AllowScFileUploads? = nil,
                scMpdmToPrivate: Components.Schemas.ScMpdmToPrivate? = nil,
                externalAwarenessContextBar: Components.Schemas.AllowScFileUploads? = nil,
                requireScChannelForScDm: Components.Schemas.AllowScFileUploads? = nil,
                sharedChannelInviteRequested: Components.Schemas.SharedChannelInviteRequested? = nil
            ) {
                self.allowScFileUploads = allowScFileUploads
                self.approvedOrgInfo = approvedOrgInfo
                self.profileVisibility = profileVisibility
                self.allowedWorkspaces = allowedWorkspaces
                self.allowedCanvasSharing = allowedCanvasSharing
                self.allowedListSharing = allowedListSharing
                self.awayTeamScInvitePermissions = awayTeamScInvitePermissions
                self.awayTeamScInviteRequire2fa = awayTeamScInviteRequire2fa
                self.acceptScInvites = acceptScInvites
                self.scChannelLimitedAccess = scChannelLimitedAccess
                self.scMpdmToPrivate = scMpdmToPrivate
                self.externalAwarenessContextBar = externalAwarenessContextBar
                self.requireScChannelForScDm = requireScChannelForScDm
                self.sharedChannelInviteRequested = sharedChannelInviteRequested
            }
            public enum CodingKeys: String, CodingKey {
                case allowScFileUploads
                case approvedOrgInfo
                case profileVisibility
                case allowedWorkspaces
                case allowedCanvasSharing
                case allowedListSharing
                case awayTeamScInvitePermissions
                case awayTeamScInviteRequire2fa
                case acceptScInvites
                case scChannelLimitedAccess
                case scMpdmToPrivate
                case externalAwarenessContextBar
                case requireScChannelForScDm
                case sharedChannelInviteRequested
            }
        }
        /// - Remark: Generated from `#/components/schemas/AcceptScInvites`.
        public struct AcceptScInvites: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AcceptScInvites/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AcceptScInvites/actor`.
            public var actor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AcceptScInvites/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AcceptScInvites/acceptInWorkspaceIds`.
            public var acceptInWorkspaceIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AcceptScInvites/invalidWorkspaceIds`.
            public var invalidWorkspaceIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AcceptScInvites/useAllowedWorkspaces`.
            public var useAllowedWorkspaces: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AcceptScInvites/acceptPrivate`.
            public var acceptPrivate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AcceptScInvites/dateUpdate`.
            public var dateUpdate: Swift.Int?
            /// Creates a new `AcceptScInvites`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - actor:
            ///   - source:
            ///   - acceptInWorkspaceIds:
            ///   - invalidWorkspaceIds:
            ///   - useAllowedWorkspaces:
            ///   - acceptPrivate:
            ///   - dateUpdate:
            public init(
                _type: Swift.String? = nil,
                actor: Swift.String? = nil,
                source: Swift.String? = nil,
                acceptInWorkspaceIds: [Swift.String]? = nil,
                invalidWorkspaceIds: [Swift.String]? = nil,
                useAllowedWorkspaces: Swift.Bool? = nil,
                acceptPrivate: Swift.Bool? = nil,
                dateUpdate: Swift.Int? = nil
            ) {
                self._type = _type
                self.actor = actor
                self.source = source
                self.acceptInWorkspaceIds = acceptInWorkspaceIds
                self.invalidWorkspaceIds = invalidWorkspaceIds
                self.useAllowedWorkspaces = useAllowedWorkspaces
                self.acceptPrivate = acceptPrivate
                self.dateUpdate = dateUpdate
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case actor
                case source
                case acceptInWorkspaceIds
                case invalidWorkspaceIds
                case useAllowedWorkspaces
                case acceptPrivate
                case dateUpdate
            }
        }
        /// - Remark: Generated from `#/components/schemas/AllowScFileUploads`.
        public struct AllowScFileUploads: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AllowScFileUploads/value`.
            public var value: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AllowScFileUploads/actor`.
            public var actor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AllowScFileUploads/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AllowScFileUploads/type`.
            public var _type: Components.Schemas._Type?
            /// - Remark: Generated from `#/components/schemas/AllowScFileUploads/dateUpdate`.
            public var dateUpdate: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AllowScFileUploads/approvalType`.
            public var approvalType: Swift.String?
            /// Creates a new `AllowScFileUploads`.
            ///
            /// - Parameters:
            ///   - value:
            ///   - actor:
            ///   - source:
            ///   - _type:
            ///   - dateUpdate:
            ///   - approvalType:
            public init(
                value: Swift.Bool? = nil,
                actor: Swift.String? = nil,
                source: Swift.String? = nil,
                _type: Components.Schemas._Type? = nil,
                dateUpdate: Swift.Int? = nil,
                approvalType: Swift.String? = nil
            ) {
                self.value = value
                self.actor = actor
                self.source = source
                self._type = _type
                self.dateUpdate = dateUpdate
                self.approvalType = approvalType
            }
            public enum CodingKeys: String, CodingKey {
                case value
                case actor
                case source
                case _type = "type"
                case dateUpdate
                case approvalType
            }
        }
        /// - Remark: Generated from `#/components/schemas/AllowedWorkspaces`.
        public struct AllowedWorkspaces: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AllowedWorkspaces/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AllowedWorkspaces/actor`.
            public var actor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AllowedWorkspaces/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AllowedWorkspaces/teamIds`.
            public var teamIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/AllowedWorkspaces/dateUpdate`.
            public var dateUpdate: Swift.Int?
            /// Creates a new `AllowedWorkspaces`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - actor:
            ///   - source:
            ///   - teamIds:
            ///   - dateUpdate:
            public init(
                _type: Swift.String? = nil,
                actor: Swift.String? = nil,
                source: Swift.String? = nil,
                teamIds: [Swift.String]? = nil,
                dateUpdate: Swift.Int? = nil
            ) {
                self._type = _type
                self.actor = actor
                self.source = source
                self.teamIds = teamIds
                self.dateUpdate = dateUpdate
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case actor
                case source
                case teamIds
                case dateUpdate
            }
        }
        /// - Remark: Generated from `#/components/schemas/ScMpdmToPrivate`.
        public struct ScMpdmToPrivate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ScMpdmToPrivate/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ScMpdmToPrivate/actor`.
            public var actor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ScMpdmToPrivate/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ScMpdmToPrivate/acceptInWorkspaceId`.
            public var acceptInWorkspaceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ScMpdmToPrivate/invalidWorkspaceIds`.
            public var invalidWorkspaceIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ScMpdmToPrivate/dateUpdate`.
            public var dateUpdate: Swift.Int?
            /// Creates a new `ScMpdmToPrivate`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - actor:
            ///   - source:
            ///   - acceptInWorkspaceId:
            ///   - invalidWorkspaceIds:
            ///   - dateUpdate:
            public init(
                _type: Swift.String? = nil,
                actor: Swift.String? = nil,
                source: Swift.String? = nil,
                acceptInWorkspaceId: Swift.String? = nil,
                invalidWorkspaceIds: [Swift.String]? = nil,
                dateUpdate: Swift.Int? = nil
            ) {
                self._type = _type
                self.actor = actor
                self.source = source
                self.acceptInWorkspaceId = acceptInWorkspaceId
                self.invalidWorkspaceIds = invalidWorkspaceIds
                self.dateUpdate = dateUpdate
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case actor
                case source
                case acceptInWorkspaceId
                case invalidWorkspaceIds
                case dateUpdate
            }
        }
        /// - Remark: Generated from `#/components/schemas/SharedChannelInviteRequested`.
        public struct SharedChannelInviteRequested: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SharedChannelInviteRequested/enabled`.
            public var enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SharedChannelInviteRequested/actor`.
            public var actor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SharedChannelInviteRequested/source`.
            public var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SharedChannelInviteRequested/usergroupInclude`.
            public var usergroupInclude: Components.Schemas.UsergroupClude?
            /// - Remark: Generated from `#/components/schemas/SharedChannelInviteRequested/usergroupExclude`.
            public var usergroupExclude: Components.Schemas.UsergroupClude?
            /// - Remark: Generated from `#/components/schemas/SharedChannelInviteRequested/approvalDestination`.
            public var approvalDestination: Components.Schemas.ApprovalDestination?
            /// - Remark: Generated from `#/components/schemas/SharedChannelInviteRequested/dateUpdate`.
            public var dateUpdate: Swift.Int?
            /// Creates a new `SharedChannelInviteRequested`.
            ///
            /// - Parameters:
            ///   - enabled:
            ///   - actor:
            ///   - source:
            ///   - usergroupInclude:
            ///   - usergroupExclude:
            ///   - approvalDestination:
            ///   - dateUpdate:
            public init(
                enabled: Swift.Bool? = nil,
                actor: Swift.String? = nil,
                source: Swift.String? = nil,
                usergroupInclude: Components.Schemas.UsergroupClude? = nil,
                usergroupExclude: Components.Schemas.UsergroupClude? = nil,
                approvalDestination: Components.Schemas.ApprovalDestination? = nil,
                dateUpdate: Swift.Int? = nil
            ) {
                self.enabled = enabled
                self.actor = actor
                self.source = source
                self.usergroupInclude = usergroupInclude
                self.usergroupExclude = usergroupExclude
                self.approvalDestination = approvalDestination
                self.dateUpdate = dateUpdate
            }
            public enum CodingKeys: String, CodingKey {
                case enabled
                case actor
                case source
                case usergroupInclude
                case usergroupExclude
                case approvalDestination
                case dateUpdate
            }
        }
        /// - Remark: Generated from `#/components/schemas/ApprovalDestination`.
        public struct ApprovalDestination: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ApprovalDestination/allWhoCanManageSharedChannels`.
            public var allWhoCanManageSharedChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ApprovalDestination/channelId`.
            public var channelId: Swift.String?
            /// Creates a new `ApprovalDestination`.
            ///
            /// - Parameters:
            ///   - allWhoCanManageSharedChannels:
            ///   - channelId:
            public init(
                allWhoCanManageSharedChannels: Swift.Bool? = nil,
                channelId: Swift.String? = nil
            ) {
                self.allWhoCanManageSharedChannels = allWhoCanManageSharedChannels
                self.channelId = channelId
            }
            public enum CodingKeys: String, CodingKey {
                case allWhoCanManageSharedChannels
                case channelId
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsergroupClude`.
        public struct UsergroupClude: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsergroupClude/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupClude/teamId`.
            public var teamId: Swift.String?
            /// Creates a new `UsergroupClude`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - teamId:
            public init(
                id: Swift.String? = nil,
                teamId: Swift.String? = nil
            ) {
                self.id = id
                self.teamId = teamId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case teamId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Type`.
        public struct _Type: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Type/value1`.
            public var value1: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Type/value2`.
            public var value2: Swift.String?
            /// Creates a new `_Type`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Swift.Bool? = nil,
                value2: Swift.String? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    self.value1,
                    self.value2
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamInfoResponse`.
        public struct TeamInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/TeamInfoResponse/team`.
            public var team: Components.Schemas.Team?
            /// - Remark: Generated from `#/components/schemas/TeamInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `TeamInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - team:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                team: Components.Schemas.Team? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.team = team
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case team
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse`.
        public struct TeamIntegrationLogsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/logs`.
            public var logs: [Components.Schemas.Log]?
            /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/paging`.
            public var paging: Components.Schemas.Paging?
            /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamIntegrationLogsResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `TeamIntegrationLogsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - logs:
            ///   - paging:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                logs: [Components.Schemas.Log]? = nil,
                paging: Components.Schemas.Paging? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.logs = logs
                self.paging = paging
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case logs
                case paging
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Log`.
        public struct Log: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Log/date`.
            public var date: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/scope`.
            public var scope: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/channel`.
            public var channel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/reason`.
            public var reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/resolution`.
            public var resolution: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/userName`.
            public var userName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/changeType`.
            public var changeType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/appType`.
            public var appType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/rssFeed`.
            public var rssFeed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Log/rssFeedChangeType`.
            public var rssFeedChangeType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/rssFeedTitle`.
            public var rssFeedTitle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/rssFeedUrl`.
            public var rssFeedUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Log/serviceId`.
            public var serviceId: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Log/serviceType`.
            public var serviceType: Swift.String?
            /// Creates a new `Log`.
            ///
            /// - Parameters:
            ///   - date:
            ///   - scope:
            ///   - channel:
            ///   - reason:
            ///   - resolution:
            ///   - userId:
            ///   - userName:
            ///   - changeType:
            ///   - appType:
            ///   - appId:
            ///   - rssFeed:
            ///   - rssFeedChangeType:
            ///   - rssFeedTitle:
            ///   - rssFeedUrl:
            ///   - serviceId:
            ///   - serviceType:
            public init(
                date: Swift.String? = nil,
                scope: Swift.String? = nil,
                channel: Swift.String? = nil,
                reason: Swift.String? = nil,
                resolution: Swift.String? = nil,
                userId: Swift.String? = nil,
                userName: Swift.String? = nil,
                changeType: Swift.String? = nil,
                appType: Swift.String? = nil,
                appId: Swift.String? = nil,
                rssFeed: Swift.Bool? = nil,
                rssFeedChangeType: Swift.String? = nil,
                rssFeedTitle: Swift.String? = nil,
                rssFeedUrl: Swift.String? = nil,
                serviceId: Swift.Int? = nil,
                serviceType: Swift.String? = nil
            ) {
                self.date = date
                self.scope = scope
                self.channel = channel
                self.reason = reason
                self.resolution = resolution
                self.userId = userId
                self.userName = userName
                self.changeType = changeType
                self.appType = appType
                self.appId = appId
                self.rssFeed = rssFeed
                self.rssFeedChangeType = rssFeedChangeType
                self.rssFeedTitle = rssFeedTitle
                self.rssFeedUrl = rssFeedUrl
                self.serviceId = serviceId
                self.serviceType = serviceType
            }
            public enum CodingKeys: String, CodingKey {
                case date
                case scope
                case channel
                case reason
                case resolution
                case userId
                case userName
                case changeType
                case appType
                case appId
                case rssFeed
                case rssFeedChangeType
                case rssFeedTitle
                case rssFeedUrl
                case serviceId
                case serviceType
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse`.
        public struct TeamPreferencesListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/msgEditWindowMins`.
            public var msgEditWindowMins: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/allowMessageDeletion`.
            public var allowMessageDeletion: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/displayRealNames`.
            public var displayRealNames: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/disableFileUploads`.
            public var disableFileUploads: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamPreferencesListResponse/whoCanPostGeneral`.
            public var whoCanPostGeneral: Swift.String?
            /// Creates a new `TeamPreferencesListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - msgEditWindowMins:
            ///   - allowMessageDeletion:
            ///   - displayRealNames:
            ///   - disableFileUploads:
            ///   - whoCanPostGeneral:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                msgEditWindowMins: Swift.Int? = nil,
                allowMessageDeletion: Swift.Bool? = nil,
                displayRealNames: Swift.Bool? = nil,
                disableFileUploads: Swift.String? = nil,
                whoCanPostGeneral: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.msgEditWindowMins = msgEditWindowMins
                self.allowMessageDeletion = allowMessageDeletion
                self.displayRealNames = displayRealNames
                self.disableFileUploads = disableFileUploads
                self.whoCanPostGeneral = whoCanPostGeneral
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case msgEditWindowMins
                case allowMessageDeletion
                case displayRealNames
                case disableFileUploads
                case whoCanPostGeneral
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse`.
        public struct TeamProfileGetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse/profile`.
            public var profile: Components.Schemas.Profile?
            /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TeamProfileGetResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `TeamProfileGetResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - profile:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                profile: Components.Schemas.Profile? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.profile = profile
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case profile
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/Permissions`.
        public struct Permissions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Permissions/api`.
            public var api: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Permissions/ui`.
            public var ui: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Permissions/scim`.
            public var scim: Swift.Bool?
            /// Creates a new `Permissions`.
            ///
            /// - Parameters:
            ///   - api:
            ///   - ui:
            ///   - scim:
            public init(
                api: [Swift.String]? = nil,
                ui: Swift.Bool? = nil,
                scim: Swift.Bool? = nil
            ) {
                self.api = api
                self.ui = ui
                self.scim = scim
            }
            public enum CodingKeys: String, CodingKey {
                case api
                case ui
                case scim
            }
        }
        /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse`.
        public struct ToolingTokensRotateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/token`.
            public var token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/iat`.
            public var iat: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/exp`.
            public var exp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/refreshToken`.
            public var refreshToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ToolingTokensRotateResponse/userId`.
            public var userId: Swift.String?
            /// Creates a new `ToolingTokensRotateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - token:
            ///   - iat:
            ///   - exp:
            ///   - responseMetadata:
            ///   - refreshToken:
            ///   - teamId:
            ///   - userId:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                token: Swift.String? = nil,
                iat: Swift.Int? = nil,
                exp: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil,
                refreshToken: Swift.String? = nil,
                teamId: Swift.String? = nil,
                userId: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.token = token
                self.iat = iat
                self.exp = exp
                self.responseMetadata = responseMetadata
                self.refreshToken = refreshToken
                self.teamId = teamId
                self.userId = userId
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case token
                case iat
                case exp
                case responseMetadata
                case refreshToken
                case teamId
                case userId
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsergroupsCreateResponse`.
        public struct UsergroupsCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsergroupsCreateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsergroupsCreateResponse/usergroup`.
            public var usergroup: Components.Schemas.Usergroup?
            /// - Remark: Generated from `#/components/schemas/UsergroupsCreateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsCreateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsCreateResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsergroupsCreateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - usergroup:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                usergroup: Components.Schemas.Usergroup? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.usergroup = usergroup
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case usergroup
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsergroupsDisableResponse`.
        public struct UsergroupsDisableResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsergroupsDisableResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsergroupsDisableResponse/usergroup`.
            public var usergroup: Components.Schemas.Usergroup?
            /// - Remark: Generated from `#/components/schemas/UsergroupsDisableResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsDisableResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsDisableResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsergroupsDisableResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - usergroup:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                usergroup: Components.Schemas.Usergroup? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.usergroup = usergroup
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case usergroup
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsergroupsEnableResponse`.
        public struct UsergroupsEnableResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsergroupsEnableResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsergroupsEnableResponse/usergroup`.
            public var usergroup: Components.Schemas.Usergroup?
            /// - Remark: Generated from `#/components/schemas/UsergroupsEnableResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsEnableResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsEnableResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsergroupsEnableResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - usergroup:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                usergroup: Components.Schemas.Usergroup? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.usergroup = usergroup
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case usergroup
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsergroupsListResponse`.
        public struct UsergroupsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsergroupsListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsergroupsListResponse/usergroups`.
            public var usergroups: [Components.Schemas.Usergroup]?
            /// - Remark: Generated from `#/components/schemas/UsergroupsListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsergroupsListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - usergroups:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                usergroups: [Components.Schemas.Usergroup]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.usergroups = usergroups
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case usergroups
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsergroupsUpdateResponse`.
        public struct UsergroupsUpdateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsergroupsUpdateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsergroupsUpdateResponse/usergroup`.
            public var usergroup: Components.Schemas.Usergroup?
            /// - Remark: Generated from `#/components/schemas/UsergroupsUpdateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsUpdateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsUpdateResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsergroupsUpdateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - usergroup:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                usergroup: Components.Schemas.Usergroup? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.usergroup = usergroup
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case usergroup
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsergroupsUsersListResponse`.
        public struct UsergroupsUsersListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsergroupsUsersListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsergroupsUsersListResponse/users`.
            public var users: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UsergroupsUsersListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsUsersListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsUsersListResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsergroupsUsersListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - users:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                users: [Swift.String]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.users = users
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case users
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsergroupsUsersUpdateResponse`.
        public struct UsergroupsUsersUpdateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsergroupsUsersUpdateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsergroupsUsersUpdateResponse/usergroup`.
            public var usergroup: Components.Schemas.Usergroup?
            /// - Remark: Generated from `#/components/schemas/UsergroupsUsersUpdateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsUsersUpdateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsergroupsUsersUpdateResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsergroupsUsersUpdateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - usergroup:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                usergroup: Components.Schemas.Usergroup? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.usergroup = usergroup
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case usergroup
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersConversationsResponse`.
        public struct UsersConversationsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersConversationsResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersConversationsResponse/channels`.
            public var channels: [Components.Schemas.Channel]?
            /// - Remark: Generated from `#/components/schemas/UsersConversationsResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersConversationsResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersConversationsResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersConversationsResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `UsersConversationsResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - channels:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                channels: [Components.Schemas.Channel]? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.channels = channels
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case channels
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersDeletePhotoResponse`.
        public struct UsersDeletePhotoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersDeletePhotoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersDeletePhotoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersDeletePhotoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersDeletePhotoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsersDeletePhotoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersDiscoverableContactsLookupResponse`.
        public struct UsersDiscoverableContactsLookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersDiscoverableContactsLookupResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersDiscoverableContactsLookupResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersDiscoverableContactsLookupResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersDiscoverableContactsLookupResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersDiscoverableContactsLookupResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// - Remark: Generated from `#/components/schemas/UsersDiscoverableContactsLookupResponse/isDiscoverable`.
            public var isDiscoverable: Swift.Bool?
            /// Creates a new `UsersDiscoverableContactsLookupResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            ///   - isDiscoverable:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil,
                isDiscoverable: Swift.Bool? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
                self.isDiscoverable = isDiscoverable
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
                case responseMetadata
                case isDiscoverable
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse`.
        public struct UsersGetPresenceResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/presence`.
            public var presence: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/online`.
            public var online: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/autoAway`.
            public var autoAway: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/manualAway`.
            public var manualAway: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/connectionCount`.
            public var connectionCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UsersGetPresenceResponse/lastActivity`.
            public var lastActivity: Swift.Int?
            /// Creates a new `UsersGetPresenceResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - presence:
            ///   - online:
            ///   - autoAway:
            ///   - manualAway:
            ///   - connectionCount:
            ///   - lastActivity:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                presence: Swift.String? = nil,
                online: Swift.Bool? = nil,
                autoAway: Swift.Bool? = nil,
                manualAway: Swift.Bool? = nil,
                connectionCount: Swift.Int? = nil,
                lastActivity: Swift.Int? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.presence = presence
                self.online = online
                self.autoAway = autoAway
                self.manualAway = manualAway
                self.connectionCount = connectionCount
                self.lastActivity = lastActivity
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case presence
                case online
                case autoAway
                case manualAway
                case connectionCount
                case lastActivity
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersIdentityResponse`.
        public struct UsersIdentityResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersIdentityResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersIdentityResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersIdentityResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersIdentityResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersIdentityResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersIdentityResponse/user`.
            public var user: Components.Schemas.User?
            /// - Remark: Generated from `#/components/schemas/UsersIdentityResponse/team`.
            public var team: Components.Schemas.Team?
            /// Creates a new `UsersIdentityResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - user:
            ///   - team:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                user: Components.Schemas.User? = nil,
                team: Components.Schemas.Team? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.user = user
                self.team = team
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case user
                case team
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersInfoResponse`.
        public struct UsersInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersInfoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersInfoResponse/user`.
            public var user: Components.Schemas.User?
            /// - Remark: Generated from `#/components/schemas/UsersInfoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersInfoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersInfoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsersInfoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - user:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                user: Components.Schemas.User? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.user = user
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case user
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/EnterpriseUser`.
        public struct EnterpriseUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EnterpriseUser/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EnterpriseUser/teams`.
            public var teams: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/EnterpriseUser/enterpriseId`.
            public var enterpriseId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EnterpriseUser/enterpriseName`.
            public var enterpriseName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EnterpriseUser/isAdmin`.
            public var isAdmin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EnterpriseUser/isOwner`.
            public var isOwner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EnterpriseUser/isPrimaryOwner`.
            public var isPrimaryOwner: Swift.Bool?
            /// Creates a new `EnterpriseUser`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - teams:
            ///   - enterpriseId:
            ///   - enterpriseName:
            ///   - isAdmin:
            ///   - isOwner:
            ///   - isPrimaryOwner:
            public init(
                id: Swift.String? = nil,
                teams: [Swift.String]? = nil,
                enterpriseId: Swift.String? = nil,
                enterpriseName: Swift.String? = nil,
                isAdmin: Swift.Bool? = nil,
                isOwner: Swift.Bool? = nil,
                isPrimaryOwner: Swift.Bool? = nil
            ) {
                self.id = id
                self.teams = teams
                self.enterpriseId = enterpriseId
                self.enterpriseName = enterpriseName
                self.isAdmin = isAdmin
                self.isOwner = isOwner
                self.isPrimaryOwner = isPrimaryOwner
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case teams
                case enterpriseId
                case enterpriseName
                case isAdmin
                case isOwner
                case isPrimaryOwner
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersListResponse`.
        public struct UsersListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersListResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersListResponse/members`.
            public var members: [Components.Schemas.Member]?
            /// - Remark: Generated from `#/components/schemas/UsersListResponse/offset`.
            public var offset: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersListResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersListResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersListResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersListResponse/arg`.
            public var arg: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersListResponse/cacheTs`.
            public var cacheTs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UsersListResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `UsersListResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - members:
            ///   - offset:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - arg:
            ///   - cacheTs:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                members: [Components.Schemas.Member]? = nil,
                offset: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                arg: Swift.String? = nil,
                cacheTs: Swift.Int? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.members = members
                self.offset = offset
                self.error = error
                self.needed = needed
                self.provided = provided
                self.arg = arg
                self.cacheTs = cacheTs
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case members
                case offset
                case error
                case needed
                case provided
                case arg
                case cacheTs
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/Member`.
        public struct Member: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Member/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Member/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Member/deleted`.
            public var deleted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/color`.
            public var color: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Member/tz`.
            public var tz: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Member/profile`.
            public var profile: Components.Schemas.Profile?
            /// - Remark: Generated from `#/components/schemas/Member/updated`.
            public var updated: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Member/locale`.
            public var locale: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Member/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Member/realName`.
            public var realName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Member/tzLabel`.
            public var tzLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Member/tzOffset`.
            public var tzOffset: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Member/isAdmin`.
            public var isAdmin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/isOwner`.
            public var isOwner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/isPrimaryOwner`.
            public var isPrimaryOwner: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/isRestricted`.
            public var isRestricted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/isUltraRestricted`.
            public var isUltraRestricted: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/isBot`.
            public var isBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/isAppUser`.
            public var isAppUser: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/isEmailConfirmed`.
            public var isEmailConfirmed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/whoCanShareContactCard`.
            public var whoCanShareContactCard: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Member/isWorkflowBot`.
            public var isWorkflowBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/has2fa`.
            public var has2fa: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/enterpriseUser`.
            public var enterpriseUser: Components.Schemas.EnterpriseUser?
            /// - Remark: Generated from `#/components/schemas/Member/isInvitedUser`.
            public var isInvitedUser: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/isConnectorBot`.
            public var isConnectorBot: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Member/twoFactorType`.
            public var twoFactorType: Swift.String?
            /// Creates a new `Member`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - deleted:
            ///   - color:
            ///   - tz:
            ///   - profile:
            ///   - updated:
            ///   - locale:
            ///   - teamId:
            ///   - realName:
            ///   - tzLabel:
            ///   - tzOffset:
            ///   - isAdmin:
            ///   - isOwner:
            ///   - isPrimaryOwner:
            ///   - isRestricted:
            ///   - isUltraRestricted:
            ///   - isBot:
            ///   - isAppUser:
            ///   - isEmailConfirmed:
            ///   - whoCanShareContactCard:
            ///   - isWorkflowBot:
            ///   - has2fa:
            ///   - enterpriseUser:
            ///   - isInvitedUser:
            ///   - isConnectorBot:
            ///   - twoFactorType:
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                deleted: Swift.Bool? = nil,
                color: Swift.String? = nil,
                tz: Swift.String? = nil,
                profile: Components.Schemas.Profile? = nil,
                updated: Swift.Int? = nil,
                locale: Swift.String? = nil,
                teamId: Swift.String? = nil,
                realName: Swift.String? = nil,
                tzLabel: Swift.String? = nil,
                tzOffset: Swift.Int? = nil,
                isAdmin: Swift.Bool? = nil,
                isOwner: Swift.Bool? = nil,
                isPrimaryOwner: Swift.Bool? = nil,
                isRestricted: Swift.Bool? = nil,
                isUltraRestricted: Swift.Bool? = nil,
                isBot: Swift.Bool? = nil,
                isAppUser: Swift.Bool? = nil,
                isEmailConfirmed: Swift.Bool? = nil,
                whoCanShareContactCard: Swift.String? = nil,
                isWorkflowBot: Swift.Bool? = nil,
                has2fa: Swift.Bool? = nil,
                enterpriseUser: Components.Schemas.EnterpriseUser? = nil,
                isInvitedUser: Swift.Bool? = nil,
                isConnectorBot: Swift.Bool? = nil,
                twoFactorType: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.deleted = deleted
                self.color = color
                self.tz = tz
                self.profile = profile
                self.updated = updated
                self.locale = locale
                self.teamId = teamId
                self.realName = realName
                self.tzLabel = tzLabel
                self.tzOffset = tzOffset
                self.isAdmin = isAdmin
                self.isOwner = isOwner
                self.isPrimaryOwner = isPrimaryOwner
                self.isRestricted = isRestricted
                self.isUltraRestricted = isUltraRestricted
                self.isBot = isBot
                self.isAppUser = isAppUser
                self.isEmailConfirmed = isEmailConfirmed
                self.whoCanShareContactCard = whoCanShareContactCard
                self.isWorkflowBot = isWorkflowBot
                self.has2fa = has2fa
                self.enterpriseUser = enterpriseUser
                self.isInvitedUser = isInvitedUser
                self.isConnectorBot = isConnectorBot
                self.twoFactorType = twoFactorType
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case deleted
                case color
                case tz
                case profile
                case updated
                case locale
                case teamId
                case realName
                case tzLabel
                case tzOffset
                case isAdmin
                case isOwner
                case isPrimaryOwner
                case isRestricted
                case isUltraRestricted
                case isBot
                case isAppUser
                case isEmailConfirmed
                case whoCanShareContactCard
                case isWorkflowBot
                case has2fa
                case enterpriseUser
                case isInvitedUser
                case isConnectorBot
                case twoFactorType
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersLookupByEmailResponse`.
        public struct UsersLookupByEmailResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersLookupByEmailResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersLookupByEmailResponse/user`.
            public var user: Components.Schemas.User?
            /// - Remark: Generated from `#/components/schemas/UsersLookupByEmailResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersLookupByEmailResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersLookupByEmailResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersLookupByEmailResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `UsersLookupByEmailResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - user:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                user: Components.Schemas.User? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.user = user
                self.error = error
                self.needed = needed
                self.provided = provided
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case user
                case error
                case needed
                case provided
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersProfileGetResponse`.
        public struct UsersProfileGetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersProfileGetResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersProfileGetResponse/profile`.
            public var profile: Components.Schemas.Profile?
            /// - Remark: Generated from `#/components/schemas/UsersProfileGetResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersProfileGetResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersProfileGetResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsersProfileGetResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - profile:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                profile: Components.Schemas.Profile? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.profile = profile
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case profile
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersProfileSetResponse`.
        public struct UsersProfileSetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersProfileSetResponse/profile`.
            public var profile: Components.Schemas.Profile?
            /// - Remark: Generated from `#/components/schemas/UsersProfileSetResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersProfileSetResponse/username`.
            public var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersProfileSetResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersProfileSetResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersProfileSetResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsersProfileSetResponse`.
            ///
            /// - Parameters:
            ///   - profile:
            ///   - ok:
            ///   - username:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                profile: Components.Schemas.Profile? = nil,
                ok: Swift.Bool,
                username: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.profile = profile
                self.ok = ok
                self.username = username
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case profile
                case ok
                case username
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersSetActiveResponse`.
        public struct UsersSetActiveResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersSetActiveResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersSetActiveResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersSetActiveResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersSetActiveResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsersSetActiveResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersSetPhotoResponse`.
        public struct UsersSetPhotoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersSetPhotoResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersSetPhotoResponse/profile`.
            public var profile: Components.Schemas.Profile?
            /// - Remark: Generated from `#/components/schemas/UsersSetPhotoResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersSetPhotoResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersSetPhotoResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsersSetPhotoResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - profile:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                profile: Components.Schemas.Profile? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.profile = profile
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case profile
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsersSetPresenceResponse`.
        public struct UsersSetPresenceResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsersSetPresenceResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsersSetPresenceResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersSetPresenceResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UsersSetPresenceResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `UsersSetPresenceResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse`.
        public struct ViewsOpenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/view`.
            public var view: Components.Schemas.View?
            /// - Remark: Generated from `#/components/schemas/ViewsOpenResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ViewsOpenResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - view:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                view: Components.Schemas.View? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.view = view
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case view
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/DispatchActionConfig`.
        public struct DispatchActionConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DispatchActionConfig/triggerActionsOn`.
            public var triggerActionsOn: [Swift.String]?
            /// Creates a new `DispatchActionConfig`.
            ///
            /// - Parameters:
            ///   - triggerActionsOn:
            public init(triggerActionsOn: [Swift.String]? = nil) {
                self.triggerActionsOn = triggerActionsOn
            }
            public enum CodingKeys: String, CodingKey {
                case triggerActionsOn
            }
        }
        /// - Remark: Generated from `#/components/schemas/InitialValueClass`.
        public struct InitialValueClass: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InitialValueClass/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InitialValueClass/elements`.
            public var elements: [Components.Schemas.InitialValueElement]?
            /// - Remark: Generated from `#/components/schemas/InitialValueClass/blockId`.
            public var blockId: Swift.String?
            /// Creates a new `InitialValueClass`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - blockId:
            public init(
                _type: Swift.String? = nil,
                elements: [Components.Schemas.InitialValueElement]? = nil,
                blockId: Swift.String? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.blockId = blockId
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case blockId
            }
        }
        /// - Remark: Generated from `#/components/schemas/InitialValueElement`.
        public struct InitialValueElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InitialValueElement/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InitialValueElement/elements`.
            public var elements: [Components.Schemas.FluffyElement]?
            /// - Remark: Generated from `#/components/schemas/InitialValueElement/style`.
            public var style: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InitialValueElement/indent`.
            public var indent: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InitialValueElement/offset`.
            public var offset: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InitialValueElement/border`.
            public var border: Swift.Int?
            /// Creates a new `InitialValueElement`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - style:
            ///   - indent:
            ///   - offset:
            ///   - border:
            public init(
                _type: Swift.String? = nil,
                elements: [Components.Schemas.FluffyElement]? = nil,
                style: Swift.String? = nil,
                indent: Swift.Int? = nil,
                offset: Swift.Int? = nil,
                border: Swift.Int? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.style = style
                self.indent = indent
                self.offset = offset
                self.border = border
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case style
                case indent
                case offset
                case border
            }
        }
        /// - Remark: Generated from `#/components/schemas/FluffyElement`.
        public struct FluffyElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FluffyElement/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyElement/elements`.
            public var elements: [Components.Schemas.TentacledElement]?
            /// - Remark: Generated from `#/components/schemas/FluffyElement/style`.
            public var style: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FluffyElement/indent`.
            public var indent: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FluffyElement/offset`.
            public var offset: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FluffyElement/border`.
            public var border: Swift.Int?
            /// Creates a new `FluffyElement`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - elements:
            ///   - style:
            ///   - indent:
            ///   - offset:
            ///   - border:
            public init(
                _type: Swift.String? = nil,
                elements: [Components.Schemas.TentacledElement]? = nil,
                style: Swift.String? = nil,
                indent: Swift.Int? = nil,
                offset: Swift.Int? = nil,
                border: Swift.Int? = nil
            ) {
                self._type = _type
                self.elements = elements
                self.style = style
                self.indent = indent
                self.offset = offset
                self.border = border
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case elements
                case style
                case indent
                case offset
                case border
            }
        }
        /// - Remark: Generated from `#/components/schemas/TentacledElement`.
        public struct TentacledElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TentacledElement/type`.
            public var _type: Components.Schemas.ElementType?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/range`.
            public var range: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/style`.
            public var style: Components.Schemas.Style?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/timestamp`.
            public var timestamp: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/format`.
            public var format: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/unsafe`.
            public var unsafe: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/unicode`.
            public var unicode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/channelId`.
            public var channelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/teamId`.
            public var teamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/userId`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/usergroupId`.
            public var usergroupId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TentacledElement/skinTone`.
            public var skinTone: Swift.Int?
            /// Creates a new `TentacledElement`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - range:
            ///   - style:
            ///   - text:
            ///   - value:
            ///   - timestamp:
            ///   - format:
            ///   - url:
            ///   - fallback:
            ///   - unsafe:
            ///   - name:
            ///   - unicode:
            ///   - channelId:
            ///   - teamId:
            ///   - userId:
            ///   - usergroupId:
            ///   - skinTone:
            public init(
                _type: Components.Schemas.ElementType? = nil,
                range: Swift.String? = nil,
                style: Components.Schemas.Style? = nil,
                text: Swift.String? = nil,
                value: Swift.String? = nil,
                timestamp: Swift.Int? = nil,
                format: Swift.String? = nil,
                url: Swift.String? = nil,
                fallback: Swift.String? = nil,
                unsafe: Swift.Bool? = nil,
                name: Swift.String? = nil,
                unicode: Swift.String? = nil,
                channelId: Swift.String? = nil,
                teamId: Swift.String? = nil,
                userId: Swift.String? = nil,
                usergroupId: Swift.String? = nil,
                skinTone: Swift.Int? = nil
            ) {
                self._type = _type
                self.range = range
                self.style = style
                self.text = text
                self.value = value
                self.timestamp = timestamp
                self.format = format
                self.url = url
                self.fallback = fallback
                self.unsafe = unsafe
                self.name = name
                self.unicode = unicode
                self.channelId = channelId
                self.teamId = teamId
                self.userId = userId
                self.usergroupId = usergroupId
                self.skinTone = skinTone
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case range
                case style
                case text
                case value
                case timestamp
                case format
                case url
                case fallback
                case unsafe
                case name
                case unicode
                case channelId
                case teamId
                case userId
                case usergroupId
                case skinTone
            }
        }
        /// - Remark: Generated from `#/components/schemas/StickyElement`.
        public struct StickyElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StickyElement/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/text`.
            public var text: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/StickyElement/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/style`.
            public var style: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/confirm`.
            public var confirm: Components.Schemas.Confirm?
            /// - Remark: Generated from `#/components/schemas/StickyElement/workflow`.
            public var workflow: Components.Schemas.Workflow?
            /// - Remark: Generated from `#/components/schemas/StickyElement/options`.
            public var options: [Components.Schemas.Option]?
            /// - Remark: Generated from `#/components/schemas/StickyElement/placeholder`.
            public var placeholder: Components.Schemas.Close?
            /// - Remark: Generated from `#/components/schemas/StickyElement/filter`.
            public var filter: Components.Schemas.Filter?
            /// - Remark: Generated from `#/components/schemas/StickyElement/timezone`.
            public var timezone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/fallback`.
            public var fallback: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/actionId`.
            public var actionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/accessibilityLabel`.
            public var accessibilityLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialOptions`.
            public var initialOptions: [Components.Schemas.Option]?
            /// - Remark: Generated from `#/components/schemas/StickyElement/focusOnLoad`.
            public var focusOnLoad: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialOption`.
            public var initialOption: Components.Schemas.Option?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialChannel`.
            public var initialChannel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/responseUrlEnabled`.
            public var responseUrlEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialChannels`.
            public var initialChannels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/StickyElement/maxSelectedItems`.
            public var maxSelectedItems: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialConversation`.
            public var initialConversation: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/defaultToCurrentConversation`.
            public var defaultToCurrentConversation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialConversations`.
            public var initialConversations: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialDate`.
            public var initialDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialTime`.
            public var initialTime: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialDateTime`.
            public var initialDateTime: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/StickyElement/minQueryLength`.
            public var minQueryLength: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/StickyElement/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/imageWidth`.
            public var imageWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/StickyElement/imageHeight`.
            public var imageHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/StickyElement/imageBytes`.
            public var imageBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/StickyElement/slackFile`.
            public var slackFile: Components.Schemas.SlackFile?
            /// - Remark: Generated from `#/components/schemas/StickyElement/optionGroups`.
            public var optionGroups: [Components.Schemas.OptionGroup]?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialUser`.
            public var initialUser: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StickyElement/initialUsers`.
            public var initialUsers: [Swift.String]?
            /// Creates a new `StickyElement`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - text:
            ///   - url:
            ///   - value:
            ///   - style:
            ///   - confirm:
            ///   - workflow:
            ///   - options:
            ///   - placeholder:
            ///   - filter:
            ///   - timezone:
            ///   - fallback:
            ///   - actionId:
            ///   - accessibilityLabel:
            ///   - initialOptions:
            ///   - focusOnLoad:
            ///   - initialOption:
            ///   - initialChannel:
            ///   - responseUrlEnabled:
            ///   - initialChannels:
            ///   - maxSelectedItems:
            ///   - initialConversation:
            ///   - defaultToCurrentConversation:
            ///   - initialConversations:
            ///   - initialDate:
            ///   - initialTime:
            ///   - initialDateTime:
            ///   - minQueryLength:
            ///   - imageUrl:
            ///   - altText:
            ///   - imageWidth:
            ///   - imageHeight:
            ///   - imageBytes:
            ///   - slackFile:
            ///   - optionGroups:
            ///   - initialUser:
            ///   - initialUsers:
            public init(
                _type: Swift.String? = nil,
                text: Components.Schemas.Close? = nil,
                url: Swift.String? = nil,
                value: Swift.String? = nil,
                style: Swift.String? = nil,
                confirm: Components.Schemas.Confirm? = nil,
                workflow: Components.Schemas.Workflow? = nil,
                options: [Components.Schemas.Option]? = nil,
                placeholder: Components.Schemas.Close? = nil,
                filter: Components.Schemas.Filter? = nil,
                timezone: Swift.String? = nil,
                fallback: Swift.String? = nil,
                actionId: Swift.String? = nil,
                accessibilityLabel: Swift.String? = nil,
                initialOptions: [Components.Schemas.Option]? = nil,
                focusOnLoad: Swift.Bool? = nil,
                initialOption: Components.Schemas.Option? = nil,
                initialChannel: Swift.String? = nil,
                responseUrlEnabled: Swift.Bool? = nil,
                initialChannels: [Swift.String]? = nil,
                maxSelectedItems: Swift.Int? = nil,
                initialConversation: Swift.String? = nil,
                defaultToCurrentConversation: Swift.Bool? = nil,
                initialConversations: [Swift.String]? = nil,
                initialDate: Swift.String? = nil,
                initialTime: Swift.String? = nil,
                initialDateTime: Swift.Int? = nil,
                minQueryLength: Swift.Int? = nil,
                imageUrl: Swift.String? = nil,
                altText: Swift.String? = nil,
                imageWidth: Swift.Int? = nil,
                imageHeight: Swift.Int? = nil,
                imageBytes: Swift.Int? = nil,
                slackFile: Components.Schemas.SlackFile? = nil,
                optionGroups: [Components.Schemas.OptionGroup]? = nil,
                initialUser: Swift.String? = nil,
                initialUsers: [Swift.String]? = nil
            ) {
                self._type = _type
                self.text = text
                self.url = url
                self.value = value
                self.style = style
                self.confirm = confirm
                self.workflow = workflow
                self.options = options
                self.placeholder = placeholder
                self.filter = filter
                self.timezone = timezone
                self.fallback = fallback
                self.actionId = actionId
                self.accessibilityLabel = accessibilityLabel
                self.initialOptions = initialOptions
                self.focusOnLoad = focusOnLoad
                self.initialOption = initialOption
                self.initialChannel = initialChannel
                self.responseUrlEnabled = responseUrlEnabled
                self.initialChannels = initialChannels
                self.maxSelectedItems = maxSelectedItems
                self.initialConversation = initialConversation
                self.defaultToCurrentConversation = defaultToCurrentConversation
                self.initialConversations = initialConversations
                self.initialDate = initialDate
                self.initialTime = initialTime
                self.initialDateTime = initialDateTime
                self.minQueryLength = minQueryLength
                self.imageUrl = imageUrl
                self.altText = altText
                self.imageWidth = imageWidth
                self.imageHeight = imageHeight
                self.imageBytes = imageBytes
                self.slackFile = slackFile
                self.optionGroups = optionGroups
                self.initialUser = initialUser
                self.initialUsers = initialUsers
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case url
                case value
                case style
                case confirm
                case workflow
                case options
                case placeholder
                case filter
                case timezone
                case fallback
                case actionId
                case accessibilityLabel
                case initialOptions
                case focusOnLoad
                case initialOption
                case initialChannel
                case responseUrlEnabled
                case initialChannels
                case maxSelectedItems
                case initialConversation
                case defaultToCurrentConversation
                case initialConversations
                case initialDate
                case initialTime
                case initialDateTime
                case minQueryLength
                case imageUrl
                case altText
                case imageWidth
                case imageHeight
                case imageBytes
                case slackFile
                case optionGroups
                case initialUser
                case initialUsers
            }
        }
        /// - Remark: Generated from `#/components/schemas/Close`.
        public struct Close: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Close/type`.
            public var _type: Components.Schemas.CloseType?
            /// - Remark: Generated from `#/components/schemas/Close/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Close/emoji`.
            public var emoji: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Close/verbatim`.
            public var verbatim: Swift.Bool?
            /// Creates a new `Close`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - text:
            ///   - emoji:
            ///   - verbatim:
            public init(
                _type: Components.Schemas.CloseType? = nil,
                text: Swift.String? = nil,
                emoji: Swift.Bool? = nil,
                verbatim: Swift.Bool? = nil
            ) {
                self._type = _type
                self.text = text
                self.emoji = emoji
                self.verbatim = verbatim
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case emoji
                case verbatim
            }
        }
        /// - Remark: Generated from `#/components/schemas/State`.
        public typealias State = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/InitialValueUnion`.
        public struct InitialValueUnion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InitialValueUnion/value1`.
            public var value1: Components.Schemas.InitialValueClass?
            /// - Remark: Generated from `#/components/schemas/InitialValueUnion/value2`.
            public var value2: Swift.String?
            /// Creates a new `InitialValueUnion`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.InitialValueClass? = nil,
                value2: Swift.String? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    self.value2
                ])
                try self.value1?.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/CloseType`.
        @frozen public enum CloseType: String, Codable, Hashable, Sendable, CaseIterable {
            case plainText = "plain_text"
            case mrkdwn = "mrkdwn"
            case _empty_ = ""
        }
        /// - Remark: Generated from `#/components/schemas/ElementType`.
        @frozen public enum ElementType: String, Codable, Hashable, Sendable, CaseIterable {
            case broadcast = "broadcast"
            case text = "text"
            case channel = "channel"
            case color = "color"
            case date = "date"
            case link = "link"
            case team = "team"
            case user = "user"
            case usergroup = "usergroup"
            case emoji = "emoji"
        }
        /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse`.
        public struct ViewsPublishResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/view`.
            public var view: Components.Schemas.View?
            /// - Remark: Generated from `#/components/schemas/ViewsPublishResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ViewsPublishResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - view:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                view: Components.Schemas.View? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.view = view
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case view
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ViewsPushResponse`.
        public struct ViewsPushResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/view`.
            public var view: Components.Schemas.View?
            /// - Remark: Generated from `#/components/schemas/ViewsPushResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ViewsPushResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - view:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                view: Components.Schemas.View? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.view = view
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case view
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse`.
        public struct ViewsUpdateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/warning`.
            public var warning: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/provided`.
            public var provided: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/view`.
            public var view: Components.Schemas.View?
            /// - Remark: Generated from `#/components/schemas/ViewsUpdateResponse/responseMetadata`.
            public var responseMetadata: Components.Schemas.ResponseMetadata?
            /// Creates a new `ViewsUpdateResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - warning:
            ///   - error:
            ///   - needed:
            ///   - provided:
            ///   - view:
            ///   - responseMetadata:
            public init(
                ok: Swift.Bool,
                warning: Swift.String? = nil,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil,
                view: Components.Schemas.View? = nil,
                responseMetadata: Components.Schemas.ResponseMetadata? = nil
            ) {
                self.ok = ok
                self.warning = warning
                self.error = error
                self.needed = needed
                self.provided = provided
                self.view = view
                self.responseMetadata = responseMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case warning
                case error
                case needed
                case provided
                case view
                case responseMetadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/WorkflowsStepCompletedResponse`.
        public struct WorkflowsStepCompletedResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WorkflowsStepCompletedResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/WorkflowsStepCompletedResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/WorkflowsStepCompletedResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/WorkflowsStepCompletedResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `WorkflowsStepCompletedResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/WorkflowsStepFailedResponse`.
        public struct WorkflowsStepFailedResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WorkflowsStepFailedResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/WorkflowsStepFailedResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/WorkflowsStepFailedResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/WorkflowsStepFailedResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `WorkflowsStepFailedResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
        /// - Remark: Generated from `#/components/schemas/WorkflowsUpdateStepResponse`.
        public struct WorkflowsUpdateStepResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WorkflowsUpdateStepResponse/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/WorkflowsUpdateStepResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/WorkflowsUpdateStepResponse/needed`.
            public var needed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/WorkflowsUpdateStepResponse/provided`.
            public var provided: Swift.String?
            /// Creates a new `WorkflowsUpdateStepResponse`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error:
            ///   - needed:
            ///   - provided:
            public init(
                ok: Swift.Bool,
                error: Swift.String? = nil,
                needed: Swift.String? = nil,
                provided: Swift.String? = nil
            ) {
                self.ok = ok
                self.error = error
                self.needed = needed
                self.provided = provided
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error
                case needed
                case provided
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get logs for a specified team/org
    ///
    /// - Remark: HTTP `POST /admin.apps.activities.list`.
    /// - Remark: Generated from `#/paths//admin.apps.activities.list/post(adminAppsActivitiesList)`.
    public enum AdminAppsActivitiesList {
        public static let id: Swift.String = "adminAppsActivitiesList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsActivitiesList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsActivitiesList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsActivitiesList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the app to get activities from.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/appId`.
                    public var appId: Swift.String?
                    /// The component ID of log events to be returned. Will be FnXXXXXX for functions, and WfXXXXXX for worflows.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/componentId`.
                    public var componentId: Swift.String?
                    /// The component type of log events to be returned. Acceptable values are events_api, workflows, functions and tables.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/componentType`.
                    public var componentType: Swift.String?
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// The event type of log events to be returned.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/logEventType`.
                    public var logEventType: Swift.String?
                    /// The latest timestamp of the log to retrieve (epoch microseconds).
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/maxDateCreated`.
                    public var maxDateCreated: Swift.Int?
                    /// The earliest timestamp of the log to retrieve (epoch microseconds).
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/minDateCreated`.
                    public var minDateCreated: Swift.Int?
                    /// The minimum log level of the log events to be returned. Defaults to info. Acceptable values (in order of relative importance from smallest to largest) are trace, debug, info, warn, error and fatal.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/minLogLevel`.
                    public var minLogLevel: Swift.String?
                    /// The direction you want the data sorted by (always by timestamp).
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/sortDirection`.
                    public var sortDirection: Swift.String?
                    /// The source of log events to be returned. Acceptable values are slack and developer.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/source`.
                    public var source: Swift.String?
                    /// The team who owns this log.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// The trace ID of log events to be returned.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/json/traceId`.
                    public var traceId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: The ID of the app to get activities from.
                    ///   - componentId: The component ID of log events to be returned. Will be FnXXXXXX for functions, and WfXXXXXX for worflows.
                    ///   - componentType: The component type of log events to be returned. Acceptable values are events_api, workflows, functions and tables.
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. See pagination for more detail.
                    ///   - limit: The maximum number of items to return.
                    ///   - logEventType: The event type of log events to be returned.
                    ///   - maxDateCreated: The latest timestamp of the log to retrieve (epoch microseconds).
                    ///   - minDateCreated: The earliest timestamp of the log to retrieve (epoch microseconds).
                    ///   - minLogLevel: The minimum log level of the log events to be returned. Defaults to info. Acceptable values (in order of relative importance from smallest to largest) are trace, debug, info, warn, error and fatal.
                    ///   - sortDirection: The direction you want the data sorted by (always by timestamp).
                    ///   - source: The source of log events to be returned. Acceptable values are slack and developer.
                    ///   - teamId: The team who owns this log.
                    ///   - traceId: The trace ID of log events to be returned.
                    public init(
                        appId: Swift.String? = nil,
                        componentId: Swift.String? = nil,
                        componentType: Swift.String? = nil,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        logEventType: Swift.String? = nil,
                        maxDateCreated: Swift.Int? = nil,
                        minDateCreated: Swift.Int? = nil,
                        minLogLevel: Swift.String? = nil,
                        sortDirection: Swift.String? = nil,
                        source: Swift.String? = nil,
                        teamId: Swift.String? = nil,
                        traceId: Swift.String? = nil
                    ) {
                        self.appId = appId
                        self.componentId = componentId
                        self.componentType = componentType
                        self.cursor = cursor
                        self.limit = limit
                        self.logEventType = logEventType
                        self.maxDateCreated = maxDateCreated
                        self.minDateCreated = minDateCreated
                        self.minLogLevel = minLogLevel
                        self.sortDirection = sortDirection
                        self.source = source
                        self.teamId = teamId
                        self.traceId = traceId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appId
                        case componentId
                        case componentType
                        case cursor
                        case limit
                        case logEventType
                        case maxDateCreated
                        case minDateCreated
                        case minLogLevel
                        case sortDirection
                        case source
                        case teamId
                        case traceId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsActivitiesList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsActivitiesList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsActivitiesList.Input.Headers = .init(),
                body: Operations.AdminAppsActivitiesList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.activities.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsActivitiesListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsActivitiesListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsActivitiesList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsActivitiesList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.activities.list/post(adminAppsActivitiesList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsActivitiesList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsActivitiesList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Approve an app for installation on a workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.approve`.
    /// - Remark: Generated from `#/paths//admin.apps.approve/post(adminAppsApprove)`.
    public enum AdminAppsApprove {
        public static let id: Swift.String = "adminAppsApprove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.approve/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsApprove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsApprove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsApprove.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The id of the app to approve.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/json/appId`.
                    public var appId: Swift.String?
                    /// The ID of the enterprise to approve the app on.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/json/enterpriseId`.
                    public var enterpriseId: Swift.String?
                    /// The id of the request to approve.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/json/requestId`.
                    public var requestId: Swift.String?
                    /// The ID of the workspace to approve the app on.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: The id of the app to approve.
                    ///   - enterpriseId: The ID of the enterprise to approve the app on.
                    ///   - requestId: The id of the request to approve.
                    ///   - teamId: The ID of the workspace to approve the app on.
                    public init(
                        appId: Swift.String? = nil,
                        enterpriseId: Swift.String? = nil,
                        requestId: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.appId = appId
                        self.enterpriseId = enterpriseId
                        self.requestId = requestId
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appId
                        case enterpriseId
                        case requestId
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.approve/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsApprove.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsApprove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsApprove.Input.Headers = .init(),
                body: Operations.AdminAppsApprove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.approve/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.approve/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsApproveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsApproveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsApprove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsApprove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.approve/post(adminAppsApprove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsApprove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsApprove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List approved apps for an org or workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.approved.list`.
    /// - Remark: Generated from `#/paths//admin.apps.approved.list/post(adminAppsApprovedList)`.
    public enum AdminAppsApprovedList {
        public static let id: Swift.String = "adminAppsApprovedList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsApprovedList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsApprovedList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsApprovedList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Limit the results to only include certified apps. When false, no certified apps will appear in the result.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json/certified`.
                    public var certified: Swift.Bool?
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json/enterpriseId`.
                    public var enterpriseId: Swift.String?
                    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - certified: Limit the results to only include certified apps. When false, no certified apps will appear in the result.
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - enterpriseId: .
                    ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///   - teamId: .
                    public init(
                        certified: Swift.Bool? = nil,
                        cursor: Swift.String? = nil,
                        enterpriseId: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.certified = certified
                        self.cursor = cursor
                        self.enterpriseId = enterpriseId
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case certified
                        case cursor
                        case enterpriseId
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsApprovedList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsApprovedList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsApprovedList.Input.Headers = .init(),
                body: Operations.AdminAppsApprovedList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.approved.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsApprovedListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsApprovedListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsApprovedList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsApprovedList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.approved.list/post(adminAppsApprovedList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsApprovedList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsApprovedList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Clear an app resolution
    ///
    /// - Remark: HTTP `POST /admin.apps.clearResolution`.
    /// - Remark: Generated from `#/paths//admin.apps.clearResolution/post(adminAppsClearResolution)`.
    public enum AdminAppsClearResolution {
        public static let id: Swift.String = "adminAppsClearResolution"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsClearResolution.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsClearResolution.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsClearResolution.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The id of the app whose resolution you want to clear/undo.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody/json/appId`.
                    public var appId: Swift.String
                    /// The enterprise to clear the app resolution from.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody/json/enterpriseId`.
                    public var enterpriseId: Swift.String?
                    /// The workspace to clear the app resolution from.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: The id of the app whose resolution you want to clear/undo.
                    ///   - enterpriseId: The enterprise to clear the app resolution from.
                    ///   - teamId: The workspace to clear the app resolution from.
                    public init(
                        appId: Swift.String,
                        enterpriseId: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.appId = appId
                        self.enterpriseId = enterpriseId
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appId
                        case enterpriseId
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsClearResolution.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsClearResolution.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsClearResolution.Input.Headers = .init(),
                body: Operations.AdminAppsClearResolution.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.clearResolution/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsClearResolutionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsClearResolutionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsClearResolution.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsClearResolution.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.clearResolution/post(adminAppsClearResolution)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsClearResolution.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsClearResolution.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Look up the app config for connectors by their IDs
    ///
    /// - Remark: HTTP `POST /admin.apps.config.lookup`.
    /// - Remark: Generated from `#/paths//admin.apps.config.lookup/post(adminAppsConfigLookup)`.
    public enum AdminAppsConfigLookup {
        public static let id: Swift.String = "adminAppsConfigLookup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsConfigLookup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsConfigLookup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsConfigLookup.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// An array of app IDs to get app configs for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/requestBody/json/appIds`.
                    public var appIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appIds: An array of app IDs to get app configs for.
                    public init(appIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                        self.appIds = appIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsConfigLookup.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsConfigLookup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsConfigLookup.Input.Headers = .init(),
                body: Operations.AdminAppsConfigLookup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.config.lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsConfigLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsConfigLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsConfigLookup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsConfigLookup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.config.lookup/post(adminAppsConfigLookup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsConfigLookup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsConfigLookup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the app config for a connector
    ///
    /// - Remark: HTTP `POST /admin.apps.config.set`.
    /// - Remark: Generated from `#/paths//admin.apps.config.set/post(adminAppsConfigSet)`.
    public enum AdminAppsConfigSet {
        public static let id: Swift.String = "adminAppsConfigSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsConfigSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsConfigSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsConfigSet.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The encoded app ID to set the app config for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody/json/appId`.
                    public var appId: Swift.String
                    /// Domain restrictions for the app. Should be an object with two properties: urls and emails. Each is an array of strings, and each sets the allowed URLs and emails for connector authorization, respectively.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody/json/domainRestrictions`.
                    public var domainRestrictions: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// The workflow auth permission. Can be one of builder_choice or end_user_only.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody/json/workflowAuthStrategy`.
                    public var workflowAuthStrategy: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: The encoded app ID to set the app config for.
                    ///   - domainRestrictions: Domain restrictions for the app. Should be an object with two properties: urls and emails. Each is an array of strings, and each sets the allowed URLs and emails for connector authorization, respectively.
                    ///   - workflowAuthStrategy: The workflow auth permission. Can be one of builder_choice or end_user_only.
                    public init(
                        appId: Swift.String,
                        domainRestrictions: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        workflowAuthStrategy: Swift.String? = nil
                    ) {
                        self.appId = appId
                        self.domainRestrictions = domainRestrictions
                        self.workflowAuthStrategy = workflowAuthStrategy
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appId
                        case domainRestrictions
                        case workflowAuthStrategy
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsConfigSet.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsConfigSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsConfigSet.Input.Headers = .init(),
                body: Operations.AdminAppsConfigSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.config.set/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsConfigSetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsConfigSetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsConfigSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsConfigSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.config.set/post(adminAppsConfigSet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsConfigSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsConfigSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancel app request for team
    ///
    /// - Remark: HTTP `POST /admin.apps.requests.cancel`.
    /// - Remark: Generated from `#/paths//admin.apps.requests.cancel/post(adminAppsRequestsCancel)`.
    public enum AdminAppsRequestsCancel {
        public static let id: Swift.String = "adminAppsRequestsCancel"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRequestsCancel.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRequestsCancel.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsRequestsCancel.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The id of the request to cancel.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody/json/requestId`.
                    public var requestId: Swift.String
                    /// The ID of the enterprise where this request belongs.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody/json/enterpriseId`.
                    public var enterpriseId: Swift.String?
                    /// The ID of the workspace where this request belongs.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - requestId: The id of the request to cancel.
                    ///   - enterpriseId: The ID of the enterprise where this request belongs.
                    ///   - teamId: The ID of the workspace where this request belongs.
                    public init(
                        requestId: Swift.String,
                        enterpriseId: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.requestId = requestId
                        self.enterpriseId = enterpriseId
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case requestId
                        case enterpriseId
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsRequestsCancel.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsRequestsCancel.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsRequestsCancel.Input.Headers = .init(),
                body: Operations.AdminAppsRequestsCancel.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.requests.cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsRequestsCancelResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsRequestsCancelResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsRequestsCancel.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsRequestsCancel.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.requests.cancel/post(adminAppsRequestsCancel)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsRequestsCancel.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsRequestsCancel.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List app requests for a team/workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.requests.list`.
    /// - Remark: Generated from `#/paths//admin.apps.requests.list/post(adminAppsRequestsList)`.
    public enum AdminAppsRequestsList {
        public static let id: Swift.String = "adminAppsRequestsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRequestsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRequestsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsRequestsList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Include requests for certified apps.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json/certified`.
                    public var certified: Swift.Bool?
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json/enterpriseId`.
                    public var enterpriseId: Swift.String?
                    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - certified: Include requests for certified apps.
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - enterpriseId: .
                    ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///   - teamId: .
                    public init(
                        certified: Swift.Bool? = nil,
                        cursor: Swift.String? = nil,
                        enterpriseId: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.certified = certified
                        self.cursor = cursor
                        self.enterpriseId = enterpriseId
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case certified
                        case cursor
                        case enterpriseId
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsRequestsList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsRequestsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsRequestsList.Input.Headers = .init(),
                body: Operations.AdminAppsRequestsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.requests.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsRequestsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsRequestsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsRequestsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsRequestsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.requests.list/post(adminAppsRequestsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsRequestsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsRequestsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Restrict an app for installation on a workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.restrict`.
    /// - Remark: Generated from `#/paths//admin.apps.restrict/post(adminAppsRestrict)`.
    public enum AdminAppsRestrict {
        public static let id: Swift.String = "adminAppsRestrict"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRestrict.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRestrict.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsRestrict.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The id of the app to restrict.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/json/appId`.
                    public var appId: Swift.String?
                    /// The ID of the enterprise to approve the app on.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/json/enterpriseId`.
                    public var enterpriseId: Swift.String?
                    /// The id of the request to restrict.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/json/requestId`.
                    public var requestId: Swift.String?
                    /// The ID of the workspace to approve the app on.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: The id of the app to restrict.
                    ///   - enterpriseId: The ID of the enterprise to approve the app on.
                    ///   - requestId: The id of the request to restrict.
                    ///   - teamId: The ID of the workspace to approve the app on.
                    public init(
                        appId: Swift.String? = nil,
                        enterpriseId: Swift.String? = nil,
                        requestId: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.appId = appId
                        self.enterpriseId = enterpriseId
                        self.requestId = requestId
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appId
                        case enterpriseId
                        case requestId
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsRestrict.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsRestrict.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsRestrict.Input.Headers = .init(),
                body: Operations.AdminAppsRestrict.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.restrict/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsRestrictResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsRestrictResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsRestrict.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsRestrict.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.restrict/post(adminAppsRestrict)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsRestrict.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsRestrict.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List restricted apps for an org or workspace.
    ///
    /// - Remark: HTTP `POST /admin.apps.restricted.list`.
    /// - Remark: Generated from `#/paths//admin.apps.restricted.list/post(adminAppsRestrictedList)`.
    public enum AdminAppsRestrictedList {
        public static let id: Swift.String = "adminAppsRestrictedList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRestrictedList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsRestrictedList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsRestrictedList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Limit the results to only include certified apps. When false, no certified apps will appear in the result.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json/certified`.
                    public var certified: Swift.Bool?
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json/enterpriseId`.
                    public var enterpriseId: Swift.String?
                    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - certified: Limit the results to only include certified apps. When false, no certified apps will appear in the result.
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - enterpriseId: .
                    ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///   - teamId: .
                    public init(
                        certified: Swift.Bool? = nil,
                        cursor: Swift.String? = nil,
                        enterpriseId: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.certified = certified
                        self.cursor = cursor
                        self.enterpriseId = enterpriseId
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case certified
                        case cursor
                        case enterpriseId
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsRestrictedList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsRestrictedList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsRestrictedList.Input.Headers = .init(),
                body: Operations.AdminAppsRestrictedList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.restricted.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsRestrictedListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsRestrictedListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsRestrictedList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsRestrictedList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.restricted.list/post(adminAppsRestrictedList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsRestrictedList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsRestrictedList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Uninstall an app from one or many workspaces, or an entire enterprise organization.
    ///
    /// - Remark: HTTP `POST /admin.apps.uninstall`.
    /// - Remark: Generated from `#/paths//admin.apps.uninstall/post(adminAppsUninstall)`.
    public enum AdminAppsUninstall {
        public static let id: Swift.String = "adminAppsUninstall"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsUninstall.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAppsUninstall.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAppsUninstall.Input.Headers
            /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the app to uninstall.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody/json/appId`.
                    public var appId: Swift.String
                    /// The enterprise to completely uninstall the application from (across all workspaces). With an org-level token, this or team_ids is required.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody/json/enterpriseId`.
                    public var enterpriseId: Swift.String?
                    /// IDs of the teams to uninstall from (max 100). With an org-level token, this or enterprise_id is required.
                    ///
                    /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody/json/teamIds`.
                    public var teamIds: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: The ID of the app to uninstall.
                    ///   - enterpriseId: The enterprise to completely uninstall the application from (across all workspaces). With an org-level token, this or team_ids is required.
                    ///   - teamIds: IDs of the teams to uninstall from (max 100). With an org-level token, this or enterprise_id is required.
                    public init(
                        appId: Swift.String,
                        enterpriseId: Swift.String? = nil,
                        teamIds: Swift.String? = nil
                    ) {
                        self.appId = appId
                        self.enterpriseId = enterpriseId
                        self.teamIds = teamIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appId
                        case enterpriseId
                        case teamIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAppsUninstall.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAppsUninstall.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAppsUninstall.Input.Headers = .init(),
                body: Operations.AdminAppsUninstall.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.apps.uninstall/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAppsUninstallResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAppsUninstallResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAppsUninstall.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAppsUninstall.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.apps.uninstall/post(adminAppsUninstall)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAppsUninstall.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAppsUninstall.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Assign entities to a particular authentication policy.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.assignEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.assignEntities/post(adminAuthPolicyAssignEntities)`.
    public enum AdminAuthPolicyAssignEntities {
        public static let id: Swift.String = "adminAuthPolicyAssignEntities"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyAssignEntities.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyAssignEntities.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAuthPolicyAssignEntities.Input.Headers
            /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Array of IDs to assign to the policy.
                    ///
                    /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody/json/entityIds`.
                    public var entityIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// The type of entity to assign to the policy. Currently, USER is supported.
                    ///
                    /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody/json/entityType`.
                    public var entityType: Swift.String
                    /// The name of the authentication policy to assign the entities to. Currently, email_password is the only policy that may be used with this method.
                    ///
                    /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody/json/policyName`.
                    public var policyName: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - entityIds: Array of IDs to assign to the policy.
                    ///   - entityType: The type of entity to assign to the policy. Currently, USER is supported.
                    ///   - policyName: The name of the authentication policy to assign the entities to. Currently, email_password is the only policy that may be used with this method.
                    public init(
                        entityIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        entityType: Swift.String,
                        policyName: Swift.String
                    ) {
                        self.entityIds = entityIds
                        self.entityType = entityType
                        self.policyName = policyName
                    }
                    public enum CodingKeys: String, CodingKey {
                        case entityIds
                        case entityType
                        case policyName
                    }
                }
                /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAuthPolicyAssignEntities.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAuthPolicyAssignEntities.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAuthPolicyAssignEntities.Input.Headers = .init(),
                body: Operations.AdminAuthPolicyAssignEntities.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.auth.policy.assignEntities/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAuthPolicyAssignEntitiesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAuthPolicyAssignEntitiesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAuthPolicyAssignEntities.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAuthPolicyAssignEntities.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.auth.policy.assignEntities/post(adminAuthPolicyAssignEntities)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAuthPolicyAssignEntities.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAuthPolicyAssignEntities.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch all the entities assigned to a particular authentication policy by name.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.getEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.getEntities/post(adminAuthPolicyGetEntities)`.
    public enum AdminAuthPolicyGetEntities {
        public static let id: Swift.String = "adminAuthPolicyGetEntities"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyGetEntities.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyGetEntities.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAuthPolicyGetEntities.Input.Headers
            /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The name of the policy to fetch entities for. Currently, email_password is the only policy that may be used with this method.
                    ///
                    /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/json/policyName`.
                    public var policyName: Swift.String
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The type of entity to assign to the policy. Currently, USER is supported.
                    ///
                    /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/json/entityType`.
                    public var entityType: Swift.String?
                    /// The maximum number of items to return. Must be between 1 and 1000, both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - policyName: The name of the policy to fetch entities for. Currently, email_password is the only policy that may be used with this method.
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - entityType: The type of entity to assign to the policy. Currently, USER is supported.
                    ///   - limit: The maximum number of items to return. Must be between 1 and 1000, both inclusive.
                    public init(
                        policyName: Swift.String,
                        cursor: Swift.String? = nil,
                        entityType: Swift.String? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.policyName = policyName
                        self.cursor = cursor
                        self.entityType = entityType
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case policyName
                        case cursor
                        case entityType
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAuthPolicyGetEntities.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAuthPolicyGetEntities.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAuthPolicyGetEntities.Input.Headers = .init(),
                body: Operations.AdminAuthPolicyGetEntities.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.auth.policy.getEntities/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAuthPolicyGetEntitiesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAuthPolicyGetEntitiesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAuthPolicyGetEntities.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAuthPolicyGetEntities.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.auth.policy.getEntities/post(adminAuthPolicyGetEntities)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAuthPolicyGetEntities.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAuthPolicyGetEntities.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove specified entities from a specified authentication policy.
    ///
    /// - Remark: HTTP `POST /admin.auth.policy.removeEntities`.
    /// - Remark: Generated from `#/paths//admin.auth.policy.removeEntities/post(adminAuthPolicyRemoveEntities)`.
    public enum AdminAuthPolicyRemoveEntities {
        public static let id: Swift.String = "adminAuthPolicyRemoveEntities"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyRemoveEntities.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminAuthPolicyRemoveEntities.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminAuthPolicyRemoveEntities.Input.Headers
            /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded IDs of the entities you'd like to remove from the policy.
                    ///
                    /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody/json/entityIds`.
                    public var entityIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// The type of entity to assign to the policy. Currently, USER is supported.
                    ///
                    /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody/json/entityType`.
                    public var entityType: Swift.String
                    /// The name of the policy to remove entities from. Currently, email_password is the only policy that may be used with this method.
                    ///
                    /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody/json/policyName`.
                    public var policyName: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - entityIds: Encoded IDs of the entities you'd like to remove from the policy.
                    ///   - entityType: The type of entity to assign to the policy. Currently, USER is supported.
                    ///   - policyName: The name of the policy to remove entities from. Currently, email_password is the only policy that may be used with this method.
                    public init(
                        entityIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        entityType: Swift.String,
                        policyName: Swift.String
                    ) {
                        self.entityIds = entityIds
                        self.entityType = entityType
                        self.policyName = policyName
                    }
                    public enum CodingKeys: String, CodingKey {
                        case entityIds
                        case entityType
                        case policyName
                    }
                }
                /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/requestBody/content/application\/json`.
                case json(Operations.AdminAuthPolicyRemoveEntities.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminAuthPolicyRemoveEntities.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminAuthPolicyRemoveEntities.Input.Headers = .init(),
                body: Operations.AdminAuthPolicyRemoveEntities.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.auth.policy.removeEntities/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAuthPolicyRemoveEntitiesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAuthPolicyRemoveEntitiesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminAuthPolicyRemoveEntities.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminAuthPolicyRemoveEntities.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.auth.policy.removeEntities/post(adminAuthPolicyRemoveEntities)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminAuthPolicyRemoveEntities.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminAuthPolicyRemoveEntities.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.create`.
    /// - Remark: Generated from `#/paths//admin.barriers.create/post(adminBarriersCreate)`.
    public enum AdminBarriersCreate {
        public static let id: Swift.String = "adminBarriersCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminBarriersCreate.Input.Headers
            /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// A list of IDP Groups ids that the primary usergroup is to be barriered from.
                    ///
                    /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody/json/barrieredFromUsergroupIds`.
                    public var barrieredFromUsergroupIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// The id of the primary IDP Group.
                    ///
                    /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody/json/primaryUsergroupId`.
                    public var primaryUsergroupId: Swift.String
                    /// What kind of interactions are blocked by this barrier? For v1, we only support a list of all 3, eg im, mpim, call.
                    ///
                    /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody/json/restrictedSubjects`.
                    public var restrictedSubjects: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - barrieredFromUsergroupIds: A list of IDP Groups ids that the primary usergroup is to be barriered from.
                    ///   - primaryUsergroupId: The id of the primary IDP Group.
                    ///   - restrictedSubjects: What kind of interactions are blocked by this barrier? For v1, we only support a list of all 3, eg im, mpim, call.
                    public init(
                        barrieredFromUsergroupIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        primaryUsergroupId: Swift.String,
                        restrictedSubjects: OpenAPIRuntime.OpenAPIArrayContainer
                    ) {
                        self.barrieredFromUsergroupIds = barrieredFromUsergroupIds
                        self.primaryUsergroupId = primaryUsergroupId
                        self.restrictedSubjects = restrictedSubjects
                    }
                    public enum CodingKeys: String, CodingKey {
                        case barrieredFromUsergroupIds
                        case primaryUsergroupId
                        case restrictedSubjects
                    }
                }
                /// - Remark: Generated from `#/paths/admin.barriers.create/POST/requestBody/content/application\/json`.
                case json(Operations.AdminBarriersCreate.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminBarriersCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminBarriersCreate.Input.Headers = .init(),
                body: Operations.AdminBarriersCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.barriers.create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminBarriersCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminBarriersCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminBarriersCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminBarriersCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.barriers.create/post(adminBarriersCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminBarriersCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminBarriersCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an existing Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.delete`.
    /// - Remark: Generated from `#/paths//admin.barriers.delete/post(adminBarriersDelete)`.
    public enum AdminBarriersDelete {
        public static let id: Swift.String = "adminBarriersDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminBarriersDelete.Input.Headers
            /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the barrier you're trying to delete.
                    ///
                    /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/requestBody/json/barrierId`.
                    public var barrierId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - barrierId: The ID of the barrier you're trying to delete.
                    public init(barrierId: Swift.String) {
                        self.barrierId = barrierId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case barrierId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/requestBody/content/application\/json`.
                case json(Operations.AdminBarriersDelete.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminBarriersDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminBarriersDelete.Input.Headers = .init(),
                body: Operations.AdminBarriersDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.barriers.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminBarriersDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminBarriersDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminBarriersDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminBarriersDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.barriers.delete/post(adminBarriersDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminBarriersDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminBarriersDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all Information Barriers for your organization
    ///
    /// - Remark: HTTP `POST /admin.barriers.list`.
    /// - Remark: Generated from `#/paths//admin.barriers.list/post(adminBarriersList)`.
    public enum AdminBarriersList {
        public static let id: Swift.String = "adminBarriersList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminBarriersList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.barriers.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.barriers.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.barriers.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/admin.barriers.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminBarriersList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminBarriersList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminBarriersList.Input.Headers = .init(),
                body: Operations.AdminBarriersList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.barriers.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminBarriersListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminBarriersListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminBarriersList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminBarriersList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.barriers.list/post(adminBarriersList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminBarriersList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminBarriersList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an existing Information Barrier
    ///
    /// - Remark: HTTP `POST /admin.barriers.update`.
    /// - Remark: Generated from `#/paths//admin.barriers.update/post(adminBarriersUpdate)`.
    public enum AdminBarriersUpdate {
        public static let id: Swift.String = "adminBarriersUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.barriers.update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminBarriersUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminBarriersUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the barrier you're trying to modify.
                    ///
                    /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/json/barrierId`.
                    public var barrierId: Swift.String
                    /// A list of IDP Groups ids that the primary usergroup is to be barriered from.
                    ///
                    /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/json/barrieredFromUsergroupIds`.
                    public var barrieredFromUsergroupIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// The id of the primary IDP Group.
                    ///
                    /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/json/primaryUsergroupId`.
                    public var primaryUsergroupId: Swift.String
                    /// What kind of interactions are blocked by this barrier? For v1, we only support a list of all 3, eg im, mpim, call.
                    ///
                    /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/json/restrictedSubjects`.
                    public var restrictedSubjects: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - barrierId: The ID of the barrier you're trying to modify.
                    ///   - barrieredFromUsergroupIds: A list of IDP Groups ids that the primary usergroup is to be barriered from.
                    ///   - primaryUsergroupId: The id of the primary IDP Group.
                    ///   - restrictedSubjects: What kind of interactions are blocked by this barrier? For v1, we only support a list of all 3, eg im, mpim, call.
                    public init(
                        barrierId: Swift.String,
                        barrieredFromUsergroupIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        primaryUsergroupId: Swift.String,
                        restrictedSubjects: OpenAPIRuntime.OpenAPIArrayContainer
                    ) {
                        self.barrierId = barrierId
                        self.barrieredFromUsergroupIds = barrieredFromUsergroupIds
                        self.primaryUsergroupId = primaryUsergroupId
                        self.restrictedSubjects = restrictedSubjects
                    }
                    public enum CodingKeys: String, CodingKey {
                        case barrierId
                        case barrieredFromUsergroupIds
                        case primaryUsergroupId
                        case restrictedSubjects
                    }
                }
                /// - Remark: Generated from `#/paths/admin.barriers.update/POST/requestBody/content/application\/json`.
                case json(Operations.AdminBarriersUpdate.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminBarriersUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminBarriersUpdate.Input.Headers = .init(),
                body: Operations.AdminBarriersUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.barriers.update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.barriers.update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminBarriersUpdateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminBarriersUpdateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminBarriersUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminBarriersUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.barriers.update/post(adminBarriersUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminBarriersUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminBarriersUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Archive a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.archive`.
    /// - Remark: Generated from `#/paths//admin.conversations.archive/post(adminConversationsArchive)`.
    public enum AdminConversationsArchive {
        public static let id: Swift.String = "adminConversationsArchive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsArchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsArchive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsArchive.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to archive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to archive.
                    public init(channelId: Swift.String) {
                        self.channelId = channelId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsArchive.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsArchive.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsArchive.Input.Headers = .init(),
                body: Operations.AdminConversationsArchive.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.archive/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsArchiveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsArchiveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsArchive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsArchive.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.archive/post(adminConversationsArchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsArchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsArchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Archive public or private channels in bulk.
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkArchive`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkArchive/post(adminConversationsBulkArchive)`.
    public enum AdminConversationsBulkArchive {
        public static let id: Swift.String = "adminConversationsBulkArchive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkArchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkArchive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsBulkArchive.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// An array of channel IDs to archive. No more than 100 items are allowed.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/requestBody/json/channelIds`.
                    public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelIds: An array of channel IDs to archive. No more than 100 items are allowed.
                    public init(channelIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                        self.channelIds = channelIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsBulkArchive.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsBulkArchive.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsBulkArchive.Input.Headers = .init(),
                body: Operations.AdminConversationsBulkArchive.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.bulkArchive/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsBulkArchiveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsBulkArchiveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsBulkArchive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsBulkArchive.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.bulkArchive/post(adminConversationsBulkArchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsBulkArchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsBulkArchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete public or private channels in bulk
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkDelete`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkDelete/post(adminConversationsBulkDelete)`.
    public enum AdminConversationsBulkDelete {
        public static let id: Swift.String = "adminConversationsBulkDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsBulkDelete.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// An array of channel IDs.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/requestBody/json/channelIds`.
                    public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelIds: An array of channel IDs.
                    public init(channelIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                        self.channelIds = channelIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsBulkDelete.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsBulkDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsBulkDelete.Input.Headers = .init(),
                body: Operations.AdminConversationsBulkDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.bulkDelete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsBulkDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsBulkDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsBulkDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsBulkDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.bulkDelete/post(adminConversationsBulkDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsBulkDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsBulkDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Move public or private channels in bulk.
    ///
    /// - Remark: HTTP `POST /admin.conversations.bulkMove`.
    /// - Remark: Generated from `#/paths//admin.conversations.bulkMove/post(adminConversationsBulkMove)`.
    public enum AdminConversationsBulkMove {
        public static let id: Swift.String = "adminConversationsBulkMove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkMove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsBulkMove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsBulkMove.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// An array of channel IDs.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/requestBody/json/channelIds`.
                    public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Target team ID.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/requestBody/json/targetTeamId`.
                    public var targetTeamId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelIds: An array of channel IDs.
                    ///   - targetTeamId: Target team ID.
                    public init(
                        channelIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        targetTeamId: Swift.String
                    ) {
                        self.channelIds = channelIds
                        self.targetTeamId = targetTeamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelIds
                        case targetTeamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsBulkMove.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsBulkMove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsBulkMove.Input.Headers = .init(),
                body: Operations.AdminConversationsBulkMove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.bulkMove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsBulkMoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsBulkMoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsBulkMove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsBulkMove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.bulkMove/post(adminConversationsBulkMove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsBulkMove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsBulkMove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Convert a public channel to a private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.convertToPrivate`.
    /// - Remark: Generated from `#/paths//admin.conversations.convertToPrivate/post(adminConversationsConvertToPrivate)`.
    public enum AdminConversationsConvertToPrivate {
        public static let id: Swift.String = "adminConversationsConvertToPrivate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsConvertToPrivate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsConvertToPrivate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsConvertToPrivate.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to convert to private.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Name of private channel to create. Only respected when converting an MPIM.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/requestBody/json/name`.
                    public var name: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to convert to private.
                    ///   - name: Name of private channel to create. Only respected when converting an MPIM.
                    public init(
                        channelId: Swift.String,
                        name: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsConvertToPrivate.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsConvertToPrivate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsConvertToPrivate.Input.Headers = .init(),
                body: Operations.AdminConversationsConvertToPrivate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.convertToPrivate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsConvertToPrivateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsConvertToPrivateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsConvertToPrivate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsConvertToPrivate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.convertToPrivate/post(adminConversationsConvertToPrivate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsConvertToPrivate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsConvertToPrivate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Convert a private channel to a public channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.convertToPublic`.
    /// - Remark: Generated from `#/paths//admin.conversations.convertToPublic/post(adminConversationsConvertToPublic)`.
    public enum AdminConversationsConvertToPublic {
        public static let id: Swift.String = "adminConversationsConvertToPublic"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsConvertToPublic.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsConvertToPublic.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsConvertToPublic.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to convert to public.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to convert to public.
                    public init(channelId: Swift.String) {
                        self.channelId = channelId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsConvertToPublic.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsConvertToPublic.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsConvertToPublic.Input.Headers = .init(),
                body: Operations.AdminConversationsConvertToPublic.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.convertToPublic/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsConvertToPublicResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsConvertToPublicResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsConvertToPublic.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsConvertToPublic.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.convertToPublic/post(adminConversationsConvertToPublic)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsConvertToPublic.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsConvertToPublic.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a public or private channel-based conversation.
    ///
    /// - Remark: HTTP `POST /admin.conversations.create`.
    /// - Remark: Generated from `#/paths//admin.conversations.create/post(adminConversationsCreate)`.
    public enum AdminConversationsCreate {
        public static let id: Swift.String = "adminConversationsCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsCreate.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// When true, creates a private channel instead of a public channel.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json/isPrivate`.
                    public var isPrivate: Swift.Bool
                    /// Name of the public or private channel to create.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Description of the public or private channel to create.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// When true, the channel will be available org-wide. Note: if the channel is not org_wide=true, you must specify a team_id for this channel.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json/orgWide`.
                    public var orgWide: Swift.Bool?
                    /// The workspace to create the channel in. Note: this argument is required unless you set org_wide=true.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - isPrivate: When true, creates a private channel instead of a public channel.
                    ///   - name: Name of the public or private channel to create.
                    ///   - description: Description of the public or private channel to create.
                    ///   - orgWide: When true, the channel will be available org-wide. Note: if the channel is not org_wide=true, you must specify a team_id for this channel.
                    ///   - teamId: The workspace to create the channel in. Note: this argument is required unless you set org_wide=true.
                    public init(
                        isPrivate: Swift.Bool,
                        name: Swift.String,
                        description: Swift.String? = nil,
                        orgWide: Swift.Bool? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.isPrivate = isPrivate
                        self.name = name
                        self.description = description
                        self.orgWide = orgWide
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case isPrivate
                        case name
                        case description
                        case orgWide
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.create/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsCreate.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsCreate.Input.Headers = .init(),
                body: Operations.AdminConversationsCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.create/post(adminConversationsCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.delete`.
    /// - Remark: Generated from `#/paths//admin.conversations.delete/post(adminConversationsDelete)`.
    public enum AdminConversationsDelete {
        public static let id: Swift.String = "adminConversationsDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsDelete.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to delete.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to delete.
                    public init(channelId: Swift.String) {
                        self.channelId = channelId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsDelete.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsDelete.Input.Headers = .init(),
                body: Operations.AdminConversationsDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.delete/post(adminConversationsDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Disconnect a connected channel from one or more workspaces.
    ///
    /// - Remark: HTTP `POST /admin.conversations.disconnectShared`.
    /// - Remark: Generated from `#/paths//admin.conversations.disconnectShared/post(adminConversationsDisconnectShared)`.
    public enum AdminConversationsDisconnectShared {
        public static let id: Swift.String = "adminConversationsDisconnectShared"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsDisconnectShared.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsDisconnectShared.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsDisconnectShared.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to be disconnected from some workspaces.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// team IDs getting removed from the channel, optional if there are only two teams in the channel.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/requestBody/json/leavingTeamIds`.
                    public var leavingTeamIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to be disconnected from some workspaces.
                    ///   - leavingTeamIds: team IDs getting removed from the channel, optional if there are only two teams in the channel.
                    public init(
                        channelId: Swift.String,
                        leavingTeamIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                    ) {
                        self.channelId = channelId
                        self.leavingTeamIds = leavingTeamIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case leavingTeamIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsDisconnectShared.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsDisconnectShared.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsDisconnectShared.Input.Headers = .init(),
                body: Operations.AdminConversationsDisconnectShared.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.disconnectShared/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsDisconnectSharedResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsDisconnectSharedResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsDisconnectShared.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsDisconnectShared.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.disconnectShared/post(adminConversationsDisconnectShared)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsDisconnectShared.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsDisconnectShared.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
    ///
    /// - Remark: HTTP `POST /admin.conversations.ekm.listOriginalConnectedChannelInfo`.
    /// - Remark: Generated from `#/paths//admin.conversations.ekm.listOriginalConnectedChannelInfo/post(adminConversationsEkmListOriginalConnectedChannelInfo)`.
    public enum AdminConversationsEkmListOriginalConnectedChannelInfo {
        public static let id: Swift.String = "adminConversationsEkmListOriginalConnectedChannelInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// A comma-separated list of channels to filter to.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/json/channelIds`.
                    public var channelIds: Swift.String?
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// A comma-separated list of the workspaces to which the channels you would like returned belong.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/json/teamIds`.
                    public var teamIds: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelIds: A comma-separated list of channels to filter to.
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///   - teamIds: A comma-separated list of the workspaces to which the channels you would like returned belong.
                    public init(
                        channelIds: Swift.String? = nil,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamIds: Swift.String? = nil
                    ) {
                        self.channelIds = channelIds
                        self.cursor = cursor
                        self.limit = limit
                        self.teamIds = teamIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelIds
                        case cursor
                        case limit
                        case teamIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Headers = .init(),
                body: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.ekm.listOriginalConnectedChannelInfo/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsEkmListOriginalConnectedChannelInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsEkmListOriginalConnectedChannelInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.ekm.listOriginalConnectedChannelInfo/post(adminConversationsEkmListOriginalConnectedChannelInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsEkmListOriginalConnectedChannelInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get conversation preferences for a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getConversationPrefs`.
    /// - Remark: Generated from `#/paths//admin.conversations.getConversationPrefs/post(adminConversationsGetConversationPrefs)`.
    public enum AdminConversationsGetConversationPrefs {
        public static let id: Swift.String = "adminConversationsGetConversationPrefs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetConversationPrefs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetConversationPrefs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsGetConversationPrefs.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to get preferences for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to get preferences for.
                    public init(channelId: Swift.String) {
                        self.channelId = channelId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsGetConversationPrefs.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsGetConversationPrefs.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsGetConversationPrefs.Input.Headers = .init(),
                body: Operations.AdminConversationsGetConversationPrefs.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.getConversationPrefs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsGetConversationPrefsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsGetConversationPrefsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsGetConversationPrefs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsGetConversationPrefs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.getConversationPrefs/post(adminConversationsGetConversationPrefs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsGetConversationPrefs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsGetConversationPrefs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// This API endpoint can be used by any admin to get a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.getCustomRetention/post(adminConversationsGetCustomRetention)`.
    public enum AdminConversationsGetCustomRetention {
        public static let id: Swift.String = "adminConversationsGetCustomRetention"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetCustomRetention.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetCustomRetention.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsGetCustomRetention.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The conversation to get the retention policy for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The conversation to get the retention policy for.
                    public init(channelId: Swift.String) {
                        self.channelId = channelId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsGetCustomRetention.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsGetCustomRetention.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsGetCustomRetention.Input.Headers = .init(),
                body: Operations.AdminConversationsGetCustomRetention.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.getCustomRetention/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsGetCustomRetentionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsGetCustomRetentionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsGetCustomRetention.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsGetCustomRetention.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.getCustomRetention/post(adminConversationsGetCustomRetention)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsGetCustomRetention.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsGetCustomRetention.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all the workspaces a given public or private channel is connected to within this Enterprise org.
    ///
    /// - Remark: HTTP `POST /admin.conversations.getTeams`.
    /// - Remark: Generated from `#/paths//admin.conversations.getTeams/post(adminConversationsGetTeams)`.
    public enum AdminConversationsGetTeams {
        public static let id: Swift.String = "adminConversationsGetTeams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetTeams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsGetTeams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsGetTeams.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to determine connected workspaces within the organization for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to determine connected workspaces within the organization for.
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    public init(
                        channelId: Swift.String,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.channelId = channelId
                        self.cursor = cursor
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case cursor
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsGetTeams.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsGetTeams.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsGetTeams.Input.Headers = .init(),
                body: Operations.AdminConversationsGetTeams.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.getTeams/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsGetTeamsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsGetTeamsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsGetTeams.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsGetTeams.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.getTeams/post(adminConversationsGetTeams)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsGetTeams.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsGetTeams.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Invite a user to a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.invite`.
    /// - Remark: Generated from `#/paths//admin.conversations.invite/post(adminConversationsInvite)`.
    public enum AdminConversationsInvite {
        public static let id: Swift.String = "adminConversationsInvite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsInvite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsInvite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsInvite.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel that the users will be invited to.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// The users to invite.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel that the users will be invited to.
                    ///   - userIds: The users to invite.
                    public init(
                        channelId: Swift.String,
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer
                    ) {
                        self.channelId = channelId
                        self.userIds = userIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case userIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsInvite.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsInvite.Input.Headers = .init(),
                body: Operations.AdminConversationsInvite.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.invite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsInviteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsInviteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsInvite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.invite/post(adminConversationsInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns channels on the given team using the filters.
    ///
    /// - Remark: HTTP `POST /admin.conversations.lookup`.
    /// - Remark: Generated from `#/paths//admin.conversations.lookup/post(adminConversationsLookup)`.
    public enum AdminConversationsLookup {
        public static let id: Swift.String = "adminConversationsLookup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsLookup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsLookup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsLookup.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Filter by public channels where the most recent message was sent before last_message_activity.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json/lastMessageActivityBefore`.
                    public var lastMessageActivityBefore: Swift.Int
                    /// Array of team IDs to filter by.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json/teamIds`.
                    public var teamIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Set cursor to next_cursor returned in the previous call, to fetch the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Maximum number of results.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Filter by public channels with member count equal to or less than the specified number.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/json/maxMemberCount`.
                    public var maxMemberCount: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - lastMessageActivityBefore: Filter by public channels where the most recent message was sent before last_message_activity.
                    ///   - teamIds: Array of team IDs to filter by.
                    ///   - cursor: Set cursor to next_cursor returned in the previous call, to fetch the next page.
                    ///   - limit: Maximum number of results.
                    ///   - maxMemberCount: Filter by public channels with member count equal to or less than the specified number.
                    public init(
                        lastMessageActivityBefore: Swift.Int,
                        teamIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        maxMemberCount: Swift.Int? = nil
                    ) {
                        self.lastMessageActivityBefore = lastMessageActivityBefore
                        self.teamIds = teamIds
                        self.cursor = cursor
                        self.limit = limit
                        self.maxMemberCount = maxMemberCount
                    }
                    public enum CodingKeys: String, CodingKey {
                        case lastMessageActivityBefore
                        case teamIds
                        case cursor
                        case limit
                        case maxMemberCount
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsLookup.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsLookup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsLookup.Input.Headers = .init(),
                body: Operations.AdminConversationsLookup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsLookup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsLookup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.lookup/post(adminConversationsLookup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsLookup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsLookup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// This API endpoint can be used by any admin to remove a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.removeCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.removeCustomRetention/post(adminConversationsRemoveCustomRetention)`.
    public enum AdminConversationsRemoveCustomRetention {
        public static let id: Swift.String = "adminConversationsRemoveCustomRetention"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRemoveCustomRetention.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRemoveCustomRetention.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsRemoveCustomRetention.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The conversation to set the retention policy for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The conversation to set the retention policy for.
                    public init(channelId: Swift.String) {
                        self.channelId = channelId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsRemoveCustomRetention.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsRemoveCustomRetention.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsRemoveCustomRetention.Input.Headers = .init(),
                body: Operations.AdminConversationsRemoveCustomRetention.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.removeCustomRetention/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsRemoveCustomRetentionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsRemoveCustomRetentionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsRemoveCustomRetention.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsRemoveCustomRetention.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.removeCustomRetention/post(adminConversationsRemoveCustomRetention)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsRemoveCustomRetention.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsRemoveCustomRetention.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Rename a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.rename`.
    /// - Remark: Generated from `#/paths//admin.conversations.rename/post(adminConversationsRename)`.
    public enum AdminConversationsRename {
        public static let id: Swift.String = "adminConversationsRename"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRename.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRename.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsRename.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to rename.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to rename.
                    ///   - name: .
                    public init(
                        channelId: Swift.String,
                        name: Swift.String
                    ) {
                        self.channelId = channelId
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsRename.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsRename.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsRename.Input.Headers = .init(),
                body: Operations.AdminConversationsRename.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.rename/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsRenameResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsRenameResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsRename.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsRename.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.rename/post(adminConversationsRename)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsRename.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsRename.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add an allowlist of IDP groups for accessing a channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.addGroup`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.addGroup/post(adminConversationsRestrictAccessAddGroup)`.
    public enum AdminConversationsRestrictAccessAddGroup {
        public static let id: Swift.String = "adminConversationsRestrictAccessAddGroup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessAddGroup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessAddGroup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsRestrictAccessAddGroup.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to link this group to.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// The IDP Group ID to be an allowlist for the private channel.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody/json/groupId`.
                    public var groupId: Swift.String
                    /// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to link this group to.
                    ///   - groupId: The IDP Group ID to be an allowlist for the private channel.
                    ///   - teamId: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                    public init(
                        channelId: Swift.String,
                        groupId: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.groupId = groupId
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case groupId
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsRestrictAccessAddGroup.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsRestrictAccessAddGroup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsRestrictAccessAddGroup.Input.Headers = .init(),
                body: Operations.AdminConversationsRestrictAccessAddGroup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.addGroup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsRestrictAccessAddGroupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsRestrictAccessAddGroupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsRestrictAccessAddGroup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsRestrictAccessAddGroup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.addGroup/post(adminConversationsRestrictAccessAddGroup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsRestrictAccessAddGroup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsRestrictAccessAddGroup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all IDP Groups linked to a channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.listGroups`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.listGroups/post(adminConversationsRestrictAccessListGroups)`.
    public enum AdminConversationsRestrictAccessListGroups {
        public static let id: Swift.String = "adminConversationsRestrictAccessListGroups"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessListGroups.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessListGroups.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsRestrictAccessListGroups.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: .
                    ///   - teamId: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                    public init(
                        channelId: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsRestrictAccessListGroups.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsRestrictAccessListGroups.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsRestrictAccessListGroups.Input.Headers = .init(),
                body: Operations.AdminConversationsRestrictAccessListGroups.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.listGroups/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsRestrictAccessListGroupsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsRestrictAccessListGroupsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsRestrictAccessListGroups.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsRestrictAccessListGroups.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.listGroups/post(adminConversationsRestrictAccessListGroups)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsRestrictAccessListGroups.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsRestrictAccessListGroups.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a linked IDP group linked from a private channel
    ///
    /// - Remark: HTTP `POST /admin.conversations.restrictAccess.removeGroup`.
    /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.removeGroup/post(adminConversationsRestrictAccessRemoveGroup)`.
    public enum AdminConversationsRestrictAccessRemoveGroup {
        public static let id: Swift.String = "adminConversationsRestrictAccessRemoveGroup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessRemoveGroup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsRestrictAccessRemoveGroup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to remove the linked group from.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// The IDP Group ID to remove from the private channel.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody/json/groupId`.
                    public var groupId: Swift.String
                    /// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to remove the linked group from.
                    ///   - groupId: The IDP Group ID to remove from the private channel.
                    ///   - teamId: The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
                    public init(
                        channelId: Swift.String,
                        groupId: Swift.String,
                        teamId: Swift.String
                    ) {
                        self.channelId = channelId
                        self.groupId = groupId
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case groupId
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Headers = .init(),
                body: Operations.AdminConversationsRestrictAccessRemoveGroup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.restrictAccess.removeGroup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsRestrictAccessRemoveGroupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsRestrictAccessRemoveGroupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsRestrictAccessRemoveGroup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsRestrictAccessRemoveGroup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.restrictAccess.removeGroup/post(adminConversationsRestrictAccessRemoveGroup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsRestrictAccessRemoveGroup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsRestrictAccessRemoveGroup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search for public or private channels in an Enterprise organization.
    ///
    /// - Remark: HTTP `POST /admin.conversations.search`.
    /// - Remark: Generated from `#/paths//admin.conversations.search/post(adminConversationsSearch)`.
    public enum AdminConversationsSearch {
        public static let id: Swift.String = "adminConversationsSearch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.search/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSearch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSearch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsSearch.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Array of encoded team IDs, signifying the external orgs to search through.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/connectedTeamIds`.
                    public var connectedTeamIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Name of the the channel to query by.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/query`.
                    public var query: Swift.String?
                    /// The type of channel to include or exclude in the search. For example private will search private channels, while private_exclude will exclude them. For a full list of types, check the Types section.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/searchChannelTypes`.
                    public var searchChannelTypes: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Possible values are relevant (search ranking based on what we think is closest), name (alphabetical), member_count (number of users in the channel), and created (date channel was created). You can optionally pair this with the sort_dir arg to change how it is sorted.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/sort`.
                    public var sort: Swift.String?
                    /// Sort direction. Possible values are asc for ascending order like (1, 2, 3) or (a, b, c), and desc for descending order like (3, 2, 1) or (c, b, a).
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/sortDir`.
                    public var sortDir: Swift.String?
                    /// Comma separated string of team IDs, signifying the internal workspaces to search through.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/teamIds`.
                    public var teamIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Only return the total_count of channels. Omits channel data and allows access for admins without channel manager permissions.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/json/totalCountOnly`.
                    public var totalCountOnly: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - connectedTeamIds: Array of encoded team IDs, signifying the external orgs to search through.
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - limit: Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
                    ///   - query: Name of the the channel to query by.
                    ///   - searchChannelTypes: The type of channel to include or exclude in the search. For example private will search private channels, while private_exclude will exclude them. For a full list of types, check the Types section.
                    ///   - sort: Possible values are relevant (search ranking based on what we think is closest), name (alphabetical), member_count (number of users in the channel), and created (date channel was created). You can optionally pair this with the sort_dir arg to change how it is sorted.
                    ///   - sortDir: Sort direction. Possible values are asc for ascending order like (1, 2, 3) or (a, b, c), and desc for descending order like (3, 2, 1) or (c, b, a).
                    ///   - teamIds: Comma separated string of team IDs, signifying the internal workspaces to search through.
                    ///   - totalCountOnly: Only return the total_count of channels. Omits channel data and allows access for admins without channel manager permissions.
                    public init(
                        connectedTeamIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        query: Swift.String? = nil,
                        searchChannelTypes: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        sort: Swift.String? = nil,
                        sortDir: Swift.String? = nil,
                        teamIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        totalCountOnly: Swift.Bool? = nil
                    ) {
                        self.connectedTeamIds = connectedTeamIds
                        self.cursor = cursor
                        self.limit = limit
                        self.query = query
                        self.searchChannelTypes = searchChannelTypes
                        self.sort = sort
                        self.sortDir = sortDir
                        self.teamIds = teamIds
                        self.totalCountOnly = totalCountOnly
                    }
                    public enum CodingKeys: String, CodingKey {
                        case connectedTeamIds
                        case cursor
                        case limit
                        case query
                        case searchChannelTypes
                        case sort
                        case sortDir
                        case teamIds
                        case totalCountOnly
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsSearch.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsSearch.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsSearch.Input.Headers = .init(),
                body: Operations.AdminConversationsSearch.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.search/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.search/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsSearchResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsSearchResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsSearch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsSearch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.search/post(adminConversationsSearch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsSearch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsSearch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the posting permissions for a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setConversationPrefs`.
    /// - Remark: Generated from `#/paths//admin.conversations.setConversationPrefs/post(adminConversationsSetConversationPrefs)`.
    public enum AdminConversationsSetConversationPrefs {
        public static let id: Swift.String = "adminConversationsSetConversationPrefs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetConversationPrefs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetConversationPrefs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsSetConversationPrefs.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to set the prefs for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// The prefs for this channel in a stringified JSON format.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/requestBody/json/prefs`.
                    public var prefs: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to set the prefs for.
                    ///   - prefs: The prefs for this channel in a stringified JSON format.
                    public init(
                        channelId: Swift.String,
                        prefs: Swift.String
                    ) {
                        self.channelId = channelId
                        self.prefs = prefs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case prefs
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsSetConversationPrefs.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsSetConversationPrefs.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsSetConversationPrefs.Input.Headers = .init(),
                body: Operations.AdminConversationsSetConversationPrefs.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.setConversationPrefs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsSetConversationPrefsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsSetConversationPrefsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsSetConversationPrefs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsSetConversationPrefs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.setConversationPrefs/post(adminConversationsSetConversationPrefs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsSetConversationPrefs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsSetConversationPrefs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// This API endpoint can be used by any admin to set a conversation's retention policy.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setCustomRetention`.
    /// - Remark: Generated from `#/paths//admin.conversations.setCustomRetention/post(adminConversationsSetCustomRetention)`.
    public enum AdminConversationsSetCustomRetention {
        public static let id: Swift.String = "adminConversationsSetCustomRetention"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetCustomRetention.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetCustomRetention.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsSetCustomRetention.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The conversation to set the retention policy for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// The message retention duration in days to set for this conversation.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/requestBody/json/durationDays`.
                    public var durationDays: Swift.Int
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The conversation to set the retention policy for.
                    ///   - durationDays: The message retention duration in days to set for this conversation.
                    public init(
                        channelId: Swift.String,
                        durationDays: Swift.Int
                    ) {
                        self.channelId = channelId
                        self.durationDays = durationDays
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case durationDays
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsSetCustomRetention.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsSetCustomRetention.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsSetCustomRetention.Input.Headers = .init(),
                body: Operations.AdminConversationsSetCustomRetention.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.setCustomRetention/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsSetCustomRetentionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsSetCustomRetentionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsSetCustomRetention.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsSetCustomRetention.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.setCustomRetention/post(adminConversationsSetCustomRetention)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsSetCustomRetention.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsSetCustomRetention.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the workspaces in an Enterprise grid org that connect to a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.setTeams`.
    /// - Remark: Generated from `#/paths//admin.conversations.setTeams/post(adminConversationsSetTeams)`.
    public enum AdminConversationsSetTeams {
        public static let id: Swift.String = "adminConversationsSetTeams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetTeams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsSetTeams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsSetTeams.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The encoded channel_id to add or remove to workspaces.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// True if channel has to be converted to an org channel.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/json/orgChannel`.
                    public var orgChannel: Swift.Bool?
                    /// A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/json/targetTeamIds`.
                    public var targetTeamIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// The workspace to which the channel belongs if the channel is a local workspace channel. Omit this argument if the channel is a cross-workspace or org-wide shared channel.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The encoded channel_id to add or remove to workspaces.
                    ///   - orgChannel: True if channel has to be converted to an org channel.
                    ///   - targetTeamIds: A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
                    ///   - teamId: The workspace to which the channel belongs if the channel is a local workspace channel. Omit this argument if the channel is a cross-workspace or org-wide shared channel.
                    public init(
                        channelId: Swift.String,
                        orgChannel: Swift.Bool? = nil,
                        targetTeamIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.orgChannel = orgChannel
                        self.targetTeamIds = targetTeamIds
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case orgChannel
                        case targetTeamIds
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsSetTeams.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsSetTeams.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsSetTeams.Input.Headers = .init(),
                body: Operations.AdminConversationsSetTeams.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.setTeams/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsSetTeamsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsSetTeamsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsSetTeams.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsSetTeams.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.setTeams/post(adminConversationsSetTeams)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsSetTeams.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsSetTeams.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Unarchive a public or private channel.
    ///
    /// - Remark: HTTP `POST /admin.conversations.unarchive`.
    /// - Remark: Generated from `#/paths//admin.conversations.unarchive/post(adminConversationsUnarchive)`.
    public enum AdminConversationsUnarchive {
        public static let id: Swift.String = "adminConversationsUnarchive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsUnarchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminConversationsUnarchive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminConversationsUnarchive.Input.Headers
            /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel to unarchive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: The channel to unarchive.
                    public init(channelId: Swift.String) {
                        self.channelId = channelId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/requestBody/content/application\/json`.
                case json(Operations.AdminConversationsUnarchive.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminConversationsUnarchive.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminConversationsUnarchive.Input.Headers = .init(),
                body: Operations.AdminConversationsUnarchive.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.conversations.unarchive/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminConversationsUnarchiveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminConversationsUnarchiveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminConversationsUnarchive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminConversationsUnarchive.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.conversations.unarchive/post(adminConversationsUnarchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminConversationsUnarchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminConversationsUnarchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add an emoji.
    ///
    /// - Remark: HTTP `POST /admin.emoji.add`.
    /// - Remark: Generated from `#/paths//admin.emoji.add/post(adminEmojiAdd)`.
    public enum AdminEmojiAdd {
        public static let id: Swift.String = "adminEmojiAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminEmojiAdd.Input.Headers
            /// - Remark: Generated from `#/paths/admin.emoji.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The name of the emoji to be added (using lower-case letters only). Colons (:myemoji:) around the value are not required, although they may be included.
                    ///
                    /// - Remark: Generated from `#/paths/admin.emoji.add/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
                    ///
                    /// - Remark: Generated from `#/paths/admin.emoji.add/POST/requestBody/json/url`.
                    public var url: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the emoji to be added (using lower-case letters only). Colons (:myemoji:) around the value are not required, although they may be included.
                    ///   - url: The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
                    public init(
                        name: Swift.String,
                        url: Swift.String
                    ) {
                        self.name = name
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case url
                    }
                }
                /// - Remark: Generated from `#/paths/admin.emoji.add/POST/requestBody/content/application\/json`.
                case json(Operations.AdminEmojiAdd.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminEmojiAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminEmojiAdd.Input.Headers = .init(),
                body: Operations.AdminEmojiAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.emoji.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminEmojiAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminEmojiAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminEmojiAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminEmojiAdd.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.emoji.add/post(adminEmojiAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminEmojiAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminEmojiAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add an emoji alias.
    ///
    /// - Remark: HTTP `POST /admin.emoji.addAlias`.
    /// - Remark: Generated from `#/paths//admin.emoji.addAlias/post(adminEmojiAddAlias)`.
    public enum AdminEmojiAddAlias {
        public static let id: Swift.String = "adminEmojiAddAlias"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiAddAlias.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiAddAlias.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminEmojiAddAlias.Input.Headers
            /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the emoji for which the alias is being made. Any wrapping whitespace or colons will be automatically trimmed.
                    ///
                    /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/requestBody/json/aliasFor`.
                    public var aliasFor: Swift.String
                    /// The new alias for the specified emoji. Any wrapping whitespace or colons will be automatically trimmed.
                    ///
                    /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - aliasFor: Name of the emoji for which the alias is being made. Any wrapping whitespace or colons will be automatically trimmed.
                    ///   - name: The new alias for the specified emoji. Any wrapping whitespace or colons will be automatically trimmed.
                    public init(
                        aliasFor: Swift.String,
                        name: Swift.String
                    ) {
                        self.aliasFor = aliasFor
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case aliasFor
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/requestBody/content/application\/json`.
                case json(Operations.AdminEmojiAddAlias.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminEmojiAddAlias.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminEmojiAddAlias.Input.Headers = .init(),
                body: Operations.AdminEmojiAddAlias.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.emoji.addAlias/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminEmojiAddAliasResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminEmojiAddAliasResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminEmojiAddAlias.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminEmojiAddAlias.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.emoji.addAlias/post(adminEmojiAddAlias)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminEmojiAddAlias.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminEmojiAddAlias.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List emoji for an Enterprise Grid organization.
    ///
    /// - Remark: HTTP `POST /admin.emoji.list`.
    /// - Remark: Generated from `#/paths//admin.emoji.list/post(adminEmojiList)`.
    public enum AdminEmojiList {
        public static let id: Swift.String = "adminEmojiList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminEmojiList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.emoji.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.emoji.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.emoji.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/admin.emoji.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminEmojiList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminEmojiList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminEmojiList.Input.Headers = .init(),
                body: Operations.AdminEmojiList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.emoji.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminEmojiListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminEmojiListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminEmojiList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminEmojiList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.emoji.list/post(adminEmojiList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminEmojiList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminEmojiList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove an emoji across an Enterprise Grid organization
    ///
    /// - Remark: HTTP `POST /admin.emoji.remove`.
    /// - Remark: Generated from `#/paths//admin.emoji.remove/post(adminEmojiRemove)`.
    public enum AdminEmojiRemove {
        public static let id: Swift.String = "adminEmojiRemove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiRemove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiRemove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminEmojiRemove.Input.Headers
            /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The name of the emoji to be removed. Colons (:myemoji:) around the value are not required, although they may be included.
                    ///
                    /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the emoji to be removed. Colons (:myemoji:) around the value are not required, although they may be included.
                    public init(name: Swift.String) {
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/requestBody/content/application\/json`.
                case json(Operations.AdminEmojiRemove.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminEmojiRemove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminEmojiRemove.Input.Headers = .init(),
                body: Operations.AdminEmojiRemove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.emoji.remove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminEmojiRemoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminEmojiRemoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminEmojiRemove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminEmojiRemove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.emoji.remove/post(adminEmojiRemove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminEmojiRemove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminEmojiRemove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Rename an emoji.
    ///
    /// - Remark: HTTP `POST /admin.emoji.rename`.
    /// - Remark: Generated from `#/paths//admin.emoji.rename/post(adminEmojiRename)`.
    public enum AdminEmojiRename {
        public static let id: Swift.String = "adminEmojiRename"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiRename.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminEmojiRename.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminEmojiRename.Input.Headers
            /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The name of the emoji to be renamed. Colons (:myemoji:) around the value are not required, although they may be included.
                    ///
                    /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The new name of the emoji.
                    ///
                    /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/requestBody/json/newName`.
                    public var newName: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the emoji to be renamed. Colons (:myemoji:) around the value are not required, although they may be included.
                    ///   - newName: The new name of the emoji.
                    public init(
                        name: Swift.String,
                        newName: Swift.String
                    ) {
                        self.name = name
                        self.newName = newName
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case newName
                    }
                }
                /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/requestBody/content/application\/json`.
                case json(Operations.AdminEmojiRename.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminEmojiRename.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminEmojiRename.Input.Headers = .init(),
                body: Operations.AdminEmojiRename.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.emoji.rename/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminEmojiRenameResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminEmojiRenameResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminEmojiRename.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminEmojiRename.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.emoji.rename/post(adminEmojiRename)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminEmojiRename.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminEmojiRename.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Look up functions by a set of apps
    ///
    /// - Remark: HTTP `POST /admin.functions.list`.
    /// - Remark: Generated from `#/paths//admin.functions.list/post(adminFunctionsList)`.
    public enum AdminFunctionsList {
        public static let id: Swift.String = "adminFunctionsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.functions.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminFunctionsList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Comma-separated array of app IDs to get functions for; max 50.
                    ///
                    /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/json/appIds`.
                    public var appIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The number of results that will be returned by the API on each invocation. Must be between 1 and 1000, both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// The team context to retrieve functions from.
                    ///
                    /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appIds: Comma-separated array of app IDs to get functions for; max 50.
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - limit: The number of results that will be returned by the API on each invocation. Must be between 1 and 1000, both inclusive.
                    ///   - teamId: The team context to retrieve functions from.
                    public init(
                        appIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.appIds = appIds
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appIds
                        case cursor
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.functions.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminFunctionsList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminFunctionsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminFunctionsList.Input.Headers = .init(),
                body: Operations.AdminFunctionsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.functions.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.functions.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminFunctionsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminFunctionsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminFunctionsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminFunctionsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.functions.list/post(adminFunctionsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminFunctionsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminFunctionsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lookup the visibility of multiple Slack functions and include the users if it is limited to particular named entities.
    ///
    /// - Remark: HTTP `POST /admin.functions.permissions.lookup`.
    /// - Remark: Generated from `#/paths//admin.functions.permissions.lookup/post(adminFunctionsPermissionsLookup)`.
    public enum AdminFunctionsPermissionsLookup {
        public static let id: Swift.String = "adminFunctionsPermissionsLookup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsPermissionsLookup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsPermissionsLookup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminFunctionsPermissionsLookup.Input.Headers
            /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// An array of function IDs to get permissions for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/requestBody/json/functionIds`.
                    public var functionIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - functionIds: An array of function IDs to get permissions for.
                    public init(functionIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                        self.functionIds = functionIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case functionIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/requestBody/content/application\/json`.
                case json(Operations.AdminFunctionsPermissionsLookup.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminFunctionsPermissionsLookup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminFunctionsPermissionsLookup.Input.Headers = .init(),
                body: Operations.AdminFunctionsPermissionsLookup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.functions.permissions.lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminFunctionsPermissionsLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminFunctionsPermissionsLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminFunctionsPermissionsLookup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminFunctionsPermissionsLookup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.functions.permissions.lookup/post(adminFunctionsPermissionsLookup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminFunctionsPermissionsLookup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminFunctionsPermissionsLookup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the visibility of a Slack function and define the users or workspaces if it is set to named_entities
    ///
    /// - Remark: HTTP `POST /admin.functions.permissions.set`.
    /// - Remark: Generated from `#/paths//admin.functions.permissions.set/post(adminFunctionsPermissionsSet)`.
    public enum AdminFunctionsPermissionsSet {
        public static let id: Swift.String = "adminFunctionsPermissionsSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsPermissionsSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminFunctionsPermissionsSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminFunctionsPermissionsSet.Input.Headers
            /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The function ID to set permissions for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody/json/functionId`.
                    public var functionId: Swift.String
                    /// The function visibility.
                    ///
                    /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody/json/visibility`.
                    public var visibility: Swift.String
                    /// List of user IDs to allow for named_entities visibility.
                    ///
                    /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - functionId: The function ID to set permissions for.
                    ///   - visibility: The function visibility.
                    ///   - userIds: List of user IDs to allow for named_entities visibility.
                    public init(
                        functionId: Swift.String,
                        visibility: Swift.String,
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                    ) {
                        self.functionId = functionId
                        self.visibility = visibility
                        self.userIds = userIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case functionId
                        case visibility
                        case userIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/requestBody/content/application\/json`.
                case json(Operations.AdminFunctionsPermissionsSet.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminFunctionsPermissionsSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminFunctionsPermissionsSet.Input.Headers = .init(),
                body: Operations.AdminFunctionsPermissionsSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.functions.permissions.set/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminFunctionsPermissionsSetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminFunctionsPermissionsSetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminFunctionsPermissionsSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminFunctionsPermissionsSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.functions.permissions.set/post(adminFunctionsPermissionsSet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminFunctionsPermissionsSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminFunctionsPermissionsSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Approve a workspace invite request.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.approve`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.approve/post(adminInviteRequestsApprove)`.
    public enum AdminInviteRequestsApprove {
        public static let id: Swift.String = "adminInviteRequestsApprove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsApprove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsApprove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminInviteRequestsApprove.Input.Headers
            /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the request to invite.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/requestBody/json/inviteRequestId`.
                    public var inviteRequestId: Swift.String
                    /// ID for the workspace where the invite request was made.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inviteRequestId: ID of the request to invite.
                    ///   - teamId: ID for the workspace where the invite request was made.
                    public init(
                        inviteRequestId: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.inviteRequestId = inviteRequestId
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inviteRequestId
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/requestBody/content/application\/json`.
                case json(Operations.AdminInviteRequestsApprove.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminInviteRequestsApprove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminInviteRequestsApprove.Input.Headers = .init(),
                body: Operations.AdminInviteRequestsApprove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.approve/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminInviteRequestsApproveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminInviteRequestsApproveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminInviteRequestsApprove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminInviteRequestsApprove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.inviteRequests.approve/post(adminInviteRequestsApprove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminInviteRequestsApprove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminInviteRequestsApprove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all approved workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.approved.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.approved.list/post(adminInviteRequestsApprovedList)`.
    public enum AdminInviteRequestsApprovedList {
        public static let id: Swift.String = "adminInviteRequestsApprovedList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsApprovedList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsApprovedList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminInviteRequestsApprovedList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Value of the next_cursor field sent as part of the previous API response.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// ID for the workspace where the invite requests were made.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Value of the next_cursor field sent as part of the previous API response.
                    ///   - limit: The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive.
                    ///   - teamId: ID for the workspace where the invite requests were made.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminInviteRequestsApprovedList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminInviteRequestsApprovedList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminInviteRequestsApprovedList.Input.Headers = .init(),
                body: Operations.AdminInviteRequestsApprovedList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.approved.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminInviteRequestsApprovedListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminInviteRequestsApprovedListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminInviteRequestsApprovedList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminInviteRequestsApprovedList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.inviteRequests.approved.list/post(adminInviteRequestsApprovedList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminInviteRequestsApprovedList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminInviteRequestsApprovedList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all denied workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.denied.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.denied.list/post(adminInviteRequestsDeniedList)`.
    public enum AdminInviteRequestsDeniedList {
        public static let id: Swift.String = "adminInviteRequestsDeniedList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsDeniedList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsDeniedList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminInviteRequestsDeniedList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Value of the next_cursor field sent as part of the previous api response.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// ID for the workspace where the invite requests were made.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Value of the next_cursor field sent as part of the previous api response.
                    ///   - limit: The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive.
                    ///   - teamId: ID for the workspace where the invite requests were made.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminInviteRequestsDeniedList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminInviteRequestsDeniedList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminInviteRequestsDeniedList.Input.Headers = .init(),
                body: Operations.AdminInviteRequestsDeniedList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.denied.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminInviteRequestsDeniedListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminInviteRequestsDeniedListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminInviteRequestsDeniedList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminInviteRequestsDeniedList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.inviteRequests.denied.list/post(adminInviteRequestsDeniedList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminInviteRequestsDeniedList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminInviteRequestsDeniedList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deny a workspace invite request.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.deny`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.deny/post(adminInviteRequestsDeny)`.
    public enum AdminInviteRequestsDeny {
        public static let id: Swift.String = "adminInviteRequestsDeny"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsDeny.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsDeny.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminInviteRequestsDeny.Input.Headers
            /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the request to invite.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/requestBody/json/inviteRequestId`.
                    public var inviteRequestId: Swift.String
                    /// ID for the workspace where the invite request was made.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inviteRequestId: ID of the request to invite.
                    ///   - teamId: ID for the workspace where the invite request was made.
                    public init(
                        inviteRequestId: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.inviteRequestId = inviteRequestId
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inviteRequestId
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/requestBody/content/application\/json`.
                case json(Operations.AdminInviteRequestsDeny.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminInviteRequestsDeny.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminInviteRequestsDeny.Input.Headers = .init(),
                body: Operations.AdminInviteRequestsDeny.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.deny/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminInviteRequestsDenyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminInviteRequestsDenyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminInviteRequestsDeny.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminInviteRequestsDeny.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.inviteRequests.deny/post(adminInviteRequestsDeny)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminInviteRequestsDeny.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminInviteRequestsDeny.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all pending workspace invite requests.
    ///
    /// - Remark: HTTP `POST /admin.inviteRequests.list`.
    /// - Remark: Generated from `#/paths//admin.inviteRequests.list/post(adminInviteRequestsList)`.
    public enum AdminInviteRequestsList {
        public static let id: Swift.String = "adminInviteRequestsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminInviteRequestsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminInviteRequestsList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Value of the next_cursor field sent as part of the previous API response.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// ID for the workspace where the invite requests were made.
                    ///
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Value of the next_cursor field sent as part of the previous API response.
                    ///   - limit: The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive.
                    ///   - teamId: ID for the workspace where the invite requests were made.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminInviteRequestsList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminInviteRequestsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminInviteRequestsList.Input.Headers = .init(),
                body: Operations.AdminInviteRequestsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.inviteRequests.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminInviteRequestsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminInviteRequestsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminInviteRequestsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminInviteRequestsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.inviteRequests.list/post(adminInviteRequestsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminInviteRequestsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminInviteRequestsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Adds members to the specified role with the specified scopes
    ///
    /// - Remark: HTTP `POST /admin.roles.addAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.addAssignments/post(adminRolesAddAssignments)`.
    public enum AdminRolesAddAssignments {
        public static let id: Swift.String = "adminRolesAddAssignments"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesAddAssignments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesAddAssignments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminRolesAddAssignments.Input.Headers
            /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// List of the entity IDs for which roles will be assigned. These can be Org IDs, Team IDs or Channel IDs.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody/json/entityIds`.
                    public var entityIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// ID of the role to which users will be assigned.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody/json/roleId`.
                    public var roleId: Swift.String
                    /// List of IDs from the users to be added to the given role.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - entityIds: List of the entity IDs for which roles will be assigned. These can be Org IDs, Team IDs or Channel IDs.
                    ///   - roleId: ID of the role to which users will be assigned.
                    ///   - userIds: List of IDs from the users to be added to the given role.
                    public init(
                        entityIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        roleId: Swift.String,
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer
                    ) {
                        self.entityIds = entityIds
                        self.roleId = roleId
                        self.userIds = userIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case entityIds
                        case roleId
                        case userIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/requestBody/content/application\/json`.
                case json(Operations.AdminRolesAddAssignments.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminRolesAddAssignments.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminRolesAddAssignments.Input.Headers = .init(),
                body: Operations.AdminRolesAddAssignments.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.roles.addAssignments/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminRolesAddAssignmentsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminRolesAddAssignmentsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminRolesAddAssignments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminRolesAddAssignments.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.roles.addAssignments/post(adminRolesAddAssignments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminRolesAddAssignments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminRolesAddAssignments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists assignments for all roles across entities. Options to scope results by any combination of roles or entities
    ///
    /// - Remark: HTTP `POST /admin.roles.listAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.listAssignments/post(adminRolesListAssignments)`.
    public enum AdminRolesListAssignments {
        public static let id: Swift.String = "adminRolesListAssignments"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesListAssignments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesListAssignments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminRolesListAssignments.Input.Headers
            /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The entities for which the roles apply.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json/entityIds`.
                    public var entityIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// The maximum number of items to return. Must be between 1 - 200 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// collection of role ids to scope results by.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json/roleIds`.
                    public var roleIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Sort direction. Default is descending on date_create, can be either ASC or DESC.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/json/sortDir`.
                    public var sortDir: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - entityIds: The entities for which the roles apply.
                    ///   - limit: The maximum number of items to return. Must be between 1 - 200 both inclusive.
                    ///   - roleIds: collection of role ids to scope results by.
                    ///   - sortDir: Sort direction. Default is descending on date_create, can be either ASC or DESC.
                    public init(
                        cursor: Swift.String? = nil,
                        entityIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        limit: Swift.Int? = nil,
                        roleIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        sortDir: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.entityIds = entityIds
                        self.limit = limit
                        self.roleIds = roleIds
                        self.sortDir = sortDir
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case entityIds
                        case limit
                        case roleIds
                        case sortDir
                    }
                }
                /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/requestBody/content/application\/json`.
                case json(Operations.AdminRolesListAssignments.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminRolesListAssignments.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminRolesListAssignments.Input.Headers = .init(),
                body: Operations.AdminRolesListAssignments.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.roles.listAssignments/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminRolesListAssignmentsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminRolesListAssignmentsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminRolesListAssignments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminRolesListAssignments.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.roles.listAssignments/post(adminRolesListAssignments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminRolesListAssignments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminRolesListAssignments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Removes a set of users from a role for the given scopes and entities
    ///
    /// - Remark: HTTP `POST /admin.roles.removeAssignments`.
    /// - Remark: Generated from `#/paths//admin.roles.removeAssignments/post(adminRolesRemoveAssignments)`.
    public enum AdminRolesRemoveAssignments {
        public static let id: Swift.String = "adminRolesRemoveAssignments"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesRemoveAssignments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminRolesRemoveAssignments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminRolesRemoveAssignments.Input.Headers
            /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// List of the entity IDs for which roles will be revoked. These can be Org IDs, Team IDs or Channel IDs.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody/json/entityIds`.
                    public var entityIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// ID of the role to which users will be assigned.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody/json/roleId`.
                    public var roleId: Swift.String
                    /// List of IDs of the users whose roles will be revoked.
                    ///
                    /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - entityIds: List of the entity IDs for which roles will be revoked. These can be Org IDs, Team IDs or Channel IDs.
                    ///   - roleId: ID of the role to which users will be assigned.
                    ///   - userIds: List of IDs of the users whose roles will be revoked.
                    public init(
                        entityIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        roleId: Swift.String,
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer
                    ) {
                        self.entityIds = entityIds
                        self.roleId = roleId
                        self.userIds = userIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case entityIds
                        case roleId
                        case userIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/requestBody/content/application\/json`.
                case json(Operations.AdminRolesRemoveAssignments.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminRolesRemoveAssignments.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminRolesRemoveAssignments.Input.Headers = .init(),
                body: Operations.AdminRolesRemoveAssignments.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.roles.removeAssignments/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminRolesRemoveAssignmentsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminRolesRemoveAssignmentsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminRolesRemoveAssignments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminRolesRemoveAssignments.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.roles.removeAssignments/post(adminRolesRemoveAssignments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminRolesRemoveAssignments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminRolesRemoveAssignments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all of the admins on a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.admins.list`.
    /// - Remark: Generated from `#/paths//admin.teams.admins.list/post(adminTeamsAdminsList)`.
    public enum AdminTeamsAdminsList {
        public static let id: Swift.String = "adminTeamsAdminsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsAdminsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsAdminsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminTeamsAdminsList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: .
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - limit: The maximum number of items to return.
                    public init(
                        teamId: Swift.String,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.teamId = teamId
                        self.cursor = cursor
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamId
                        case cursor
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminTeamsAdminsList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminTeamsAdminsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminTeamsAdminsList.Input.Headers = .init(),
                body: Operations.AdminTeamsAdminsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.teams.admins.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminTeamsAdminsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminTeamsAdminsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminTeamsAdminsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminTeamsAdminsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.teams.admins.list/post(adminTeamsAdminsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminTeamsAdminsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminTeamsAdminsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an Enterprise team.
    ///
    /// - Remark: HTTP `POST /admin.teams.create`.
    /// - Remark: Generated from `#/paths//admin.teams.create/post(adminTeamsCreate)`.
    public enum AdminTeamsCreate {
        public static let id: Swift.String = "adminTeamsCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminTeamsCreate.Input.Headers
            /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Team domain (for example, slacksoftballteam). Domains are limited to 21 characters.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/json/teamDomain`.
                    public var teamDomain: Swift.String
                    /// Team name (for example, Slack Softball Team).
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/json/teamName`.
                    public var teamName: Swift.String
                    /// Description for the team.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/json/teamDescription`.
                    public var teamDescription: Swift.String?
                    /// Who can join the team. A team's discoverability can be open, closed, invite_only, or unlisted.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/json/teamDiscoverability`.
                    public var teamDiscoverability: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamDomain: Team domain (for example, slacksoftballteam). Domains are limited to 21 characters.
                    ///   - teamName: Team name (for example, Slack Softball Team).
                    ///   - teamDescription: Description for the team.
                    ///   - teamDiscoverability: Who can join the team. A team's discoverability can be open, closed, invite_only, or unlisted.
                    public init(
                        teamDomain: Swift.String,
                        teamName: Swift.String,
                        teamDescription: Swift.String? = nil,
                        teamDiscoverability: Swift.String? = nil
                    ) {
                        self.teamDomain = teamDomain
                        self.teamName = teamName
                        self.teamDescription = teamDescription
                        self.teamDiscoverability = teamDiscoverability
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamDomain
                        case teamName
                        case teamDescription
                        case teamDiscoverability
                    }
                }
                /// - Remark: Generated from `#/paths/admin.teams.create/POST/requestBody/content/application\/json`.
                case json(Operations.AdminTeamsCreate.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminTeamsCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminTeamsCreate.Input.Headers = .init(),
                body: Operations.AdminTeamsCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.teams.create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminTeamsCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminTeamsCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminTeamsCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminTeamsCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.teams.create/post(adminTeamsCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminTeamsCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminTeamsCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all teams on an Enterprise organization
    ///
    /// - Remark: HTTP `POST /admin.teams.list`.
    /// - Remark: Generated from `#/paths//admin.teams.list/post(adminTeamsList)`.
    public enum AdminTeamsList {
        public static let id: Swift.String = "adminTeamsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminTeamsList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.teams.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Must be a positive integer no larger than 1000.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - limit: The maximum number of items to return. Must be a positive integer no larger than 1000.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/admin.teams.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminTeamsList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminTeamsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminTeamsList.Input.Headers = .init(),
                body: Operations.AdminTeamsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.teams.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminTeamsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminTeamsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminTeamsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminTeamsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.teams.list/post(adminTeamsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminTeamsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminTeamsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all of the owners on a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.owners.list`.
    /// - Remark: Generated from `#/paths//admin.teams.owners.list/post(adminTeamsOwnersList)`.
    public enum AdminTeamsOwnersList {
        public static let id: Swift.String = "adminTeamsOwnersList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsOwnersList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsOwnersList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminTeamsOwnersList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: .
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    public init(
                        teamId: Swift.String,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.teamId = teamId
                        self.cursor = cursor
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamId
                        case cursor
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminTeamsOwnersList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminTeamsOwnersList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminTeamsOwnersList.Input.Headers = .init(),
                body: Operations.AdminTeamsOwnersList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.teams.owners.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminTeamsOwnersListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminTeamsOwnersListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminTeamsOwnersList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminTeamsOwnersList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.teams.owners.list/post(adminTeamsOwnersList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminTeamsOwnersList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminTeamsOwnersList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch information about settings in a workspace
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.info`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.info/post(adminTeamsSettingsInfo)`.
    public enum AdminTeamsSettingsInfo {
        public static let id: Swift.String = "adminTeamsSettingsInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminTeamsSettingsInfo.Input.Headers
            /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: .
                    public init(teamId: Swift.String) {
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/requestBody/content/application\/json`.
                case json(Operations.AdminTeamsSettingsInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminTeamsSettingsInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminTeamsSettingsInfo.Input.Headers = .init(),
                body: Operations.AdminTeamsSettingsInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.teams.settings.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminTeamsSettingsInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminTeamsSettingsInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminTeamsSettingsInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminTeamsSettingsInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.teams.settings.info/post(adminTeamsSettingsInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminTeamsSettingsInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminTeamsSettingsInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the default channels of a workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDefaultChannels`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDefaultChannels/post(adminTeamsSettingsSetDefaultChannels)`.
    public enum AdminTeamsSettingsSetDefaultChannels {
        public static let id: Swift.String = "adminTeamsSettingsSetDefaultChannels"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDefaultChannels.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDefaultChannels.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Headers
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// An array of channel IDs.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/requestBody/json/channelIds`.
                    public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// ID for the workspace to set the default channel for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelIds: An array of channel IDs.
                    ///   - teamId: ID for the workspace to set the default channel for.
                    public init(
                        channelIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        teamId: Swift.String
                    ) {
                        self.channelIds = channelIds
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelIds
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/requestBody/content/application\/json`.
                case json(Operations.AdminTeamsSettingsSetDefaultChannels.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Headers = .init(),
                body: Operations.AdminTeamsSettingsSetDefaultChannels.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setDefaultChannels/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminTeamsSettingsSetDefaultChannelsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminTeamsSettingsSetDefaultChannelsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminTeamsSettingsSetDefaultChannels.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminTeamsSettingsSetDefaultChannels.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.teams.settings.setDefaultChannels/post(adminTeamsSettingsSetDefaultChannels)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminTeamsSettingsSetDefaultChannels.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminTeamsSettingsSetDefaultChannels.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the description of a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDescription`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDescription/post(adminTeamsSettingsSetDescription)`.
    public enum AdminTeamsSettingsSetDescription {
        public static let id: Swift.String = "adminTeamsSettingsSetDescription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDescription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDescription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminTeamsSettingsSetDescription.Input.Headers
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The new description for the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/requestBody/json/description`.
                    public var description: Swift.String
                    /// ID for the workspace to set the description for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - description: The new description for the workspace.
                    ///   - teamId: ID for the workspace to set the description for.
                    public init(
                        description: Swift.String,
                        teamId: Swift.String
                    ) {
                        self.description = description
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case description
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/requestBody/content/application\/json`.
                case json(Operations.AdminTeamsSettingsSetDescription.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminTeamsSettingsSetDescription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminTeamsSettingsSetDescription.Input.Headers = .init(),
                body: Operations.AdminTeamsSettingsSetDescription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setDescription/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminTeamsSettingsSetDescriptionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminTeamsSettingsSetDescriptionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminTeamsSettingsSetDescription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminTeamsSettingsSetDescription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.teams.settings.setDescription/post(adminTeamsSettingsSetDescription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminTeamsSettingsSetDescription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminTeamsSettingsSetDescription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// An API method that allows admins to set the discoverability of a given workspace
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setDiscoverability`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setDiscoverability/post(adminTeamsSettingsSetDiscoverability)`.
    public enum AdminTeamsSettingsSetDiscoverability {
        public static let id: Swift.String = "adminTeamsSettingsSetDiscoverability"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDiscoverability.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetDiscoverability.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminTeamsSettingsSetDiscoverability.Input.Headers
            /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// This workspace's discovery setting. It must be set to one of open, invite_only, closed, or unlisted.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/requestBody/json/discoverability`.
                    public var discoverability: Swift.String
                    /// The ID of the workspace to set discoverability on.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - discoverability: This workspace's discovery setting. It must be set to one of open, invite_only, closed, or unlisted.
                    ///   - teamId: The ID of the workspace to set discoverability on.
                    public init(
                        discoverability: Swift.String,
                        teamId: Swift.String
                    ) {
                        self.discoverability = discoverability
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case discoverability
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/requestBody/content/application\/json`.
                case json(Operations.AdminTeamsSettingsSetDiscoverability.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminTeamsSettingsSetDiscoverability.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminTeamsSettingsSetDiscoverability.Input.Headers = .init(),
                body: Operations.AdminTeamsSettingsSetDiscoverability.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setDiscoverability/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminTeamsSettingsSetDiscoverabilityResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminTeamsSettingsSetDiscoverabilityResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminTeamsSettingsSetDiscoverability.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminTeamsSettingsSetDiscoverability.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.teams.settings.setDiscoverability/post(adminTeamsSettingsSetDiscoverability)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminTeamsSettingsSetDiscoverability.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminTeamsSettingsSetDiscoverability.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sets the icon of a workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setIcon`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setIcon/post(adminTeamsSettingsSetIcon)`.
    public enum AdminTeamsSettingsSetIcon {
        public static let id: Swift.String = "adminTeamsSettingsSetIcon"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetIcon.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetIcon.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminTeamsSettingsSetIcon.Input.Headers
            /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Image URL for the icon.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/requestBody/json/imageUrl`.
                    public var imageUrl: Swift.String
                    /// ID for the workspace to set the icon for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - imageUrl: Image URL for the icon.
                    ///   - teamId: ID for the workspace to set the icon for.
                    public init(
                        imageUrl: Swift.String,
                        teamId: Swift.String
                    ) {
                        self.imageUrl = imageUrl
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case imageUrl
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/requestBody/content/application\/json`.
                case json(Operations.AdminTeamsSettingsSetIcon.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminTeamsSettingsSetIcon.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminTeamsSettingsSetIcon.Input.Headers = .init(),
                body: Operations.AdminTeamsSettingsSetIcon.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setIcon/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminTeamsSettingsSetIconResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminTeamsSettingsSetIconResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminTeamsSettingsSetIcon.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminTeamsSettingsSetIcon.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.teams.settings.setIcon/post(adminTeamsSettingsSetIcon)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminTeamsSettingsSetIcon.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminTeamsSettingsSetIcon.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the name of a given workspace.
    ///
    /// - Remark: HTTP `POST /admin.teams.settings.setName`.
    /// - Remark: Generated from `#/paths//admin.teams.settings.setName/post(adminTeamsSettingsSetName)`.
    public enum AdminTeamsSettingsSetName {
        public static let id: Swift.String = "adminTeamsSettingsSetName"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetName.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminTeamsSettingsSetName.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminTeamsSettingsSetName.Input.Headers
            /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The new name of the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// ID for the workspace to set the name for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The new name of the workspace.
                    ///   - teamId: ID for the workspace to set the name for.
                    public init(
                        name: Swift.String,
                        teamId: Swift.String
                    ) {
                        self.name = name
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/requestBody/content/application\/json`.
                case json(Operations.AdminTeamsSettingsSetName.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminTeamsSettingsSetName.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminTeamsSettingsSetName.Input.Headers = .init(),
                body: Operations.AdminTeamsSettingsSetName.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.teams.settings.setName/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminTeamsSettingsSetNameResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminTeamsSettingsSetNameResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminTeamsSettingsSetName.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminTeamsSettingsSetName.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.teams.settings.setName/post(adminTeamsSettingsSetName)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminTeamsSettingsSetName.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminTeamsSettingsSetName.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add an Enterprise user to a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.assign`.
    /// - Remark: Generated from `#/paths//admin.users.assign/post(adminUsersAssign)`.
    public enum AdminUsersAssign {
        public static let id: Swift.String = "adminUsersAssign"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.assign/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersAssign.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersAssign.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersAssign.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID (T1234) of the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// The ID of the user to add to the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json/userId`.
                    public var userId: Swift.String
                    /// Comma separated values of channel IDs to add user in the new workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json/channelIds`.
                    public var channelIds: Swift.String?
                    /// True if user should be added to the workspace as a guest.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json/isRestricted`.
                    public var isRestricted: Swift.Bool?
                    /// True if user should be added to the workspace as a single-channel guest.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/json/isUltraRestricted`.
                    public var isUltraRestricted: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: The ID (T1234) of the workspace.
                    ///   - userId: The ID of the user to add to the workspace.
                    ///   - channelIds: Comma separated values of channel IDs to add user in the new workspace.
                    ///   - isRestricted: True if user should be added to the workspace as a guest.
                    ///   - isUltraRestricted: True if user should be added to the workspace as a single-channel guest.
                    public init(
                        teamId: Swift.String,
                        userId: Swift.String,
                        channelIds: Swift.String? = nil,
                        isRestricted: Swift.Bool? = nil,
                        isUltraRestricted: Swift.Bool? = nil
                    ) {
                        self.teamId = teamId
                        self.userId = userId
                        self.channelIds = channelIds
                        self.isRestricted = isRestricted
                        self.isUltraRestricted = isUltraRestricted
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamId
                        case userId
                        case channelIds
                        case isRestricted
                        case isUltraRestricted
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.assign/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersAssign.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersAssign.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersAssign.Input.Headers = .init(),
                body: Operations.AdminUsersAssign.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.assign/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.assign/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersAssignResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersAssignResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersAssign.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersAssign.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.assign/post(adminUsersAssign)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersAssign.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersAssign.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Invite a user to a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.invite`.
    /// - Remark: Generated from `#/paths//admin.users.invite/post(adminUsersInvite)`.
    public enum AdminUsersInvite {
        public static let id: Swift.String = "adminUsersInvite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.invite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersInvite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersInvite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersInvite.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// A comma-separated list of channel_ids for this user to join. At least one channel is required.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/channelIds`.
                    public var channelIds: Swift.String
                    /// The email address of the person to invite.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/email`.
                    public var email: Swift.String
                    /// The ID (T1234) of the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// An optional message to send to the user in the invite email.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/customMessage`.
                    public var customMessage: Swift.String?
                    /// Allow invited user to sign in via email and password. Only available for Enterprise Grid teams via admin invite.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/emailPasswordPolicyEnabled`.
                    public var emailPasswordPolicyEnabled: Swift.Bool?
                    /// Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/guestExpirationTs`.
                    public var guestExpirationTs: Swift.String?
                    /// Is this user a multi-channel guest user? (default: false).
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/isRestricted`.
                    public var isRestricted: Swift.Bool?
                    /// Is this user a single channel guest user? (default: false).
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/isUltraRestricted`.
                    public var isUltraRestricted: Swift.Bool?
                    /// Full name of the user.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/realName`.
                    public var realName: Swift.String?
                    /// Allow this invite to be resent in the future if a user has not signed up yet. Resending can only be done via the UI and has no expiration. (default: false).
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/json/resend`.
                    public var resend: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelIds: A comma-separated list of channel_ids for this user to join. At least one channel is required.
                    ///   - email: The email address of the person to invite.
                    ///   - teamId: The ID (T1234) of the workspace.
                    ///   - customMessage: An optional message to send to the user in the invite email.
                    ///   - emailPasswordPolicyEnabled: Allow invited user to sign in via email and password. Only available for Enterprise Grid teams via admin invite.
                    ///   - guestExpirationTs: Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
                    ///   - isRestricted: Is this user a multi-channel guest user? (default: false).
                    ///   - isUltraRestricted: Is this user a single channel guest user? (default: false).
                    ///   - realName: Full name of the user.
                    ///   - resend: Allow this invite to be resent in the future if a user has not signed up yet. Resending can only be done via the UI and has no expiration. (default: false).
                    public init(
                        channelIds: Swift.String,
                        email: Swift.String,
                        teamId: Swift.String,
                        customMessage: Swift.String? = nil,
                        emailPasswordPolicyEnabled: Swift.Bool? = nil,
                        guestExpirationTs: Swift.String? = nil,
                        isRestricted: Swift.Bool? = nil,
                        isUltraRestricted: Swift.Bool? = nil,
                        realName: Swift.String? = nil,
                        resend: Swift.Bool? = nil
                    ) {
                        self.channelIds = channelIds
                        self.email = email
                        self.teamId = teamId
                        self.customMessage = customMessage
                        self.emailPasswordPolicyEnabled = emailPasswordPolicyEnabled
                        self.guestExpirationTs = guestExpirationTs
                        self.isRestricted = isRestricted
                        self.isUltraRestricted = isUltraRestricted
                        self.realName = realName
                        self.resend = resend
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelIds
                        case email
                        case teamId
                        case customMessage
                        case emailPasswordPolicyEnabled
                        case guestExpirationTs
                        case isRestricted
                        case isUltraRestricted
                        case realName
                        case resend
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersInvite.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersInvite.Input.Headers = .init(),
                body: Operations.AdminUsersInvite.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.invite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.invite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersInviteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersInviteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersInvite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.invite/post(adminUsersInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List users on a workspace
    ///
    /// - Remark: HTTP `POST /admin.users.list`.
    /// - Remark: Generated from `#/paths//admin.users.list/post(adminUsersList)`.
    public enum AdminUsersList {
        public static let id: Swift.String = "adminUsersList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Only applies with org token and no team_id. If true, return workspaces for a user even if they may be deactivated on them. If false, return workspaces for a user only when user is active on them. Default is false.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json/includeDeactivatedUserWorkspaces`.
                    public var includeDeactivatedUserWorkspaces: Swift.Bool?
                    /// If true, only active users will be returned. If false, only deactivated users will be returned. Default is true.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json/isActive`.
                    public var isActive: Swift.Bool?
                    /// Limit for how many users to be retrieved per page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// The ID (T1234) of a workspace. Filters results to just the specified workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - includeDeactivatedUserWorkspaces: Only applies with org token and no team_id. If true, return workspaces for a user even if they may be deactivated on them. If false, return workspaces for a user only when user is active on them. Default is false.
                    ///   - isActive: If true, only active users will be returned. If false, only deactivated users will be returned. Default is true.
                    ///   - limit: Limit for how many users to be retrieved per page.
                    ///   - teamId: The ID (T1234) of a workspace. Filters results to just the specified workspace.
                    public init(
                        cursor: Swift.String? = nil,
                        includeDeactivatedUserWorkspaces: Swift.Bool? = nil,
                        isActive: Swift.Bool? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.includeDeactivatedUserWorkspaces = includeDeactivatedUserWorkspaces
                        self.isActive = isActive
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case includeDeactivatedUserWorkspaces
                        case isActive
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersList.Input.Headers = .init(),
                body: Operations.AdminUsersList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.list/post(adminUsersList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a user from a workspace.
    ///
    /// - Remark: HTTP `POST /admin.users.remove`.
    /// - Remark: Generated from `#/paths//admin.users.remove/post(adminUsersRemove)`.
    public enum AdminUsersRemove {
        public static let id: Swift.String = "adminUsersRemove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.remove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersRemove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersRemove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersRemove.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.remove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.remove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID (T1234) of the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.remove/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// The ID of the user to remove.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.remove/POST/requestBody/json/userId`.
                    public var userId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: The ID (T1234) of the workspace.
                    ///   - userId: The ID of the user to remove.
                    public init(
                        teamId: Swift.String,
                        userId: Swift.String
                    ) {
                        self.teamId = teamId
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamId
                        case userId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.remove/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersRemove.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersRemove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersRemove.Input.Headers = .init(),
                body: Operations.AdminUsersRemove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.remove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.remove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersRemoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersRemoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersRemove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersRemove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.remove/post(adminUsersRemove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersRemove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersRemove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Clear user-specific session settings—the session duration and what happens when the client closes—for a list of users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.clearSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.clearSettings/post(adminUsersSessionClearSettings)`.
    public enum AdminUsersSessionClearSettings {
        public static let id: Swift.String = "adminUsersSessionClearSettings"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionClearSettings.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionClearSettings.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSessionClearSettings.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The IDs of users you'd like to clear session settings for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userIds: The IDs of users you'd like to clear session settings for.
                    public init(userIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                        self.userIds = userIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSessionClearSettings.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSessionClearSettings.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSessionClearSettings.Input.Headers = .init(),
                body: Operations.AdminUsersSessionClearSettings.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.session.clearSettings/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSessionClearSettingsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSessionClearSettingsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSessionClearSettings.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSessionClearSettings.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.session.clearSettings/post(adminUsersSessionClearSettings)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSessionClearSettings.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSessionClearSettings.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get user-specific session settings—the session duration and what happens when the client closes—given a list of users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.getSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.getSettings/post(adminUsersSessionGetSettings)`.
    public enum AdminUsersSessionGetSettings {
        public static let id: Swift.String = "adminUsersSessionGetSettings"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionGetSettings.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionGetSettings.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSessionGetSettings.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The IDs of users you'd like to fetch session settings for. Note: if a user does not have any active sessions, they will not be returned in the response.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userIds: The IDs of users you'd like to fetch session settings for. Note: if a user does not have any active sessions, they will not be returned in the response.
                    public init(userIds: OpenAPIRuntime.OpenAPIArrayContainer) {
                        self.userIds = userIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userIds
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSessionGetSettings.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSessionGetSettings.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSessionGetSettings.Input.Headers = .init(),
                body: Operations.AdminUsersSessionGetSettings.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.session.getSettings/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSessionGetSettingsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSessionGetSettingsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSessionGetSettings.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSessionGetSettings.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.session.getSettings/post(adminUsersSessionGetSettings)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSessionGetSettings.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSessionGetSettings.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Revoke a single session for a user. The user will be forced to login to Slack.
    ///
    /// - Remark: HTTP `POST /admin.users.session.invalidate`.
    /// - Remark: Generated from `#/paths//admin.users.session.invalidate/post(adminUsersSessionInvalidate)`.
    public enum AdminUsersSessionInvalidate {
        public static let id: Swift.String = "adminUsersSessionInvalidate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionInvalidate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionInvalidate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSessionInvalidate.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the session to invalidate.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/requestBody/json/sessionId`.
                    public var sessionId: Swift.Int
                    /// ID of the user that the session belongs to.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/requestBody/json/userId`.
                    public var userId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - sessionId: ID of the session to invalidate.
                    ///   - userId: ID of the user that the session belongs to.
                    public init(
                        sessionId: Swift.Int,
                        userId: Swift.String? = nil
                    ) {
                        self.sessionId = sessionId
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sessionId
                        case userId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSessionInvalidate.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSessionInvalidate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSessionInvalidate.Input.Headers = .init(),
                body: Operations.AdminUsersSessionInvalidate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.session.invalidate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSessionInvalidateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSessionInvalidateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSessionInvalidate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSessionInvalidate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.session.invalidate/post(adminUsersSessionInvalidate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSessionInvalidate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSessionInvalidate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List active user sessions for an organization
    ///
    /// - Remark: HTTP `POST /admin.users.session.list`.
    /// - Remark: Generated from `#/paths//admin.users.session.list/post(adminUsersSessionList)`.
    public enum AdminUsersSessionList {
        public static let id: Swift.String = "adminUsersSessionList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSessionList.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// The ID of the workspace you'd like active sessions for. If you pass a team_id, you'll need to pass a user_id as well.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// The ID of user you'd like active sessions for. If you pass a user_id, you'll need to pass a team_id as well.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/json/userId`.
                    public var userId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - limit: The maximum number of items to return. Must be between 1 - 1000 both inclusive.
                    ///   - teamId: The ID of the workspace you'd like active sessions for. If you pass a team_id, you'll need to pass a user_id as well.
                    ///   - userId: The ID of user you'd like active sessions for. If you pass a user_id, you'll need to pass a team_id as well.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil,
                        userId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                        case teamId
                        case userId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.session.list/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSessionList.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSessionList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSessionList.Input.Headers = .init(),
                body: Operations.AdminUsersSessionList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.session.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSessionListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSessionListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSessionList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSessionList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.session.list/post(adminUsersSessionList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSessionList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSessionList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Wipes all valid sessions on all devices for a given user
    ///
    /// - Remark: HTTP `POST /admin.users.session.reset`.
    /// - Remark: Generated from `#/paths//admin.users.session.reset/post(adminUsersSessionReset)`.
    public enum AdminUsersSessionReset {
        public static let id: Swift.String = "adminUsersSessionReset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionReset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionReset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSessionReset.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the user to wipe sessions for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody/json/userId`.
                    public var userId: Swift.String
                    /// Only expire mobile sessions (default: false).
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody/json/mobileOnly`.
                    public var mobileOnly: Swift.Bool?
                    /// Only expire web sessions (default: false).
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody/json/webOnly`.
                    public var webOnly: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: The ID of the user to wipe sessions for.
                    ///   - mobileOnly: Only expire mobile sessions (default: false).
                    ///   - webOnly: Only expire web sessions (default: false).
                    public init(
                        userId: Swift.String,
                        mobileOnly: Swift.Bool? = nil,
                        webOnly: Swift.Bool? = nil
                    ) {
                        self.userId = userId
                        self.mobileOnly = mobileOnly
                        self.webOnly = webOnly
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId
                        case mobileOnly
                        case webOnly
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSessionReset.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSessionReset.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSessionReset.Input.Headers = .init(),
                body: Operations.AdminUsersSessionReset.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.session.reset/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSessionResetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSessionResetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSessionReset.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSessionReset.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.session.reset/post(adminUsersSessionReset)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSessionReset.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSessionReset.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Enqueues an asynchronous job to wipe all valid sessions on all devices for a given list of users
    ///
    /// - Remark: HTTP `POST /admin.users.session.resetBulk`.
    /// - Remark: Generated from `#/paths//admin.users.session.resetBulk/post(adminUsersSessionResetBulk)`.
    public enum AdminUsersSessionResetBulk {
        public static let id: Swift.String = "adminUsersSessionResetBulk"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionResetBulk.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionResetBulk.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSessionResetBulk.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the user to wipe sessions for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Only expire mobile sessions (default: false).
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody/json/mobileOnly`.
                    public var mobileOnly: Swift.Bool?
                    /// Only expire web sessions (default: false).
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody/json/webOnly`.
                    public var webOnly: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userIds: The ID of the user to wipe sessions for.
                    ///   - mobileOnly: Only expire mobile sessions (default: false).
                    ///   - webOnly: Only expire web sessions (default: false).
                    public init(
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        mobileOnly: Swift.Bool? = nil,
                        webOnly: Swift.Bool? = nil
                    ) {
                        self.userIds = userIds
                        self.mobileOnly = mobileOnly
                        self.webOnly = webOnly
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userIds
                        case mobileOnly
                        case webOnly
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSessionResetBulk.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSessionResetBulk.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSessionResetBulk.Input.Headers = .init(),
                body: Operations.AdminUsersSessionResetBulk.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.session.resetBulk/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSessionResetBulkResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSessionResetBulkResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSessionResetBulk.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSessionResetBulk.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.session.resetBulk/post(adminUsersSessionResetBulk)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSessionResetBulk.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSessionResetBulk.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Configure the user-level session settings—the session duration and what happens when the client closes—for one or more users.
    ///
    /// - Remark: HTTP `POST /admin.users.session.setSettings`.
    /// - Remark: Generated from `#/paths//admin.users.session.setSettings/post(adminUsersSessionSetSettings)`.
    public enum AdminUsersSessionSetSettings {
        public static let id: Swift.String = "adminUsersSessionSetSettings"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionSetSettings.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSessionSetSettings.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSessionSetSettings.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The list of up to 1,000 user IDs to apply the session settings for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Terminate the session when the client—either the desktop app or a browser window—is closed.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody/json/desktopAppBrowserQuit`.
                    public var desktopAppBrowserQuit: Swift.Bool?
                    /// The session duration, in seconds. The minimum value is 28800, which represents 8 hours; the max value is 315569520 or 10 years (that's a long Slack session).
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody/json/duration`.
                    public var duration: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userIds: The list of up to 1,000 user IDs to apply the session settings for.
                    ///   - desktopAppBrowserQuit: Terminate the session when the client—either the desktop app or a browser window—is closed.
                    ///   - duration: The session duration, in seconds. The minimum value is 28800, which represents 8 hours; the max value is 315569520 or 10 years (that's a long Slack session).
                    public init(
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer,
                        desktopAppBrowserQuit: Swift.Bool? = nil,
                        duration: Swift.Int? = nil
                    ) {
                        self.userIds = userIds
                        self.desktopAppBrowserQuit = desktopAppBrowserQuit
                        self.duration = duration
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userIds
                        case desktopAppBrowserQuit
                        case duration
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSessionSetSettings.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSessionSetSettings.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSessionSetSettings.Input.Headers = .init(),
                body: Operations.AdminUsersSessionSetSettings.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.session.setSettings/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSessionSetSettingsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSessionSetSettingsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSessionSetSettings.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSessionSetSettings.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.session.setSettings/post(adminUsersSessionSetSettings)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSessionSetSettings.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSessionSetSettings.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set an existing regular user or owner to be a workspace admin.
    ///
    /// - Remark: HTTP `POST /admin.users.setAdmin`.
    /// - Remark: Generated from `#/paths//admin.users.setAdmin/post(adminUsersSetAdmin)`.
    public enum AdminUsersSetAdmin {
        public static let id: Swift.String = "adminUsersSetAdmin"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetAdmin.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetAdmin.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSetAdmin.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID (T1234) of the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// The ID of the user to designate as an admin.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/requestBody/json/userId`.
                    public var userId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: The ID (T1234) of the workspace.
                    ///   - userId: The ID of the user to designate as an admin.
                    public init(
                        teamId: Swift.String,
                        userId: Swift.String
                    ) {
                        self.teamId = teamId
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamId
                        case userId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSetAdmin.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSetAdmin.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSetAdmin.Input.Headers = .init(),
                body: Operations.AdminUsersSetAdmin.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.setAdmin/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSetAdminResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSetAdminResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSetAdmin.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSetAdmin.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.setAdmin/post(adminUsersSetAdmin)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSetAdmin.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSetAdmin.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set an expiration for a guest user
    ///
    /// - Remark: HTTP `POST /admin.users.setExpiration`.
    /// - Remark: Generated from `#/paths//admin.users.setExpiration/post(adminUsersSetExpiration)`.
    public enum AdminUsersSetExpiration {
        public static let id: Swift.String = "adminUsersSetExpiration"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetExpiration.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetExpiration.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSetExpiration.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Epoch timestamp in seconds when guest account should be disabled.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody/json/expirationTs`.
                    public var expirationTs: Swift.Int
                    /// The ID of the user to set an expiration for.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody/json/userId`.
                    public var userId: Swift.String
                    /// The ID (T1234) of the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - expirationTs: Epoch timestamp in seconds when guest account should be disabled.
                    ///   - userId: The ID of the user to set an expiration for.
                    ///   - teamId: The ID (T1234) of the workspace.
                    public init(
                        expirationTs: Swift.Int,
                        userId: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.expirationTs = expirationTs
                        self.userId = userId
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case expirationTs
                        case userId
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSetExpiration.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSetExpiration.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSetExpiration.Input.Headers = .init(),
                body: Operations.AdminUsersSetExpiration.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.setExpiration/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSetExpirationResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSetExpirationResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSetExpiration.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSetExpiration.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.setExpiration/post(adminUsersSetExpiration)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSetExpiration.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSetExpiration.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set an existing regular user or admin to be a workspace owner.
    ///
    /// - Remark: HTTP `POST /admin.users.setOwner`.
    /// - Remark: Generated from `#/paths//admin.users.setOwner/post(adminUsersSetOwner)`.
    public enum AdminUsersSetOwner {
        public static let id: Swift.String = "adminUsersSetOwner"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetOwner.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetOwner.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSetOwner.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID (T1234) of the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// Id of the user to promote to owner.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/requestBody/json/userId`.
                    public var userId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: The ID (T1234) of the workspace.
                    ///   - userId: Id of the user to promote to owner.
                    public init(
                        teamId: Swift.String,
                        userId: Swift.String
                    ) {
                        self.teamId = teamId
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamId
                        case userId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSetOwner.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSetOwner.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSetOwner.Input.Headers = .init(),
                body: Operations.AdminUsersSetOwner.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.setOwner/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSetOwnerResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSetOwnerResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSetOwner.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSetOwner.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.setOwner/post(adminUsersSetOwner)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSetOwner.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSetOwner.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set an existing guest user, admin user, or owner to be a regular user.
    ///
    /// - Remark: HTTP `POST /admin.users.setRegular`.
    /// - Remark: Generated from `#/paths//admin.users.setRegular/post(adminUsersSetRegular)`.
    public enum AdminUsersSetRegular {
        public static let id: Swift.String = "adminUsersSetRegular"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetRegular.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersSetRegular.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersSetRegular.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID (T1234) of the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String
                    /// The ID of the user to designate as a regular user.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/requestBody/json/userId`.
                    public var userId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: The ID (T1234) of the workspace.
                    ///   - userId: The ID of the user to designate as a regular user.
                    public init(
                        teamId: Swift.String,
                        userId: Swift.String
                    ) {
                        self.teamId = teamId
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamId
                        case userId
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersSetRegular.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersSetRegular.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersSetRegular.Input.Headers = .init(),
                body: Operations.AdminUsersSetRegular.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.setRegular/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersSetRegularResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersSetRegularResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersSetRegular.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersSetRegular.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.setRegular/post(adminUsersSetRegular)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersSetRegular.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersSetRegular.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Ask Slackbot to send you an export listing all workspace members using unsupported software, presented as a zipped CSV file.
    ///
    /// - Remark: HTTP `POST /admin.users.unsupportedVersions.export`.
    /// - Remark: Generated from `#/paths//admin.users.unsupportedVersions.export/post(adminUsersUnsupportedVersionsExport)`.
    public enum AdminUsersUnsupportedVersionsExport {
        public static let id: Swift.String = "adminUsersUnsupportedVersionsExport"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersUnsupportedVersionsExport.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminUsersUnsupportedVersionsExport.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminUsersUnsupportedVersionsExport.Input.Headers
            /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unix timestamp of the date of past or upcoming end of support cycles. If not provided will include all announced end of support cycles.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/requestBody/json/dateEndOfSupport`.
                    public var dateEndOfSupport: Swift.Int?
                    /// Unix timestamp of a date to start looking for user sessions. If not provided will start six months ago.
                    ///
                    /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/requestBody/json/dateSessionsStarted`.
                    public var dateSessionsStarted: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - dateEndOfSupport: Unix timestamp of the date of past or upcoming end of support cycles. If not provided will include all announced end of support cycles.
                    ///   - dateSessionsStarted: Unix timestamp of a date to start looking for user sessions. If not provided will start six months ago.
                    public init(
                        dateEndOfSupport: Swift.Int? = nil,
                        dateSessionsStarted: Swift.Int? = nil
                    ) {
                        self.dateEndOfSupport = dateEndOfSupport
                        self.dateSessionsStarted = dateSessionsStarted
                    }
                    public enum CodingKeys: String, CodingKey {
                        case dateEndOfSupport
                        case dateSessionsStarted
                    }
                }
                /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/requestBody/content/application\/json`.
                case json(Operations.AdminUsersUnsupportedVersionsExport.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminUsersUnsupportedVersionsExport.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminUsersUnsupportedVersionsExport.Input.Headers = .init(),
                body: Operations.AdminUsersUnsupportedVersionsExport.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin.users.unsupportedVersions.export/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminUsersUnsupportedVersionsExportResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminUsersUnsupportedVersionsExportResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminUsersUnsupportedVersionsExport.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminUsersUnsupportedVersionsExport.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//admin.users.unsupportedVersions.export/post(adminUsersUnsupportedVersionsExport)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminUsersUnsupportedVersionsExport.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminUsersUnsupportedVersionsExport.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Generate a temporary Socket Mode WebSocket URL that your app can connect to in order to receive events and interactive payloads over.
    ///
    /// - Remark: HTTP `POST /apps.connections.open`.
    /// - Remark: Generated from `#/paths//apps.connections.open/post(appsConnectionsOpen)`.
    public enum AppsConnectionsOpen {
        public static let id: Swift.String = "appsConnectionsOpen"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/apps.connections.open/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsConnectionsOpen.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsConnectionsOpen.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AppsConnectionsOpen.Input.Headers
            /// - Remark: Generated from `#/paths/apps.connections.open/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.connections.open/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.AppsConnectionsOpen.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AppsConnectionsOpen.Input.Headers = .init(),
                body: Operations.AppsConnectionsOpen.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.connections.open/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/apps.connections.open/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppsConnectionsOpenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppsConnectionsOpenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AppsConnectionsOpen.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AppsConnectionsOpen.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//apps.connections.open/post(appsConnectionsOpen)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AppsConnectionsOpen.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AppsConnectionsOpen.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
    ///
    /// - Remark: HTTP `POST /apps.event.authorizations.list`.
    /// - Remark: Generated from `#/paths//apps.event.authorizations.list/post(appsEventAuthorizationsList)`.
    public enum AppsEventAuthorizationsList {
        public static let id: Swift.String = "appsEventAuthorizationsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/apps.event.authorizations.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsEventAuthorizationsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsEventAuthorizationsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AppsEventAuthorizationsList.Input.Headers
            /// - Remark: Generated from `#/paths/apps.event.authorizations.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.event.authorizations.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/apps.event.authorizations.list/POST/requestBody/json/eventContext`.
                    public var eventContext: Swift.String
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/apps.event.authorizations.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/apps.event.authorizations.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - eventContext: .
                    ///   - cursor: .
                    ///   - limit: .
                    public init(
                        eventContext: Swift.String,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.eventContext = eventContext
                        self.cursor = cursor
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case eventContext
                        case cursor
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/apps.event.authorizations.list/POST/requestBody/content/application\/json`.
                case json(Operations.AppsEventAuthorizationsList.Input.Body.JsonPayload)
            }
            public var body: Operations.AppsEventAuthorizationsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AppsEventAuthorizationsList.Input.Headers = .init(),
                body: Operations.AppsEventAuthorizationsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.event.authorizations.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/apps.event.authorizations.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppsEventAuthorizationsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppsEventAuthorizationsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AppsEventAuthorizationsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AppsEventAuthorizationsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//apps.event.authorizations.list/post(appsEventAuthorizationsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AppsEventAuthorizationsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AppsEventAuthorizationsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an app from an app manifest.
    ///
    /// - Remark: HTTP `POST /apps.manifest.create`.
    /// - Remark: Generated from `#/paths//apps.manifest.create/post(appsManifestCreate)`.
    public enum AppsManifestCreate {
        public static let id: Swift.String = "appsManifestCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/apps.manifest.create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsManifestCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsManifestCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AppsManifestCreate.Input.Headers
            /// - Remark: Generated from `#/paths/apps.manifest.create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.manifest.create/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// A JSON app manifest encoded as a string. This manifest must use a valid app manifest schema - read our guide to creating one.
                    ///
                    /// - Remark: Generated from `#/paths/apps.manifest.create/POST/requestBody/json/manifest`.
                    public var manifest: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - manifest: A JSON app manifest encoded as a string. This manifest must use a valid app manifest schema - read our guide to creating one.
                    public init(manifest: Swift.String) {
                        self.manifest = manifest
                    }
                    public enum CodingKeys: String, CodingKey {
                        case manifest
                    }
                }
                /// - Remark: Generated from `#/paths/apps.manifest.create/POST/requestBody/content/application\/json`.
                case json(Operations.AppsManifestCreate.Input.Body.JsonPayload)
            }
            public var body: Operations.AppsManifestCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AppsManifestCreate.Input.Headers = .init(),
                body: Operations.AppsManifestCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.manifest.create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/apps.manifest.create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppsManifestCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppsManifestCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AppsManifestCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AppsManifestCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//apps.manifest.create/post(appsManifestCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AppsManifestCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AppsManifestCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Permanently deletes an app created through app manifests
    ///
    /// - Remark: HTTP `POST /apps.manifest.delete`.
    /// - Remark: Generated from `#/paths//apps.manifest.delete/post(appsManifestDelete)`.
    public enum AppsManifestDelete {
        public static let id: Swift.String = "appsManifestDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/apps.manifest.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsManifestDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsManifestDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AppsManifestDelete.Input.Headers
            /// - Remark: Generated from `#/paths/apps.manifest.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.manifest.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the app you want to delete.
                    ///
                    /// - Remark: Generated from `#/paths/apps.manifest.delete/POST/requestBody/json/appId`.
                    public var appId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: The ID of the app you want to delete.
                    public init(appId: Swift.String) {
                        self.appId = appId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appId
                    }
                }
                /// - Remark: Generated from `#/paths/apps.manifest.delete/POST/requestBody/content/application\/json`.
                case json(Operations.AppsManifestDelete.Input.Body.JsonPayload)
            }
            public var body: Operations.AppsManifestDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AppsManifestDelete.Input.Headers = .init(),
                body: Operations.AppsManifestDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.manifest.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/apps.manifest.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppsManifestDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppsManifestDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AppsManifestDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AppsManifestDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//apps.manifest.delete/post(appsManifestDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AppsManifestDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AppsManifestDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Export an app manifest from an existing app
    ///
    /// - Remark: HTTP `POST /apps.manifest.export`.
    /// - Remark: Generated from `#/paths//apps.manifest.export/post(appsManifestExport)`.
    public enum AppsManifestExport {
        public static let id: Swift.String = "appsManifestExport"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/apps.manifest.export/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsManifestExport.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsManifestExport.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AppsManifestExport.Input.Headers
            /// - Remark: Generated from `#/paths/apps.manifest.export/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.manifest.export/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the app whose configuration you want to export as a manifest.
                    ///
                    /// - Remark: Generated from `#/paths/apps.manifest.export/POST/requestBody/json/appId`.
                    public var appId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: The ID of the app whose configuration you want to export as a manifest.
                    public init(appId: Swift.String) {
                        self.appId = appId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appId
                    }
                }
                /// - Remark: Generated from `#/paths/apps.manifest.export/POST/requestBody/content/application\/json`.
                case json(Operations.AppsManifestExport.Input.Body.JsonPayload)
            }
            public var body: Operations.AppsManifestExport.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AppsManifestExport.Input.Headers = .init(),
                body: Operations.AppsManifestExport.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.manifest.export/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/apps.manifest.export/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppsManifestExportResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppsManifestExportResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AppsManifestExport.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AppsManifestExport.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//apps.manifest.export/post(appsManifestExport)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AppsManifestExport.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AppsManifestExport.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an app from an app manifest
    ///
    /// - Remark: HTTP `POST /apps.manifest.update`.
    /// - Remark: Generated from `#/paths//apps.manifest.update/post(appsManifestUpdate)`.
    public enum AppsManifestUpdate {
        public static let id: Swift.String = "appsManifestUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/apps.manifest.update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsManifestUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsManifestUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AppsManifestUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/apps.manifest.update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.manifest.update/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the app whose configuration you want to update.
                    ///
                    /// - Remark: Generated from `#/paths/apps.manifest.update/POST/requestBody/json/appId`.
                    public var appId: Swift.String
                    /// A JSON app manifest encoded as a string. This manifest must use a valid app manifest schema - read our guide to creating one. As this method entirely replaces any previous configuration, manifest must contain both unmodified and modified fields.
                    ///
                    /// - Remark: Generated from `#/paths/apps.manifest.update/POST/requestBody/json/manifest`.
                    public var manifest: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: The ID of the app whose configuration you want to update.
                    ///   - manifest: A JSON app manifest encoded as a string. This manifest must use a valid app manifest schema - read our guide to creating one. As this method entirely replaces any previous configuration, manifest must contain both unmodified and modified fields.
                    public init(
                        appId: Swift.String,
                        manifest: Swift.String
                    ) {
                        self.appId = appId
                        self.manifest = manifest
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appId
                        case manifest
                    }
                }
                /// - Remark: Generated from `#/paths/apps.manifest.update/POST/requestBody/content/application\/json`.
                case json(Operations.AppsManifestUpdate.Input.Body.JsonPayload)
            }
            public var body: Operations.AppsManifestUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AppsManifestUpdate.Input.Headers = .init(),
                body: Operations.AppsManifestUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.manifest.update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/apps.manifest.update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppsManifestUpdateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppsManifestUpdateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AppsManifestUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AppsManifestUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//apps.manifest.update/post(appsManifestUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AppsManifestUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AppsManifestUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Validate an app manifest
    ///
    /// - Remark: HTTP `POST /apps.manifest.validate`.
    /// - Remark: Generated from `#/paths//apps.manifest.validate/post(appsManifestValidate)`.
    public enum AppsManifestValidate {
        public static let id: Swift.String = "appsManifestValidate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/apps.manifest.validate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsManifestValidate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsManifestValidate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AppsManifestValidate.Input.Headers
            /// - Remark: Generated from `#/paths/apps.manifest.validate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.manifest.validate/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The manifest to be validated. Will be validated against the app manifest schema - read our guide.
                    ///
                    /// - Remark: Generated from `#/paths/apps.manifest.validate/POST/requestBody/json/manifest`.
                    public var manifest: Swift.String
                    /// The ID of the app whose configuration you want to validate.
                    ///
                    /// - Remark: Generated from `#/paths/apps.manifest.validate/POST/requestBody/json/appId`.
                    public var appId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - manifest: The manifest to be validated. Will be validated against the app manifest schema - read our guide.
                    ///   - appId: The ID of the app whose configuration you want to validate.
                    public init(
                        manifest: Swift.String,
                        appId: Swift.String? = nil
                    ) {
                        self.manifest = manifest
                        self.appId = appId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case manifest
                        case appId
                    }
                }
                /// - Remark: Generated from `#/paths/apps.manifest.validate/POST/requestBody/content/application\/json`.
                case json(Operations.AppsManifestValidate.Input.Body.JsonPayload)
            }
            public var body: Operations.AppsManifestValidate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AppsManifestValidate.Input.Headers = .init(),
                body: Operations.AppsManifestValidate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.manifest.validate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/apps.manifest.validate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppsManifestValidateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppsManifestValidateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AppsManifestValidate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AppsManifestValidate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//apps.manifest.validate/post(appsManifestValidate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AppsManifestValidate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AppsManifestValidate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Uninstalls your app from a workspace.
    ///
    /// - Remark: HTTP `POST /apps.uninstall`.
    /// - Remark: Generated from `#/paths//apps.uninstall/post(appsUninstall)`.
    public enum AppsUninstall {
        public static let id: Swift.String = "appsUninstall"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/apps.uninstall/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsUninstall.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsUninstall.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AppsUninstall.Input.Headers
            /// - Remark: Generated from `#/paths/apps.uninstall/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.uninstall/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Issued when you created your application.
                    ///
                    /// - Remark: Generated from `#/paths/apps.uninstall/POST/requestBody/json/clientId`.
                    public var clientId: Swift.String
                    /// Issued when you created your application.
                    ///
                    /// - Remark: Generated from `#/paths/apps.uninstall/POST/requestBody/json/clientSecret`.
                    public var clientSecret: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - clientId: Issued when you created your application.
                    ///   - clientSecret: Issued when you created your application.
                    public init(
                        clientId: Swift.String,
                        clientSecret: Swift.String
                    ) {
                        self.clientId = clientId
                        self.clientSecret = clientSecret
                    }
                    public enum CodingKeys: String, CodingKey {
                        case clientId
                        case clientSecret
                    }
                }
                /// - Remark: Generated from `#/paths/apps.uninstall/POST/requestBody/content/application\/json`.
                case json(Operations.AppsUninstall.Input.Body.JsonPayload)
            }
            public var body: Operations.AppsUninstall.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AppsUninstall.Input.Headers = .init(),
                body: Operations.AppsUninstall.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps.uninstall/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/apps.uninstall/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppsUninstallResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppsUninstallResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AppsUninstall.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AppsUninstall.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//apps.uninstall/post(appsUninstall)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AppsUninstall.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AppsUninstall.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the status for an AI assistant thread.
    ///
    /// - Remark: HTTP `POST /assistant.threads.setStatus`.
    /// - Remark: Generated from `#/paths//assistant.threads.setStatus/post(assistantThreadsSetStatus)`.
    public enum AssistantThreadsSetStatus {
        public static let id: Swift.String = "assistantThreadsSetStatus"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistant.threads.setStatus/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AssistantThreadsSetStatus.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AssistantThreadsSetStatus.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AssistantThreadsSetStatus.Input.Headers
            /// - Remark: Generated from `#/paths/assistant.threads.setStatus/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistant.threads.setStatus/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel ID containing the assistant thread.
                    ///
                    /// - Remark: Generated from `#/paths/assistant.threads.setStatus/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Status of the specified bot user, e.g. 'is thinking...'.
                    ///
                    /// - Remark: Generated from `#/paths/assistant.threads.setStatus/POST/requestBody/json/status`.
                    public var status: Swift.String
                    /// Message timestamp of the thread of where to set the status.
                    ///
                    /// - Remark: Generated from `#/paths/assistant.threads.setStatus/POST/requestBody/json/threadTs`.
                    public var threadTs: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel ID containing the assistant thread.
                    ///   - status: Status of the specified bot user, e.g. 'is thinking...'.
                    ///   - threadTs: Message timestamp of the thread of where to set the status.
                    public init(
                        channelId: Swift.String,
                        status: Swift.String,
                        threadTs: Swift.String
                    ) {
                        self.channelId = channelId
                        self.status = status
                        self.threadTs = threadTs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case status
                        case threadTs
                    }
                }
                /// - Remark: Generated from `#/paths/assistant.threads.setStatus/POST/requestBody/content/application\/json`.
                case json(Operations.AssistantThreadsSetStatus.Input.Body.JsonPayload)
            }
            public var body: Operations.AssistantThreadsSetStatus.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AssistantThreadsSetStatus.Input.Headers = .init(),
                body: Operations.AssistantThreadsSetStatus.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistant.threads.setStatus/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistant.threads.setStatus/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssistantThreadsSetStatusResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AssistantThreadsSetStatusResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AssistantThreadsSetStatus.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AssistantThreadsSetStatus.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistant.threads.setStatus/post(assistantThreadsSetStatus)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AssistantThreadsSetStatus.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AssistantThreadsSetStatus.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set suggested prompts for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setSuggestedPrompts`.
    /// - Remark: Generated from `#/paths//assistant.threads.setSuggestedPrompts/post(assistantThreadsSetSuggestedPrompts)`.
    public enum AssistantThreadsSetSuggestedPrompts {
        public static let id: Swift.String = "assistantThreadsSetSuggestedPrompts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistant.threads.setSuggestedPrompts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AssistantThreadsSetSuggestedPrompts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AssistantThreadsSetSuggestedPrompts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AssistantThreadsSetSuggestedPrompts.Input.Headers
            /// - Remark: Generated from `#/paths/assistant.threads.setSuggestedPrompts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistant.threads.setSuggestedPrompts/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel ID containing the assistant thread.
                    ///
                    /// - Remark: Generated from `#/paths/assistant.threads.setSuggestedPrompts/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Each prompt should be supplied with its title and message attribute.
                    ///
                    /// - Remark: Generated from `#/paths/assistant.threads.setSuggestedPrompts/POST/requestBody/json/prompts`.
                    public var prompts: Swift.String
                    /// Message timestamp of the thread to set suggested prompts for.
                    ///
                    /// - Remark: Generated from `#/paths/assistant.threads.setSuggestedPrompts/POST/requestBody/json/threadTs`.
                    public var threadTs: Swift.String
                    /// Title for the list of provided prompts. For example: Suggested Prompts, Related Questions.
                    ///
                    /// - Remark: Generated from `#/paths/assistant.threads.setSuggestedPrompts/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel ID containing the assistant thread.
                    ///   - prompts: Each prompt should be supplied with its title and message attribute.
                    ///   - threadTs: Message timestamp of the thread to set suggested prompts for.
                    ///   - title: Title for the list of provided prompts. For example: Suggested Prompts, Related Questions.
                    public init(
                        channelId: Swift.String,
                        prompts: Swift.String,
                        threadTs: Swift.String,
                        title: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.prompts = prompts
                        self.threadTs = threadTs
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case prompts
                        case threadTs
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/assistant.threads.setSuggestedPrompts/POST/requestBody/content/application\/json`.
                case json(Operations.AssistantThreadsSetSuggestedPrompts.Input.Body.JsonPayload)
            }
            public var body: Operations.AssistantThreadsSetSuggestedPrompts.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AssistantThreadsSetSuggestedPrompts.Input.Headers = .init(),
                body: Operations.AssistantThreadsSetSuggestedPrompts.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistant.threads.setSuggestedPrompts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistant.threads.setSuggestedPrompts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssistantThreadsSetSuggestedPromptsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AssistantThreadsSetSuggestedPromptsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AssistantThreadsSetSuggestedPrompts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AssistantThreadsSetSuggestedPrompts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistant.threads.setSuggestedPrompts/post(assistantThreadsSetSuggestedPrompts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AssistantThreadsSetSuggestedPrompts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AssistantThreadsSetSuggestedPrompts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the title for the given assistant thread
    ///
    /// - Remark: HTTP `POST /assistant.threads.setTitle`.
    /// - Remark: Generated from `#/paths//assistant.threads.setTitle/post(assistantThreadsSetTitle)`.
    public enum AssistantThreadsSetTitle {
        public static let id: Swift.String = "assistantThreadsSetTitle"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistant.threads.setTitle/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AssistantThreadsSetTitle.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AssistantThreadsSetTitle.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AssistantThreadsSetTitle.Input.Headers
            /// - Remark: Generated from `#/paths/assistant.threads.setTitle/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistant.threads.setTitle/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel ID containing the assistant thread.
                    ///
                    /// - Remark: Generated from `#/paths/assistant.threads.setTitle/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Message timestamp of the thread to set suggested prompts for.
                    ///
                    /// - Remark: Generated from `#/paths/assistant.threads.setTitle/POST/requestBody/json/threadTs`.
                    public var threadTs: Swift.String
                    /// The title to use for the thread.
                    ///
                    /// - Remark: Generated from `#/paths/assistant.threads.setTitle/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel ID containing the assistant thread.
                    ///   - threadTs: Message timestamp of the thread to set suggested prompts for.
                    ///   - title: The title to use for the thread.
                    public init(
                        channelId: Swift.String,
                        threadTs: Swift.String,
                        title: Swift.String
                    ) {
                        self.channelId = channelId
                        self.threadTs = threadTs
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case threadTs
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/assistant.threads.setTitle/POST/requestBody/content/application\/json`.
                case json(Operations.AssistantThreadsSetTitle.Input.Body.JsonPayload)
            }
            public var body: Operations.AssistantThreadsSetTitle.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AssistantThreadsSetTitle.Input.Headers = .init(),
                body: Operations.AssistantThreadsSetTitle.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistant.threads.setTitle/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistant.threads.setTitle/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssistantThreadsSetTitleResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AssistantThreadsSetTitleResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AssistantThreadsSetTitle.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AssistantThreadsSetTitle.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistant.threads.setTitle/post(assistantThreadsSetTitle)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AssistantThreadsSetTitle.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AssistantThreadsSetTitle.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Revokes a token.
    ///
    /// - Remark: HTTP `POST /auth.revoke`.
    /// - Remark: Generated from `#/paths//auth.revoke/post(authRevoke)`.
    public enum AuthRevoke {
        public static let id: Swift.String = "authRevoke"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth.revoke/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AuthRevoke.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AuthRevoke.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AuthRevoke.Input.Headers
            /// - Remark: Generated from `#/paths/auth.revoke/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth.revoke/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Setting this parameter to 1 triggers a testing mode where the specified token will not actually be revoked.
                    ///
                    /// - Remark: Generated from `#/paths/auth.revoke/POST/requestBody/json/test`.
                    public var test: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - test: Setting this parameter to 1 triggers a testing mode where the specified token will not actually be revoked.
                    public init(test: Swift.Bool? = nil) {
                        self.test = test
                    }
                    public enum CodingKeys: String, CodingKey {
                        case test
                    }
                }
                /// - Remark: Generated from `#/paths/auth.revoke/POST/requestBody/content/application\/json`.
                case json(Operations.AuthRevoke.Input.Body.JsonPayload)
            }
            public var body: Operations.AuthRevoke.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AuthRevoke.Input.Headers = .init(),
                body: Operations.AuthRevoke.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth.revoke/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth.revoke/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AuthRevokeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AuthRevokeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AuthRevoke.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AuthRevoke.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//auth.revoke/post(authRevoke)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AuthRevoke.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AuthRevoke.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Obtain a full list of workspaces your org-wide app has been approved for.
    ///
    /// - Remark: HTTP `POST /auth.teams.list`.
    /// - Remark: Generated from `#/paths//auth.teams.list/post(authTeamsList)`.
    public enum AuthTeamsList {
        public static let id: Swift.String = "authTeamsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth.teams.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AuthTeamsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AuthTeamsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AuthTeamsList.Input.Headers
            /// - Remark: Generated from `#/paths/auth.teams.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth.teams.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///
                    /// - Remark: Generated from `#/paths/auth.teams.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Whether to return icon paths for each workspace. An icon path represents a URI pointing to the image signifying the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/auth.teams.list/POST/requestBody/json/includeIcon`.
                    public var includeIcon: Swift.Bool?
                    /// The maximum number of workspaces to return. Must be a positive integer no larger than 1000.
                    ///
                    /// - Remark: Generated from `#/paths/auth.teams.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set cursor to next_cursor returned by the previous call to list items in the next page.
                    ///   - includeIcon: Whether to return icon paths for each workspace. An icon path represents a URI pointing to the image signifying the workspace.
                    ///   - limit: The maximum number of workspaces to return. Must be a positive integer no larger than 1000.
                    public init(
                        cursor: Swift.String? = nil,
                        includeIcon: Swift.Bool? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.cursor = cursor
                        self.includeIcon = includeIcon
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case includeIcon
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/auth.teams.list/POST/requestBody/content/application\/json`.
                case json(Operations.AuthTeamsList.Input.Body.JsonPayload)
            }
            public var body: Operations.AuthTeamsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AuthTeamsList.Input.Headers = .init(),
                body: Operations.AuthTeamsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth.teams.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth.teams.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AuthTeamsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AuthTeamsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AuthTeamsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AuthTeamsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//auth.teams.list/post(authTeamsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AuthTeamsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AuthTeamsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Checks authentication & identity.
    ///
    /// - Remark: HTTP `POST /auth.test`.
    /// - Remark: Generated from `#/paths//auth.test/post(authTest)`.
    public enum AuthTest {
        public static let id: Swift.String = "authTest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth.test/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AuthTest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AuthTest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AuthTest.Input.Headers
            /// - Remark: Generated from `#/paths/auth.test/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth.test/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.AuthTest.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AuthTest.Input.Headers = .init(),
                body: Operations.AuthTest.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth.test/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth.test/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AuthTestResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AuthTestResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AuthTest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AuthTest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//auth.test/post(authTest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AuthTest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AuthTest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add bookmark to a channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.add`.
    /// - Remark: Generated from `#/paths//bookmarks.add/post(bookmarksAdd)`.
    public enum BookmarksAdd {
        public static let id: Swift.String = "bookmarksAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookmarks.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BookmarksAdd.Input.Headers
            /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to add bookmark in.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Title for the bookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Type of the bookmark i.e link.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/type`.
                    public var _type: Swift.String
                    /// The level that we are setting the file's permission to (read or write).
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/accessLevel`.
                    public var accessLevel: Swift.String?
                    /// Emoji tag to apply to the link.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/emoji`.
                    public var emoji: Swift.String?
                    /// ID of the entity being bookmarked. Only applies to message and file types.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/entityId`.
                    public var entityId: Swift.String?
                    /// Link to bookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/link`.
                    public var link: Swift.String?
                    /// Id of this bookmark's parent.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/json/parentId`.
                    public var parentId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel to add bookmark in.
                    ///   - title: Title for the bookmark.
                    ///   - _type: Type of the bookmark i.e link.
                    ///   - accessLevel: The level that we are setting the file's permission to (read or write).
                    ///   - emoji: Emoji tag to apply to the link.
                    ///   - entityId: ID of the entity being bookmarked. Only applies to message and file types.
                    ///   - link: Link to bookmark.
                    ///   - parentId: Id of this bookmark's parent.
                    public init(
                        channelId: Swift.String,
                        title: Swift.String,
                        _type: Swift.String,
                        accessLevel: Swift.String? = nil,
                        emoji: Swift.String? = nil,
                        entityId: Swift.String? = nil,
                        link: Swift.String? = nil,
                        parentId: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.title = title
                        self._type = _type
                        self.accessLevel = accessLevel
                        self.emoji = emoji
                        self.entityId = entityId
                        self.link = link
                        self.parentId = parentId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case title
                        case _type = "type"
                        case accessLevel
                        case emoji
                        case entityId
                        case link
                        case parentId
                    }
                }
                /// - Remark: Generated from `#/paths/bookmarks.add/POST/requestBody/content/application\/json`.
                case json(Operations.BookmarksAdd.Input.Body.JsonPayload)
            }
            public var body: Operations.BookmarksAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BookmarksAdd.Input.Headers = .init(),
                body: Operations.BookmarksAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookmarks.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BookmarksAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BookmarksAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BookmarksAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BookmarksAdd.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//bookmarks.add/post(bookmarksAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BookmarksAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BookmarksAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Edit bookmark.
    ///
    /// - Remark: HTTP `POST /bookmarks.edit`.
    /// - Remark: Generated from `#/paths//bookmarks.edit/post(bookmarksEdit)`.
    public enum BookmarksEdit {
        public static let id: Swift.String = "bookmarksEdit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookmarks.edit/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksEdit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksEdit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BookmarksEdit.Input.Headers
            /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Bookmark to update.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json/bookmarkId`.
                    public var bookmarkId: Swift.String
                    /// Channel to update bookmark in.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Emoji tag to apply to the link.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json/emoji`.
                    public var emoji: Swift.String?
                    /// Link to bookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json/link`.
                    public var link: Swift.String?
                    /// Title for the bookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - bookmarkId: Bookmark to update.
                    ///   - channelId: Channel to update bookmark in.
                    ///   - emoji: Emoji tag to apply to the link.
                    ///   - link: Link to bookmark.
                    ///   - title: Title for the bookmark.
                    public init(
                        bookmarkId: Swift.String,
                        channelId: Swift.String,
                        emoji: Swift.String? = nil,
                        link: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.bookmarkId = bookmarkId
                        self.channelId = channelId
                        self.emoji = emoji
                        self.link = link
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case bookmarkId
                        case channelId
                        case emoji
                        case link
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/bookmarks.edit/POST/requestBody/content/application\/json`.
                case json(Operations.BookmarksEdit.Input.Body.JsonPayload)
            }
            public var body: Operations.BookmarksEdit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BookmarksEdit.Input.Headers = .init(),
                body: Operations.BookmarksEdit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.edit/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookmarks.edit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BookmarksEditResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BookmarksEditResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BookmarksEdit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BookmarksEdit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//bookmarks.edit/post(bookmarksEdit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BookmarksEdit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BookmarksEdit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List bookmark for the channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.list`.
    /// - Remark: Generated from `#/paths//bookmarks.list/post(bookmarksList)`.
    public enum BookmarksList {
        public static let id: Swift.String = "bookmarksList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookmarks.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BookmarksList.Input.Headers
            /// - Remark: Generated from `#/paths/bookmarks.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to list bookmarks in.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.list/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel to list bookmarks in.
                    public init(channelId: Swift.String) {
                        self.channelId = channelId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                    }
                }
                /// - Remark: Generated from `#/paths/bookmarks.list/POST/requestBody/content/application\/json`.
                case json(Operations.BookmarksList.Input.Body.JsonPayload)
            }
            public var body: Operations.BookmarksList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BookmarksList.Input.Headers = .init(),
                body: Operations.BookmarksList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookmarks.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BookmarksListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BookmarksListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BookmarksList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BookmarksList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//bookmarks.list/post(bookmarksList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BookmarksList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BookmarksList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove bookmark from the channel.
    ///
    /// - Remark: HTTP `POST /bookmarks.remove`.
    /// - Remark: Generated from `#/paths//bookmarks.remove/post(bookmarksRemove)`.
    public enum BookmarksRemove {
        public static let id: Swift.String = "bookmarksRemove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookmarks.remove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksRemove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BookmarksRemove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BookmarksRemove.Input.Headers
            /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Bookmark to remove.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody/json/bookmarkId`.
                    public var bookmarkId: Swift.String
                    /// Channel to remove bookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Quip section ID to unbookmark.
                    ///
                    /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody/json/quipSectionId`.
                    public var quipSectionId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - bookmarkId: Bookmark to remove.
                    ///   - channelId: Channel to remove bookmark.
                    ///   - quipSectionId: Quip section ID to unbookmark.
                    public init(
                        bookmarkId: Swift.String,
                        channelId: Swift.String,
                        quipSectionId: Swift.String? = nil
                    ) {
                        self.bookmarkId = bookmarkId
                        self.channelId = channelId
                        self.quipSectionId = quipSectionId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case bookmarkId
                        case channelId
                        case quipSectionId
                    }
                }
                /// - Remark: Generated from `#/paths/bookmarks.remove/POST/requestBody/content/application\/json`.
                case json(Operations.BookmarksRemove.Input.Body.JsonPayload)
            }
            public var body: Operations.BookmarksRemove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BookmarksRemove.Input.Headers = .init(),
                body: Operations.BookmarksRemove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookmarks.remove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookmarks.remove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BookmarksRemoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BookmarksRemoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BookmarksRemove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BookmarksRemove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//bookmarks.remove/post(bookmarksRemove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BookmarksRemove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BookmarksRemove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets information about a bot user.
    ///
    /// - Remark: HTTP `POST /bots.info`.
    /// - Remark: Generated from `#/paths//bots.info/post(botsInfo)`.
    public enum BotsInfo {
        public static let id: Swift.String = "botsInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bots.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BotsInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BotsInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.BotsInfo.Input.Headers
            /// - Remark: Generated from `#/paths/bots.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bots.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Bot user to get info on.
                    ///
                    /// - Remark: Generated from `#/paths/bots.info/POST/requestBody/json/bot`.
                    public var bot: Swift.String?
                    /// encoded team id or enterprise id where the bot exists, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/bots.info/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - bot: Bot user to get info on.
                    ///   - teamId: encoded team id or enterprise id where the bot exists, required if org token is used.
                    public init(
                        bot: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.bot = bot
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case bot
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/bots.info/POST/requestBody/content/application\/json`.
                case json(Operations.BotsInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.BotsInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.BotsInfo.Input.Headers = .init(),
                body: Operations.BotsInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bots.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bots.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BotsInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BotsInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.BotsInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.BotsInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//bots.info/post(botsInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BotsInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.BotsInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove access to a canvas for specified entities
    ///
    /// - Remark: HTTP `POST /canvases.access.delete`.
    /// - Remark: Generated from `#/paths//canvases.access.delete/post(canvasesAccessDelete)`.
    public enum CanvasesAccessDelete {
        public static let id: Swift.String = "canvasesAccessDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.access.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesAccessDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesAccessDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CanvasesAccessDelete.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded ID of the canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody/json/canvasId`.
                    public var canvasId: Swift.String
                    /// List of channels you wish to update access for.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody/json/channelIds`.
                    public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// List of users you wish to update access for.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - canvasId: Encoded ID of the canvas.
                    ///   - channelIds: List of channels you wish to update access for.
                    ///   - userIds: List of users you wish to update access for.
                    public init(
                        canvasId: Swift.String,
                        channelIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                    ) {
                        self.canvasId = canvasId
                        self.channelIds = channelIds
                        self.userIds = userIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case canvasId
                        case channelIds
                        case userIds
                    }
                }
                /// - Remark: Generated from `#/paths/canvases.access.delete/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesAccessDelete.Input.Body.JsonPayload)
            }
            public var body: Operations.CanvasesAccessDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesAccessDelete.Input.Headers = .init(),
                body: Operations.CanvasesAccessDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.access.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.access.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesAccessDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesAccessDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CanvasesAccessDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesAccessDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.access.delete/post(canvasesAccessDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesAccessDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesAccessDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sets the access level to a canvas for specified entities
    ///
    /// - Remark: HTTP `POST /canvases.access.set`.
    /// - Remark: Generated from `#/paths//canvases.access.set/post(canvasesAccessSet)`.
    public enum CanvasesAccessSet {
        public static let id: Swift.String = "canvasesAccessSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.access.set/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesAccessSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesAccessSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CanvasesAccessSet.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Desired level of access.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/json/accessLevel`.
                    public var accessLevel: Swift.String
                    /// Encoded ID of the canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/json/canvasId`.
                    public var canvasId: Swift.String
                    /// List of channels you wish to update access for. Can only be used if user_ids is not provided.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/json/channelIds`.
                    public var channelIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// List of users you wish to update access for. Can only be used if channel_ids is not provided.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - accessLevel: Desired level of access.
                    ///   - canvasId: Encoded ID of the canvas.
                    ///   - channelIds: List of channels you wish to update access for. Can only be used if user_ids is not provided.
                    ///   - userIds: List of users you wish to update access for. Can only be used if channel_ids is not provided.
                    public init(
                        accessLevel: Swift.String,
                        canvasId: Swift.String,
                        channelIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                    ) {
                        self.accessLevel = accessLevel
                        self.canvasId = canvasId
                        self.channelIds = channelIds
                        self.userIds = userIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case accessLevel
                        case canvasId
                        case channelIds
                        case userIds
                    }
                }
                /// - Remark: Generated from `#/paths/canvases.access.set/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesAccessSet.Input.Body.JsonPayload)
            }
            public var body: Operations.CanvasesAccessSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesAccessSet.Input.Headers = .init(),
                body: Operations.CanvasesAccessSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.access.set/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.access.set/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesAccessSetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesAccessSetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CanvasesAccessSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesAccessSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.access.set/post(canvasesAccessSet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesAccessSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesAccessSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create canvas for a user
    ///
    /// - Remark: HTTP `POST /canvases.create`.
    /// - Remark: Generated from `#/paths//canvases.create/post(canvasesCreate)`.
    public enum CanvasesCreate {
        public static let id: Swift.String = "canvasesCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CanvasesCreate.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel ID of the channel the canvas will be tabbed in. This is a required field for free teams.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String?
                    /// Structure describing the type and value of the content to create.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody/json/documentContent`.
                    public var documentContent: Swift.String?
                    /// Title of the newly created canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel ID of the channel the canvas will be tabbed in. This is a required field for free teams.
                    ///   - documentContent: Structure describing the type and value of the content to create.
                    ///   - title: Title of the newly created canvas.
                    public init(
                        channelId: Swift.String? = nil,
                        documentContent: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.documentContent = documentContent
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case documentContent
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/canvases.create/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesCreate.Input.Body.JsonPayload)
            }
            public var body: Operations.CanvasesCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesCreate.Input.Headers = .init(),
                body: Operations.CanvasesCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CanvasesCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.create/post(canvasesCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a canvas
    ///
    /// - Remark: HTTP `POST /canvases.delete`.
    /// - Remark: Generated from `#/paths//canvases.delete/post(canvasesDelete)`.
    public enum CanvasesDelete {
        public static let id: Swift.String = "canvasesDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CanvasesDelete.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded ID of the canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.delete/POST/requestBody/json/canvasId`.
                    public var canvasId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - canvasId: Encoded ID of the canvas.
                    public init(canvasId: Swift.String) {
                        self.canvasId = canvasId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case canvasId
                    }
                }
                /// - Remark: Generated from `#/paths/canvases.delete/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesDelete.Input.Body.JsonPayload)
            }
            public var body: Operations.CanvasesDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesDelete.Input.Headers = .init(),
                body: Operations.CanvasesDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CanvasesDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.delete/post(canvasesDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an existing canvas
    ///
    /// - Remark: HTTP `POST /canvases.edit`.
    /// - Remark: Generated from `#/paths//canvases.edit/post(canvasesEdit)`.
    public enum CanvasesEdit {
        public static let id: Swift.String = "canvasesEdit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.edit/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesEdit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesEdit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CanvasesEdit.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.edit/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.edit/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded ID of the canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.edit/POST/requestBody/json/canvasId`.
                    public var canvasId: Swift.String
                    /// List of changes to apply on the specified canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.edit/POST/requestBody/json/changes`.
                    public var changes: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - canvasId: Encoded ID of the canvas.
                    ///   - changes: List of changes to apply on the specified canvas.
                    public init(
                        canvasId: Swift.String,
                        changes: OpenAPIRuntime.OpenAPIArrayContainer
                    ) {
                        self.canvasId = canvasId
                        self.changes = changes
                    }
                    public enum CodingKeys: String, CodingKey {
                        case canvasId
                        case changes
                    }
                }
                /// - Remark: Generated from `#/paths/canvases.edit/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesEdit.Input.Body.JsonPayload)
            }
            public var body: Operations.CanvasesEdit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesEdit.Input.Headers = .init(),
                body: Operations.CanvasesEdit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.edit/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.edit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesEditResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesEditResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CanvasesEdit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesEdit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.edit/post(canvasesEdit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesEdit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesEdit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Find sections matching the provided criteria
    ///
    /// - Remark: HTTP `POST /canvases.sections.lookup`.
    /// - Remark: Generated from `#/paths//canvases.sections.lookup/post(canvasesSectionsLookup)`.
    public enum CanvasesSectionsLookup {
        public static let id: Swift.String = "canvasesSectionsLookup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesSectionsLookup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CanvasesSectionsLookup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CanvasesSectionsLookup.Input.Headers
            /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded ID of the canvas.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/requestBody/json/canvasId`.
                    public var canvasId: Swift.String
                    /// Filtering criteria.
                    ///
                    /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/requestBody/json/criteria`.
                    public var criteria: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - canvasId: Encoded ID of the canvas.
                    ///   - criteria: Filtering criteria.
                    public init(
                        canvasId: Swift.String,
                        criteria: Swift.String
                    ) {
                        self.canvasId = canvasId
                        self.criteria = criteria
                    }
                    public enum CodingKeys: String, CodingKey {
                        case canvasId
                        case criteria
                    }
                }
                /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/requestBody/content/application\/json`.
                case json(Operations.CanvasesSectionsLookup.Input.Body.JsonPayload)
            }
            public var body: Operations.CanvasesSectionsLookup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CanvasesSectionsLookup.Input.Headers = .init(),
                body: Operations.CanvasesSectionsLookup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/canvases.sections.lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CanvasesSectionsLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CanvasesSectionsLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CanvasesSectionsLookup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CanvasesSectionsLookup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//canvases.sections.lookup/post(canvasesSectionsLookup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CanvasesSectionsLookup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CanvasesSectionsLookup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a message.
    ///
    /// - Remark: HTTP `POST /chat.delete`.
    /// - Remark: Generated from `#/paths//chat.delete/post(chatDelete)`.
    public enum ChatDelete {
        public static let id: Swift.String = "chatDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ChatDelete.Input.Headers
            /// - Remark: Generated from `#/paths/chat.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel containing the message to be deleted.
                    ///
                    /// - Remark: Generated from `#/paths/chat.delete/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Timestamp of the message to be deleted.
                    ///
                    /// - Remark: Generated from `#/paths/chat.delete/POST/requestBody/json/ts`.
                    public var ts: Swift.String
                    /// Pass true to delete the message as the authed user with chat:write:user scope. Bot users in this context are considered authed users. If unused or false, the message will be deleted with chat:write:bot scope.
                    ///
                    /// - Remark: Generated from `#/paths/chat.delete/POST/requestBody/json/asUser`.
                    public var asUser: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel containing the message to be deleted.
                    ///   - ts: Timestamp of the message to be deleted.
                    ///   - asUser: Pass true to delete the message as the authed user with chat:write:user scope. Bot users in this context are considered authed users. If unused or false, the message will be deleted with chat:write:bot scope.
                    public init(
                        channel: Swift.String,
                        ts: Swift.String,
                        asUser: Swift.Bool? = nil
                    ) {
                        self.channel = channel
                        self.ts = ts
                        self.asUser = asUser
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case ts
                        case asUser
                    }
                }
                /// - Remark: Generated from `#/paths/chat.delete/POST/requestBody/content/application\/json`.
                case json(Operations.ChatDelete.Input.Body.JsonPayload)
            }
            public var body: Operations.ChatDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ChatDelete.Input.Headers = .init(),
                body: Operations.ChatDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ChatDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ChatDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat.delete/post(chatDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ChatDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ChatDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a pending scheduled message from the queue.
    ///
    /// - Remark: HTTP `POST /chat.deleteScheduledMessage`.
    /// - Remark: Generated from `#/paths//chat.deleteScheduledMessage/post(chatDeleteScheduledMessage)`.
    public enum ChatDeleteScheduledMessage {
        public static let id: Swift.String = "chatDeleteScheduledMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat.deleteScheduledMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatDeleteScheduledMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatDeleteScheduledMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ChatDeleteScheduledMessage.Input.Headers
            /// - Remark: Generated from `#/paths/chat.deleteScheduledMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.deleteScheduledMessage/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel the scheduled_message is posting to.
                    ///
                    /// - Remark: Generated from `#/paths/chat.deleteScheduledMessage/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// scheduled_message_id returned from call to chat.scheduleMessage.
                    ///
                    /// - Remark: Generated from `#/paths/chat.deleteScheduledMessage/POST/requestBody/json/scheduledMessageId`.
                    public var scheduledMessageId: Swift.String
                    /// Pass true to delete the message as the authed user with chat:write:user scope. Bot users in this context are considered authed users. If unused or false, the message will be deleted with chat:write:bot scope.
                    ///
                    /// - Remark: Generated from `#/paths/chat.deleteScheduledMessage/POST/requestBody/json/asUser`.
                    public var asUser: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: The channel the scheduled_message is posting to.
                    ///   - scheduledMessageId: scheduled_message_id returned from call to chat.scheduleMessage.
                    ///   - asUser: Pass true to delete the message as the authed user with chat:write:user scope. Bot users in this context are considered authed users. If unused or false, the message will be deleted with chat:write:bot scope.
                    public init(
                        channel: Swift.String,
                        scheduledMessageId: Swift.String,
                        asUser: Swift.Bool? = nil
                    ) {
                        self.channel = channel
                        self.scheduledMessageId = scheduledMessageId
                        self.asUser = asUser
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case scheduledMessageId
                        case asUser
                    }
                }
                /// - Remark: Generated from `#/paths/chat.deleteScheduledMessage/POST/requestBody/content/application\/json`.
                case json(Operations.ChatDeleteScheduledMessage.Input.Body.JsonPayload)
            }
            public var body: Operations.ChatDeleteScheduledMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ChatDeleteScheduledMessage.Input.Headers = .init(),
                body: Operations.ChatDeleteScheduledMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.deleteScheduledMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat.deleteScheduledMessage/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatDeleteScheduledMessageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatDeleteScheduledMessageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ChatDeleteScheduledMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ChatDeleteScheduledMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat.deleteScheduledMessage/post(chatDeleteScheduledMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ChatDeleteScheduledMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ChatDeleteScheduledMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve a permalink URL for a specific extant message
    ///
    /// - Remark: HTTP `POST /chat.getPermalink`.
    /// - Remark: Generated from `#/paths//chat.getPermalink/post(chatGetPermalink)`.
    public enum ChatGetPermalink {
        public static let id: Swift.String = "chatGetPermalink"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat.getPermalink/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatGetPermalink.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatGetPermalink.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ChatGetPermalink.Input.Headers
            /// - Remark: Generated from `#/paths/chat.getPermalink/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.getPermalink/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the conversation or channel containing the message.
                    ///
                    /// - Remark: Generated from `#/paths/chat.getPermalink/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// A message's ts value, uniquely identifying it within a channel.
                    ///
                    /// - Remark: Generated from `#/paths/chat.getPermalink/POST/requestBody/json/messageTs`.
                    public var messageTs: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: The ID of the conversation or channel containing the message.
                    ///   - messageTs: A message's ts value, uniquely identifying it within a channel.
                    public init(
                        channel: Swift.String,
                        messageTs: Swift.String
                    ) {
                        self.channel = channel
                        self.messageTs = messageTs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case messageTs
                    }
                }
                /// - Remark: Generated from `#/paths/chat.getPermalink/POST/requestBody/content/application\/json`.
                case json(Operations.ChatGetPermalink.Input.Body.JsonPayload)
            }
            public var body: Operations.ChatGetPermalink.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ChatGetPermalink.Input.Headers = .init(),
                body: Operations.ChatGetPermalink.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.getPermalink/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat.getPermalink/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatGetPermalinkResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatGetPermalinkResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ChatGetPermalink.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ChatGetPermalink.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat.getPermalink/post(chatGetPermalink)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ChatGetPermalink.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ChatGetPermalink.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Share a me message into a channel.
    ///
    /// - Remark: HTTP `POST /chat.meMessage`.
    /// - Remark: Generated from `#/paths//chat.meMessage/post(chatMeMessage)`.
    public enum ChatMeMessage {
        public static let id: Swift.String = "chatMeMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat.meMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatMeMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatMeMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ChatMeMessage.Input.Headers
            /// - Remark: Generated from `#/paths/chat.meMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.meMessage/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.
                    ///
                    /// - Remark: Generated from `#/paths/chat.meMessage/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Text of the message to send.
                    ///
                    /// - Remark: Generated from `#/paths/chat.meMessage/POST/requestBody/json/text`.
                    public var text: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.
                    ///   - text: Text of the message to send.
                    public init(
                        channel: Swift.String,
                        text: Swift.String
                    ) {
                        self.channel = channel
                        self.text = text
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case text
                    }
                }
                /// - Remark: Generated from `#/paths/chat.meMessage/POST/requestBody/content/application\/json`.
                case json(Operations.ChatMeMessage.Input.Body.JsonPayload)
            }
            public var body: Operations.ChatMeMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ChatMeMessage.Input.Headers = .init(),
                body: Operations.ChatMeMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.meMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat.meMessage/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatMeMessageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatMeMessageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ChatMeMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ChatMeMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat.meMessage/post(chatMeMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ChatMeMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ChatMeMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sends an ephemeral message to a user in a channel.
    ///
    /// - Remark: HTTP `POST /chat.postEphemeral`.
    /// - Remark: Generated from `#/paths//chat.postEphemeral/post(chatPostEphemeral)`.
    public enum ChatPostEphemeral {
        public static let id: Swift.String = "chatPostEphemeral"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatPostEphemeral.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatPostEphemeral.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ChatPostEphemeral.Input.Headers
            /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// id of the user who will receive the ephemeral message. The user should be in the channel specified by the channel argument.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/user`.
                    public var user: Swift.String
                    /// A JSON-based array of structured attachments, presented as a URL-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/attachments`.
                    public var attachments: Swift.String?
                    /// A JSON-based array of structured blocks, presented as a URL-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/blocks`.
                    public var blocks: Swift.String?
                    /// How this field works and whether it is required depends on other fields you use in your API call. See below for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/text`.
                    public var text: Swift.String?
                    /// (Legacy) Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/asUser`.
                    public var asUser: Swift.Bool?
                    /// Emoji to use as the icon for this message. Overrides icon_url.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/iconEmoji`.
                    public var iconEmoji: Swift.String?
                    /// URL to an image to use as the icon for this message.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/iconUrl`.
                    public var iconUrl: Swift.String?
                    /// Find and link channel names and usernames.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/linkNames`.
                    public var linkNames: Swift.Bool?
                    /// Accepts message text formatted in markdown. This argument should not be used in conjunction with blocks or text. Limit this field to 12,000 characters.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/markdownText`.
                    public var markdownText: Swift.String?
                    /// Change how messages are treated. Defaults to none. See below.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/parse`.
                    public var parse: Swift.String?
                    /// Provide another message's ts value to post this message in a thread. Avoid using a reply's ts value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/threadTs`.
                    public var threadTs: Swift.String?
                    /// Set your bot's user name.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/json/username`.
                    public var username: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
                    ///   - user: id of the user who will receive the ephemeral message. The user should be in the channel specified by the channel argument.
                    ///   - attachments: A JSON-based array of structured attachments, presented as a URL-encoded string.
                    ///   - blocks: A JSON-based array of structured blocks, presented as a URL-encoded string.
                    ///   - text: How this field works and whether it is required depends on other fields you use in your API call. See below for more detail.
                    ///   - asUser: (Legacy) Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.
                    ///   - iconEmoji: Emoji to use as the icon for this message. Overrides icon_url.
                    ///   - iconUrl: URL to an image to use as the icon for this message.
                    ///   - linkNames: Find and link channel names and usernames.
                    ///   - markdownText: Accepts message text formatted in markdown. This argument should not be used in conjunction with blocks or text. Limit this field to 12,000 characters.
                    ///   - parse: Change how messages are treated. Defaults to none. See below.
                    ///   - threadTs: Provide another message's ts value to post this message in a thread. Avoid using a reply's ts value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.
                    ///   - username: Set your bot's user name.
                    public init(
                        channel: Swift.String,
                        user: Swift.String,
                        attachments: Swift.String? = nil,
                        blocks: Swift.String? = nil,
                        text: Swift.String? = nil,
                        asUser: Swift.Bool? = nil,
                        iconEmoji: Swift.String? = nil,
                        iconUrl: Swift.String? = nil,
                        linkNames: Swift.Bool? = nil,
                        markdownText: Swift.String? = nil,
                        parse: Swift.String? = nil,
                        threadTs: Swift.String? = nil,
                        username: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.user = user
                        self.attachments = attachments
                        self.blocks = blocks
                        self.text = text
                        self.asUser = asUser
                        self.iconEmoji = iconEmoji
                        self.iconUrl = iconUrl
                        self.linkNames = linkNames
                        self.markdownText = markdownText
                        self.parse = parse
                        self.threadTs = threadTs
                        self.username = username
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case user
                        case attachments
                        case blocks
                        case text
                        case asUser
                        case iconEmoji
                        case iconUrl
                        case linkNames
                        case markdownText
                        case parse
                        case threadTs
                        case username
                    }
                }
                /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/requestBody/content/application\/json`.
                case json(Operations.ChatPostEphemeral.Input.Body.JsonPayload)
            }
            public var body: Operations.ChatPostEphemeral.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ChatPostEphemeral.Input.Headers = .init(),
                body: Operations.ChatPostEphemeral.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat.postEphemeral/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatPostEphemeralResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatPostEphemeralResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ChatPostEphemeral.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ChatPostEphemeral.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat.postEphemeral/post(chatPostEphemeral)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ChatPostEphemeral.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ChatPostEphemeral.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sends a message to a channel.
    ///
    /// - Remark: HTTP `POST /chat.postMessage`.
    /// - Remark: Generated from `#/paths//chat.postMessage/post(chatPostMessage)`.
    public enum ChatPostMessage {
        public static let id: Swift.String = "chatPostMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat.postMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatPostMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatPostMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ChatPostMessage.Input.Headers
            /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// An encoded ID or channel name that represents a channel, private group, or IM channel to send the message to. See below for more details.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// A JSON-based array of structured attachments, presented as a URL-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/attachments`.
                    public var attachments: Swift.String?
                    /// A JSON-based array of structured blocks, presented as a URL-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/blocks`.
                    public var blocks: Swift.String?
                    /// How this field works and whether it is required depends on other fields you use in your API call. See below for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/text`.
                    public var text: Swift.String?
                    /// Identify how the message was posted for agentforce BE logging.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/agentMessageSourceType`.
                    public var agentMessageSourceType: Swift.String?
                    /// (Legacy) Pass true to post the message as the authed user instead of as a bot. Defaults to false. Can only be used by classic apps. See legacy as_user parameter below.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/asUser`.
                    public var asUser: Swift.Bool?
                    /// Emoji to use as the icon for this message. Overrides icon_url.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/iconEmoji`.
                    public var iconEmoji: Swift.String?
                    /// URL to an image to use as the icon for this message.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/iconUrl`.
                    public var iconUrl: Swift.String?
                    /// Find and link user groups. No longer supports linking individual users; use syntax shown in Mentioning Users instead.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/linkNames`.
                    public var linkNames: Swift.Bool?
                    /// Accepts message text formatted in markdown. This argument should not be used in conjunction with blocks or text. Limit this field to 12,000 characters.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/markdownText`.
                    public var markdownText: Swift.String?
                    /// JSON object with event_type and event_payload fields, presented as a URL-encoded string. Metadata you post to Slack is accessible to any app or user who is a member of that workspace.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/metadata`.
                    public var metadata: Swift.String?
                    /// Disable Slack markup parsing by setting to false. Enabled by default.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/mrkdwn`.
                    public var mrkdwn: Swift.Bool?
                    /// Change how messages are treated. See below.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/parse`.
                    public var parse: Swift.String?
                    /// Used in conjunction with thread_ts and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/replyBroadcast`.
                    public var replyBroadcast: Swift.Bool?
                    /// Provide another message's ts value to make this message a reply. Avoid using a reply's ts value; use its parent instead.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/threadTs`.
                    public var threadTs: Swift.String?
                    /// Pass true to enable unfurling of primarily text-based content.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/unfurlLinks`.
                    public var unfurlLinks: Swift.Bool?
                    /// Pass false to disable unfurling of media content.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/unfurlMedia`.
                    public var unfurlMedia: Swift.Bool?
                    /// Set your bot's user name.
                    ///
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/json/username`.
                    public var username: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: An encoded ID or channel name that represents a channel, private group, or IM channel to send the message to. See below for more details.
                    ///   - attachments: A JSON-based array of structured attachments, presented as a URL-encoded string.
                    ///   - blocks: A JSON-based array of structured blocks, presented as a URL-encoded string.
                    ///   - text: How this field works and whether it is required depends on other fields you use in your API call. See below for more detail.
                    ///   - agentMessageSourceType: Identify how the message was posted for agentforce BE logging.
                    ///   - asUser: (Legacy) Pass true to post the message as the authed user instead of as a bot. Defaults to false. Can only be used by classic apps. See legacy as_user parameter below.
                    ///   - iconEmoji: Emoji to use as the icon for this message. Overrides icon_url.
                    ///   - iconUrl: URL to an image to use as the icon for this message.
                    ///   - linkNames: Find and link user groups. No longer supports linking individual users; use syntax shown in Mentioning Users instead.
                    ///   - markdownText: Accepts message text formatted in markdown. This argument should not be used in conjunction with blocks or text. Limit this field to 12,000 characters.
                    ///   - metadata: JSON object with event_type and event_payload fields, presented as a URL-encoded string. Metadata you post to Slack is accessible to any app or user who is a member of that workspace.
                    ///   - mrkdwn: Disable Slack markup parsing by setting to false. Enabled by default.
                    ///   - parse: Change how messages are treated. See below.
                    ///   - replyBroadcast: Used in conjunction with thread_ts and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to false.
                    ///   - threadTs: Provide another message's ts value to make this message a reply. Avoid using a reply's ts value; use its parent instead.
                    ///   - unfurlLinks: Pass true to enable unfurling of primarily text-based content.
                    ///   - unfurlMedia: Pass false to disable unfurling of media content.
                    ///   - username: Set your bot's user name.
                    public init(
                        channel: Swift.String,
                        attachments: Swift.String? = nil,
                        blocks: Swift.String? = nil,
                        text: Swift.String? = nil,
                        agentMessageSourceType: Swift.String? = nil,
                        asUser: Swift.Bool? = nil,
                        iconEmoji: Swift.String? = nil,
                        iconUrl: Swift.String? = nil,
                        linkNames: Swift.Bool? = nil,
                        markdownText: Swift.String? = nil,
                        metadata: Swift.String? = nil,
                        mrkdwn: Swift.Bool? = nil,
                        parse: Swift.String? = nil,
                        replyBroadcast: Swift.Bool? = nil,
                        threadTs: Swift.String? = nil,
                        unfurlLinks: Swift.Bool? = nil,
                        unfurlMedia: Swift.Bool? = nil,
                        username: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.attachments = attachments
                        self.blocks = blocks
                        self.text = text
                        self.agentMessageSourceType = agentMessageSourceType
                        self.asUser = asUser
                        self.iconEmoji = iconEmoji
                        self.iconUrl = iconUrl
                        self.linkNames = linkNames
                        self.markdownText = markdownText
                        self.metadata = metadata
                        self.mrkdwn = mrkdwn
                        self.parse = parse
                        self.replyBroadcast = replyBroadcast
                        self.threadTs = threadTs
                        self.unfurlLinks = unfurlLinks
                        self.unfurlMedia = unfurlMedia
                        self.username = username
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case attachments
                        case blocks
                        case text
                        case agentMessageSourceType
                        case asUser
                        case iconEmoji
                        case iconUrl
                        case linkNames
                        case markdownText
                        case metadata
                        case mrkdwn
                        case parse
                        case replyBroadcast
                        case threadTs
                        case unfurlLinks
                        case unfurlMedia
                        case username
                    }
                }
                /// - Remark: Generated from `#/paths/chat.postMessage/POST/requestBody/content/application\/json`.
                case json(Operations.ChatPostMessage.Input.Body.JsonPayload)
            }
            public var body: Operations.ChatPostMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ChatPostMessage.Input.Headers = .init(),
                body: Operations.ChatPostMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.postMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat.postMessage/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatPostMessageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatPostMessageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ChatPostMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ChatPostMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat.postMessage/post(chatPostMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ChatPostMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ChatPostMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Schedules a message to be sent to a channel.
    ///
    /// - Remark: HTTP `POST /chat.scheduleMessage`.
    /// - Remark: Generated from `#/paths//chat.scheduleMessage/post(chatScheduleMessage)`.
    public enum ChatScheduleMessage {
        public static let id: Swift.String = "chatScheduleMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatScheduleMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatScheduleMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ChatScheduleMessage.Input.Headers
            /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See below for more details.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Unix timestamp representing the future time the message should post to Slack.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/postAt`.
                    public var postAt: Swift.Int
                    /// A JSON-based array of structured attachments, presented as a URL-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/attachments`.
                    public var attachments: Swift.String?
                    /// A JSON-based array of structured blocks, presented as a URL-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/blocks`.
                    public var blocks: Swift.String?
                    /// How this field works and whether it is required depends on other fields you use in your API call. See below for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/text`.
                    public var text: Swift.String?
                    /// Set to true to post the message as the authed user, instead of as a bot. Defaults to false. Cannot be used by new Slack apps. See chat.postMessage.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/asUser`.
                    public var asUser: Swift.Bool?
                    /// Find and link user groups. No longer supports linking individual users; use syntax shown in Mentioning Users instead.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/linkNames`.
                    public var linkNames: Swift.Bool?
                    /// Accepts message text formatted in markdown. This argument should not be used in conjunction with blocks or text. Limit this field to 12,000 characters.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/markdownText`.
                    public var markdownText: Swift.String?
                    /// JSON object with event_type and event_payload fields, presented as a URL-encoded string. Metadata you post to Slack is accessible to any app or user who is a member of that workspace.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/metadata`.
                    public var metadata: Swift.String?
                    /// Change how messages are treated. See chat.postMessage.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/parse`.
                    public var parse: Swift.String?
                    /// Used in conjunction with thread_ts and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/replyBroadcast`.
                    public var replyBroadcast: Swift.Bool?
                    /// Provide another message's ts value to make this message a reply. Avoid using a reply's ts value; use its parent instead.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/threadTs`.
                    public var threadTs: Swift.String?
                    /// Pass true to enable unfurling of primarily text-based content.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/unfurlLinks`.
                    public var unfurlLinks: Swift.Bool?
                    /// Pass false to disable unfurling of media content.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/json/unfurlMedia`.
                    public var unfurlMedia: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See below for more details.
                    ///   - postAt: Unix timestamp representing the future time the message should post to Slack.
                    ///   - attachments: A JSON-based array of structured attachments, presented as a URL-encoded string.
                    ///   - blocks: A JSON-based array of structured blocks, presented as a URL-encoded string.
                    ///   - text: How this field works and whether it is required depends on other fields you use in your API call. See below for more detail.
                    ///   - asUser: Set to true to post the message as the authed user, instead of as a bot. Defaults to false. Cannot be used by new Slack apps. See chat.postMessage.
                    ///   - linkNames: Find and link user groups. No longer supports linking individual users; use syntax shown in Mentioning Users instead.
                    ///   - markdownText: Accepts message text formatted in markdown. This argument should not be used in conjunction with blocks or text. Limit this field to 12,000 characters.
                    ///   - metadata: JSON object with event_type and event_payload fields, presented as a URL-encoded string. Metadata you post to Slack is accessible to any app or user who is a member of that workspace.
                    ///   - parse: Change how messages are treated. See chat.postMessage.
                    ///   - replyBroadcast: Used in conjunction with thread_ts and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to false.
                    ///   - threadTs: Provide another message's ts value to make this message a reply. Avoid using a reply's ts value; use its parent instead.
                    ///   - unfurlLinks: Pass true to enable unfurling of primarily text-based content.
                    ///   - unfurlMedia: Pass false to disable unfurling of media content.
                    public init(
                        channel: Swift.String,
                        postAt: Swift.Int,
                        attachments: Swift.String? = nil,
                        blocks: Swift.String? = nil,
                        text: Swift.String? = nil,
                        asUser: Swift.Bool? = nil,
                        linkNames: Swift.Bool? = nil,
                        markdownText: Swift.String? = nil,
                        metadata: Swift.String? = nil,
                        parse: Swift.String? = nil,
                        replyBroadcast: Swift.Bool? = nil,
                        threadTs: Swift.String? = nil,
                        unfurlLinks: Swift.Bool? = nil,
                        unfurlMedia: Swift.Bool? = nil
                    ) {
                        self.channel = channel
                        self.postAt = postAt
                        self.attachments = attachments
                        self.blocks = blocks
                        self.text = text
                        self.asUser = asUser
                        self.linkNames = linkNames
                        self.markdownText = markdownText
                        self.metadata = metadata
                        self.parse = parse
                        self.replyBroadcast = replyBroadcast
                        self.threadTs = threadTs
                        self.unfurlLinks = unfurlLinks
                        self.unfurlMedia = unfurlMedia
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case postAt
                        case attachments
                        case blocks
                        case text
                        case asUser
                        case linkNames
                        case markdownText
                        case metadata
                        case parse
                        case replyBroadcast
                        case threadTs
                        case unfurlLinks
                        case unfurlMedia
                    }
                }
                /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/requestBody/content/application\/json`.
                case json(Operations.ChatScheduleMessage.Input.Body.JsonPayload)
            }
            public var body: Operations.ChatScheduleMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ChatScheduleMessage.Input.Headers = .init(),
                body: Operations.ChatScheduleMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat.scheduleMessage/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatScheduleMessageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatScheduleMessageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ChatScheduleMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ChatScheduleMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat.scheduleMessage/post(chatScheduleMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ChatScheduleMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ChatScheduleMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of scheduled messages.
    ///
    /// - Remark: HTTP `POST /chat.scheduledMessages.list`.
    /// - Remark: Generated from `#/paths//chat.scheduledMessages.list/post(chatScheduledMessagesList)`.
    public enum ChatScheduledMessagesList {
        public static let id: Swift.String = "chatScheduledMessagesList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatScheduledMessagesList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatScheduledMessagesList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ChatScheduledMessagesList.Input.Headers
            /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The channel of the scheduled messages.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// For pagination purposes, this is the cursor value returned from a previous call to chat.scheduledmessages.list indicating where you want to start this call from.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// A Unix timestamp of the latest value in the time range.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/requestBody/json/latest`.
                    public var latest: Swift.String?
                    /// Maximum number of original entries to return.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// A Unix timestamp of the oldest value in the time range.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/requestBody/json/oldest`.
                    public var oldest: Swift.String?
                    /// encoded team id to list channels in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: The channel of the scheduled messages.
                    ///   - cursor: For pagination purposes, this is the cursor value returned from a previous call to chat.scheduledmessages.list indicating where you want to start this call from.
                    ///   - latest: A Unix timestamp of the latest value in the time range.
                    ///   - limit: Maximum number of original entries to return.
                    ///   - oldest: A Unix timestamp of the oldest value in the time range.
                    ///   - teamId: encoded team id to list channels in, required if org token is used.
                    public init(
                        channel: Swift.String? = nil,
                        cursor: Swift.String? = nil,
                        latest: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        oldest: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.cursor = cursor
                        self.latest = latest
                        self.limit = limit
                        self.oldest = oldest
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case cursor
                        case latest
                        case limit
                        case oldest
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/requestBody/content/application\/json`.
                case json(Operations.ChatScheduledMessagesList.Input.Body.JsonPayload)
            }
            public var body: Operations.ChatScheduledMessagesList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ChatScheduledMessagesList.Input.Headers = .init(),
                body: Operations.ChatScheduledMessagesList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat.scheduledMessages.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatScheduledMessagesListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatScheduledMessagesListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ChatScheduledMessagesList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ChatScheduledMessagesList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat.scheduledMessages.list/post(chatScheduledMessagesList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ChatScheduledMessagesList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ChatScheduledMessagesList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Provide custom unfurl behavior for user-posted URLs
    ///
    /// - Remark: HTTP `POST /chat.unfurl`.
    /// - Remark: Generated from `#/paths//chat.unfurl/post(chatUnfurl)`.
    public enum ChatUnfurl {
        public static let id: Swift.String = "chatUnfurl"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat.unfurl/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatUnfurl.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatUnfurl.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ChatUnfurl.Input.Headers
            /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel ID of the message. Both channel and ts must be provided together, or unfurl_id and source must be provided together.
                    ///
                    /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Timestamp of the message to add unfurl behavior to.
                    ///
                    /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/json/ts`.
                    public var ts: Swift.String
                    /// URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.
                    ///
                    /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/json/unfurls`.
                    public var unfurls: Swift.String
                    /// The source of the link to unfurl. The source may either be composer, when the link is inside the message composer, or conversations_history, when the link has been posted to a conversation.
                    ///
                    /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/json/source`.
                    public var source: Swift.String?
                    /// The ID of the link to unfurl. Both unfurl_id and source must be provided together, or channel and ts must be provided together.
                    ///
                    /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/json/unfurlId`.
                    public var unfurlId: Swift.String?
                    /// Provide a JSON based array of structured blocks presented as URL-encoded string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior.
                    ///
                    /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/json/userAuthBlocks`.
                    public var userAuthBlocks: Swift.String?
                    /// Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior. Provides two buttons, Not now or Never ask me again.
                    ///
                    /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/json/userAuthMessage`.
                    public var userAuthMessage: Swift.String?
                    /// Set to true or 1 to indicate the user must install your Slack app to trigger unfurls for this domain.
                    ///
                    /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/json/userAuthRequired`.
                    public var userAuthRequired: Swift.Bool?
                    /// Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.
                    ///
                    /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/json/userAuthUrl`.
                    public var userAuthUrl: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel ID of the message. Both channel and ts must be provided together, or unfurl_id and source must be provided together.
                    ///   - ts: Timestamp of the message to add unfurl behavior to.
                    ///   - unfurls: URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.
                    ///   - source: The source of the link to unfurl. The source may either be composer, when the link is inside the message composer, or conversations_history, when the link has been posted to a conversation.
                    ///   - unfurlId: The ID of the link to unfurl. Both unfurl_id and source must be provided together, or channel and ts must be provided together.
                    ///   - userAuthBlocks: Provide a JSON based array of structured blocks presented as URL-encoded string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior.
                    ///   - userAuthMessage: Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior. Provides two buttons, Not now or Never ask me again.
                    ///   - userAuthRequired: Set to true or 1 to indicate the user must install your Slack app to trigger unfurls for this domain.
                    ///   - userAuthUrl: Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.
                    public init(
                        channel: Swift.String,
                        ts: Swift.String,
                        unfurls: Swift.String,
                        source: Swift.String? = nil,
                        unfurlId: Swift.String? = nil,
                        userAuthBlocks: Swift.String? = nil,
                        userAuthMessage: Swift.String? = nil,
                        userAuthRequired: Swift.Bool? = nil,
                        userAuthUrl: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.ts = ts
                        self.unfurls = unfurls
                        self.source = source
                        self.unfurlId = unfurlId
                        self.userAuthBlocks = userAuthBlocks
                        self.userAuthMessage = userAuthMessage
                        self.userAuthRequired = userAuthRequired
                        self.userAuthUrl = userAuthUrl
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case ts
                        case unfurls
                        case source
                        case unfurlId
                        case userAuthBlocks
                        case userAuthMessage
                        case userAuthRequired
                        case userAuthUrl
                    }
                }
                /// - Remark: Generated from `#/paths/chat.unfurl/POST/requestBody/content/application\/json`.
                case json(Operations.ChatUnfurl.Input.Body.JsonPayload)
            }
            public var body: Operations.ChatUnfurl.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ChatUnfurl.Input.Headers = .init(),
                body: Operations.ChatUnfurl.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.unfurl/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat.unfurl/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatUnfurlResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatUnfurlResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ChatUnfurl.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ChatUnfurl.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat.unfurl/post(chatUnfurl)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ChatUnfurl.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ChatUnfurl.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates a message.
    ///
    /// - Remark: HTTP `POST /chat.update`.
    /// - Remark: Generated from `#/paths//chat.update/post(chatUpdate)`.
    public enum ChatUpdate {
        public static let id: Swift.String = "chatUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat.update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ChatUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ChatUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/chat.update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel containing the message to be updated. For direct messages, ensure that this value is a DM ID (starts with D) instead of a User ID (starts with either U or W).
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Timestamp of the message to be updated.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/ts`.
                    public var ts: Swift.String
                    /// A JSON-based array of structured attachments, presented as a URL-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/attachments`.
                    public var attachments: Swift.String?
                    /// A JSON-based array of structured blocks, presented as a URL-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/blocks`.
                    public var blocks: Swift.String?
                    /// How this field works and whether it is required depends on other fields you use in your API call. See below for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/text`.
                    public var text: Swift.String?
                    /// Pass true to update the message as the authed user. Bot users in this context are considered authed users.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/asUser`.
                    public var asUser: Swift.Bool?
                    /// Array of new file ids that will be sent with this message.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/fileIds`.
                    public var fileIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Find and link channel names and usernames. Defaults to none. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, none.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/linkNames`.
                    public var linkNames: Swift.Bool?
                    /// Accepts message text formatted in markdown. This argument should not be used in conjunction with blocks or text. Limit this field to 12,000 characters.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/markdownText`.
                    public var markdownText: Swift.String?
                    /// JSON object with event_type and event_payload fields, presented as a URL-encoded string. If you don't include this field, the message's previous metadata will be retained. To remove previous metadata, include an empty object for this field. Metadata you post to Slack is accessible to any app or user who is a member of that workspace.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/metadata`.
                    public var metadata: Swift.String?
                    /// Change how messages are treated. Defaults to client, unlike chat.postMessage. Accepts either none or full. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, client.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/parse`.
                    public var parse: Swift.String?
                    /// Broadcast an existing thread reply to make it visible to everyone in the channel or conversation.
                    ///
                    /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/json/replyBroadcast`.
                    public var replyBroadcast: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel containing the message to be updated. For direct messages, ensure that this value is a DM ID (starts with D) instead of a User ID (starts with either U or W).
                    ///   - ts: Timestamp of the message to be updated.
                    ///   - attachments: A JSON-based array of structured attachments, presented as a URL-encoded string.
                    ///   - blocks: A JSON-based array of structured blocks, presented as a URL-encoded string.
                    ///   - text: How this field works and whether it is required depends on other fields you use in your API call. See below for more detail.
                    ///   - asUser: Pass true to update the message as the authed user. Bot users in this context are considered authed users.
                    ///   - fileIds: Array of new file ids that will be sent with this message.
                    ///   - linkNames: Find and link channel names and usernames. Defaults to none. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, none.
                    ///   - markdownText: Accepts message text formatted in markdown. This argument should not be used in conjunction with blocks or text. Limit this field to 12,000 characters.
                    ///   - metadata: JSON object with event_type and event_payload fields, presented as a URL-encoded string. If you don't include this field, the message's previous metadata will be retained. To remove previous metadata, include an empty object for this field. Metadata you post to Slack is accessible to any app or user who is a member of that workspace.
                    ///   - parse: Change how messages are treated. Defaults to client, unlike chat.postMessage. Accepts either none or full. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, client.
                    ///   - replyBroadcast: Broadcast an existing thread reply to make it visible to everyone in the channel or conversation.
                    public init(
                        channel: Swift.String,
                        ts: Swift.String,
                        attachments: Swift.String? = nil,
                        blocks: Swift.String? = nil,
                        text: Swift.String? = nil,
                        asUser: Swift.Bool? = nil,
                        fileIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        linkNames: Swift.Bool? = nil,
                        markdownText: Swift.String? = nil,
                        metadata: Swift.String? = nil,
                        parse: Swift.String? = nil,
                        replyBroadcast: Swift.Bool? = nil
                    ) {
                        self.channel = channel
                        self.ts = ts
                        self.attachments = attachments
                        self.blocks = blocks
                        self.text = text
                        self.asUser = asUser
                        self.fileIds = fileIds
                        self.linkNames = linkNames
                        self.markdownText = markdownText
                        self.metadata = metadata
                        self.parse = parse
                        self.replyBroadcast = replyBroadcast
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case ts
                        case attachments
                        case blocks
                        case text
                        case asUser
                        case fileIds
                        case linkNames
                        case markdownText
                        case metadata
                        case parse
                        case replyBroadcast
                    }
                }
                /// - Remark: Generated from `#/paths/chat.update/POST/requestBody/content/application\/json`.
                case json(Operations.ChatUpdate.Input.Body.JsonPayload)
            }
            public var body: Operations.ChatUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ChatUpdate.Input.Headers = .init(),
                body: Operations.ChatUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat.update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat.update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatUpdateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatUpdateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ChatUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ChatUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat.update/post(chatUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ChatUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ChatUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Accepts an invitation to a Slack Connect channel.
    ///
    /// - Remark: HTTP `POST /conversations.acceptSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.acceptSharedInvite/post(conversationsAcceptSharedInvite)`.
    public enum ConversationsAcceptSharedInvite {
        public static let id: Swift.String = "conversationsAcceptSharedInvite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsAcceptSharedInvite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsAcceptSharedInvite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsAcceptSharedInvite.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the channel. If the channel does not exist already in your workspace, this name is the one that the channel will take.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/channelName`.
                    public var channelName: Swift.String
                    /// ID of the channel that you'd like to accept. Must provide either invite_id or channel_id.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String?
                    /// Whether you'd like to use your workspace's free trial to begin using Slack Connect.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/freeTrialAccepted`.
                    public var freeTrialAccepted: Swift.Bool?
                    /// ID of the invite that you'd like to accept. Must provide either invite_id or channel_id. See the shared_channel_invite_received event payload for more details on how to retrieve the ID of the invitation.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/inviteId`.
                    public var inviteId: Swift.String?
                    /// Whether the channel should be private.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/isPrivate`.
                    public var isPrivate: Swift.Bool?
                    /// The ID of the workspace to accept the channel in. If an org-level token is used to call this method, the team_id argument is required.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelName: Name of the channel. If the channel does not exist already in your workspace, this name is the one that the channel will take.
                    ///   - channelId: ID of the channel that you'd like to accept. Must provide either invite_id or channel_id.
                    ///   - freeTrialAccepted: Whether you'd like to use your workspace's free trial to begin using Slack Connect.
                    ///   - inviteId: ID of the invite that you'd like to accept. Must provide either invite_id or channel_id. See the shared_channel_invite_received event payload for more details on how to retrieve the ID of the invitation.
                    ///   - isPrivate: Whether the channel should be private.
                    ///   - teamId: The ID of the workspace to accept the channel in. If an org-level token is used to call this method, the team_id argument is required.
                    public init(
                        channelName: Swift.String,
                        channelId: Swift.String? = nil,
                        freeTrialAccepted: Swift.Bool? = nil,
                        inviteId: Swift.String? = nil,
                        isPrivate: Swift.Bool? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.channelName = channelName
                        self.channelId = channelId
                        self.freeTrialAccepted = freeTrialAccepted
                        self.inviteId = inviteId
                        self.isPrivate = isPrivate
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelName
                        case channelId
                        case freeTrialAccepted
                        case inviteId
                        case isPrivate
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsAcceptSharedInvite.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsAcceptSharedInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsAcceptSharedInvite.Input.Headers = .init(),
                body: Operations.ConversationsAcceptSharedInvite.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.acceptSharedInvite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsAcceptSharedInviteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsAcceptSharedInviteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsAcceptSharedInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsAcceptSharedInvite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.acceptSharedInvite/post(conversationsAcceptSharedInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsAcceptSharedInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsAcceptSharedInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Approves an invitation to a Slack Connect channel
    ///
    /// - Remark: HTTP `POST /conversations.approveSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.approveSharedInvite/post(conversationsApproveSharedInvite)`.
    public enum ConversationsApproveSharedInvite {
        public static let id: Swift.String = "conversationsApproveSharedInvite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsApproveSharedInvite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsApproveSharedInvite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsApproveSharedInvite.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the shared channel invite to approve.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/requestBody/json/inviteId`.
                    public var inviteId: Swift.String
                    /// The team or enterprise id of the other party involved in the invitation you are approving.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/requestBody/json/targetTeam`.
                    public var targetTeam: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inviteId: ID of the shared channel invite to approve.
                    ///   - targetTeam: The team or enterprise id of the other party involved in the invitation you are approving.
                    public init(
                        inviteId: Swift.String,
                        targetTeam: Swift.String? = nil
                    ) {
                        self.inviteId = inviteId
                        self.targetTeam = targetTeam
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inviteId
                        case targetTeam
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsApproveSharedInvite.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsApproveSharedInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsApproveSharedInvite.Input.Headers = .init(),
                body: Operations.ConversationsApproveSharedInvite.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.approveSharedInvite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsApproveSharedInviteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsApproveSharedInviteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsApproveSharedInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsApproveSharedInvite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.approveSharedInvite/post(conversationsApproveSharedInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsApproveSharedInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsApproveSharedInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Archives a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.archive`.
    /// - Remark: Generated from `#/paths//conversations.archive/post(conversationsArchive)`.
    public enum ConversationsArchive {
        public static let id: Swift.String = "conversationsArchive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.archive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsArchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsArchive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsArchive.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.archive/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.archive/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of conversation to archive.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.archive/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of conversation to archive.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.archive/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsArchive.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsArchive.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsArchive.Input.Headers = .init(),
                body: Operations.ConversationsArchive.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.archive/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.archive/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsArchiveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsArchiveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsArchive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsArchive.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.archive/post(conversationsArchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsArchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsArchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a channel canvas for a channel
    ///
    /// - Remark: HTTP `POST /conversations.canvases.create`.
    /// - Remark: Generated from `#/paths//conversations.canvases.create/post(conversationsCanvasesCreate)`.
    public enum ConversationsCanvasesCreate {
        public static let id: Swift.String = "conversationsCanvasesCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsCanvasesCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsCanvasesCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsCanvasesCreate.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel ID of the channel we create the channel canvas for.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String
                    /// Structure describing the type and value of the content to create.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody/json/documentContent`.
                    public var documentContent: Swift.String?
                    /// Title of the newly created canvas.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channelId: Channel ID of the channel we create the channel canvas for.
                    ///   - documentContent: Structure describing the type and value of the content to create.
                    ///   - title: Title of the newly created canvas.
                    public init(
                        channelId: Swift.String,
                        documentContent: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.channelId = channelId
                        self.documentContent = documentContent
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channelId
                        case documentContent
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsCanvasesCreate.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsCanvasesCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsCanvasesCreate.Input.Headers = .init(),
                body: Operations.ConversationsCanvasesCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.canvases.create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsCanvasesCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsCanvasesCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsCanvasesCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsCanvasesCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.canvases.create/post(conversationsCanvasesCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsCanvasesCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsCanvasesCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Closes a direct message or multi-person direct message.
    ///
    /// - Remark: HTTP `POST /conversations.close`.
    /// - Remark: Generated from `#/paths//conversations.close/post(conversationsClose)`.
    public enum ConversationsClose {
        public static let id: Swift.String = "conversationsClose"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.close/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsClose.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsClose.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsClose.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.close/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.close/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation to close.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.close/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation to close.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.close/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsClose.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsClose.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsClose.Input.Headers = .init(),
                body: Operations.ConversationsClose.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.close/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.close/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsCloseResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsCloseResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsClose.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsClose.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.close/post(conversationsClose)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsClose.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsClose.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Initiates a public or private channel-based conversation
    ///
    /// - Remark: HTTP `POST /conversations.create`.
    /// - Remark: Generated from `#/paths//conversations.create/post(conversationsCreate)`.
    public enum ConversationsCreate {
        public static let id: Swift.String = "conversationsCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsCreate.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the public or private channel to create.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Create a private channel instead of a public one.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody/json/isPrivate`.
                    public var isPrivate: Swift.Bool?
                    /// encoded team id to create the channel in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the public or private channel to create.
                    ///   - isPrivate: Create a private channel instead of a public one.
                    ///   - teamId: encoded team id to create the channel in, required if org token is used.
                    public init(
                        name: Swift.String,
                        isPrivate: Swift.Bool? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.name = name
                        self.isPrivate = isPrivate
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case isPrivate
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.create/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsCreate.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsCreate.Input.Headers = .init(),
                body: Operations.ConversationsCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.create/post(conversationsCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Declines a Slack Connect channel invite.
    ///
    /// - Remark: HTTP `POST /conversations.declineSharedInvite`.
    /// - Remark: Generated from `#/paths//conversations.declineSharedInvite/post(conversationsDeclineSharedInvite)`.
    public enum ConversationsDeclineSharedInvite {
        public static let id: Swift.String = "conversationsDeclineSharedInvite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsDeclineSharedInvite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsDeclineSharedInvite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsDeclineSharedInvite.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the Slack Connect invite to decline. Subscribe to the shared_channel_invite_accepted event to receive IDs of Slack Connect channel invites that have been accepted and are awaiting approval.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/requestBody/json/inviteId`.
                    public var inviteId: Swift.String
                    /// The team or enterprise id of the other party involved in the invitation you are declining.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/requestBody/json/targetTeam`.
                    public var targetTeam: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inviteId: ID of the Slack Connect invite to decline. Subscribe to the shared_channel_invite_accepted event to receive IDs of Slack Connect channel invites that have been accepted and are awaiting approval.
                    ///   - targetTeam: The team or enterprise id of the other party involved in the invitation you are declining.
                    public init(
                        inviteId: Swift.String,
                        targetTeam: Swift.String? = nil
                    ) {
                        self.inviteId = inviteId
                        self.targetTeam = targetTeam
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inviteId
                        case targetTeam
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsDeclineSharedInvite.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsDeclineSharedInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsDeclineSharedInvite.Input.Headers = .init(),
                body: Operations.ConversationsDeclineSharedInvite.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.declineSharedInvite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsDeclineSharedInviteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsDeclineSharedInviteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsDeclineSharedInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsDeclineSharedInvite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.declineSharedInvite/post(conversationsDeclineSharedInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsDeclineSharedInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsDeclineSharedInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Upgrade or downgrade Slack Connect channel permissions between 'can post only' and 'can post and invite'.
    ///
    /// - Remark: HTTP `POST /conversations.externalInvitePermissions.set`.
    /// - Remark: Generated from `#/paths//conversations.externalInvitePermissions.set/post(conversationsExternalInvitePermissionsSet)`.
    public enum ConversationsExternalInvitePermissionsSet {
        public static let id: Swift.String = "conversationsExternalInvitePermissionsSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsExternalInvitePermissionsSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsExternalInvitePermissionsSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsExternalInvitePermissionsSet.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Type of action to be taken: upgrade or downgrade.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody/json/action`.
                    public var action: Swift.String
                    /// The channel ID to change external invite permissions for.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// The encoded team ID of the target team.  Must be in the specified channel.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody/json/targetTeam`.
                    public var targetTeam: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - action: Type of action to be taken: upgrade or downgrade.
                    ///   - channel: The channel ID to change external invite permissions for.
                    ///   - targetTeam: The encoded team ID of the target team.  Must be in the specified channel.
                    public init(
                        action: Swift.String,
                        channel: Swift.String,
                        targetTeam: Swift.String
                    ) {
                        self.action = action
                        self.channel = channel
                        self.targetTeam = targetTeam
                    }
                    public enum CodingKeys: String, CodingKey {
                        case action
                        case channel
                        case targetTeam
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsExternalInvitePermissionsSet.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsExternalInvitePermissionsSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsExternalInvitePermissionsSet.Input.Headers = .init(),
                body: Operations.ConversationsExternalInvitePermissionsSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.externalInvitePermissions.set/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsExternalInvitePermissionsSetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsExternalInvitePermissionsSetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsExternalInvitePermissionsSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsExternalInvitePermissionsSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.externalInvitePermissions.set/post(conversationsExternalInvitePermissionsSet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsExternalInvitePermissionsSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsExternalInvitePermissionsSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetches a conversation's history of messages and events.
    ///
    /// - Remark: HTTP `POST /conversations.history`.
    /// - Remark: Generated from `#/paths//conversations.history/post(conversationsHistory)`.
    public enum ConversationsHistory {
        public static let id: Swift.String = "conversationsHistory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.history/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsHistory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsHistory.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation ID to fetch history for.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Return all metadata associated with this message.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/includeAllMetadata`.
                    public var includeAllMetadata: Swift.Bool?
                    /// Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is specified.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/inclusive`.
                    public var inclusive: Swift.Bool?
                    /// Only messages before this Unix timestamp will be included in results. Default is the current time.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/latest`.
                    public var latest: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the conversation history hasn't been reached. Maximum of 999.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// Only messages after this Unix timestamp will be included in results.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/json/oldest`.
                    public var oldest: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation ID to fetch history for.
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///   - includeAllMetadata: Return all metadata associated with this message.
                    ///   - inclusive: Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is specified.
                    ///   - latest: Only messages before this Unix timestamp will be included in results. Default is the current time.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the conversation history hasn't been reached. Maximum of 999.
                    ///   - oldest: Only messages after this Unix timestamp will be included in results.
                    public init(
                        channel: Swift.String,
                        cursor: Swift.String? = nil,
                        includeAllMetadata: Swift.Bool? = nil,
                        inclusive: Swift.Bool? = nil,
                        latest: Swift.String? = nil,
                        limit: Swift.Double? = nil,
                        oldest: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.cursor = cursor
                        self.includeAllMetadata = includeAllMetadata
                        self.inclusive = inclusive
                        self.latest = latest
                        self.limit = limit
                        self.oldest = oldest
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case cursor
                        case includeAllMetadata
                        case inclusive
                        case latest
                        case limit
                        case oldest
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.history/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsHistory.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsHistory.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsHistory.Input.Headers = .init(),
                body: Operations.ConversationsHistory.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.history/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.history/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsHistoryResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsHistoryResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsHistory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsHistory.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.history/post(conversationsHistory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsHistory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsHistory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve information about a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.info`.
    /// - Remark: Generated from `#/paths//conversations.info/post(conversationsInfo)`.
    public enum ConversationsInfo {
        public static let id: Swift.String = "conversationsInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsInfo.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation ID to learn more about.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Set this to true to receive the locale for this conversation. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody/json/includeLocale`.
                    public var includeLocale: Swift.Bool?
                    /// Set to true to include the member count for the specified conversation. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody/json/includeNumMembers`.
                    public var includeNumMembers: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation ID to learn more about.
                    ///   - includeLocale: Set this to true to receive the locale for this conversation. Defaults to false.
                    ///   - includeNumMembers: Set to true to include the member count for the specified conversation. Defaults to false.
                    public init(
                        channel: Swift.String,
                        includeLocale: Swift.Bool? = nil,
                        includeNumMembers: Swift.Bool? = nil
                    ) {
                        self.channel = channel
                        self.includeLocale = includeLocale
                        self.includeNumMembers = includeNumMembers
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case includeLocale
                        case includeNumMembers
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.info/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsInfo.Input.Headers = .init(),
                body: Operations.ConversationsInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.info/post(conversationsInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Invites users to a channel.
    ///
    /// - Remark: HTTP `POST /conversations.invite`.
    /// - Remark: Generated from `#/paths//conversations.invite/post(conversationsInvite)`.
    public enum ConversationsInvite {
        public static let id: Swift.String = "conversationsInvite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.invite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInvite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInvite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsInvite.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the public or private channel to invite user(s) to.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// A comma separated list of user IDs. Up to 1000 users may be listed.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody/json/users`.
                    public var users: Swift.String
                    /// When set to true and multiple user IDs are provided, continue inviting the valid ones while disregarding invalid IDs. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody/json/force`.
                    public var force: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: The ID of the public or private channel to invite user(s) to.
                    ///   - users: A comma separated list of user IDs. Up to 1000 users may be listed.
                    ///   - force: When set to true and multiple user IDs are provided, continue inviting the valid ones while disregarding invalid IDs. Defaults to false.
                    public init(
                        channel: Swift.String,
                        users: Swift.String,
                        force: Swift.Bool? = nil
                    ) {
                        self.channel = channel
                        self.users = users
                        self.force = force
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case users
                        case force
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.invite/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsInvite.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsInvite.Input.Headers = .init(),
                body: Operations.ConversationsInvite.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.invite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.invite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsInviteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsInviteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsInvite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.invite/post(conversationsInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sends an invitation to a Slack Connect channel
    ///
    /// - Remark: HTTP `POST /conversations.inviteShared`.
    /// - Remark: Generated from `#/paths//conversations.inviteShared/post(conversationsInviteShared)`.
    public enum ConversationsInviteShared {
        public static let id: Swift.String = "conversationsInviteShared"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInviteShared.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsInviteShared.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsInviteShared.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the channel on your team that you'd like to share.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Optional email to receive this invite. Either emails or user_ids must be provided. Only one email or one user ID may be invited at a time.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/json/emails`.
                    public var emails: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Optional boolean on whether invite is to an external limited member. Defaults to true.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/json/externalLimited`.
                    public var externalLimited: Swift.Bool?
                    /// Optional user_id to receive this invite. Either emails or user_ids must be provided. Only one email or one user ID may be invited at a time.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/json/userIds`.
                    public var userIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of the channel on your team that you'd like to share.
                    ///   - emails: Optional email to receive this invite. Either emails or user_ids must be provided. Only one email or one user ID may be invited at a time.
                    ///   - externalLimited: Optional boolean on whether invite is to an external limited member. Defaults to true.
                    ///   - userIds: Optional user_id to receive this invite. Either emails or user_ids must be provided. Only one email or one user ID may be invited at a time.
                    public init(
                        channel: Swift.String,
                        emails: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        externalLimited: Swift.Bool? = nil,
                        userIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                    ) {
                        self.channel = channel
                        self.emails = emails
                        self.externalLimited = externalLimited
                        self.userIds = userIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case emails
                        case externalLimited
                        case userIds
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsInviteShared.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsInviteShared.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsInviteShared.Input.Headers = .init(),
                body: Operations.ConversationsInviteShared.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.inviteShared/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsInviteSharedResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsInviteSharedResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsInviteShared.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsInviteShared.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.inviteShared/post(conversationsInviteShared)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsInviteShared.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsInviteShared.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Joins an existing conversation.
    ///
    /// - Remark: HTTP `POST /conversations.join`.
    /// - Remark: Generated from `#/paths//conversations.join/post(conversationsJoin)`.
    public enum ConversationsJoin {
        public static let id: Swift.String = "conversationsJoin"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.join/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsJoin.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsJoin.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsJoin.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.join/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.join/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of conversation to join.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.join/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of conversation to join.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.join/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsJoin.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsJoin.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsJoin.Input.Headers = .init(),
                body: Operations.ConversationsJoin.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.join/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.join/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsJoinResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsJoinResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsJoin.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsJoin.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.join/post(conversationsJoin)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsJoin.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsJoin.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Removes a user from a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.kick`.
    /// - Remark: Generated from `#/paths//conversations.kick/post(conversationsKick)`.
    public enum ConversationsKick {
        public static let id: Swift.String = "conversationsKick"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.kick/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsKick.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsKick.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsKick.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.kick/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.kick/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of conversation to remove user from.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.kick/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// User ID to be removed.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.kick/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of conversation to remove user from.
                    ///   - user: User ID to be removed.
                    public init(
                        channel: Swift.String,
                        user: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case user
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.kick/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsKick.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsKick.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsKick.Input.Headers = .init(),
                body: Operations.ConversationsKick.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.kick/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.kick/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsKickResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsKickResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsKick.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsKick.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.kick/post(conversationsKick)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsKick.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsKick.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Leaves a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.leave`.
    /// - Remark: Generated from `#/paths//conversations.leave/post(conversationsLeave)`.
    public enum ConversationsLeave {
        public static let id: Swift.String = "conversationsLeave"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.leave/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsLeave.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsLeave.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsLeave.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.leave/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.leave/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation to leave.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.leave/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation to leave.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.leave/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsLeave.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsLeave.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsLeave.Input.Headers = .init(),
                body: Operations.ConversationsLeave.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.leave/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.leave/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsLeaveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsLeaveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsLeave.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsLeave.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.leave/post(conversationsLeave)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsLeave.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsLeave.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists all channels in a Slack team.
    ///
    /// - Remark: HTTP `POST /conversations.list`.
    /// - Remark: Generated from `#/paths//conversations.list/post(conversationsList)`.
    public enum ConversationsList {
        public static let id: Swift.String = "conversationsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsList.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Set to true to exclude archived channels from the list.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json/excludeArchived`.
                    public var excludeArchived: Swift.Bool?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer under 1000.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// encoded team id to list channels in, required if token belongs to org-wide app.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Mix and match channel types by providing a comma-separated list of any combination of public_channel, private_channel, mpim, im.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/json/types`.
                    public var types: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///   - excludeArchived: Set to true to exclude archived channels from the list.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer under 1000.
                    ///   - teamId: encoded team id to list channels in, required if token belongs to org-wide app.
                    ///   - types: Mix and match channel types by providing a comma-separated list of any combination of public_channel, private_channel, mpim, im.
                    public init(
                        cursor: Swift.String? = nil,
                        excludeArchived: Swift.Bool? = nil,
                        limit: Swift.Double? = nil,
                        teamId: Swift.String? = nil,
                        types: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.excludeArchived = excludeArchived
                        self.limit = limit
                        self.teamId = teamId
                        self.types = types
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case excludeArchived
                        case limit
                        case teamId
                        case types
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.list/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsList.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsList.Input.Headers = .init(),
                body: Operations.ConversationsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.list/post(conversationsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists shared channel invites that have been generated or received but have not been approved by all parties
    ///
    /// - Remark: HTTP `POST /conversations.listConnectInvites`.
    /// - Remark: Generated from `#/paths//conversations.listConnectInvites/post(conversationsListConnectInvites)`.
    public enum ConversationsListConnectInvites {
        public static let id: Swift.String = "conversationsListConnectInvites"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsListConnectInvites.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsListConnectInvites.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsListConnectInvites.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set to next_cursor returned by previous call to list items in subsequent page.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Encoded team id for the workspace to retrieve invites for, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set to next_cursor returned by previous call to list items in subsequent page.
                    ///   - teamId: Encoded team id for the workspace to retrieve invites for, required if org token is used.
                    public init(
                        cursor: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsListConnectInvites.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsListConnectInvites.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsListConnectInvites.Input.Headers = .init(),
                body: Operations.ConversationsListConnectInvites.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.listConnectInvites/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsListConnectInvitesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsListConnectInvitesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsListConnectInvites.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsListConnectInvites.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.listConnectInvites/post(conversationsListConnectInvites)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsListConnectInvites.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsListConnectInvites.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sets the read cursor in a channel.
    ///
    /// - Remark: HTTP `POST /conversations.mark`.
    /// - Remark: Generated from `#/paths//conversations.mark/post(conversationsMark)`.
    public enum ConversationsMark {
        public static let id: Swift.String = "conversationsMark"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.mark/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsMark.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsMark.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsMark.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.mark/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.mark/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel or conversation to set the read cursor for.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.mark/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Unique identifier of message you want marked as most recently seen in this conversation.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.mark/POST/requestBody/json/ts`.
                    public var ts: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel or conversation to set the read cursor for.
                    ///   - ts: Unique identifier of message you want marked as most recently seen in this conversation.
                    public init(
                        channel: Swift.String,
                        ts: Swift.String
                    ) {
                        self.channel = channel
                        self.ts = ts
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case ts
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.mark/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsMark.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsMark.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsMark.Input.Headers = .init(),
                body: Operations.ConversationsMark.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.mark/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.mark/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsMarkResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsMarkResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsMark.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsMark.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.mark/post(conversationsMark)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsMark.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsMark.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve members of a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.members`.
    /// - Remark: Generated from `#/paths//conversations.members/post(conversationsMembers)`.
    public enum ConversationsMembers {
        public static let id: Swift.String = "conversationsMembers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.members/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsMembers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsMembers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsMembers.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the conversation to retrieve members for.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of the conversation to retrieve members for.
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
                    public init(
                        channel: Swift.String,
                        cursor: Swift.String? = nil,
                        limit: Swift.Double? = nil
                    ) {
                        self.channel = channel
                        self.cursor = cursor
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case cursor
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.members/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsMembers.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsMembers.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsMembers.Input.Headers = .init(),
                body: Operations.ConversationsMembers.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.members/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.members/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsMembersResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsMembersResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsMembers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsMembers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.members/post(conversationsMembers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsMembers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsMembers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Opens or resumes a direct message or multi-person direct message.
    ///
    /// - Remark: HTTP `POST /conversations.open`.
    /// - Remark: Generated from `#/paths//conversations.open/post(conversationsOpen)`.
    public enum ConversationsOpen {
        public static let id: Swift.String = "conversationsOpen"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.open/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsOpen.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsOpen.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsOpen.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Resume a conversation by supplying an im or mpim's ID. Or provide the users field instead.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// Do not create a direct message or multi-person direct message. This is used to see if there is an existing dm or mpdm.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/json/preventCreation`.
                    public var preventCreation: Swift.Bool?
                    /// Boolean, indicates you want the full IM channel definition in the response.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/json/returnIm`.
                    public var returnIm: Swift.Bool?
                    /// Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a channel when not supplying users.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/json/users`.
                    public var users: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Resume a conversation by supplying an im or mpim's ID. Or provide the users field instead.
                    ///   - preventCreation: Do not create a direct message or multi-person direct message. This is used to see if there is an existing dm or mpdm.
                    ///   - returnIm: Boolean, indicates you want the full IM channel definition in the response.
                    ///   - users: Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a channel when not supplying users.
                    public init(
                        channel: Swift.String? = nil,
                        preventCreation: Swift.Bool? = nil,
                        returnIm: Swift.Bool? = nil,
                        users: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.preventCreation = preventCreation
                        self.returnIm = returnIm
                        self.users = users
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case preventCreation
                        case returnIm
                        case users
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.open/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsOpen.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsOpen.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsOpen.Input.Headers = .init(),
                body: Operations.ConversationsOpen.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.open/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.open/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsOpenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsOpenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsOpen.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsOpen.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.open/post(conversationsOpen)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsOpen.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsOpen.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Renames a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.rename`.
    /// - Remark: Generated from `#/paths//conversations.rename/post(conversationsRename)`.
    public enum ConversationsRename {
        public static let id: Swift.String = "conversationsRename"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.rename/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsRename.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsRename.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsRename.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.rename/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.rename/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of conversation to rename.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.rename/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// New name for conversation.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.rename/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of conversation to rename.
                    ///   - name: New name for conversation.
                    public init(
                        channel: Swift.String,
                        name: Swift.String
                    ) {
                        self.channel = channel
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.rename/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsRename.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsRename.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsRename.Input.Headers = .init(),
                body: Operations.ConversationsRename.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.rename/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.rename/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsRenameResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsRenameResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsRename.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsRename.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.rename/post(conversationsRename)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsRename.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsRename.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve a thread of messages posted to a conversation
    ///
    /// - Remark: HTTP `POST /conversations.replies`.
    /// - Remark: Generated from `#/paths//conversations.replies/post(conversationsReplies)`.
    public enum ConversationsReplies {
        public static let id: Swift.String = "conversationsReplies"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.replies/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsReplies.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsReplies.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsReplies.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation ID to fetch thread from.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Unique identifier of either a thread's parent message or a message in the thread. ts must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by ts will return - it is just an ordinary, unthreaded message.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/ts`.
                    public var ts: Swift.String
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Return all metadata associated with this message.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/includeAllMetadata`.
                    public var includeAllMetadata: Swift.Bool?
                    /// Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is specified.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/inclusive`.
                    public var inclusive: Swift.Bool?
                    /// Only messages before this Unix timestamp will be included in results.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/latest`.
                    public var latest: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// Only messages after this Unix timestamp will be included in results.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/json/oldest`.
                    public var oldest: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation ID to fetch thread from.
                    ///   - ts: Unique identifier of either a thread's parent message or a message in the thread. ts must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by ts will return - it is just an ordinary, unthreaded message.
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///   - includeAllMetadata: Return all metadata associated with this message.
                    ///   - inclusive: Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is specified.
                    ///   - latest: Only messages before this Unix timestamp will be included in results.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
                    ///   - oldest: Only messages after this Unix timestamp will be included in results.
                    public init(
                        channel: Swift.String,
                        ts: Swift.String,
                        cursor: Swift.String? = nil,
                        includeAllMetadata: Swift.Bool? = nil,
                        inclusive: Swift.Bool? = nil,
                        latest: Swift.String? = nil,
                        limit: Swift.Double? = nil,
                        oldest: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.ts = ts
                        self.cursor = cursor
                        self.includeAllMetadata = includeAllMetadata
                        self.inclusive = inclusive
                        self.latest = latest
                        self.limit = limit
                        self.oldest = oldest
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case ts
                        case cursor
                        case includeAllMetadata
                        case inclusive
                        case latest
                        case limit
                        case oldest
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.replies/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsReplies.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsReplies.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsReplies.Input.Headers = .init(),
                body: Operations.ConversationsReplies.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.replies/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.replies/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsRepliesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsRepliesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsReplies.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsReplies.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.replies/post(conversationsReplies)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsReplies.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsReplies.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Approves a request to add an external user to a channel and sends them a Slack Connect invite
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.approve`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.approve/post(conversationsRequestSharedInviteApprove)`.
    public enum ConversationsRequestSharedInviteApprove {
        public static let id: Swift.String = "conversationsRequestSharedInviteApprove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteApprove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteApprove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsRequestSharedInviteApprove.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the requested shared channel invite to approve.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/json/inviteId`.
                    public var inviteId: Swift.String
                    /// Optional channel_id to which external user will be invited to. Will override the value on the requested invite.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String?
                    /// Optional boolean on whether the invited team will have post-only permissions in the channel. Will override the value on the requested invite.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/json/isExternalLimited`.
                    public var isExternalLimited: Swift.Bool?
                    /// Object describing the text to send along with the invite. If this object is specified, both text and is_override are required properties. If is_override is set to true, text will override the original invitation message. Otherwise, text will be appended to the original invitation message. The total length of the message cannot exceed 560 characters. If is_override is set to false, the length of text and the user specified message on the invite request in total must be less than 560 characters.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/json/message`.
                    public var message: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inviteId: ID of the requested shared channel invite to approve.
                    ///   - channelId: Optional channel_id to which external user will be invited to. Will override the value on the requested invite.
                    ///   - isExternalLimited: Optional boolean on whether the invited team will have post-only permissions in the channel. Will override the value on the requested invite.
                    ///   - message: Object describing the text to send along with the invite. If this object is specified, both text and is_override are required properties. If is_override is set to true, text will override the original invitation message. Otherwise, text will be appended to the original invitation message. The total length of the message cannot exceed 560 characters. If is_override is set to false, the length of text and the user specified message on the invite request in total must be less than 560 characters.
                    public init(
                        inviteId: Swift.String,
                        channelId: Swift.String? = nil,
                        isExternalLimited: Swift.Bool? = nil,
                        message: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                    ) {
                        self.inviteId = inviteId
                        self.channelId = channelId
                        self.isExternalLimited = isExternalLimited
                        self.message = message
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inviteId
                        case channelId
                        case isExternalLimited
                        case message
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsRequestSharedInviteApprove.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsRequestSharedInviteApprove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsRequestSharedInviteApprove.Input.Headers = .init(),
                body: Operations.ConversationsRequestSharedInviteApprove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.approve/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsRequestSharedInviteApproveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsRequestSharedInviteApproveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsRequestSharedInviteApprove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsRequestSharedInviteApprove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.approve/post(conversationsRequestSharedInviteApprove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsRequestSharedInviteApprove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsRequestSharedInviteApprove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Denies a request to invite an external user to a channel
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.deny`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.deny/post(conversationsRequestSharedInviteDeny)`.
    public enum ConversationsRequestSharedInviteDeny {
        public static let id: Swift.String = "conversationsRequestSharedInviteDeny"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteDeny.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteDeny.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsRequestSharedInviteDeny.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of the requested shared channel invite to deny.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/requestBody/json/inviteId`.
                    public var inviteId: Swift.String
                    /// Optional message explaining why the request to invite was denied.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/requestBody/json/message`.
                    public var message: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inviteId: ID of the requested shared channel invite to deny.
                    ///   - message: Optional message explaining why the request to invite was denied.
                    public init(
                        inviteId: Swift.String,
                        message: Swift.String? = nil
                    ) {
                        self.inviteId = inviteId
                        self.message = message
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inviteId
                        case message
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsRequestSharedInviteDeny.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsRequestSharedInviteDeny.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsRequestSharedInviteDeny.Input.Headers = .init(),
                body: Operations.ConversationsRequestSharedInviteDeny.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.deny/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsRequestSharedInviteDenyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsRequestSharedInviteDenyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsRequestSharedInviteDeny.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsRequestSharedInviteDeny.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.deny/post(conversationsRequestSharedInviteDeny)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsRequestSharedInviteDeny.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsRequestSharedInviteDeny.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists requests to add external users to channels with ability to filter.
    ///
    /// - Remark: HTTP `POST /conversations.requestSharedInvite.list`.
    /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.list/post(conversationsRequestSharedInviteList)`.
    public enum ConversationsRequestSharedInviteList {
        public static let id: Swift.String = "conversationsRequestSharedInviteList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsRequestSharedInviteList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsRequestSharedInviteList.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// When true approved invitation requests will be returned, otherwise they will be excluded.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/includeApproved`.
                    public var includeApproved: Swift.Bool?
                    /// When true denied invitation requests will be returned, otherwise they will be excluded.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/includeDenied`.
                    public var includeDenied: Swift.Bool?
                    /// When true expired invitation requests will be returned, otherwise they will be excluded.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/includeExpired`.
                    public var includeExpired: Swift.Bool?
                    /// An optional list of invitation ids to look up.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/inviteIds`.
                    public var inviteIds: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// The number of items to return. Must be between 1 - 1000 (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Optional filter to return invitation requests for the inviting user.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/json/userId`.
                    public var userId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. See pagination for more detail.
                    ///   - includeApproved: When true approved invitation requests will be returned, otherwise they will be excluded.
                    ///   - includeDenied: When true denied invitation requests will be returned, otherwise they will be excluded.
                    ///   - includeExpired: When true expired invitation requests will be returned, otherwise they will be excluded.
                    ///   - inviteIds: An optional list of invitation ids to look up.
                    ///   - limit: The number of items to return. Must be between 1 - 1000 (inclusive).
                    ///   - userId: Optional filter to return invitation requests for the inviting user.
                    public init(
                        cursor: Swift.String? = nil,
                        includeApproved: Swift.Bool? = nil,
                        includeDenied: Swift.Bool? = nil,
                        includeExpired: Swift.Bool? = nil,
                        inviteIds: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        limit: Swift.Int? = nil,
                        userId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.includeApproved = includeApproved
                        self.includeDenied = includeDenied
                        self.includeExpired = includeExpired
                        self.inviteIds = inviteIds
                        self.limit = limit
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case includeApproved
                        case includeDenied
                        case includeExpired
                        case inviteIds
                        case limit
                        case userId
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsRequestSharedInviteList.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsRequestSharedInviteList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsRequestSharedInviteList.Input.Headers = .init(),
                body: Operations.ConversationsRequestSharedInviteList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.requestSharedInvite.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsRequestSharedInviteListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsRequestSharedInviteListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsRequestSharedInviteList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsRequestSharedInviteList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.requestSharedInvite.list/post(conversationsRequestSharedInviteList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsRequestSharedInviteList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsRequestSharedInviteList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sets the channel description.
    ///
    /// - Remark: HTTP `POST /conversations.setPurpose`.
    /// - Remark: Generated from `#/paths//conversations.setPurpose/post(conversationsSetPurpose)`.
    public enum ConversationsSetPurpose {
        public static let id: Swift.String = "conversationsSetPurpose"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsSetPurpose.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsSetPurpose.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsSetPurpose.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to set the description of.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// The description.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/requestBody/json/purpose`.
                    public var purpose: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel to set the description of.
                    ///   - purpose: The description.
                    public init(
                        channel: Swift.String,
                        purpose: Swift.String
                    ) {
                        self.channel = channel
                        self.purpose = purpose
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case purpose
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsSetPurpose.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsSetPurpose.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsSetPurpose.Input.Headers = .init(),
                body: Operations.ConversationsSetPurpose.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.setPurpose/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsSetPurposeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsSetPurposeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsSetPurpose.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsSetPurpose.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.setPurpose/post(conversationsSetPurpose)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsSetPurpose.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsSetPurpose.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sets the topic for a conversation.
    ///
    /// - Remark: HTTP `POST /conversations.setTopic`.
    /// - Remark: Generated from `#/paths//conversations.setTopic/post(conversationsSetTopic)`.
    public enum ConversationsSetTopic {
        public static let id: Swift.String = "conversationsSetTopic"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.setTopic/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsSetTopic.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsSetTopic.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsSetTopic.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.setTopic/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.setTopic/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Conversation to set the topic of.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.setTopic/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// The new topic string. Does not support formatting or linkification.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.setTopic/POST/requestBody/json/topic`.
                    public var topic: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Conversation to set the topic of.
                    ///   - topic: The new topic string. Does not support formatting or linkification.
                    public init(
                        channel: Swift.String,
                        topic: Swift.String
                    ) {
                        self.channel = channel
                        self.topic = topic
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case topic
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.setTopic/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsSetTopic.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsSetTopic.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsSetTopic.Input.Headers = .init(),
                body: Operations.ConversationsSetTopic.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.setTopic/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.setTopic/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsSetTopicResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsSetTopicResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsSetTopic.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsSetTopic.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.setTopic/post(conversationsSetTopic)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsSetTopic.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsSetTopic.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Reverses conversation archival.
    ///
    /// - Remark: HTTP `POST /conversations.unarchive`.
    /// - Remark: Generated from `#/paths//conversations.unarchive/post(conversationsUnarchive)`.
    public enum ConversationsUnarchive {
        public static let id: Swift.String = "conversationsUnarchive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/conversations.unarchive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsUnarchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConversationsUnarchive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ConversationsUnarchive.Input.Headers
            /// - Remark: Generated from `#/paths/conversations.unarchive/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.unarchive/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of conversation to unarchive.
                    ///
                    /// - Remark: Generated from `#/paths/conversations.unarchive/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: ID of conversation to unarchive.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }
                /// - Remark: Generated from `#/paths/conversations.unarchive/POST/requestBody/content/application\/json`.
                case json(Operations.ConversationsUnarchive.Input.Body.JsonPayload)
            }
            public var body: Operations.ConversationsUnarchive.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ConversationsUnarchive.Input.Headers = .init(),
                body: Operations.ConversationsUnarchive.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/conversations.unarchive/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/conversations.unarchive/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConversationsUnarchiveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ConversationsUnarchiveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ConversationsUnarchive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ConversationsUnarchive.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//conversations.unarchive/post(conversationsUnarchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConversationsUnarchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ConversationsUnarchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Ends the current user's Do Not Disturb session immediately.
    ///
    /// - Remark: HTTP `POST /dnd.endDnd`.
    /// - Remark: Generated from `#/paths//dnd.endDnd/post(dndEndDnd)`.
    public enum DndEndDnd {
        public static let id: Swift.String = "dndEndDnd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/dnd.endDnd/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DndEndDnd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DndEndDnd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DndEndDnd.Input.Headers
            /// - Remark: Generated from `#/paths/dnd.endDnd/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/dnd.endDnd/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.DndEndDnd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DndEndDnd.Input.Headers = .init(),
                body: Operations.DndEndDnd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/dnd.endDnd/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/dnd.endDnd/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.DndEndDndResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DndEndDndResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DndEndDnd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DndEndDnd.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//dnd.endDnd/post(dndEndDnd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DndEndDnd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DndEndDnd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Ends the current user's snooze mode immediately.
    ///
    /// - Remark: HTTP `POST /dnd.endSnooze`.
    /// - Remark: Generated from `#/paths//dnd.endSnooze/post(dndEndSnooze)`.
    public enum DndEndSnooze {
        public static let id: Swift.String = "dndEndSnooze"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/dnd.endSnooze/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DndEndSnooze.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DndEndSnooze.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DndEndSnooze.Input.Headers
            /// - Remark: Generated from `#/paths/dnd.endSnooze/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/dnd.endSnooze/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.DndEndSnooze.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DndEndSnooze.Input.Headers = .init(),
                body: Operations.DndEndSnooze.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/dnd.endSnooze/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/dnd.endSnooze/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.DndEndSnoozeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DndEndSnoozeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DndEndSnooze.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DndEndSnooze.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//dnd.endSnooze/post(dndEndSnooze)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DndEndSnooze.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DndEndSnooze.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a user's current Do Not Disturb status.
    ///
    /// - Remark: HTTP `POST /dnd.info`.
    /// - Remark: Generated from `#/paths//dnd.info/post(dndInfo)`.
    public enum DndInfo {
        public static let id: Swift.String = "dndInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/dnd.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DndInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DndInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DndInfo.Input.Headers
            /// - Remark: Generated from `#/paths/dnd.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/dnd.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded team id where passed in user param belongs, required if org token is used. If no user param is passed, then a team which has access to the app should be passed.
                    ///
                    /// - Remark: Generated from `#/paths/dnd.info/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// User to fetch status for (defaults to current user).
                    ///
                    /// - Remark: Generated from `#/paths/dnd.info/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: Encoded team id where passed in user param belongs, required if org token is used. If no user param is passed, then a team which has access to the app should be passed.
                    ///   - user: User to fetch status for (defaults to current user).
                    public init(
                        teamId: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.teamId = teamId
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamId
                        case user
                    }
                }
                /// - Remark: Generated from `#/paths/dnd.info/POST/requestBody/content/application\/json`.
                case json(Operations.DndInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.DndInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DndInfo.Input.Headers = .init(),
                body: Operations.DndInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/dnd.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/dnd.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.DndInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DndInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DndInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DndInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//dnd.info/post(dndInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DndInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DndInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Turns on Do Not Disturb mode for the current user, or changes its duration.
    ///
    /// - Remark: HTTP `POST /dnd.setSnooze`.
    /// - Remark: Generated from `#/paths//dnd.setSnooze/post(dndSetSnooze)`.
    public enum DndSetSnooze {
        public static let id: Swift.String = "dndSetSnooze"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/dnd.setSnooze/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DndSetSnooze.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DndSetSnooze.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DndSetSnooze.Input.Headers
            /// - Remark: Generated from `#/paths/dnd.setSnooze/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/dnd.setSnooze/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// This argument is required. Number of minutes, from now, to snooze until.
                    ///
                    /// - Remark: Generated from `#/paths/dnd.setSnooze/POST/requestBody/json/numMinutes`.
                    public var numMinutes: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - numMinutes: This argument is required. Number of minutes, from now, to snooze until.
                    public init(numMinutes: Swift.String) {
                        self.numMinutes = numMinutes
                    }
                    public enum CodingKeys: String, CodingKey {
                        case numMinutes
                    }
                }
                /// - Remark: Generated from `#/paths/dnd.setSnooze/POST/requestBody/content/application\/json`.
                case json(Operations.DndSetSnooze.Input.Body.JsonPayload)
            }
            public var body: Operations.DndSetSnooze.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DndSetSnooze.Input.Headers = .init(),
                body: Operations.DndSetSnooze.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/dnd.setSnooze/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/dnd.setSnooze/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.DndSetSnoozeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DndSetSnoozeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DndSetSnooze.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DndSetSnooze.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//dnd.setSnooze/post(dndSetSnooze)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DndSetSnooze.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DndSetSnooze.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves the Do Not Disturb status for up to 50 users on a team.
    ///
    /// - Remark: HTTP `POST /dnd.teamInfo`.
    /// - Remark: Generated from `#/paths//dnd.teamInfo/post(dndTeamInfo)`.
    public enum DndTeamInfo {
        public static let id: Swift.String = "dndTeamInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/dnd.teamInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DndTeamInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DndTeamInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DndTeamInfo.Input.Headers
            /// - Remark: Generated from `#/paths/dnd.teamInfo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/dnd.teamInfo/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Comma-separated list of users to fetch Do Not Disturb status for.
                    ///
                    /// - Remark: Generated from `#/paths/dnd.teamInfo/POST/requestBody/json/users`.
                    public var users: Swift.String
                    /// Encoded team id where passed in users belong, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/dnd.teamInfo/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - users: Comma-separated list of users to fetch Do Not Disturb status for.
                    ///   - teamId: Encoded team id where passed in users belong, required if org token is used.
                    public init(
                        users: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.users = users
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case users
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/dnd.teamInfo/POST/requestBody/content/application\/json`.
                case json(Operations.DndTeamInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.DndTeamInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DndTeamInfo.Input.Headers = .init(),
                body: Operations.DndTeamInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/dnd.teamInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/dnd.teamInfo/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.DndTeamInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DndTeamInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DndTeamInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DndTeamInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//dnd.teamInfo/post(dndTeamInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DndTeamInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DndTeamInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists custom emoji for a team.
    ///
    /// - Remark: HTTP `POST /emoji.list`.
    /// - Remark: Generated from `#/paths//emoji.list/post(emojiList)`.
    public enum EmojiList {
        public static let id: Swift.String = "emojiList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/emoji.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EmojiList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EmojiList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EmojiList.Input.Headers
            /// - Remark: Generated from `#/paths/emoji.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/emoji.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Include a list of categories for Unicode emoji and the emoji in each category.
                    ///
                    /// - Remark: Generated from `#/paths/emoji.list/POST/requestBody/json/includeCategories`.
                    public var includeCategories: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - includeCategories: Include a list of categories for Unicode emoji and the emoji in each category.
                    public init(includeCategories: Swift.Bool? = nil) {
                        self.includeCategories = includeCategories
                    }
                    public enum CodingKeys: String, CodingKey {
                        case includeCategories
                    }
                }
                /// - Remark: Generated from `#/paths/emoji.list/POST/requestBody/content/application\/json`.
                case json(Operations.EmojiList.Input.Body.JsonPayload)
            }
            public var body: Operations.EmojiList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EmojiList.Input.Headers = .init(),
                body: Operations.EmojiList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/emoji.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/emoji.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.EmojiListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.EmojiListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EmojiList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EmojiList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//emoji.list/post(emojiList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EmojiList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EmojiList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Finishes an upload started with files.getUploadURLExternal
    ///
    /// - Remark: HTTP `POST /files.completeUploadExternal`.
    /// - Remark: Generated from `#/paths//files.completeUploadExternal/post(filesCompleteUploadExternal)`.
    public enum FilesCompleteUploadExternal {
        public static let id: Swift.String = "filesCompleteUploadExternal"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesCompleteUploadExternal.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesCompleteUploadExternal.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesCompleteUploadExternal.Input.Headers
            /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Array of file ids and their corresponding (optional) titles.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/files`.
                    public var files: OpenAPIRuntime.OpenAPIArrayContainer
                    /// A JSON-based array of structured rich text blocks, presented as a URL-encoded string. If the initial_comment field is provided, the blocks field is ignored.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/blocks`.
                    public var blocks: Swift.String?
                    /// Channel ID where the file will be shared. If not specified the file will be private.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/channelId`.
                    public var channelId: Swift.String?
                    /// Comma-separated string of channel IDs where the file will be shared.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/channels`.
                    public var channels: Swift.String?
                    /// The message text introducing the file in specified channels.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/initialComment`.
                    public var initialComment: Swift.String?
                    /// Provide another message's ts value to upload this file as a reply. Never use a reply's ts value; use its parent instead. Also make sure to provide only one channel when using 'thread_ts'.
                    ///
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/json/threadTs`.
                    public var threadTs: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - files: Array of file ids and their corresponding (optional) titles.
                    ///   - blocks: A JSON-based array of structured rich text blocks, presented as a URL-encoded string. If the initial_comment field is provided, the blocks field is ignored.
                    ///   - channelId: Channel ID where the file will be shared. If not specified the file will be private.
                    ///   - channels: Comma-separated string of channel IDs where the file will be shared.
                    ///   - initialComment: The message text introducing the file in specified channels.
                    ///   - threadTs: Provide another message's ts value to upload this file as a reply. Never use a reply's ts value; use its parent instead. Also make sure to provide only one channel when using 'thread_ts'.
                    public init(
                        files: OpenAPIRuntime.OpenAPIArrayContainer,
                        blocks: Swift.String? = nil,
                        channelId: Swift.String? = nil,
                        channels: Swift.String? = nil,
                        initialComment: Swift.String? = nil,
                        threadTs: Swift.String? = nil
                    ) {
                        self.files = files
                        self.blocks = blocks
                        self.channelId = channelId
                        self.channels = channels
                        self.initialComment = initialComment
                        self.threadTs = threadTs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case files
                        case blocks
                        case channelId
                        case channels
                        case initialComment
                        case threadTs
                    }
                }
                /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/requestBody/content/application\/json`.
                case json(Operations.FilesCompleteUploadExternal.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesCompleteUploadExternal.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesCompleteUploadExternal.Input.Headers = .init(),
                body: Operations.FilesCompleteUploadExternal.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.completeUploadExternal/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesCompleteUploadExternalResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesCompleteUploadExternalResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesCompleteUploadExternal.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesCompleteUploadExternal.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.completeUploadExternal/post(filesCompleteUploadExternal)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesCompleteUploadExternal.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesCompleteUploadExternal.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a file.
    ///
    /// - Remark: HTTP `POST /files.delete`.
    /// - Remark: Generated from `#/paths//files.delete/post(filesDelete)`.
    public enum FilesDelete {
        public static let id: Swift.String = "filesDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesDelete.Input.Headers
            /// - Remark: Generated from `#/paths/files.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// ID of file to delete.
                    ///
                    /// - Remark: Generated from `#/paths/files.delete/POST/requestBody/json/file`.
                    public var file: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - file: ID of file to delete.
                    public init(file: Swift.String) {
                        self.file = file
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file
                    }
                }
                /// - Remark: Generated from `#/paths/files.delete/POST/requestBody/content/application\/json`.
                case json(Operations.FilesDelete.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesDelete.Input.Headers = .init(),
                body: Operations.FilesDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.delete/post(filesDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets a URL for an edge external file upload
    ///
    /// - Remark: HTTP `POST /files.getUploadURLExternal`.
    /// - Remark: Generated from `#/paths//files.getUploadURLExternal/post(filesGetUploadURLExternal)`.
    public enum FilesGetUploadURLExternal {
        public static let id: Swift.String = "filesGetUploadURLExternal"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesGetUploadURLExternal.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesGetUploadURLExternal.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesGetUploadURLExternal.Input.Headers
            /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the file being uploaded.
                    ///
                    /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/json/filename`.
                    public var filename: Swift.String
                    /// Size in bytes of the file being uploaded.
                    ///
                    /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/json/length`.
                    public var length: Swift.Int
                    /// Description of image for screen-reader.
                    ///
                    /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/json/altTxt`.
                    public var altTxt: Swift.String?
                    /// Syntax type of the snippet being uploaded.
                    ///
                    /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/json/snippetType`.
                    public var snippetType: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - filename: Name of the file being uploaded.
                    ///   - length: Size in bytes of the file being uploaded.
                    ///   - altTxt: Description of image for screen-reader.
                    ///   - snippetType: Syntax type of the snippet being uploaded.
                    public init(
                        filename: Swift.String,
                        length: Swift.Int,
                        altTxt: Swift.String? = nil,
                        snippetType: Swift.String? = nil
                    ) {
                        self.filename = filename
                        self.length = length
                        self.altTxt = altTxt
                        self.snippetType = snippetType
                    }
                    public enum CodingKeys: String, CodingKey {
                        case filename
                        case length
                        case altTxt
                        case snippetType
                    }
                }
                /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/requestBody/content/application\/json`.
                case json(Operations.FilesGetUploadURLExternal.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesGetUploadURLExternal.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesGetUploadURLExternal.Input.Headers = .init(),
                body: Operations.FilesGetUploadURLExternal.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.getUploadURLExternal/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesGetUploadURLExternalResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesGetUploadURLExternalResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesGetUploadURLExternal.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesGetUploadURLExternal.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.getUploadURLExternal/post(filesGetUploadURLExternal)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesGetUploadURLExternal.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesGetUploadURLExternal.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets information about a file.
    ///
    /// - Remark: HTTP `POST /files.info`.
    /// - Remark: Generated from `#/paths//files.info/post(filesInfo)`.
    public enum FilesInfo {
        public static let id: Swift.String = "filesInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesInfo.Input.Headers
            /// - Remark: Generated from `#/paths/files.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Specify a file by providing its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.info/POST/requestBody/json/file`.
                    public var file: Swift.String
                    /// Parameter for pagination. File comments are paginated for a single file. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection of comments. See pagination for more details.
                    ///
                    /// - Remark: Generated from `#/paths/files.info/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
                    ///
                    /// - Remark: Generated from `#/paths/files.info/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - file: Specify a file by providing its ID.
                    ///   - cursor: Parameter for pagination. File comments are paginated for a single file. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection of comments. See pagination for more details.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
                    public init(
                        file: Swift.String,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.file = file
                        self.cursor = cursor
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file
                        case cursor
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/files.info/POST/requestBody/content/application\/json`.
                case json(Operations.FilesInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesInfo.Input.Headers = .init(),
                body: Operations.FilesInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.info/post(filesInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List for a team, in a channel, or from a user with applied filters.
    ///
    /// - Remark: HTTP `POST /files.list`.
    /// - Remark: Generated from `#/paths//files.list/post(filesList)`.
    public enum FilesList {
        public static let id: Swift.String = "filesList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesList.Input.Headers
            /// - Remark: Generated from `#/paths/files.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Filter files appearing in a specific channel, indicated by its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/showFilesHiddenByLimit`.
                    public var showFilesHiddenByLimit: Swift.Bool?
                    /// encoded team id to list files in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Filter files created after this timestamp (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/tsFrom`.
                    public var tsFrom: Swift.String?
                    /// Filter files created before this timestamp (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/tsTo`.
                    public var tsTo: Swift.String?
                    /// Filter files by type (see below). You can pass multiple values in the types argument, like types=spaces,snippets.The default value is all, which does not filter the list.
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/types`.
                    public var types: Swift.String?
                    /// Filter files created by a single user.
                    ///
                    /// - Remark: Generated from `#/paths/files.list/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Filter files appearing in a specific channel, indicated by its ID.
                    ///   - showFilesHiddenByLimit: Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.
                    ///   - teamId: encoded team id to list files in, required if org token is used.
                    ///   - tsFrom: Filter files created after this timestamp (inclusive).
                    ///   - tsTo: Filter files created before this timestamp (inclusive).
                    ///   - types: Filter files by type (see below). You can pass multiple values in the types argument, like types=spaces,snippets.The default value is all, which does not filter the list.
                    ///   - user: Filter files created by a single user.
                    public init(
                        channel: Swift.String? = nil,
                        showFilesHiddenByLimit: Swift.Bool? = nil,
                        teamId: Swift.String? = nil,
                        tsFrom: Swift.String? = nil,
                        tsTo: Swift.String? = nil,
                        types: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.showFilesHiddenByLimit = showFilesHiddenByLimit
                        self.teamId = teamId
                        self.tsFrom = tsFrom
                        self.tsTo = tsTo
                        self.types = types
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case showFilesHiddenByLimit
                        case teamId
                        case tsFrom
                        case tsTo
                        case types
                        case user
                    }
                }
                /// - Remark: Generated from `#/paths/files.list/POST/requestBody/content/application\/json`.
                case json(Operations.FilesList.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesList.Input.Headers = .init(),
                body: Operations.FilesList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.list/post(filesList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Adds a file from a remote service
    ///
    /// - Remark: HTTP `POST /files.remote.add`.
    /// - Remark: Generated from `#/paths//files.remote.add/post(filesRemoteAdd)`.
    public enum FilesRemoteAdd {
        public static let id: Swift.String = "filesRemoteAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesRemoteAdd.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creator defined GUID for the file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/externalId`.
                    public var externalId: Swift.String
                    /// URL of the remote file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/externalUrl`.
                    public var externalUrl: Swift.String
                    /// Title of the file being shared.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// type of file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/filetype`.
                    public var filetype: Swift.String?
                    /// A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/indexableFileContents`.
                    public var indexableFileContents: Swift.String?
                    /// Preview of the document via multipart/form-data.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/json/previewImage`.
                    public var previewImage: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - externalId: Creator defined GUID for the file.
                    ///   - externalUrl: URL of the remote file.
                    ///   - title: Title of the file being shared.
                    ///   - filetype: type of file.
                    ///   - indexableFileContents: A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
                    ///   - previewImage: Preview of the document via multipart/form-data.
                    public init(
                        externalId: Swift.String,
                        externalUrl: Swift.String,
                        title: Swift.String,
                        filetype: Swift.String? = nil,
                        indexableFileContents: Swift.String? = nil,
                        previewImage: Swift.String? = nil
                    ) {
                        self.externalId = externalId
                        self.externalUrl = externalUrl
                        self.title = title
                        self.filetype = filetype
                        self.indexableFileContents = indexableFileContents
                        self.previewImage = previewImage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case externalId
                        case externalUrl
                        case title
                        case filetype
                        case indexableFileContents
                        case previewImage
                    }
                }
                /// - Remark: Generated from `#/paths/files.remote.add/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteAdd.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesRemoteAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteAdd.Input.Headers = .init(),
                body: Operations.FilesRemoteAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesRemoteAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteAdd.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.add/post(filesRemoteAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve information about a remote file added to Slack
    ///
    /// - Remark: HTTP `POST /files.remote.info`.
    /// - Remark: Generated from `#/paths//files.remote.info/post(filesRemoteInfo)`.
    public enum FilesRemoteInfo {
        public static let id: Swift.String = "filesRemoteInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesRemoteInfo.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creator defined GUID for the file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.info/POST/requestBody/json/externalId`.
                    public var externalId: Swift.String?
                    /// Specify a file by providing its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.info/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - externalId: Creator defined GUID for the file.
                    ///   - file: Specify a file by providing its ID.
                    public init(
                        externalId: Swift.String? = nil,
                        file: Swift.String? = nil
                    ) {
                        self.externalId = externalId
                        self.file = file
                    }
                    public enum CodingKeys: String, CodingKey {
                        case externalId
                        case file
                    }
                }
                /// - Remark: Generated from `#/paths/files.remote.info/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesRemoteInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteInfo.Input.Headers = .init(),
                body: Operations.FilesRemoteInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesRemoteInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.info/post(filesRemoteInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve information about a remote file added to Slack
    ///
    /// - Remark: HTTP `POST /files.remote.list`.
    /// - Remark: Generated from `#/paths//files.remote.list/post(filesRemoteList)`.
    public enum FilesRemoteList {
        public static let id: Swift.String = "filesRemoteList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesRemoteList.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Filter files appearing in a specific channel, indicated by its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Filter files created after this timestamp (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json/tsFrom`.
                    public var tsFrom: Swift.String?
                    /// Filter files created before this timestamp (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/json/tsTo`.
                    public var tsTo: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Filter files appearing in a specific channel, indicated by its ID.
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///   - limit: The maximum number of items to return.
                    ///   - tsFrom: Filter files created after this timestamp (inclusive).
                    ///   - tsTo: Filter files created before this timestamp (inclusive).
                    public init(
                        channel: Swift.String? = nil,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        tsFrom: Swift.String? = nil,
                        tsTo: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.cursor = cursor
                        self.limit = limit
                        self.tsFrom = tsFrom
                        self.tsTo = tsTo
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case cursor
                        case limit
                        case tsFrom
                        case tsTo
                    }
                }
                /// - Remark: Generated from `#/paths/files.remote.list/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteList.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesRemoteList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteList.Input.Headers = .init(),
                body: Operations.FilesRemoteList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesRemoteList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.list/post(filesRemoteList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a remote file.
    ///
    /// - Remark: HTTP `POST /files.remote.remove`.
    /// - Remark: Generated from `#/paths//files.remote.remove/post(filesRemoteRemove)`.
    public enum FilesRemoteRemove {
        public static let id: Swift.String = "filesRemoteRemove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.remove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteRemove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteRemove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesRemoteRemove.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.remove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.remove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creator defined GUID for the file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.remove/POST/requestBody/json/externalId`.
                    public var externalId: Swift.String?
                    /// Specify a file by providing its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.remove/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - externalId: Creator defined GUID for the file.
                    ///   - file: Specify a file by providing its ID.
                    public init(
                        externalId: Swift.String? = nil,
                        file: Swift.String? = nil
                    ) {
                        self.externalId = externalId
                        self.file = file
                    }
                    public enum CodingKeys: String, CodingKey {
                        case externalId
                        case file
                    }
                }
                /// - Remark: Generated from `#/paths/files.remote.remove/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteRemove.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesRemoteRemove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteRemove.Input.Headers = .init(),
                body: Operations.FilesRemoteRemove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.remove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.remove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteRemoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteRemoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesRemoteRemove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteRemove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.remove/post(filesRemoteRemove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteRemove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteRemove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Share a remote file into a channel.
    ///
    /// - Remark: HTTP `POST /files.remote.share`.
    /// - Remark: Generated from `#/paths//files.remote.share/post(filesRemoteShare)`.
    public enum FilesRemoteShare {
        public static let id: Swift.String = "filesRemoteShare"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.share/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteShare.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteShare.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesRemoteShare.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Comma-separated list of channel IDs where the file will be shared.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody/json/channels`.
                    public var channels: Swift.String
                    /// The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or file or both are required.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody/json/externalId`.
                    public var externalId: Swift.String?
                    /// Specify a file registered with Slack by providing its ID. Either this field or external_id or both are required.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channels: Comma-separated list of channel IDs where the file will be shared.
                    ///   - externalId: The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or file or both are required.
                    ///   - file: Specify a file registered with Slack by providing its ID. Either this field or external_id or both are required.
                    public init(
                        channels: Swift.String,
                        externalId: Swift.String? = nil,
                        file: Swift.String? = nil
                    ) {
                        self.channels = channels
                        self.externalId = externalId
                        self.file = file
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channels
                        case externalId
                        case file
                    }
                }
                /// - Remark: Generated from `#/paths/files.remote.share/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteShare.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesRemoteShare.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteShare.Input.Headers = .init(),
                body: Operations.FilesRemoteShare.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.share/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.share/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteShareResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteShareResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesRemoteShare.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteShare.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.share/post(filesRemoteShare)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteShare.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteShare.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing remote file.
    ///
    /// - Remark: HTTP `POST /files.remote.update`.
    /// - Remark: Generated from `#/paths//files.remote.update/post(filesRemoteUpdate)`.
    public enum FilesRemoteUpdate {
        public static let id: Swift.String = "filesRemoteUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.remote.update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRemoteUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesRemoteUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Creator defined GUID for the file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/externalId`.
                    public var externalId: Swift.String?
                    /// URL of the remote file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/externalUrl`.
                    public var externalUrl: Swift.String?
                    /// Specify a file by providing its ID.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// type of file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/filetype`.
                    public var filetype: Swift.String?
                    /// File containing contents that can be used to improve searchability for the remote file.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/indexableFileContents`.
                    public var indexableFileContents: Swift.String?
                    /// Preview of the document via multipart/form-data.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/previewImage`.
                    public var previewImage: Swift.String?
                    /// Title of the file being shared.
                    ///
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - externalId: Creator defined GUID for the file.
                    ///   - externalUrl: URL of the remote file.
                    ///   - file: Specify a file by providing its ID.
                    ///   - filetype: type of file.
                    ///   - indexableFileContents: File containing contents that can be used to improve searchability for the remote file.
                    ///   - previewImage: Preview of the document via multipart/form-data.
                    ///   - title: Title of the file being shared.
                    public init(
                        externalId: Swift.String? = nil,
                        externalUrl: Swift.String? = nil,
                        file: Swift.String? = nil,
                        filetype: Swift.String? = nil,
                        indexableFileContents: Swift.String? = nil,
                        previewImage: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.externalId = externalId
                        self.externalUrl = externalUrl
                        self.file = file
                        self.filetype = filetype
                        self.indexableFileContents = indexableFileContents
                        self.previewImage = previewImage
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case externalId
                        case externalUrl
                        case file
                        case filetype
                        case indexableFileContents
                        case previewImage
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/files.remote.update/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRemoteUpdate.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesRemoteUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRemoteUpdate.Input.Headers = .init(),
                body: Operations.FilesRemoteUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.remote.update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.remote.update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRemoteUpdateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRemoteUpdateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesRemoteUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRemoteUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.remote.update/post(filesRemoteUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRemoteUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRemoteUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Revokes public/external sharing access for a file
    ///
    /// - Remark: HTTP `POST /files.revokePublicURL`.
    /// - Remark: Generated from `#/paths//files.revokePublicURL/post(filesRevokePublicURL)`.
    public enum FilesRevokePublicURL {
        public static let id: Swift.String = "filesRevokePublicURL"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRevokePublicURL.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesRevokePublicURL.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesRevokePublicURL.Input.Headers
            /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// File to revoke.
                    ///
                    /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/requestBody/json/file`.
                    public var file: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - file: File to revoke.
                    public init(file: Swift.String) {
                        self.file = file
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file
                    }
                }
                /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/requestBody/content/application\/json`.
                case json(Operations.FilesRevokePublicURL.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesRevokePublicURL.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesRevokePublicURL.Input.Headers = .init(),
                body: Operations.FilesRevokePublicURL.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.revokePublicURL/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesRevokePublicURLResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesRevokePublicURLResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesRevokePublicURL.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesRevokePublicURL.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.revokePublicURL/post(filesRevokePublicURL)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesRevokePublicURL.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesRevokePublicURL.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Enables a file for public/external sharing.
    ///
    /// - Remark: HTTP `POST /files.sharedPublicURL`.
    /// - Remark: Generated from `#/paths//files.sharedPublicURL/post(filesSharedPublicURL)`.
    public enum FilesSharedPublicURL {
        public static let id: Swift.String = "filesSharedPublicURL"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesSharedPublicURL.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesSharedPublicURL.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesSharedPublicURL.Input.Headers
            /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// File to share.
                    ///
                    /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/requestBody/json/file`.
                    public var file: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - file: File to share.
                    public init(file: Swift.String) {
                        self.file = file
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file
                    }
                }
                /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/requestBody/content/application\/json`.
                case json(Operations.FilesSharedPublicURL.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesSharedPublicURL.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesSharedPublicURL.Input.Headers = .init(),
                body: Operations.FilesSharedPublicURL.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.sharedPublicURL/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesSharedPublicURLResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesSharedPublicURLResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesSharedPublicURL.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesSharedPublicURL.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.sharedPublicURL/post(filesSharedPublicURL)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesSharedPublicURL.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesSharedPublicURL.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Uploads or creates a file.
    ///
    /// - Remark: HTTP `POST /files.upload`.
    /// - Remark: Generated from `#/paths//files.upload/post(filesUpload)`.
    public enum FilesUpload {
        public static let id: Swift.String = "filesUpload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files.upload/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesUpload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FilesUpload.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FilesUpload.Input.Headers
            /// - Remark: Generated from `#/paths/files.upload/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Comma-separated list of channel names or IDs where the file will be shared.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/channels`.
                    public var channels: Swift.String?
                    /// File contents via a POST variable. If omitting this parameter, you must provide a file.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/content`.
                    public var content: Swift.String?
                    /// File contents via multipart/form-data. If omitting this parameter, you must submit content.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// Filename of file.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/filename`.
                    public var filename: Swift.String?
                    /// A file type identifier.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/filetype`.
                    public var filetype: Swift.String?
                    /// The message text introducing the file in specified channels.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/initialComment`.
                    public var initialComment: Swift.String?
                    /// Provide another message's ts value to upload this file as a reply. Never use a reply's ts value; use its parent instead.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/threadTs`.
                    public var threadTs: Swift.String?
                    /// Title of file.
                    ///
                    /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channels: Comma-separated list of channel names or IDs where the file will be shared.
                    ///   - content: File contents via a POST variable. If omitting this parameter, you must provide a file.
                    ///   - file: File contents via multipart/form-data. If omitting this parameter, you must submit content.
                    ///   - filename: Filename of file.
                    ///   - filetype: A file type identifier.
                    ///   - initialComment: The message text introducing the file in specified channels.
                    ///   - threadTs: Provide another message's ts value to upload this file as a reply. Never use a reply's ts value; use its parent instead.
                    ///   - title: Title of file.
                    public init(
                        channels: Swift.String? = nil,
                        content: Swift.String? = nil,
                        file: Swift.String? = nil,
                        filename: Swift.String? = nil,
                        filetype: Swift.String? = nil,
                        initialComment: Swift.String? = nil,
                        threadTs: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.channels = channels
                        self.content = content
                        self.file = file
                        self.filename = filename
                        self.filetype = filetype
                        self.initialComment = initialComment
                        self.threadTs = threadTs
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channels
                        case content
                        case file
                        case filename
                        case filetype
                        case initialComment
                        case threadTs
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/files.upload/POST/requestBody/content/application\/json`.
                case json(Operations.FilesUpload.Input.Body.JsonPayload)
            }
            public var body: Operations.FilesUpload.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FilesUpload.Input.Headers = .init(),
                body: Operations.FilesUpload.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files.upload/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files.upload/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FilesUploadResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FilesUploadResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FilesUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FilesUpload.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files.upload/post(filesUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FilesUpload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FilesUpload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Signal that a function failed to complete
    ///
    /// - Remark: HTTP `POST /functions.completeError`.
    /// - Remark: Generated from `#/paths//functions.completeError/post(functionsCompleteError)`.
    public enum FunctionsCompleteError {
        public static let id: Swift.String = "functionsCompleteError"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/functions.completeError/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FunctionsCompleteError.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FunctionsCompleteError.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FunctionsCompleteError.Input.Headers
            /// - Remark: Generated from `#/paths/functions.completeError/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/functions.completeError/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// A human-readable error message that contains information about why the function failed to complete.
                    ///
                    /// - Remark: Generated from `#/paths/functions.completeError/POST/requestBody/json/error`.
                    public var error: Swift.String
                    /// Context identifier that maps to the executed function.
                    ///
                    /// - Remark: Generated from `#/paths/functions.completeError/POST/requestBody/json/functionExecutionId`.
                    public var functionExecutionId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - error: A human-readable error message that contains information about why the function failed to complete.
                    ///   - functionExecutionId: Context identifier that maps to the executed function.
                    public init(
                        error: Swift.String,
                        functionExecutionId: Swift.String
                    ) {
                        self.error = error
                        self.functionExecutionId = functionExecutionId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case error
                        case functionExecutionId
                    }
                }
                /// - Remark: Generated from `#/paths/functions.completeError/POST/requestBody/content/application\/json`.
                case json(Operations.FunctionsCompleteError.Input.Body.JsonPayload)
            }
            public var body: Operations.FunctionsCompleteError.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FunctionsCompleteError.Input.Headers = .init(),
                body: Operations.FunctionsCompleteError.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/functions.completeError/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/functions.completeError/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FunctionsCompleteErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FunctionsCompleteErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FunctionsCompleteError.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FunctionsCompleteError.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//functions.completeError/post(functionsCompleteError)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FunctionsCompleteError.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FunctionsCompleteError.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Signal the successful completion of a function
    ///
    /// - Remark: HTTP `POST /functions.completeSuccess`.
    /// - Remark: Generated from `#/paths//functions.completeSuccess/post(functionsCompleteSuccess)`.
    public enum FunctionsCompleteSuccess {
        public static let id: Swift.String = "functionsCompleteSuccess"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/functions.completeSuccess/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FunctionsCompleteSuccess.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.FunctionsCompleteSuccess.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.FunctionsCompleteSuccess.Input.Headers
            /// - Remark: Generated from `#/paths/functions.completeSuccess/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/functions.completeSuccess/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Context identifier that maps to the executed function.
                    ///
                    /// - Remark: Generated from `#/paths/functions.completeSuccess/POST/requestBody/json/functionExecutionId`.
                    public var functionExecutionId: Swift.String
                    /// A JSON-based object that conforms to the output parameters schema for the custom function defined in the manifest.
                    ///
                    /// - Remark: Generated from `#/paths/functions.completeSuccess/POST/requestBody/json/outputs`.
                    public var outputs: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - functionExecutionId: Context identifier that maps to the executed function.
                    ///   - outputs: A JSON-based object that conforms to the output parameters schema for the custom function defined in the manifest.
                    public init(
                        functionExecutionId: Swift.String,
                        outputs: Swift.String
                    ) {
                        self.functionExecutionId = functionExecutionId
                        self.outputs = outputs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case functionExecutionId
                        case outputs
                    }
                }
                /// - Remark: Generated from `#/paths/functions.completeSuccess/POST/requestBody/content/application\/json`.
                case json(Operations.FunctionsCompleteSuccess.Input.Body.JsonPayload)
            }
            public var body: Operations.FunctionsCompleteSuccess.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.FunctionsCompleteSuccess.Input.Headers = .init(),
                body: Operations.FunctionsCompleteSuccess.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/functions.completeSuccess/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/functions.completeSuccess/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FunctionsCompleteSuccessResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FunctionsCompleteSuccessResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.FunctionsCompleteSuccess.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.FunctionsCompleteSuccess.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//functions.completeSuccess/post(functionsCompleteSuccess)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.FunctionsCompleteSuccess.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.FunctionsCompleteSuccess.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// For Enterprise Grid workspaces, map local user IDs to global user IDs
    ///
    /// - Remark: HTTP `POST /migration.exchange`.
    /// - Remark: Generated from `#/paths//migration.exchange/post(migrationExchange)`.
    public enum MigrationExchange {
        public static let id: Swift.String = "migrationExchange"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/migration.exchange/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.MigrationExchange.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.MigrationExchange.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.MigrationExchange.Input.Headers
            /// - Remark: Generated from `#/paths/migration.exchange/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/migration.exchange/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// A comma-separated list of user ids, up to 400 per request.
                    ///
                    /// - Remark: Generated from `#/paths/migration.exchange/POST/requestBody/json/users`.
                    public var users: OpenAPIRuntime.OpenAPIArrayContainer
                    /// Specify team_id starts with T in case of Org Token.
                    ///
                    /// - Remark: Generated from `#/paths/migration.exchange/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Specify true to convert W global user IDs to workspace-specific U IDs. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/migration.exchange/POST/requestBody/json/toOld`.
                    public var toOld: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - users: A comma-separated list of user ids, up to 400 per request.
                    ///   - teamId: Specify team_id starts with T in case of Org Token.
                    ///   - toOld: Specify true to convert W global user IDs to workspace-specific U IDs. Defaults to false.
                    public init(
                        users: OpenAPIRuntime.OpenAPIArrayContainer,
                        teamId: Swift.String? = nil,
                        toOld: Swift.Bool? = nil
                    ) {
                        self.users = users
                        self.teamId = teamId
                        self.toOld = toOld
                    }
                    public enum CodingKeys: String, CodingKey {
                        case users
                        case teamId
                        case toOld
                    }
                }
                /// - Remark: Generated from `#/paths/migration.exchange/POST/requestBody/content/application\/json`.
                case json(Operations.MigrationExchange.Input.Body.JsonPayload)
            }
            public var body: Operations.MigrationExchange.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.MigrationExchange.Input.Headers = .init(),
                body: Operations.MigrationExchange.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/migration.exchange/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/migration.exchange/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MigrationExchangeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MigrationExchangeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.MigrationExchange.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.MigrationExchange.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//migration.exchange/post(migrationExchange)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.MigrationExchange.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.MigrationExchange.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Exchanges a temporary OAuth verifier code for an access token.
    ///
    /// - Remark: HTTP `POST /oauth.v2.access`.
    /// - Remark: Generated from `#/paths//oauth.v2.access/post(oauthV2Access)`.
    public enum OauthV2Access {
        public static let id: Swift.String = "oauthV2Access"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/oauth.v2.access/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OauthV2Access.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OauthV2Access.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.OauthV2Access.Input.Headers
            /// - Remark: Generated from `#/paths/oauth.v2.access/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth.v2.access/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Issued when you created your application. If possible, avoid sending client_id and client_secret as parameters in your request and instead supply the Client ID and Client Secret using the HTTP Basic authentication scheme.
                    ///
                    /// - Remark: Generated from `#/paths/oauth.v2.access/POST/requestBody/json/clientId`.
                    public var clientId: Swift.String?
                    /// Issued when you created your application. If possible, avoid sending client_id and client_secret as parameters in your request and instead supply the Client ID and Client Secret using the HTTP Basic authentication scheme.
                    ///
                    /// - Remark: Generated from `#/paths/oauth.v2.access/POST/requestBody/json/clientSecret`.
                    public var clientSecret: Swift.String?
                    /// The code param returned via the OAuth callback.
                    ///
                    /// - Remark: Generated from `#/paths/oauth.v2.access/POST/requestBody/json/code`.
                    public var code: Swift.String?
                    /// The grant_type param as described in the OAuth spec.
                    ///
                    /// - Remark: Generated from `#/paths/oauth.v2.access/POST/requestBody/json/grantType`.
                    public var grantType: Swift.String?
                    /// This must match the originally submitted URI (if one was sent).
                    ///
                    /// - Remark: Generated from `#/paths/oauth.v2.access/POST/requestBody/json/redirectUri`.
                    public var redirectUri: Swift.String?
                    /// The refresh_token param as described in the OAuth spec.
                    ///
                    /// - Remark: Generated from `#/paths/oauth.v2.access/POST/requestBody/json/refreshToken`.
                    public var refreshToken: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - clientId: Issued when you created your application. If possible, avoid sending client_id and client_secret as parameters in your request and instead supply the Client ID and Client Secret using the HTTP Basic authentication scheme.
                    ///   - clientSecret: Issued when you created your application. If possible, avoid sending client_id and client_secret as parameters in your request and instead supply the Client ID and Client Secret using the HTTP Basic authentication scheme.
                    ///   - code: The code param returned via the OAuth callback.
                    ///   - grantType: The grant_type param as described in the OAuth spec.
                    ///   - redirectUri: This must match the originally submitted URI (if one was sent).
                    ///   - refreshToken: The refresh_token param as described in the OAuth spec.
                    public init(
                        clientId: Swift.String? = nil,
                        clientSecret: Swift.String? = nil,
                        code: Swift.String? = nil,
                        grantType: Swift.String? = nil,
                        redirectUri: Swift.String? = nil,
                        refreshToken: Swift.String? = nil
                    ) {
                        self.clientId = clientId
                        self.clientSecret = clientSecret
                        self.code = code
                        self.grantType = grantType
                        self.redirectUri = redirectUri
                        self.refreshToken = refreshToken
                    }
                    public enum CodingKeys: String, CodingKey {
                        case clientId
                        case clientSecret
                        case code
                        case grantType
                        case redirectUri
                        case refreshToken
                    }
                }
                /// - Remark: Generated from `#/paths/oauth.v2.access/POST/requestBody/content/application\/json`.
                case json(Operations.OauthV2Access.Input.Body.JsonPayload)
            }
            public var body: Operations.OauthV2Access.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.OauthV2Access.Input.Headers = .init(),
                body: Operations.OauthV2Access.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth.v2.access/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/oauth.v2.access/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OauthV2AccessResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OauthV2AccessResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.OauthV2Access.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.OauthV2Access.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//oauth.v2.access/post(oauthV2Access)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.OauthV2Access.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.OauthV2Access.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Exchanges a legacy access token for a new expiring access token and refresh token
    ///
    /// - Remark: HTTP `POST /oauth.v2.exchange`.
    /// - Remark: Generated from `#/paths//oauth.v2.exchange/post(oauthV2Exchange)`.
    public enum OauthV2Exchange {
        public static let id: Swift.String = "oauthV2Exchange"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/oauth.v2.exchange/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OauthV2Exchange.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OauthV2Exchange.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.OauthV2Exchange.Input.Headers
            /// - Remark: Generated from `#/paths/oauth.v2.exchange/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth.v2.exchange/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Issued when you created your application.
                    ///
                    /// - Remark: Generated from `#/paths/oauth.v2.exchange/POST/requestBody/json/clientId`.
                    public var clientId: Swift.String
                    /// Issued when you created your application.
                    ///
                    /// - Remark: Generated from `#/paths/oauth.v2.exchange/POST/requestBody/json/clientSecret`.
                    public var clientSecret: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - clientId: Issued when you created your application.
                    ///   - clientSecret: Issued when you created your application.
                    public init(
                        clientId: Swift.String,
                        clientSecret: Swift.String
                    ) {
                        self.clientId = clientId
                        self.clientSecret = clientSecret
                    }
                    public enum CodingKeys: String, CodingKey {
                        case clientId
                        case clientSecret
                    }
                }
                /// - Remark: Generated from `#/paths/oauth.v2.exchange/POST/requestBody/content/application\/json`.
                case json(Operations.OauthV2Exchange.Input.Body.JsonPayload)
            }
            public var body: Operations.OauthV2Exchange.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.OauthV2Exchange.Input.Headers = .init(),
                body: Operations.OauthV2Exchange.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth.v2.exchange/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/oauth.v2.exchange/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OauthV2ExchangeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OauthV2ExchangeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.OauthV2Exchange.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.OauthV2Exchange.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//oauth.v2.exchange/post(oauthV2Exchange)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.OauthV2Exchange.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.OauthV2Exchange.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Exchanges a temporary OAuth verifier code for an access token for Sign in with Slack.
    ///
    /// - Remark: HTTP `POST /openid.connect.token`.
    /// - Remark: Generated from `#/paths//openid.connect.token/post(openidConnectToken)`.
    public enum OpenidConnectToken {
        public static let id: Swift.String = "openidConnectToken"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/openid.connect.token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OpenidConnectToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OpenidConnectToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.OpenidConnectToken.Input.Headers
            /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Issued when you created your application.
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/clientId`.
                    public var clientId: Swift.String?
                    /// Issued when you created your application.
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/clientSecret`.
                    public var clientSecret: Swift.String?
                    /// The code param returned via the OAuth callback.
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/code`.
                    public var code: Swift.String?
                    /// The grant_type param as described in the OAuth spec.
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/grantType`.
                    public var grantType: Swift.String?
                    /// This must match the originally submitted URI (if one was sent).
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/redirectUri`.
                    public var redirectUri: Swift.String?
                    /// The refresh_token param as described in the OAuth spec.
                    ///
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/json/refreshToken`.
                    public var refreshToken: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - clientId: Issued when you created your application.
                    ///   - clientSecret: Issued when you created your application.
                    ///   - code: The code param returned via the OAuth callback.
                    ///   - grantType: The grant_type param as described in the OAuth spec.
                    ///   - redirectUri: This must match the originally submitted URI (if one was sent).
                    ///   - refreshToken: The refresh_token param as described in the OAuth spec.
                    public init(
                        clientId: Swift.String? = nil,
                        clientSecret: Swift.String? = nil,
                        code: Swift.String? = nil,
                        grantType: Swift.String? = nil,
                        redirectUri: Swift.String? = nil,
                        refreshToken: Swift.String? = nil
                    ) {
                        self.clientId = clientId
                        self.clientSecret = clientSecret
                        self.code = code
                        self.grantType = grantType
                        self.redirectUri = redirectUri
                        self.refreshToken = refreshToken
                    }
                    public enum CodingKeys: String, CodingKey {
                        case clientId
                        case clientSecret
                        case code
                        case grantType
                        case redirectUri
                        case refreshToken
                    }
                }
                /// - Remark: Generated from `#/paths/openid.connect.token/POST/requestBody/content/application\/json`.
                case json(Operations.OpenidConnectToken.Input.Body.JsonPayload)
            }
            public var body: Operations.OpenidConnectToken.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.OpenidConnectToken.Input.Headers = .init(),
                body: Operations.OpenidConnectToken.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/openid.connect.token/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/openid.connect.token/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpenidConnectTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OpenidConnectTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.OpenidConnectToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.OpenidConnectToken.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//openid.connect.token/post(openidConnectToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.OpenidConnectToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.OpenidConnectToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the identity of a user who has authorized Sign in with Slack.
    ///
    /// - Remark: HTTP `POST /openid.connect.userInfo`.
    /// - Remark: Generated from `#/paths//openid.connect.userInfo/post(openidConnectUserInfo)`.
    public enum OpenidConnectUserInfo {
        public static let id: Swift.String = "openidConnectUserInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OpenidConnectUserInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.OpenidConnectUserInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.OpenidConnectUserInfo.Input.Headers
            /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.OpenidConnectUserInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.OpenidConnectUserInfo.Input.Headers = .init(),
                body: Operations.OpenidConnectUserInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/openid.connect.userInfo/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpenidConnectUserInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OpenidConnectUserInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.OpenidConnectUserInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.OpenidConnectUserInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//openid.connect.userInfo/post(openidConnectUserInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.OpenidConnectUserInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.OpenidConnectUserInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Pins an item to a channel.
    ///
    /// - Remark: HTTP `POST /pins.add`.
    /// - Remark: Generated from `#/paths//pins.add/post(pinsAdd)`.
    public enum PinsAdd {
        public static let id: Swift.String = "pinsAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pins.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PinsAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PinsAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PinsAdd.Input.Headers
            /// - Remark: Generated from `#/paths/pins.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pins.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to pin the messsage to. You must also include a timestamp when pinning messages.
                    ///
                    /// - Remark: Generated from `#/paths/pins.add/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Timestamp of the message to pin. You must also include the channel.
                    ///
                    /// - Remark: Generated from `#/paths/pins.add/POST/requestBody/json/timestamp`.
                    public var timestamp: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel to pin the messsage to. You must also include a timestamp when pinning messages.
                    ///   - timestamp: Timestamp of the message to pin. You must also include the channel.
                    public init(
                        channel: Swift.String,
                        timestamp: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.timestamp = timestamp
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case timestamp
                    }
                }
                /// - Remark: Generated from `#/paths/pins.add/POST/requestBody/content/application\/json`.
                case json(Operations.PinsAdd.Input.Body.JsonPayload)
            }
            public var body: Operations.PinsAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PinsAdd.Input.Headers = .init(),
                body: Operations.PinsAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pins.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pins.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.PinsAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PinsAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PinsAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PinsAdd.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//pins.add/post(pinsAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PinsAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PinsAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists items pinned to a channel.
    ///
    /// - Remark: HTTP `POST /pins.list`.
    /// - Remark: Generated from `#/paths//pins.list/post(pinsList)`.
    public enum PinsList {
        public static let id: Swift.String = "pinsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pins.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PinsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PinsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PinsList.Input.Headers
            /// - Remark: Generated from `#/paths/pins.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pins.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to get pinned items for.
                    ///
                    /// - Remark: Generated from `#/paths/pins.list/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel to get pinned items for.
                    public init(channel: Swift.String) {
                        self.channel = channel
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }
                /// - Remark: Generated from `#/paths/pins.list/POST/requestBody/content/application\/json`.
                case json(Operations.PinsList.Input.Body.JsonPayload)
            }
            public var body: Operations.PinsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PinsList.Input.Headers = .init(),
                body: Operations.PinsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pins.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pins.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.PinsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PinsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PinsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PinsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//pins.list/post(pinsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PinsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PinsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Un-pins an item from a channel.
    ///
    /// - Remark: HTTP `POST /pins.remove`.
    /// - Remark: Generated from `#/paths//pins.remove/post(pinsRemove)`.
    public enum PinsRemove {
        public static let id: Swift.String = "pinsRemove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pins.remove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PinsRemove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PinsRemove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PinsRemove.Input.Headers
            /// - Remark: Generated from `#/paths/pins.remove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pins.remove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel where the item is pinned to.
                    ///
                    /// - Remark: Generated from `#/paths/pins.remove/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Timestamp of the message to un-pin.
                    ///
                    /// - Remark: Generated from `#/paths/pins.remove/POST/requestBody/json/timestamp`.
                    public var timestamp: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel where the item is pinned to.
                    ///   - timestamp: Timestamp of the message to un-pin.
                    public init(
                        channel: Swift.String,
                        timestamp: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.timestamp = timestamp
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case timestamp
                    }
                }
                /// - Remark: Generated from `#/paths/pins.remove/POST/requestBody/content/application\/json`.
                case json(Operations.PinsRemove.Input.Body.JsonPayload)
            }
            public var body: Operations.PinsRemove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PinsRemove.Input.Headers = .init(),
                body: Operations.PinsRemove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pins.remove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pins.remove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.PinsRemoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PinsRemoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PinsRemove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PinsRemove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//pins.remove/post(pinsRemove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PinsRemove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PinsRemove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Adds a reaction to an item.
    ///
    /// - Remark: HTTP `POST /reactions.add`.
    /// - Remark: Generated from `#/paths//reactions.add/post(reactionsAdd)`.
    public enum ReactionsAdd {
        public static let id: Swift.String = "reactionsAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ReactionsAdd.Input.Headers
            /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel where the message to add reaction to was posted.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody/json/channel`.
                    public var channel: Swift.String
                    /// Reaction (emoji) name.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Timestamp of the message to add reaction to.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody/json/timestamp`.
                    public var timestamp: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel where the message to add reaction to was posted.
                    ///   - name: Reaction (emoji) name.
                    ///   - timestamp: Timestamp of the message to add reaction to.
                    public init(
                        channel: Swift.String,
                        name: Swift.String,
                        timestamp: Swift.String
                    ) {
                        self.channel = channel
                        self.name = name
                        self.timestamp = timestamp
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case name
                        case timestamp
                    }
                }
                /// - Remark: Generated from `#/paths/reactions.add/POST/requestBody/content/application\/json`.
                case json(Operations.ReactionsAdd.Input.Body.JsonPayload)
            }
            public var body: Operations.ReactionsAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ReactionsAdd.Input.Headers = .init(),
                body: Operations.ReactionsAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reactions.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ReactionsAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ReactionsAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReactionsAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReactionsAdd.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//reactions.add/post(reactionsAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReactionsAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ReactionsAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets reactions for an item.
    ///
    /// - Remark: HTTP `POST /reactions.get`.
    /// - Remark: Generated from `#/paths//reactions.get/post(reactionsGet)`.
    public enum ReactionsGet {
        public static let id: Swift.String = "reactionsGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.get/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ReactionsGet.Input.Headers
            /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel where the message to get reactions for was posted.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// File to get reactions for.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// File comment to get reactions for.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json/fileComment`.
                    public var fileComment: Swift.String?
                    /// If true always return the complete reaction list.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json/full`.
                    public var full: Swift.Bool?
                    /// Timestamp of the message to get reactions for.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/json/timestamp`.
                    public var timestamp: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel where the message to get reactions for was posted.
                    ///   - file: File to get reactions for.
                    ///   - fileComment: File comment to get reactions for.
                    ///   - full: If true always return the complete reaction list.
                    ///   - timestamp: Timestamp of the message to get reactions for.
                    public init(
                        channel: Swift.String? = nil,
                        file: Swift.String? = nil,
                        fileComment: Swift.String? = nil,
                        full: Swift.Bool? = nil,
                        timestamp: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.file = file
                        self.fileComment = fileComment
                        self.full = full
                        self.timestamp = timestamp
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case file
                        case fileComment
                        case full
                        case timestamp
                    }
                }
                /// - Remark: Generated from `#/paths/reactions.get/POST/requestBody/content/application\/json`.
                case json(Operations.ReactionsGet.Input.Body.JsonPayload)
            }
            public var body: Operations.ReactionsGet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ReactionsGet.Input.Headers = .init(),
                body: Operations.ReactionsGet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.get/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reactions.get/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ReactionsGetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ReactionsGetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReactionsGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReactionsGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//reactions.get/post(reactionsGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReactionsGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ReactionsGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists reactions made by a user.
    ///
    /// - Remark: HTTP `POST /reactions.list`.
    /// - Remark: Generated from `#/paths//reactions.list/post(reactionsList)`.
    public enum ReactionsList {
        public static let id: Swift.String = "reactionsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ReactionsList.Input.Headers
            /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See pagination for more details.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// If true always return the complete reaction list.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json/full`.
                    public var full: Swift.Bool?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// encoded team id to list reactions in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Show reactions made by this user. Defaults to the authed user.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See pagination for more details.
                    ///   - full: If true always return the complete reaction list.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
                    ///   - teamId: encoded team id to list reactions in, required if org token is used.
                    ///   - user: Show reactions made by this user. Defaults to the authed user.
                    public init(
                        cursor: Swift.String? = nil,
                        full: Swift.Bool? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.full = full
                        self.limit = limit
                        self.teamId = teamId
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case full
                        case limit
                        case teamId
                        case user
                    }
                }
                /// - Remark: Generated from `#/paths/reactions.list/POST/requestBody/content/application\/json`.
                case json(Operations.ReactionsList.Input.Body.JsonPayload)
            }
            public var body: Operations.ReactionsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ReactionsList.Input.Headers = .init(),
                body: Operations.ReactionsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reactions.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ReactionsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ReactionsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReactionsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReactionsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//reactions.list/post(reactionsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReactionsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ReactionsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Removes a reaction from an item.
    ///
    /// - Remark: HTTP `POST /reactions.remove`.
    /// - Remark: Generated from `#/paths//reactions.remove/post(reactionsRemove)`.
    public enum ReactionsRemove {
        public static let id: Swift.String = "reactionsRemove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reactions.remove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsRemove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReactionsRemove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ReactionsRemove.Input.Headers
            /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Reaction (emoji) name.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Channel where the message to remove reaction from was posted.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// File to remove reaction from.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// File comment to remove reaction from.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json/fileComment`.
                    public var fileComment: Swift.String?
                    /// Timestamp of the message to remove reaction from.
                    ///
                    /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/json/timestamp`.
                    public var timestamp: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Reaction (emoji) name.
                    ///   - channel: Channel where the message to remove reaction from was posted.
                    ///   - file: File to remove reaction from.
                    ///   - fileComment: File comment to remove reaction from.
                    ///   - timestamp: Timestamp of the message to remove reaction from.
                    public init(
                        name: Swift.String,
                        channel: Swift.String? = nil,
                        file: Swift.String? = nil,
                        fileComment: Swift.String? = nil,
                        timestamp: Swift.String? = nil
                    ) {
                        self.name = name
                        self.channel = channel
                        self.file = file
                        self.fileComment = fileComment
                        self.timestamp = timestamp
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case channel
                        case file
                        case fileComment
                        case timestamp
                    }
                }
                /// - Remark: Generated from `#/paths/reactions.remove/POST/requestBody/content/application\/json`.
                case json(Operations.ReactionsRemove.Input.Body.JsonPayload)
            }
            public var body: Operations.ReactionsRemove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ReactionsRemove.Input.Headers = .init(),
                body: Operations.ReactionsRemove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reactions.remove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reactions.remove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ReactionsRemoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ReactionsRemoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ReactionsRemove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ReactionsRemove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//reactions.remove/post(reactionsRemove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReactionsRemove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ReactionsRemove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.add`.
    /// - Remark: Generated from `#/paths//reminders.add/post(remindersAdd)`.
    public enum RemindersAdd {
        public static let id: Swift.String = "remindersAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reminders.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RemindersAdd.Input.Headers
            /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The content of the reminder.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json/text`.
                    public var text: Swift.String
                    /// Can also take a type of integer. When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. "in 15 minutes," or "every Thursday").
                    ///
                    /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json/time`.
                    public var time: Swift.String
                    /// Specify the repeating behavior of a reminder. Available options: daily, weekly, monthly, or yearly. If weekly, may further specify the days of the week.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json/recurrence`.
                    public var recurrence: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// Encoded team id, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// No longer supported - reminders cannot be set for other users. Previously, was the user who would receive the reminder.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - text: The content of the reminder.
                    ///   - time: Can also take a type of integer. When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. "in 15 minutes," or "every Thursday").
                    ///   - recurrence: Specify the repeating behavior of a reminder. Available options: daily, weekly, monthly, or yearly. If weekly, may further specify the days of the week.
                    ///   - teamId: Encoded team id, required if org token is used.
                    ///   - user: No longer supported - reminders cannot be set for other users. Previously, was the user who would receive the reminder.
                    public init(
                        text: Swift.String,
                        time: Swift.String,
                        recurrence: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        teamId: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.text = text
                        self.time = time
                        self.recurrence = recurrence
                        self.teamId = teamId
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case text
                        case time
                        case recurrence
                        case teamId
                        case user
                    }
                }
                /// - Remark: Generated from `#/paths/reminders.add/POST/requestBody/content/application\/json`.
                case json(Operations.RemindersAdd.Input.Body.JsonPayload)
            }
            public var body: Operations.RemindersAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RemindersAdd.Input.Headers = .init(),
                body: Operations.RemindersAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reminders.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RemindersAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RemindersAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RemindersAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RemindersAdd.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//reminders.add/post(remindersAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RemindersAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RemindersAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Marks a reminder as complete.
    ///
    /// - Remark: HTTP `POST /reminders.complete`.
    /// - Remark: Generated from `#/paths//reminders.complete/post(remindersComplete)`.
    public enum RemindersComplete {
        public static let id: Swift.String = "remindersComplete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reminders.complete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersComplete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersComplete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RemindersComplete.Input.Headers
            /// - Remark: Generated from `#/paths/reminders.complete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.complete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the reminder to be marked as complete.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.complete/POST/requestBody/json/reminder`.
                    public var reminder: Swift.String
                    /// Encoded team id, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.complete/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - reminder: The ID of the reminder to be marked as complete.
                    ///   - teamId: Encoded team id, required if org token is used.
                    public init(
                        reminder: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.reminder = reminder
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case reminder
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/reminders.complete/POST/requestBody/content/application\/json`.
                case json(Operations.RemindersComplete.Input.Body.JsonPayload)
            }
            public var body: Operations.RemindersComplete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RemindersComplete.Input.Headers = .init(),
                body: Operations.RemindersComplete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.complete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reminders.complete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RemindersCompleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RemindersCompleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RemindersComplete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RemindersComplete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//reminders.complete/post(remindersComplete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RemindersComplete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RemindersComplete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.delete`.
    /// - Remark: Generated from `#/paths//reminders.delete/post(remindersDelete)`.
    public enum RemindersDelete {
        public static let id: Swift.String = "remindersDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reminders.delete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RemindersDelete.Input.Headers
            /// - Remark: Generated from `#/paths/reminders.delete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.delete/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the reminder.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.delete/POST/requestBody/json/reminder`.
                    public var reminder: Swift.String
                    /// Encoded team id, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.delete/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - reminder: The ID of the reminder.
                    ///   - teamId: Encoded team id, required if org token is used.
                    public init(
                        reminder: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.reminder = reminder
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case reminder
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/reminders.delete/POST/requestBody/content/application\/json`.
                case json(Operations.RemindersDelete.Input.Body.JsonPayload)
            }
            public var body: Operations.RemindersDelete.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RemindersDelete.Input.Headers = .init(),
                body: Operations.RemindersDelete.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.delete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reminders.delete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RemindersDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RemindersDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RemindersDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RemindersDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//reminders.delete/post(remindersDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RemindersDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RemindersDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets information about a reminder.
    ///
    /// - Remark: HTTP `POST /reminders.info`.
    /// - Remark: Generated from `#/paths//reminders.info/post(remindersInfo)`.
    public enum RemindersInfo {
        public static let id: Swift.String = "remindersInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reminders.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RemindersInfo.Input.Headers
            /// - Remark: Generated from `#/paths/reminders.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the reminder.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.info/POST/requestBody/json/reminder`.
                    public var reminder: Swift.String
                    /// Encoded team id, required if org token is passed.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.info/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - reminder: The ID of the reminder.
                    ///   - teamId: Encoded team id, required if org token is passed.
                    public init(
                        reminder: Swift.String,
                        teamId: Swift.String? = nil
                    ) {
                        self.reminder = reminder
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case reminder
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/reminders.info/POST/requestBody/content/application\/json`.
                case json(Operations.RemindersInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.RemindersInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RemindersInfo.Input.Headers = .init(),
                body: Operations.RemindersInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reminders.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RemindersInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RemindersInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RemindersInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RemindersInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//reminders.info/post(remindersInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RemindersInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RemindersInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists all reminders created by or for a given user.
    ///
    /// - Remark: HTTP `POST /reminders.list`.
    /// - Remark: Generated from `#/paths//reminders.list/post(remindersList)`.
    public enum RemindersList {
        public static let id: Swift.String = "remindersList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reminders.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RemindersList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RemindersList.Input.Headers
            /// - Remark: Generated from `#/paths/reminders.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Encoded team id, required if org token is passed.
                    ///
                    /// - Remark: Generated from `#/paths/reminders.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - teamId: Encoded team id, required if org token is passed.
                    public init(teamId: Swift.String? = nil) {
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/reminders.list/POST/requestBody/content/application\/json`.
                case json(Operations.RemindersList.Input.Body.JsonPayload)
            }
            public var body: Operations.RemindersList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RemindersList.Input.Headers = .init(),
                body: Operations.RemindersList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reminders.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reminders.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RemindersListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RemindersListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RemindersList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RemindersList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//reminders.list/post(remindersList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RemindersList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RemindersList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Starts a Real Time Messaging session.
    ///
    /// - Remark: HTTP `POST /rtm.connect`.
    /// - Remark: Generated from `#/paths//rtm.connect/post(rtmConnect)`.
    public enum RtmConnect {
        public static let id: Swift.String = "rtmConnect"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/rtm.connect/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RtmConnect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RtmConnect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RtmConnect.Input.Headers
            /// - Remark: Generated from `#/paths/rtm.connect/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rtm.connect/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Batch presence deliveries via subscription. Enabling changes the shape of presence_change events. See batch presence.
                    ///
                    /// - Remark: Generated from `#/paths/rtm.connect/POST/requestBody/json/batchPresenceAware`.
                    public var batchPresenceAware: Swift.Bool?
                    /// Only deliver presence events when requested by subscription. See presence subscriptions.
                    ///
                    /// - Remark: Generated from `#/paths/rtm.connect/POST/requestBody/json/presenceSub`.
                    public var presenceSub: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - batchPresenceAware: Batch presence deliveries via subscription. Enabling changes the shape of presence_change events. See batch presence.
                    ///   - presenceSub: Only deliver presence events when requested by subscription. See presence subscriptions.
                    public init(
                        batchPresenceAware: Swift.Bool? = nil,
                        presenceSub: Swift.Bool? = nil
                    ) {
                        self.batchPresenceAware = batchPresenceAware
                        self.presenceSub = presenceSub
                    }
                    public enum CodingKeys: String, CodingKey {
                        case batchPresenceAware
                        case presenceSub
                    }
                }
                /// - Remark: Generated from `#/paths/rtm.connect/POST/requestBody/content/application\/json`.
                case json(Operations.RtmConnect.Input.Body.JsonPayload)
            }
            public var body: Operations.RtmConnect.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.RtmConnect.Input.Headers = .init(),
                body: Operations.RtmConnect.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/rtm.connect/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/rtm.connect/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RtmConnectResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RtmConnectResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RtmConnect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RtmConnect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//rtm.connect/post(rtmConnect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RtmConnect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RtmConnect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Searches for messages and files matching a query.
    ///
    /// - Remark: HTTP `POST /search.all`.
    /// - Remark: Generated from `#/paths//search.all/post(searchAll)`.
    public enum SearchAll {
        public static let id: Swift.String = "searchAll"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search.all/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchAll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchAll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SearchAll.Input.Headers
            /// - Remark: Generated from `#/paths/search.all/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Search query. May contains booleans, etc.
                    ///
                    /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// Pass a value of true to enable query highlight markers (see below).
                    ///
                    /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json/highlight`.
                    public var highlight: Swift.Bool?
                    /// Return matches sorted by either score or timestamp.
                    ///
                    /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json/sort`.
                    public var sort: Swift.String?
                    /// Change sort direction to ascending (asc) or descending (desc).
                    ///
                    /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json/sortDir`.
                    public var sortDir: Swift.String?
                    /// encoded team id to search in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/search.all/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Search query. May contains booleans, etc.
                    ///   - highlight: Pass a value of true to enable query highlight markers (see below).
                    ///   - sort: Return matches sorted by either score or timestamp.
                    ///   - sortDir: Change sort direction to ascending (asc) or descending (desc).
                    ///   - teamId: encoded team id to search in, required if org token is used.
                    public init(
                        query: Swift.String,
                        highlight: Swift.Bool? = nil,
                        sort: Swift.String? = nil,
                        sortDir: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.query = query
                        self.highlight = highlight
                        self.sort = sort
                        self.sortDir = sortDir
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                        case highlight
                        case sort
                        case sortDir
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/search.all/POST/requestBody/content/application\/json`.
                case json(Operations.SearchAll.Input.Body.JsonPayload)
            }
            public var body: Operations.SearchAll.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.SearchAll.Input.Headers = .init(),
                body: Operations.SearchAll.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.all/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search.all/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SearchAllResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SearchAllResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SearchAll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SearchAll.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//search.all/post(searchAll)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SearchAll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SearchAll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Searches for files matching a query.
    ///
    /// - Remark: HTTP `POST /search.files`.
    /// - Remark: Generated from `#/paths//search.files/post(searchFiles)`.
    public enum SearchFiles {
        public static let id: Swift.String = "searchFiles"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search.files/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchFiles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchFiles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SearchFiles.Input.Headers
            /// - Remark: Generated from `#/paths/search.files/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Search query.
                    ///
                    /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// Pass a value of true to enable query highlight markers (see below).
                    ///
                    /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json/highlight`.
                    public var highlight: Swift.Bool?
                    /// Return matches sorted by either score or timestamp.
                    ///
                    /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json/sort`.
                    public var sort: Swift.String?
                    /// Change sort direction to ascending (asc) or descending (desc).
                    ///
                    /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json/sortDir`.
                    public var sortDir: Swift.String?
                    /// encoded team id to search in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/search.files/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Search query.
                    ///   - highlight: Pass a value of true to enable query highlight markers (see below).
                    ///   - sort: Return matches sorted by either score or timestamp.
                    ///   - sortDir: Change sort direction to ascending (asc) or descending (desc).
                    ///   - teamId: encoded team id to search in, required if org token is used.
                    public init(
                        query: Swift.String,
                        highlight: Swift.Bool? = nil,
                        sort: Swift.String? = nil,
                        sortDir: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.query = query
                        self.highlight = highlight
                        self.sort = sort
                        self.sortDir = sortDir
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                        case highlight
                        case sort
                        case sortDir
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/search.files/POST/requestBody/content/application\/json`.
                case json(Operations.SearchFiles.Input.Body.JsonPayload)
            }
            public var body: Operations.SearchFiles.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.SearchFiles.Input.Headers = .init(),
                body: Operations.SearchFiles.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.files/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search.files/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SearchFilesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SearchFilesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SearchFiles.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SearchFiles.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//search.files/post(searchFiles)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SearchFiles.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SearchFiles.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Searches for messages matching a query.
    ///
    /// - Remark: HTTP `POST /search.messages`.
    /// - Remark: Generated from `#/paths//search.messages/post(searchMessages)`.
    public enum SearchMessages {
        public static let id: Swift.String = "searchMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search.messages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SearchMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SearchMessages.Input.Headers
            /// - Remark: Generated from `#/paths/search.messages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Search query.
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// Use this when getting results with cursormark pagination. For first call send * for subsequent calls, send the value of next_cursor returned in the previous call's results.
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Pass a value of true to enable query highlight markers (see below).
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/highlight`.
                    public var highlight: Swift.Bool?
                    /// Return matches sorted by either score or timestamp.
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/sort`.
                    public var sort: Swift.String?
                    /// Change sort direction to ascending (asc) or descending (desc).
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/sortDir`.
                    public var sortDir: Swift.String?
                    /// encoded team id to search in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Search query.
                    ///   - cursor: Use this when getting results with cursormark pagination. For first call send * for subsequent calls, send the value of next_cursor returned in the previous call's results.
                    ///   - highlight: Pass a value of true to enable query highlight markers (see below).
                    ///   - sort: Return matches sorted by either score or timestamp.
                    ///   - sortDir: Change sort direction to ascending (asc) or descending (desc).
                    ///   - teamId: encoded team id to search in, required if org token is used.
                    public init(
                        query: Swift.String,
                        cursor: Swift.String? = nil,
                        highlight: Swift.Bool? = nil,
                        sort: Swift.String? = nil,
                        sortDir: Swift.String? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.query = query
                        self.cursor = cursor
                        self.highlight = highlight
                        self.sort = sort
                        self.sortDir = sortDir
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                        case cursor
                        case highlight
                        case sort
                        case sortDir
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/search.messages/POST/requestBody/content/application\/json`.
                case json(Operations.SearchMessages.Input.Body.JsonPayload)
            }
            public var body: Operations.SearchMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.SearchMessages.Input.Headers = .init(),
                body: Operations.SearchMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search.messages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search.messages/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SearchMessagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SearchMessagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SearchMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SearchMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//search.messages/post(searchMessages)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SearchMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SearchMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Save an item for later. Formerly known as adding a star.
    ///
    /// - Remark: HTTP `POST /stars.add`.
    /// - Remark: Generated from `#/paths//stars.add/post(starsAdd)`.
    public enum StarsAdd {
        public static let id: Swift.String = "starsAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stars.add/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.StarsAdd.Input.Headers
            /// - Remark: Generated from `#/paths/stars.add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to add star to, or channel where the message to add star to was posted (used with timestamp).
                    ///
                    /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// File to add star to.
                    ///
                    /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// File comment to add star to.
                    ///
                    /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/json/fileComment`.
                    public var fileComment: Swift.String?
                    /// Timestamp of the message to add star to.
                    ///
                    /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/json/timestamp`.
                    public var timestamp: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel to add star to, or channel where the message to add star to was posted (used with timestamp).
                    ///   - file: File to add star to.
                    ///   - fileComment: File comment to add star to.
                    ///   - timestamp: Timestamp of the message to add star to.
                    public init(
                        channel: Swift.String? = nil,
                        file: Swift.String? = nil,
                        fileComment: Swift.String? = nil,
                        timestamp: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.file = file
                        self.fileComment = fileComment
                        self.timestamp = timestamp
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case file
                        case fileComment
                        case timestamp
                    }
                }
                /// - Remark: Generated from `#/paths/stars.add/POST/requestBody/content/application\/json`.
                case json(Operations.StarsAdd.Input.Body.JsonPayload)
            }
            public var body: Operations.StarsAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.StarsAdd.Input.Headers = .init(),
                body: Operations.StarsAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.add/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stars.add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.StarsAddResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.StarsAddResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.StarsAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.StarsAdd.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//stars.add/post(starsAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.StarsAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.StarsAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Listed a user's saved items, formerly known as stars.
    ///
    /// - Remark: HTTP `POST /stars.list`.
    /// - Remark: Generated from `#/paths//stars.list/post(starsList)`.
    public enum StarsList {
        public static let id: Swift.String = "starsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stars.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.StarsList.Input.Headers
            /// - Remark: Generated from `#/paths/stars.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See pagination for more details.
                    ///
                    /// - Remark: Generated from `#/paths/stars.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
                    ///
                    /// - Remark: Generated from `#/paths/stars.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// encoded team id to list stars in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/stars.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See pagination for more details.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
                    ///   - teamId: encoded team id to list stars in, required if org token is used.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/stars.list/POST/requestBody/content/application\/json`.
                case json(Operations.StarsList.Input.Body.JsonPayload)
            }
            public var body: Operations.StarsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.StarsList.Input.Headers = .init(),
                body: Operations.StarsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stars.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.StarsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.StarsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.StarsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.StarsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//stars.list/post(starsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.StarsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.StarsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Removes a saved item (star) from an item.
    ///
    /// - Remark: HTTP `POST /stars.remove`.
    /// - Remark: Generated from `#/paths//stars.remove/post(starsRemove)`.
    public enum StarsRemove {
        public static let id: Swift.String = "starsRemove"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stars.remove/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsRemove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.StarsRemove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.StarsRemove.Input.Headers
            /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Channel to remove star from, or channel where the message to remove star from was posted (used with timestamp).
                    ///
                    /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/json/channel`.
                    public var channel: Swift.String?
                    /// File to remove star from.
                    ///
                    /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/json/file`.
                    public var file: Swift.String?
                    /// File comment to remove star from.
                    ///
                    /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/json/fileComment`.
                    public var fileComment: Swift.String?
                    /// Timestamp of the message to remove star from.
                    ///
                    /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/json/timestamp`.
                    public var timestamp: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel: Channel to remove star from, or channel where the message to remove star from was posted (used with timestamp).
                    ///   - file: File to remove star from.
                    ///   - fileComment: File comment to remove star from.
                    ///   - timestamp: Timestamp of the message to remove star from.
                    public init(
                        channel: Swift.String? = nil,
                        file: Swift.String? = nil,
                        fileComment: Swift.String? = nil,
                        timestamp: Swift.String? = nil
                    ) {
                        self.channel = channel
                        self.file = file
                        self.fileComment = fileComment
                        self.timestamp = timestamp
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                        case file
                        case fileComment
                        case timestamp
                    }
                }
                /// - Remark: Generated from `#/paths/stars.remove/POST/requestBody/content/application\/json`.
                case json(Operations.StarsRemove.Input.Body.JsonPayload)
            }
            public var body: Operations.StarsRemove.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.StarsRemove.Input.Headers = .init(),
                body: Operations.StarsRemove.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stars.remove/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stars.remove/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.StarsRemoveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.StarsRemoveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.StarsRemove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.StarsRemove.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//stars.remove/post(starsRemove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.StarsRemove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.StarsRemove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the access logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.accessLogs`.
    /// - Remark: Generated from `#/paths//team.accessLogs/post(teamAccessLogs)`.
    public enum TeamAccessLogs {
        public static let id: Swift.String = "teamAccessLogs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.accessLogs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamAccessLogs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamAccessLogs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.TeamAccessLogs.Input.Headers
            /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// End of time range of logs to include in results (inclusive).
                    ///
                    /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/json/before`.
                    public var before: Swift.String?
                    /// Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See pagination for more details.
                    ///
                    /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. If specified, result is returned using a cursor-based approach instead of a classic one.
                    ///
                    /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// encoded team id to get logs from, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - before: End of time range of logs to include in results (inclusive).
                    ///   - cursor: Parameter for pagination. Set cursor equal to the next_cursor attribute returned by the previous request's response_metadata. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See pagination for more details.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. If specified, result is returned using a cursor-based approach instead of a classic one.
                    ///   - teamId: encoded team id to get logs from, required if org token is used.
                    public init(
                        before: Swift.String? = nil,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.before = before
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case before
                        case cursor
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/team.accessLogs/POST/requestBody/content/application\/json`.
                case json(Operations.TeamAccessLogs.Input.Body.JsonPayload)
            }
            public var body: Operations.TeamAccessLogs.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamAccessLogs.Input.Headers = .init(),
                body: Operations.TeamAccessLogs.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.accessLogs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.accessLogs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamAccessLogsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamAccessLogsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.TeamAccessLogs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamAccessLogs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.accessLogs/post(teamAccessLogs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamAccessLogs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamAccessLogs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets billable users information for the current team.
    ///
    /// - Remark: HTTP `POST /team.billableInfo`.
    /// - Remark: Generated from `#/paths//team.billableInfo/post(teamBillableInfo)`.
    public enum TeamBillableInfo {
        public static let id: Swift.String = "teamBillableInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.billableInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamBillableInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamBillableInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.TeamBillableInfo.Input.Headers
            /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Set cursor to next_cursor returned by previous call, to indicate from where you want to list next page of users list. Default value fetches the first page.
                    ///
                    /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return.
                    ///
                    /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// encoded team id to get the billable information from, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// A user to retrieve the billable information for. Defaults to all users.
                    ///
                    /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Set cursor to next_cursor returned by previous call, to indicate from where you want to list next page of users list. Default value fetches the first page.
                    ///   - limit: The maximum number of items to return.
                    ///   - teamId: encoded team id to get the billable information from, required if org token is used.
                    ///   - user: A user to retrieve the billable information for. Defaults to all users.
                    public init(
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        teamId: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.limit = limit
                        self.teamId = teamId
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case limit
                        case teamId
                        case user
                    }
                }
                /// - Remark: Generated from `#/paths/team.billableInfo/POST/requestBody/content/application\/json`.
                case json(Operations.TeamBillableInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.TeamBillableInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamBillableInfo.Input.Headers = .init(),
                body: Operations.TeamBillableInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.billableInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.billableInfo/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamBillableInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamBillableInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.TeamBillableInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamBillableInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.billableInfo/post(teamBillableInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamBillableInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamBillableInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Reads a workspace's billing plan information.
    ///
    /// - Remark: HTTP `POST /team.billing.info`.
    /// - Remark: Generated from `#/paths//team.billing.info/post(teamBillingInfo)`.
    public enum TeamBillingInfo {
        public static let id: Swift.String = "teamBillingInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.billing.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamBillingInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamBillingInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.TeamBillingInfo.Input.Headers
            /// - Remark: Generated from `#/paths/team.billing.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.billing.info/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.TeamBillingInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamBillingInfo.Input.Headers = .init(),
                body: Operations.TeamBillingInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.billing.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.billing.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamBillingInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamBillingInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.TeamBillingInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamBillingInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.billing.info/post(teamBillingInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamBillingInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamBillingInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Disconnect an external organization.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.disconnect`.
    /// - Remark: Generated from `#/paths//team.externalTeams.disconnect/post(teamExternalTeamsDisconnect)`.
    public enum TeamExternalTeamsDisconnect {
        public static let id: Swift.String = "teamExternalTeamsDisconnect"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamExternalTeamsDisconnect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamExternalTeamsDisconnect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.TeamExternalTeamsDisconnect.Input.Headers
            /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The team ID of the target team.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/requestBody/json/targetTeam`.
                    public var targetTeam: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - targetTeam: The team ID of the target team.
                    public init(targetTeam: Swift.String) {
                        self.targetTeam = targetTeam
                    }
                    public enum CodingKeys: String, CodingKey {
                        case targetTeam
                    }
                }
                /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/requestBody/content/application\/json`.
                case json(Operations.TeamExternalTeamsDisconnect.Input.Body.JsonPayload)
            }
            public var body: Operations.TeamExternalTeamsDisconnect.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamExternalTeamsDisconnect.Input.Headers = .init(),
                body: Operations.TeamExternalTeamsDisconnect.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.externalTeams.disconnect/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamExternalTeamsDisconnectResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamExternalTeamsDisconnectResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.TeamExternalTeamsDisconnect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamExternalTeamsDisconnect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.externalTeams.disconnect/post(teamExternalTeamsDisconnect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamExternalTeamsDisconnect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamExternalTeamsDisconnect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of all the external teams connected and details about the connection.
    ///
    /// - Remark: HTTP `POST /team.externalTeams.list`.
    /// - Remark: Generated from `#/paths//team.externalTeams.list/post(teamExternalTeamsList)`.
    public enum TeamExternalTeamsList {
        public static let id: Swift.String = "teamExternalTeamsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamExternalTeamsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamExternalTeamsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.TeamExternalTeamsList.Input.Headers
            /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Status of the connected team.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/connectionStatusFilter`.
                    public var connectionStatusFilter: Swift.String?
                    /// Paginate through collections of data by setting parameter to the team_id attribute returned by a previous request's response_metadata. If not provided, the first page of the collection is returned. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// The maximum number of items to return per page.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Filters connected orgs by Slack Connect pref override(s). Value can be: approved_orgs_only allow_sc_file_uploads profile_visibility away_team_sc_invite_permissions accept_sc_invites sc_mpdm_to_private require_sc_channel_for_sc_dm external_awareness_context_bar.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/slackConnectPrefFilter`.
                    public var slackConnectPrefFilter: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Direction to sort in asc or desc.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/sortDirection`.
                    public var sortDirection: Swift.String?
                    /// Name of the parameter that we are sorting by.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/sortField`.
                    public var sortField: Swift.String?
                    /// Shows connected orgs which are connected on a specified encoded workspace ID.
                    ///
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/json/workspaceFilter`.
                    public var workspaceFilter: OpenAPIRuntime.OpenAPIArrayContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - connectionStatusFilter: Status of the connected team.
                    ///   - cursor: Paginate through collections of data by setting parameter to the team_id attribute returned by a previous request's response_metadata. If not provided, the first page of the collection is returned. See pagination for more detail.
                    ///   - limit: The maximum number of items to return per page.
                    ///   - slackConnectPrefFilter: Filters connected orgs by Slack Connect pref override(s). Value can be: approved_orgs_only allow_sc_file_uploads profile_visibility away_team_sc_invite_permissions accept_sc_invites sc_mpdm_to_private require_sc_channel_for_sc_dm external_awareness_context_bar.
                    ///   - sortDirection: Direction to sort in asc or desc.
                    ///   - sortField: Name of the parameter that we are sorting by.
                    ///   - workspaceFilter: Shows connected orgs which are connected on a specified encoded workspace ID.
                    public init(
                        connectionStatusFilter: Swift.String? = nil,
                        cursor: Swift.String? = nil,
                        limit: Swift.Int? = nil,
                        slackConnectPrefFilter: OpenAPIRuntime.OpenAPIArrayContainer? = nil,
                        sortDirection: Swift.String? = nil,
                        sortField: Swift.String? = nil,
                        workspaceFilter: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                    ) {
                        self.connectionStatusFilter = connectionStatusFilter
                        self.cursor = cursor
                        self.limit = limit
                        self.slackConnectPrefFilter = slackConnectPrefFilter
                        self.sortDirection = sortDirection
                        self.sortField = sortField
                        self.workspaceFilter = workspaceFilter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case connectionStatusFilter
                        case cursor
                        case limit
                        case slackConnectPrefFilter
                        case sortDirection
                        case sortField
                        case workspaceFilter
                    }
                }
                /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/requestBody/content/application\/json`.
                case json(Operations.TeamExternalTeamsList.Input.Body.JsonPayload)
            }
            public var body: Operations.TeamExternalTeamsList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamExternalTeamsList.Input.Headers = .init(),
                body: Operations.TeamExternalTeamsList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.externalTeams.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamExternalTeamsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamExternalTeamsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.TeamExternalTeamsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamExternalTeamsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.externalTeams.list/post(teamExternalTeamsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamExternalTeamsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamExternalTeamsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets information about the current team.
    ///
    /// - Remark: HTTP `POST /team.info`.
    /// - Remark: Generated from `#/paths//team.info/post(teamInfo)`.
    public enum TeamInfo {
        public static let id: Swift.String = "teamInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.TeamInfo.Input.Headers
            /// - Remark: Generated from `#/paths/team.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Query by domain instead of team (only when team is null). This only works for domains in the same enterprise as the querying team token. This also expects the domain to belong to a team and not the enterprise itself. This is the value set up for the 'Joining This Workspace' workspace setting. If it contains more than one domain, the field will contain multiple comma-separated domain values. If no domain is set, the field is empty.
                    ///
                    /// - Remark: Generated from `#/paths/team.info/POST/requestBody/json/domain`.
                    public var domain: Swift.String?
                    /// Team to get info about; if omitted, will return information about the current team.
                    ///
                    /// - Remark: Generated from `#/paths/team.info/POST/requestBody/json/team`.
                    public var team: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - domain: Query by domain instead of team (only when team is null). This only works for domains in the same enterprise as the querying team token. This also expects the domain to belong to a team and not the enterprise itself. This is the value set up for the 'Joining This Workspace' workspace setting. If it contains more than one domain, the field will contain multiple comma-separated domain values. If no domain is set, the field is empty.
                    ///   - team: Team to get info about; if omitted, will return information about the current team.
                    public init(
                        domain: Swift.String? = nil,
                        team: Swift.String? = nil
                    ) {
                        self.domain = domain
                        self.team = team
                    }
                    public enum CodingKeys: String, CodingKey {
                        case domain
                        case team
                    }
                }
                /// - Remark: Generated from `#/paths/team.info/POST/requestBody/content/application\/json`.
                case json(Operations.TeamInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.TeamInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamInfo.Input.Headers = .init(),
                body: Operations.TeamInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.TeamInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.info/post(teamInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the integration logs for the current team.
    ///
    /// - Remark: HTTP `POST /team.integrationLogs`.
    /// - Remark: Generated from `#/paths//team.integrationLogs/post(teamIntegrationLogs)`.
    public enum TeamIntegrationLogs {
        public static let id: Swift.String = "teamIntegrationLogs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.integrationLogs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamIntegrationLogs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamIntegrationLogs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.TeamIntegrationLogs.Input.Headers
            /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Filter logs to this Slack app. Defaults to all logs.
                    ///
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json/appId`.
                    public var appId: Swift.String?
                    /// Filter logs with this change type. Possible values are added, removed, enabled, disabled, and updated. Defaults to all logs.
                    ///
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json/changeType`.
                    public var changeType: Swift.String?
                    /// Filter logs to this service. Defaults to all logs.
                    ///
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json/serviceId`.
                    public var serviceId: Swift.String?
                    /// encoded team id to get logs from, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Filter logs generated by this user's actions. Defaults to all logs.
                    ///
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - appId: Filter logs to this Slack app. Defaults to all logs.
                    ///   - changeType: Filter logs with this change type. Possible values are added, removed, enabled, disabled, and updated. Defaults to all logs.
                    ///   - serviceId: Filter logs to this service. Defaults to all logs.
                    ///   - teamId: encoded team id to get logs from, required if org token is used.
                    ///   - user: Filter logs generated by this user's actions. Defaults to all logs.
                    public init(
                        appId: Swift.String? = nil,
                        changeType: Swift.String? = nil,
                        serviceId: Swift.String? = nil,
                        teamId: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.appId = appId
                        self.changeType = changeType
                        self.serviceId = serviceId
                        self.teamId = teamId
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case appId
                        case changeType
                        case serviceId
                        case teamId
                        case user
                    }
                }
                /// - Remark: Generated from `#/paths/team.integrationLogs/POST/requestBody/content/application\/json`.
                case json(Operations.TeamIntegrationLogs.Input.Body.JsonPayload)
            }
            public var body: Operations.TeamIntegrationLogs.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamIntegrationLogs.Input.Headers = .init(),
                body: Operations.TeamIntegrationLogs.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.integrationLogs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.integrationLogs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamIntegrationLogsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamIntegrationLogsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.TeamIntegrationLogs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamIntegrationLogs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.integrationLogs/post(teamIntegrationLogs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamIntegrationLogs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamIntegrationLogs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve a list of a workspace's team preferences.
    ///
    /// - Remark: HTTP `POST /team.preferences.list`.
    /// - Remark: Generated from `#/paths//team.preferences.list/post(teamPreferencesList)`.
    public enum TeamPreferencesList {
        public static let id: Swift.String = "teamPreferencesList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.preferences.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamPreferencesList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamPreferencesList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.TeamPreferencesList.Input.Headers
            /// - Remark: Generated from `#/paths/team.preferences.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.preferences.list/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.TeamPreferencesList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamPreferencesList.Input.Headers = .init(),
                body: Operations.TeamPreferencesList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.preferences.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.preferences.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamPreferencesListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamPreferencesListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.TeamPreferencesList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamPreferencesList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.preferences.list/post(teamPreferencesList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamPreferencesList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamPreferencesList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve a team's profile.
    ///
    /// - Remark: HTTP `POST /team.profile.get`.
    /// - Remark: Generated from `#/paths//team.profile.get/post(teamProfileGet)`.
    public enum TeamProfileGet {
        public static let id: Swift.String = "teamProfileGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team.profile.get/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamProfileGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TeamProfileGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.TeamProfileGet.Input.Headers
            /// - Remark: Generated from `#/paths/team.profile.get/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.profile.get/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Filter by visibility.
                    ///
                    /// - Remark: Generated from `#/paths/team.profile.get/POST/requestBody/json/visibility`.
                    public var visibility: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - visibility: Filter by visibility.
                    public init(visibility: Swift.String? = nil) {
                        self.visibility = visibility
                    }
                    public enum CodingKeys: String, CodingKey {
                        case visibility
                    }
                }
                /// - Remark: Generated from `#/paths/team.profile.get/POST/requestBody/content/application\/json`.
                case json(Operations.TeamProfileGet.Input.Body.JsonPayload)
            }
            public var body: Operations.TeamProfileGet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamProfileGet.Input.Headers = .init(),
                body: Operations.TeamProfileGet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team.profile.get/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team.profile.get/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamProfileGetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TeamProfileGetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.TeamProfileGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.TeamProfileGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//team.profile.get/post(teamProfileGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamProfileGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamProfileGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Exchanges a refresh token for a new app configuration token.
    ///
    /// - Remark: HTTP `POST /tooling.tokens.rotate`.
    /// - Remark: Generated from `#/paths//tooling.tokens.rotate/post(toolingTokensRotate)`.
    public enum ToolingTokensRotate {
        public static let id: Swift.String = "toolingTokensRotate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tooling.tokens.rotate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ToolingTokensRotate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ToolingTokensRotate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ToolingTokensRotate.Input.Headers
            /// - Remark: Generated from `#/paths/tooling.tokens.rotate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tooling.tokens.rotate/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The xoxe refresh token that was issued along with the old app configuration token.
                    ///
                    /// - Remark: Generated from `#/paths/tooling.tokens.rotate/POST/requestBody/json/refreshToken`.
                    public var refreshToken: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - refreshToken: The xoxe refresh token that was issued along with the old app configuration token.
                    public init(refreshToken: Swift.String) {
                        self.refreshToken = refreshToken
                    }
                    public enum CodingKeys: String, CodingKey {
                        case refreshToken
                    }
                }
                /// - Remark: Generated from `#/paths/tooling.tokens.rotate/POST/requestBody/content/application\/json`.
                case json(Operations.ToolingTokensRotate.Input.Body.JsonPayload)
            }
            public var body: Operations.ToolingTokensRotate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ToolingTokensRotate.Input.Headers = .init(),
                body: Operations.ToolingTokensRotate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tooling.tokens.rotate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tooling.tokens.rotate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ToolingTokensRotateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ToolingTokensRotateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ToolingTokensRotate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ToolingTokensRotate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//tooling.tokens.rotate/post(toolingTokensRotate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ToolingTokensRotate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ToolingTokensRotate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List conversations the calling user may access.
    ///
    /// - Remark: HTTP `POST /users.conversations`.
    /// - Remark: Generated from `#/paths//users.conversations/post(usersConversations)`.
    public enum UsersConversations {
        public static let id: Swift.String = "usersConversations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.conversations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersConversations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersConversations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersConversations.Input.Headers
            /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Set to true to exclude archived channels from the list.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/excludeArchived`.
                    public var excludeArchived: Swift.Bool?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer with a max value of 999.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// encoded team id to list conversations in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Mix and match channel types by providing a comma-separated list of any combination of public_channel, private_channel, mpim, im.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/types`.
                    public var types: Swift.String?
                    /// Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership.
                    ///
                    /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///   - excludeArchived: Set to true to exclude archived channels from the list.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer with a max value of 999.
                    ///   - teamId: encoded team id to list conversations in, required if org token is used.
                    ///   - types: Mix and match channel types by providing a comma-separated list of any combination of public_channel, private_channel, mpim, im.
                    ///   - user: Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership.
                    public init(
                        cursor: Swift.String? = nil,
                        excludeArchived: Swift.Bool? = nil,
                        limit: Swift.Double? = nil,
                        teamId: Swift.String? = nil,
                        types: Swift.String? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.excludeArchived = excludeArchived
                        self.limit = limit
                        self.teamId = teamId
                        self.types = types
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case excludeArchived
                        case limit
                        case teamId
                        case types
                        case user
                    }
                }
                /// - Remark: Generated from `#/paths/users.conversations/POST/requestBody/content/application\/json`.
                case json(Operations.UsersConversations.Input.Body.JsonPayload)
            }
            public var body: Operations.UsersConversations.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersConversations.Input.Headers = .init(),
                body: Operations.UsersConversations.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.conversations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.conversations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersConversationsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersConversationsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersConversations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersConversations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.conversations/post(usersConversations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersConversations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersConversations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete the user profile photo
    ///
    /// - Remark: HTTP `POST /users.deletePhoto`.
    /// - Remark: Generated from `#/paths//users.deletePhoto/post(usersDeletePhoto)`.
    public enum UsersDeletePhoto {
        public static let id: Swift.String = "usersDeletePhoto"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.deletePhoto/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersDeletePhoto.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersDeletePhoto.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersDeletePhoto.Input.Headers
            /// - Remark: Generated from `#/paths/users.deletePhoto/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.deletePhoto/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.UsersDeletePhoto.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersDeletePhoto.Input.Headers = .init(),
                body: Operations.UsersDeletePhoto.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.deletePhoto/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.deletePhoto/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersDeletePhotoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersDeletePhotoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersDeletePhoto.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersDeletePhoto.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.deletePhoto/post(usersDeletePhoto)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersDeletePhoto.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersDeletePhoto.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Look up an email address to see if someone is discoverable on Slack
    ///
    /// - Remark: HTTP `POST /users.discoverableContacts.lookup`.
    /// - Remark: Generated from `#/paths//users.discoverableContacts.lookup/post(usersDiscoverableContactsLookup)`.
    public enum UsersDiscoverableContactsLookup {
        public static let id: Swift.String = "usersDiscoverableContactsLookup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersDiscoverableContactsLookup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersDiscoverableContactsLookup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersDiscoverableContactsLookup.Input.Headers
            /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// .
                    ///
                    /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/requestBody/json/email`.
                    public var email: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email: .
                    public init(email: Swift.String) {
                        self.email = email
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                    }
                }
                /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/requestBody/content/application\/json`.
                case json(Operations.UsersDiscoverableContactsLookup.Input.Body.JsonPayload)
            }
            public var body: Operations.UsersDiscoverableContactsLookup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersDiscoverableContactsLookup.Input.Headers = .init(),
                body: Operations.UsersDiscoverableContactsLookup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.discoverableContacts.lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersDiscoverableContactsLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersDiscoverableContactsLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersDiscoverableContactsLookup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersDiscoverableContactsLookup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.discoverableContacts.lookup/post(usersDiscoverableContactsLookup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersDiscoverableContactsLookup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersDiscoverableContactsLookup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets user presence information.
    ///
    /// - Remark: HTTP `POST /users.getPresence`.
    /// - Remark: Generated from `#/paths//users.getPresence/post(usersGetPresence)`.
    public enum UsersGetPresence {
        public static let id: Swift.String = "usersGetPresence"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.getPresence/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersGetPresence.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersGetPresence.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersGetPresence.Input.Headers
            /// - Remark: Generated from `#/paths/users.getPresence/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.getPresence/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// User to get presence info on. Defaults to the authed user.
                    ///
                    /// - Remark: Generated from `#/paths/users.getPresence/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - user: User to get presence info on. Defaults to the authed user.
                    public init(user: Swift.String? = nil) {
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user
                    }
                }
                /// - Remark: Generated from `#/paths/users.getPresence/POST/requestBody/content/application\/json`.
                case json(Operations.UsersGetPresence.Input.Body.JsonPayload)
            }
            public var body: Operations.UsersGetPresence.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersGetPresence.Input.Headers = .init(),
                body: Operations.UsersGetPresence.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.getPresence/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.getPresence/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersGetPresenceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersGetPresenceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersGetPresence.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersGetPresence.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.getPresence/post(usersGetPresence)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersGetPresence.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersGetPresence.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a user's identity.
    ///
    /// - Remark: HTTP `POST /users.identity`.
    /// - Remark: Generated from `#/paths//users.identity/post(usersIdentity)`.
    public enum UsersIdentity {
        public static let id: Swift.String = "usersIdentity"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.identity/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersIdentity.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersIdentity.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersIdentity.Input.Headers
            /// - Remark: Generated from `#/paths/users.identity/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.identity/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.UsersIdentity.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersIdentity.Input.Headers = .init(),
                body: Operations.UsersIdentity.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.identity/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.identity/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersIdentityResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersIdentityResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersIdentity.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersIdentity.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.identity/post(usersIdentity)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersIdentity.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersIdentity.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets information about a user.
    ///
    /// - Remark: HTTP `POST /users.info`.
    /// - Remark: Generated from `#/paths//users.info/post(usersInfo)`.
    public enum UsersInfo {
        public static let id: Swift.String = "usersInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersInfo.Input.Headers
            /// - Remark: Generated from `#/paths/users.info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.info/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// User to get info on.
                    ///
                    /// - Remark: Generated from `#/paths/users.info/POST/requestBody/json/user`.
                    public var user: Swift.String
                    /// Set this to true to receive the locale for this user. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/users.info/POST/requestBody/json/includeLocale`.
                    public var includeLocale: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - user: User to get info on.
                    ///   - includeLocale: Set this to true to receive the locale for this user. Defaults to false.
                    public init(
                        user: Swift.String,
                        includeLocale: Swift.Bool? = nil
                    ) {
                        self.user = user
                        self.includeLocale = includeLocale
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user
                        case includeLocale
                    }
                }
                /// - Remark: Generated from `#/paths/users.info/POST/requestBody/content/application\/json`.
                case json(Operations.UsersInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.UsersInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersInfo.Input.Headers = .init(),
                body: Operations.UsersInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.info/post(usersInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists all users in a Slack team.
    ///
    /// - Remark: HTTP `POST /users.list`.
    /// - Remark: Generated from `#/paths//users.list/post(usersList)`.
    public enum UsersList {
        public static let id: Swift.String = "usersList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.list/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersList.Input.Headers
            /// - Remark: Generated from `#/paths/users.list/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.list/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///
                    /// - Remark: Generated from `#/paths/users.list/POST/requestBody/json/cursor`.
                    public var cursor: Swift.String?
                    /// Set this to true to receive the locale for users. Defaults to false.
                    ///
                    /// - Remark: Generated from `#/paths/users.list/POST/requestBody/json/includeLocale`.
                    public var includeLocale: Swift.Bool?
                    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no limit value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience limit_required or HTTP 500 errors.
                    ///
                    /// - Remark: Generated from `#/paths/users.list/POST/requestBody/json/limit`.
                    public var limit: Swift.Double?
                    /// encoded team id to list users in, required if org token is used.
                    ///
                    /// - Remark: Generated from `#/paths/users.list/POST/requestBody/json/teamId`.
                    public var teamId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cursor: Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
                    ///   - includeLocale: Set this to true to receive the locale for users. Defaults to false.
                    ///   - limit: The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no limit value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience limit_required or HTTP 500 errors.
                    ///   - teamId: encoded team id to list users in, required if org token is used.
                    public init(
                        cursor: Swift.String? = nil,
                        includeLocale: Swift.Bool? = nil,
                        limit: Swift.Double? = nil,
                        teamId: Swift.String? = nil
                    ) {
                        self.cursor = cursor
                        self.includeLocale = includeLocale
                        self.limit = limit
                        self.teamId = teamId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cursor
                        case includeLocale
                        case limit
                        case teamId
                    }
                }
                /// - Remark: Generated from `#/paths/users.list/POST/requestBody/content/application\/json`.
                case json(Operations.UsersList.Input.Body.JsonPayload)
            }
            public var body: Operations.UsersList.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersList.Input.Headers = .init(),
                body: Operations.UsersList.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.list/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.list/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.list/post(usersList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Find a user with an email address.
    ///
    /// - Remark: HTTP `POST /users.lookupByEmail`.
    /// - Remark: Generated from `#/paths//users.lookupByEmail/post(usersLookupByEmail)`.
    public enum UsersLookupByEmail {
        public static let id: Swift.String = "usersLookupByEmail"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersLookupByEmail.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersLookupByEmail.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersLookupByEmail.Input.Headers
            /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// An email address belonging to a user in the workspace.
                    ///
                    /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/requestBody/json/email`.
                    public var email: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email: An email address belonging to a user in the workspace.
                    public init(email: Swift.String) {
                        self.email = email
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                    }
                }
                /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/requestBody/content/application\/json`.
                case json(Operations.UsersLookupByEmail.Input.Body.JsonPayload)
            }
            public var body: Operations.UsersLookupByEmail.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersLookupByEmail.Input.Headers = .init(),
                body: Operations.UsersLookupByEmail.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.lookupByEmail/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersLookupByEmailResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersLookupByEmailResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersLookupByEmail.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersLookupByEmail.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.lookupByEmail/post(usersLookupByEmail)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersLookupByEmail.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersLookupByEmail.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve a user's profile information, including their custom status.
    ///
    /// - Remark: HTTP `POST /users.profile.get`.
    /// - Remark: Generated from `#/paths//users.profile.get/post(usersProfileGet)`.
    public enum UsersProfileGet {
        public static let id: Swift.String = "usersProfileGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.profile.get/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersProfileGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersProfileGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersProfileGet.Input.Headers
            /// - Remark: Generated from `#/paths/users.profile.get/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.profile.get/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Include labels for each ID in custom profile fields. Using this parameter will heavily rate-limit your requests and is not recommended.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.get/POST/requestBody/json/includeLabels`.
                    public var includeLabels: Swift.Bool?
                    /// User to retrieve profile info for.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.get/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - includeLabels: Include labels for each ID in custom profile fields. Using this parameter will heavily rate-limit your requests and is not recommended.
                    ///   - user: User to retrieve profile info for.
                    public init(
                        includeLabels: Swift.Bool? = nil,
                        user: Swift.String? = nil
                    ) {
                        self.includeLabels = includeLabels
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case includeLabels
                        case user
                    }
                }
                /// - Remark: Generated from `#/paths/users.profile.get/POST/requestBody/content/application\/json`.
                case json(Operations.UsersProfileGet.Input.Body.JsonPayload)
            }
            public var body: Operations.UsersProfileGet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersProfileGet.Input.Headers = .init(),
                body: Operations.UsersProfileGet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.profile.get/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.profile.get/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersProfileGetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersProfileGetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersProfileGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersProfileGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.profile.get/post(usersProfileGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersProfileGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersProfileGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set a user's profile information, including custom status.
    ///
    /// - Remark: HTTP `POST /users.profile.set`.
    /// - Remark: Generated from `#/paths//users.profile.set/post(usersProfileSet)`.
    public enum UsersProfileSet {
        public static let id: Swift.String = "usersProfileSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.profile.set/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersProfileSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersProfileSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersProfileSet.Input.Headers
            /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of a single key to set. Usable only if profile is not passed.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/json/name`.
                    public var name: Swift.String?
                    /// Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/json/profile`.
                    public var profile: Swift.String?
                    /// ID of user to change. This argument may only be specified by admins on paid teams.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/json/user`.
                    public var user: Swift.String?
                    /// Value to set a single key to. Usable only if profile is not passed.
                    ///
                    /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/json/value`.
                    public var value: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of a single key to set. Usable only if profile is not passed.
                    ///   - profile: Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
                    ///   - user: ID of user to change. This argument may only be specified by admins on paid teams.
                    ///   - value: Value to set a single key to. Usable only if profile is not passed.
                    public init(
                        name: Swift.String? = nil,
                        profile: Swift.String? = nil,
                        user: Swift.String? = nil,
                        value: Swift.String? = nil
                    ) {
                        self.name = name
                        self.profile = profile
                        self.user = user
                        self.value = value
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case profile
                        case user
                        case value
                    }
                }
                /// - Remark: Generated from `#/paths/users.profile.set/POST/requestBody/content/application\/json`.
                case json(Operations.UsersProfileSet.Input.Body.JsonPayload)
            }
            public var body: Operations.UsersProfileSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersProfileSet.Input.Headers = .init(),
                body: Operations.UsersProfileSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.profile.set/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.profile.set/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersProfileSetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersProfileSetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersProfileSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersProfileSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.profile.set/post(usersProfileSet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersProfileSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersProfileSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Marked a user as active. Deprecated and non-functional.
    ///
    /// - Remark: HTTP `POST /users.setActive`.
    /// - Remark: Generated from `#/paths//users.setActive/post(usersSetActive)`.
    public enum UsersSetActive {
        public static let id: Swift.String = "usersSetActive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.setActive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetActive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetActive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersSetActive.Input.Headers
            /// - Remark: Generated from `#/paths/users.setActive/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setActive/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.UsersSetActive.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersSetActive.Input.Headers = .init(),
                body: Operations.UsersSetActive.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setActive/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.setActive/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersSetActiveResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersSetActiveResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersSetActive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersSetActive.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.setActive/post(usersSetActive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersSetActive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersSetActive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the user profile photo
    ///
    /// - Remark: HTTP `POST /users.setPhoto`.
    /// - Remark: Generated from `#/paths//users.setPhoto/post(usersSetPhoto)`.
    public enum UsersSetPhoto {
        public static let id: Swift.String = "usersSetPhoto"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.setPhoto/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetPhoto.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetPhoto.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersSetPhoto.Input.Headers
            /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Width/height of crop box (always square).
                    ///
                    /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/json/cropW`.
                    public var cropW: Swift.String?
                    /// X coordinate of top-left corner of crop box.
                    ///
                    /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/json/cropX`.
                    public var cropX: Swift.String?
                    /// Y coordinate of top-left corner of crop box.
                    ///
                    /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/json/cropY`.
                    public var cropY: Swift.String?
                    /// File contents via multipart/form-data.
                    ///
                    /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/json/image`.
                    public var image: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cropW: Width/height of crop box (always square).
                    ///   - cropX: X coordinate of top-left corner of crop box.
                    ///   - cropY: Y coordinate of top-left corner of crop box.
                    ///   - image: File contents via multipart/form-data.
                    public init(
                        cropW: Swift.String? = nil,
                        cropX: Swift.String? = nil,
                        cropY: Swift.String? = nil,
                        image: Swift.String? = nil
                    ) {
                        self.cropW = cropW
                        self.cropX = cropX
                        self.cropY = cropY
                        self.image = image
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cropW
                        case cropX
                        case cropY
                        case image
                    }
                }
                /// - Remark: Generated from `#/paths/users.setPhoto/POST/requestBody/content/application\/json`.
                case json(Operations.UsersSetPhoto.Input.Body.JsonPayload)
            }
            public var body: Operations.UsersSetPhoto.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersSetPhoto.Input.Headers = .init(),
                body: Operations.UsersSetPhoto.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setPhoto/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.setPhoto/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersSetPhotoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersSetPhotoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersSetPhoto.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersSetPhoto.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.setPhoto/post(usersSetPhoto)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersSetPhoto.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersSetPhoto.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Manually sets user presence.
    ///
    /// - Remark: HTTP `POST /users.setPresence`.
    /// - Remark: Generated from `#/paths//users.setPresence/post(usersSetPresence)`.
    public enum UsersSetPresence {
        public static let id: Swift.String = "usersSetPresence"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users.setPresence/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetPresence.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersSetPresence.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsersSetPresence.Input.Headers
            /// - Remark: Generated from `#/paths/users.setPresence/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setPresence/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Either auto or away.
                    ///
                    /// - Remark: Generated from `#/paths/users.setPresence/POST/requestBody/json/presence`.
                    public var presence: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - presence: Either auto or away.
                    public init(presence: Swift.String) {
                        self.presence = presence
                    }
                    public enum CodingKeys: String, CodingKey {
                        case presence
                    }
                }
                /// - Remark: Generated from `#/paths/users.setPresence/POST/requestBody/content/application\/json`.
                case json(Operations.UsersSetPresence.Input.Body.JsonPayload)
            }
            public var body: Operations.UsersSetPresence.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.UsersSetPresence.Input.Headers = .init(),
                body: Operations.UsersSetPresence.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users.setPresence/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users.setPresence/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsersSetPresenceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsersSetPresenceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsersSetPresence.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsersSetPresence.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//users.setPresence/post(usersSetPresence)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersSetPresence.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsersSetPresence.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Open a view for a user.
    ///
    /// - Remark: HTTP `POST /views.open`.
    /// - Remark: Generated from `#/paths//views.open/post(viewsOpen)`.
    public enum ViewsOpen {
        public static let id: Swift.String = "viewsOpen"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/views.open/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ViewsOpen.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ViewsOpen.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ViewsOpen.Input.Headers
            /// - Remark: Generated from `#/paths/views.open/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/views.open/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// A view payload. This must be a JSON-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/views.open/POST/requestBody/json/view`.
                    public var view: Swift.String
                    /// Exchange a trigger to post to the user.
                    ///
                    /// - Remark: Generated from `#/paths/views.open/POST/requestBody/json/triggerId`.
                    public var triggerId: Swift.String?
                    /// Exchange an interactivity pointer to post to the user.
                    ///
                    /// - Remark: Generated from `#/paths/views.open/POST/requestBody/json/interactivityPointer`.
                    public var interactivityPointer: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - view: A view payload. This must be a JSON-encoded string.
                    ///   - triggerId: Exchange a trigger to post to the user.
                    ///   - interactivityPointer: Exchange an interactivity pointer to post to the user.
                    public init(
                        view: Swift.String,
                        triggerId: Swift.String? = nil,
                        interactivityPointer: Swift.String? = nil
                    ) {
                        self.view = view
                        self.triggerId = triggerId
                        self.interactivityPointer = interactivityPointer
                    }
                    public enum CodingKeys: String, CodingKey {
                        case view
                        case triggerId
                        case interactivityPointer
                    }
                }
                /// - Remark: Generated from `#/paths/views.open/POST/requestBody/content/application\/json`.
                case json(Operations.ViewsOpen.Input.Body.JsonPayload)
            }
            public var body: Operations.ViewsOpen.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ViewsOpen.Input.Headers = .init(),
                body: Operations.ViewsOpen.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/views.open/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/views.open/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ViewsOpenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ViewsOpenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ViewsOpen.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ViewsOpen.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//views.open/post(viewsOpen)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ViewsOpen.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ViewsOpen.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Publish a static view for a User.
    ///
    /// - Remark: HTTP `POST /views.publish`.
    /// - Remark: Generated from `#/paths//views.publish/post(viewsPublish)`.
    public enum ViewsPublish {
        public static let id: Swift.String = "viewsPublish"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/views.publish/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ViewsPublish.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ViewsPublish.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ViewsPublish.Input.Headers
            /// - Remark: Generated from `#/paths/views.publish/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/views.publish/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// id of the user you want publish a view to.
                    ///
                    /// - Remark: Generated from `#/paths/views.publish/POST/requestBody/json/userId`.
                    public var userId: Swift.String
                    /// A view payload. This must be a JSON-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/views.publish/POST/requestBody/json/view`.
                    public var view: Swift.String
                    /// A string that represents view state to protect against possible race conditions.
                    ///
                    /// - Remark: Generated from `#/paths/views.publish/POST/requestBody/json/hash`.
                    public var hash: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: id of the user you want publish a view to.
                    ///   - view: A view payload. This must be a JSON-encoded string.
                    ///   - hash: A string that represents view state to protect against possible race conditions.
                    public init(
                        userId: Swift.String,
                        view: Swift.String,
                        hash: Swift.String? = nil
                    ) {
                        self.userId = userId
                        self.view = view
                        self.hash = hash
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId
                        case view
                        case hash
                    }
                }
                /// - Remark: Generated from `#/paths/views.publish/POST/requestBody/content/application\/json`.
                case json(Operations.ViewsPublish.Input.Body.JsonPayload)
            }
            public var body: Operations.ViewsPublish.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ViewsPublish.Input.Headers = .init(),
                body: Operations.ViewsPublish.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/views.publish/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/views.publish/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ViewsPublishResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ViewsPublishResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ViewsPublish.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ViewsPublish.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//views.publish/post(viewsPublish)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ViewsPublish.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ViewsPublish.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Push a view onto the stack of a root view.
    ///
    /// - Remark: HTTP `POST /views.push`.
    /// - Remark: Generated from `#/paths//views.push/post(viewsPush)`.
    public enum ViewsPush {
        public static let id: Swift.String = "viewsPush"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/views.push/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ViewsPush.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ViewsPush.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ViewsPush.Input.Headers
            /// - Remark: Generated from `#/paths/views.push/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/views.push/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// A view payload. This must be a JSON-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/views.push/POST/requestBody/json/view`.
                    public var view: Swift.String
                    /// Exchange a trigger to post to the user.
                    ///
                    /// - Remark: Generated from `#/paths/views.push/POST/requestBody/json/triggerId`.
                    public var triggerId: Swift.String?
                    /// Exchange an interactivity pointer to post to the user.
                    ///
                    /// - Remark: Generated from `#/paths/views.push/POST/requestBody/json/interactivityPointer`.
                    public var interactivityPointer: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - view: A view payload. This must be a JSON-encoded string.
                    ///   - triggerId: Exchange a trigger to post to the user.
                    ///   - interactivityPointer: Exchange an interactivity pointer to post to the user.
                    public init(
                        view: Swift.String,
                        triggerId: Swift.String? = nil,
                        interactivityPointer: Swift.String? = nil
                    ) {
                        self.view = view
                        self.triggerId = triggerId
                        self.interactivityPointer = interactivityPointer
                    }
                    public enum CodingKeys: String, CodingKey {
                        case view
                        case triggerId
                        case interactivityPointer
                    }
                }
                /// - Remark: Generated from `#/paths/views.push/POST/requestBody/content/application\/json`.
                case json(Operations.ViewsPush.Input.Body.JsonPayload)
            }
            public var body: Operations.ViewsPush.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ViewsPush.Input.Headers = .init(),
                body: Operations.ViewsPush.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/views.push/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/views.push/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ViewsPushResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ViewsPushResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ViewsPush.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ViewsPush.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//views.push/post(viewsPush)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ViewsPush.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ViewsPush.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an existing view.
    ///
    /// - Remark: HTTP `POST /views.update`.
    /// - Remark: Generated from `#/paths//views.update/post(viewsUpdate)`.
    public enum ViewsUpdate {
        public static let id: Swift.String = "viewsUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/views.update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ViewsUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ViewsUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ViewsUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/views.update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/views.update/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// A view object. This must be a JSON-encoded string.
                    ///
                    /// - Remark: Generated from `#/paths/views.update/POST/requestBody/json/view`.
                    public var view: Swift.String
                    /// A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either view_id or external_id is required.
                    ///
                    /// - Remark: Generated from `#/paths/views.update/POST/requestBody/json/externalId`.
                    public var externalId: Swift.String?
                    /// A unique identifier of the view to be updated. Either view_id or external_id is required.
                    ///
                    /// - Remark: Generated from `#/paths/views.update/POST/requestBody/json/viewId`.
                    public var viewId: Swift.String?
                    /// A string that represents view state to protect against possible race conditions.
                    ///
                    /// - Remark: Generated from `#/paths/views.update/POST/requestBody/json/hash`.
                    public var hash: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - view: A view object. This must be a JSON-encoded string.
                    ///   - externalId: A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either view_id or external_id is required.
                    ///   - viewId: A unique identifier of the view to be updated. Either view_id or external_id is required.
                    ///   - hash: A string that represents view state to protect against possible race conditions.
                    public init(
                        view: Swift.String,
                        externalId: Swift.String? = nil,
                        viewId: Swift.String? = nil,
                        hash: Swift.String? = nil
                    ) {
                        self.view = view
                        self.externalId = externalId
                        self.viewId = viewId
                        self.hash = hash
                    }
                    public enum CodingKeys: String, CodingKey {
                        case view
                        case externalId
                        case viewId
                        case hash
                    }
                }
                /// - Remark: Generated from `#/paths/views.update/POST/requestBody/content/application\/json`.
                case json(Operations.ViewsUpdate.Input.Body.JsonPayload)
            }
            public var body: Operations.ViewsUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.ViewsUpdate.Input.Headers = .init(),
                body: Operations.ViewsUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/views.update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/views.update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ViewsUpdateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ViewsUpdateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ViewsUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ViewsUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//views.update/post(viewsUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ViewsUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ViewsUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
